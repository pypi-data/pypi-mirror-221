Metadata-Version: 2.1
Name: aigent
Version: 0.0.1
Summary: Create, run and manage your intelligent LLM agents on dataframes.
Home-page: https://docs.nnext.ai/
Keywords: nnext,agents,dataframes,engine,client
Author: NNext Team
Author-email: pypi@nnext.ai
Requires-Python: >=3.9,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: bcrypt (>=4.0.1,<5.0.0)
Requires-Dist: betterproto (==2.0.0b4)
Requires-Dist: black (>=23.3.0,<24.0.0)
Requires-Dist: bs4 (>=0.0.1,<0.0.2)
Requires-Dist: cohere (>=4.5.1,<5.0.0)
Requires-Dist: dask[complete] (>=2023.7.1,<2024.0.0)
Requires-Dist: fastapi[all] (>=0.95.1,<0.96.0)
Requires-Dist: flake8 (>=6.0.0,<7.0.0)
Requires-Dist: google-auth (>=2.21.0,<3.0.0)
Requires-Dist: google-cloud-firestore (>=2.11.1,<3.0.0)
Requires-Dist: grpcio (>=1.46.0,<2.0.0)
Requires-Dist: httpx[http2] (>=0.23.0,<0.24.0)
Requires-Dist: huggingface-hub (>=0.15.1,<0.16.0)
Requires-Dist: llama-index (>=0.6.38.post1,<0.7.0)
Requires-Dist: loguru (>=0.5.3,<0.6.0)
Requires-Dist: nest-asyncio (>=1.5.5,<2.0.0)
Requires-Dist: numpy (>=1.21,<2.0)
Requires-Dist: openai (>=0.27.6,<0.28.0)
Requires-Dist: pdfplumber (>=0.9.0,<0.10.0)
Requires-Dist: pinecone-client (>=2.2.1,<3.0.0)
Requires-Dist: playwright (>=1.36.0,<2.0.0)
Requires-Dist: prisma (>=0.8.2,<0.9.0)
Requires-Dist: psychicapi (>=0.8.0,<0.9.0)
Requires-Dist: psycopg (>=3.1.9,<4.0.0)
Requires-Dist: pyarrow (>=12.0.1,<13.0.0)
Requires-Dist: pydantic (>=1.8,<2.0)
Requires-Dist: pyjwt (>=2.7.0,<3.0.0)
Requires-Dist: pypdf (>=3.8.1,<4.0.0)
Requires-Dist: python-decouple (>=3.8,<4.0)
Requires-Dist: python-dotenv (>=1.0.0,<2.0.0)
Requires-Dist: python-slugify (>=8.0.1,<9.0.0)
Requires-Dist: redis (>=4.6.0,<5.0.0)
Requires-Dist: replicate (>=0.8.3,<0.9.0)
Requires-Dist: requests (==2.29.0)
Requires-Dist: ruff (>=0.0.265,<0.0.266)
Requires-Dist: sse-starlette (>=1.5.0,<2.0.0)
Requires-Dist: tabulate (>=0.9.0,<0.10.0)
Requires-Dist: tiktoken (>=0.4.0,<0.5.0)
Requires-Dist: tqdm (>=4.56.0,<5.0.0)
Requires-Dist: transformers (>=4.30.2,<5.0.0)
Requires-Dist: twine (>=4.0.2,<5.0.0)
Requires-Dist: typing-extensions (>=4.0.0,<5.0.0)
Requires-Dist: unstructured (>=0.6.4,<0.7.0)
Requires-Dist: uuid (>=1.30,<2.0)
Requires-Dist: uuid6 (>=2023.5.2,<2024.0.0)
Requires-Dist: uvicorn[standard] (>=0.22.0,<0.23.0)
Requires-Dist: wolframalpha (>=5.0.0,<6.0.0)
Requires-Dist: youtube-transcript-api (>=0.6.1,<0.7.0)
Project-URL: Repository, https://github.com/nnextai/nnext
Description-Content-Type: text/markdown

# <a href="https://nnext.ai/"><img src="https://d3g1vr8yw3euzd.cloudfront.net/nnext-ultra-wide-tingle.png" alt="NNext Python Client"></a>

## About

The NNext Python Client.

NNext is a

* ‚ö° blazingly fast
* üîç nearest-neighbors vector search engine

<a href="https://twitter.com/intent/follow?screen_name=nnextai"><img src="https://img.shields.io/badge/Follow-nnextai-blue.svg?style=flat&logo=twitter"></a>

[Installation](#installation) |  [Quick Start](#quick-start) | [Documentation](#documentation)

## Installation

To install the pynnext client, activate a virtual environment, and install via pip:

### Supported Python Versions

```shell
Python >= 3.7, < 3.11
```

#### Mac/Linux

```shell
pip install virtualenv
virtualenv <your-env>
source <your-env>/bin/activate
<your-env>/bin/pip install nnext
```

#### Windows

```shell
pip install virtualenv
virtualenv <your-env>
<your-env>\Scripts\activate
<your-env>\Scripts\pip.exe install nnext
```

## Quick Start

In order start interacting with NNext, you need to obtain a client
here [https://console.nnext.ai/](https://console.nnext.ai/).

Here's a quick example showcasing how you can create an index, insert vectors/documents and search among them via NNext.

Let's begin by installing the Connecting to NNext.

```sql
SELECT images.uid,
       images.name,
       images.vector < - > 'VECTOR(0.19, 0.81, 0.75, 0.11)'::vector AS dist
FROM nnext-public-data.images.laion
ORDER BY
    dist
    LIMIT 100
```

```python
import nnext

nnclient = nnext.NNextClient(api_key="NNEXT_API_KEY")

# Perform a query.
QUERY = """
        SELECT images.uid, images.name,
          images.vector <-> 'VECTOR(0.19, 0.81, 0.75, 0.11)'::vector AS dist
        FROM nnext-public-data.images.laion
        ORDER BY
            dist
        LIMIT 100;
    """
query_job = nnclient.query(QUERY)  # API request
rows = query_job.result()  # Waits for query to finish

for row in rows:
    print(row.name)
```

## Documentation

More documentation is available here here [https://nnext.ai/docs](https://nnext.ai/docs).:

<a href="https://nnext.ai/docs" target="_blank" rel="noopener noreferrer"><img src="https://d3g1vr8yw3euzd.cloudfront.net/3.png" height="100"></a>

