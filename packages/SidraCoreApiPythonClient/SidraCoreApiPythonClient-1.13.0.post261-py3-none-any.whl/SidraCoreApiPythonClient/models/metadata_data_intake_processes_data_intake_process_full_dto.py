# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataDataIntakeProcessesDataIntakeProcessFullDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'last_modification_date': 'datetime',
        'provider_title': 'str',
        'plugin_title': 'str',
        'plugin_version': 'str',
        'enabled': 'bool',
        'item_id': 'str',
        'name': 'str',
        'description': 'str',
        'id_provider': 'int',
        'id_plugin_version': 'str',
        'id_pipelines': 'list[int]',
        'last_execution_configuration': 'str'
    }

    attribute_map = {
        'id': 'id',
        'last_modification_date': 'lastModificationDate',
        'provider_title': 'providerTitle',
        'plugin_title': 'pluginTitle',
        'plugin_version': 'pluginVersion',
        'enabled': 'enabled',
        'item_id': 'itemId',
        'name': 'name',
        'description': 'description',
        'id_provider': 'idProvider',
        'id_plugin_version': 'idPluginVersion',
        'id_pipelines': 'idPipelines',
        'last_execution_configuration': 'lastExecutionConfiguration'
    }

    def __init__(self, id=None, last_modification_date=None, provider_title=None, plugin_title=None, plugin_version=None, enabled=None, item_id=None, name=None, description=None, id_provider=None, id_plugin_version=None, id_pipelines=None, last_execution_configuration=None):  # noqa: E501
        """MetadataDataIntakeProcessesDataIntakeProcessFullDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._last_modification_date = None
        self._provider_title = None
        self._plugin_title = None
        self._plugin_version = None
        self._enabled = None
        self._item_id = None
        self._name = None
        self._description = None
        self._id_provider = None
        self._id_plugin_version = None
        self._id_pipelines = None
        self._last_execution_configuration = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if last_modification_date is not None:
            self.last_modification_date = last_modification_date
        if provider_title is not None:
            self.provider_title = provider_title
        if plugin_title is not None:
            self.plugin_title = plugin_title
        if plugin_version is not None:
            self.plugin_version = plugin_version
        if enabled is not None:
            self.enabled = enabled
        if item_id is not None:
            self.item_id = item_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id_provider is not None:
            self.id_provider = id_provider
        if id_plugin_version is not None:
            self.id_plugin_version = id_plugin_version
        if id_pipelines is not None:
            self.id_pipelines = id_pipelines
        if last_execution_configuration is not None:
            self.last_execution_configuration = last_execution_configuration

    @property
    def id(self):
        """Gets the id of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Primary Key  # noqa: E501

        :return: The id of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Primary Key  # noqa: E501

        :param id: The id of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_modification_date(self):
        """Gets the last_modification_date of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Date of the last modification  # noqa: E501

        :return: The last_modification_date of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_date

    @last_modification_date.setter
    def last_modification_date(self, last_modification_date):
        """Sets the last_modification_date of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Date of the last modification  # noqa: E501

        :param last_modification_date: The last_modification_date of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: datetime
        """

        self._last_modification_date = last_modification_date

    @property
    def provider_title(self):
        """Gets the provider_title of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Name of the provider  # noqa: E501

        :return: The provider_title of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._provider_title

    @provider_title.setter
    def provider_title(self, provider_title):
        """Sets the provider_title of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Name of the provider  # noqa: E501

        :param provider_title: The provider_title of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: str
        """

        self._provider_title = provider_title

    @property
    def plugin_title(self):
        """Gets the plugin_title of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Title of the plugin related to the DIP  # noqa: E501

        :return: The plugin_title of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._plugin_title

    @plugin_title.setter
    def plugin_title(self, plugin_title):
        """Sets the plugin_title of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Title of the plugin related to the DIP  # noqa: E501

        :param plugin_title: The plugin_title of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: str
        """

        self._plugin_title = plugin_title

    @property
    def plugin_version(self):
        """Gets the plugin_version of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Version of the plugin used by the DIP  # noqa: E501

        :return: The plugin_version of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._plugin_version

    @plugin_version.setter
    def plugin_version(self, plugin_version):
        """Sets the plugin_version of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Version of the plugin used by the DIP  # noqa: E501

        :param plugin_version: The plugin_version of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: str
        """

        self._plugin_version = plugin_version

    @property
    def enabled(self):
        """Gets the enabled of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Plugin version enabled  # noqa: E501

        :return: The enabled of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Plugin version enabled  # noqa: E501

        :param enabled: The enabled of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def item_id(self):
        """Gets the item_id of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Internal Id  # noqa: E501

        :return: The item_id of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Internal Id  # noqa: E501

        :param item_id: The item_id of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Friendly name to identify the data ingestion process  # noqa: E501

        :return: The name of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Friendly name to identify the data ingestion process  # noqa: E501

        :param name: The name of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Description of this data intake process  # noqa: E501

        :return: The description of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Description of this data intake process  # noqa: E501

        :param description: The description of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id_provider(self):
        """Gets the id_provider of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Id of the  data intake process provider  # noqa: E501

        :return: The id_provider of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Id of the  data intake process provider  # noqa: E501

        :param id_provider: The id_provider of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def id_plugin_version(self):
        """Gets the id_plugin_version of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Id of the plugin related to this data intake process  # noqa: E501

        :return: The id_plugin_version of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._id_plugin_version

    @id_plugin_version.setter
    def id_plugin_version(self, id_plugin_version):
        """Sets the id_plugin_version of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Id of the plugin related to this data intake process  # noqa: E501

        :param id_plugin_version: The id_plugin_version of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: str
        """

        self._id_plugin_version = id_plugin_version

    @property
    def id_pipelines(self):
        """Gets the id_pipelines of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Pipelines related to this data intake process  # noqa: E501

        :return: The id_pipelines of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: list[int]
        """
        return self._id_pipelines

    @id_pipelines.setter
    def id_pipelines(self, id_pipelines):
        """Sets the id_pipelines of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Pipelines related to this data intake process  # noqa: E501

        :param id_pipelines: The id_pipelines of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: list[int]
        """

        self._id_pipelines = id_pipelines

    @property
    def last_execution_configuration(self):
        """Gets the last_execution_configuration of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501

        Configuration in JSON format of the last execution  # noqa: E501

        :return: The last_execution_configuration of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_execution_configuration

    @last_execution_configuration.setter
    def last_execution_configuration(self, last_execution_configuration):
        """Sets the last_execution_configuration of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.

        Configuration in JSON format of the last execution  # noqa: E501

        :param last_execution_configuration: The last_execution_configuration of this MetadataDataIntakeProcessesDataIntakeProcessFullDTO.  # noqa: E501
        :type: str
        """

        self._last_execution_configuration = last_execution_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataDataIntakeProcessesDataIntakeProcessFullDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataDataIntakeProcessesDataIntakeProcessFullDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
