# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MicrosoftAzureDatabricksClientRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creator_user_name': 'str',
        'job_id': 'int',
        'original_attempt_run_id': 'str',
        'state': 'MicrosoftAzureDatabricksClientRunState',
        'schedule': 'MicrosoftAzureDatabricksClientCronSchedule',
        'task': 'MicrosoftAzureDatabricksClientJobTask',
        'cluster_spec': 'MicrosoftAzureDatabricksClientClusterSpec',
        'cluster_instance': 'MicrosoftAzureDatabricksClientClusterInstance',
        'overriding_parameters': 'MicrosoftAzureDatabricksClientRunParameters',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'setup_duration': 'int',
        'execution_duration': 'int',
        'cleanup_duration': 'int',
        'trigger': 'MicrosoftAzureDatabricksClientTriggerType',
        'run_page_url': 'str',
        'run_type': 'MicrosoftAzureDatabricksClientRunType',
        'run_id': 'int',
        'number_in_job': 'int'
    }

    attribute_map = {
        'creator_user_name': 'creator_user_name',
        'job_id': 'job_id',
        'original_attempt_run_id': 'original_attempt_run_id',
        'state': 'state',
        'schedule': 'schedule',
        'task': 'task',
        'cluster_spec': 'cluster_spec',
        'cluster_instance': 'cluster_instance',
        'overriding_parameters': 'overriding_parameters',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'setup_duration': 'setup_duration',
        'execution_duration': 'execution_duration',
        'cleanup_duration': 'cleanup_duration',
        'trigger': 'trigger',
        'run_page_url': 'run_page_url',
        'run_type': 'run_type',
        'run_id': 'run_id',
        'number_in_job': 'number_in_job'
    }

    def __init__(self, creator_user_name=None, job_id=None, original_attempt_run_id=None, state=None, schedule=None, task=None, cluster_spec=None, cluster_instance=None, overriding_parameters=None, start_time=None, end_time=None, setup_duration=None, execution_duration=None, cleanup_duration=None, trigger=None, run_page_url=None, run_type=None, run_id=None, number_in_job=None):  # noqa: E501
        """MicrosoftAzureDatabricksClientRun - a model defined in Swagger"""  # noqa: E501
        self._creator_user_name = None
        self._job_id = None
        self._original_attempt_run_id = None
        self._state = None
        self._schedule = None
        self._task = None
        self._cluster_spec = None
        self._cluster_instance = None
        self._overriding_parameters = None
        self._start_time = None
        self._end_time = None
        self._setup_duration = None
        self._execution_duration = None
        self._cleanup_duration = None
        self._trigger = None
        self._run_page_url = None
        self._run_type = None
        self._run_id = None
        self._number_in_job = None
        self.discriminator = None
        if creator_user_name is not None:
            self.creator_user_name = creator_user_name
        if job_id is not None:
            self.job_id = job_id
        if original_attempt_run_id is not None:
            self.original_attempt_run_id = original_attempt_run_id
        if state is not None:
            self.state = state
        if schedule is not None:
            self.schedule = schedule
        if task is not None:
            self.task = task
        if cluster_spec is not None:
            self.cluster_spec = cluster_spec
        if cluster_instance is not None:
            self.cluster_instance = cluster_instance
        if overriding_parameters is not None:
            self.overriding_parameters = overriding_parameters
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if setup_duration is not None:
            self.setup_duration = setup_duration
        if execution_duration is not None:
            self.execution_duration = execution_duration
        if cleanup_duration is not None:
            self.cleanup_duration = cleanup_duration
        if trigger is not None:
            self.trigger = trigger
        if run_page_url is not None:
            self.run_page_url = run_page_url
        if run_type is not None:
            self.run_type = run_type
        if run_id is not None:
            self.run_id = run_id
        if number_in_job is not None:
            self.number_in_job = number_in_job

    @property
    def creator_user_name(self):
        """Gets the creator_user_name of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The creator_user_name of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: str
        """
        return self._creator_user_name

    @creator_user_name.setter
    def creator_user_name(self, creator_user_name):
        """Sets the creator_user_name of this MicrosoftAzureDatabricksClientRun.


        :param creator_user_name: The creator_user_name of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: str
        """

        self._creator_user_name = creator_user_name

    @property
    def job_id(self):
        """Gets the job_id of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The job_id of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this MicrosoftAzureDatabricksClientRun.


        :param job_id: The job_id of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def original_attempt_run_id(self):
        """Gets the original_attempt_run_id of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The original_attempt_run_id of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: str
        """
        return self._original_attempt_run_id

    @original_attempt_run_id.setter
    def original_attempt_run_id(self, original_attempt_run_id):
        """Sets the original_attempt_run_id of this MicrosoftAzureDatabricksClientRun.


        :param original_attempt_run_id: The original_attempt_run_id of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: str
        """

        self._original_attempt_run_id = original_attempt_run_id

    @property
    def state(self):
        """Gets the state of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The state of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: MicrosoftAzureDatabricksClientRunState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MicrosoftAzureDatabricksClientRun.


        :param state: The state of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: MicrosoftAzureDatabricksClientRunState
        """

        self._state = state

    @property
    def schedule(self):
        """Gets the schedule of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The schedule of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: MicrosoftAzureDatabricksClientCronSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this MicrosoftAzureDatabricksClientRun.


        :param schedule: The schedule of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: MicrosoftAzureDatabricksClientCronSchedule
        """

        self._schedule = schedule

    @property
    def task(self):
        """Gets the task of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The task of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: MicrosoftAzureDatabricksClientJobTask
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this MicrosoftAzureDatabricksClientRun.


        :param task: The task of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: MicrosoftAzureDatabricksClientJobTask
        """

        self._task = task

    @property
    def cluster_spec(self):
        """Gets the cluster_spec of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The cluster_spec of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: MicrosoftAzureDatabricksClientClusterSpec
        """
        return self._cluster_spec

    @cluster_spec.setter
    def cluster_spec(self, cluster_spec):
        """Sets the cluster_spec of this MicrosoftAzureDatabricksClientRun.


        :param cluster_spec: The cluster_spec of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: MicrosoftAzureDatabricksClientClusterSpec
        """

        self._cluster_spec = cluster_spec

    @property
    def cluster_instance(self):
        """Gets the cluster_instance of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The cluster_instance of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: MicrosoftAzureDatabricksClientClusterInstance
        """
        return self._cluster_instance

    @cluster_instance.setter
    def cluster_instance(self, cluster_instance):
        """Sets the cluster_instance of this MicrosoftAzureDatabricksClientRun.


        :param cluster_instance: The cluster_instance of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: MicrosoftAzureDatabricksClientClusterInstance
        """

        self._cluster_instance = cluster_instance

    @property
    def overriding_parameters(self):
        """Gets the overriding_parameters of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The overriding_parameters of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: MicrosoftAzureDatabricksClientRunParameters
        """
        return self._overriding_parameters

    @overriding_parameters.setter
    def overriding_parameters(self, overriding_parameters):
        """Sets the overriding_parameters of this MicrosoftAzureDatabricksClientRun.


        :param overriding_parameters: The overriding_parameters of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: MicrosoftAzureDatabricksClientRunParameters
        """

        self._overriding_parameters = overriding_parameters

    @property
    def start_time(self):
        """Gets the start_time of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The start_time of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MicrosoftAzureDatabricksClientRun.


        :param start_time: The start_time of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The end_time of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MicrosoftAzureDatabricksClientRun.


        :param end_time: The end_time of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def setup_duration(self):
        """Gets the setup_duration of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The setup_duration of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: int
        """
        return self._setup_duration

    @setup_duration.setter
    def setup_duration(self, setup_duration):
        """Sets the setup_duration of this MicrosoftAzureDatabricksClientRun.


        :param setup_duration: The setup_duration of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: int
        """

        self._setup_duration = setup_duration

    @property
    def execution_duration(self):
        """Gets the execution_duration of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The execution_duration of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: int
        """
        return self._execution_duration

    @execution_duration.setter
    def execution_duration(self, execution_duration):
        """Sets the execution_duration of this MicrosoftAzureDatabricksClientRun.


        :param execution_duration: The execution_duration of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: int
        """

        self._execution_duration = execution_duration

    @property
    def cleanup_duration(self):
        """Gets the cleanup_duration of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The cleanup_duration of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: int
        """
        return self._cleanup_duration

    @cleanup_duration.setter
    def cleanup_duration(self, cleanup_duration):
        """Sets the cleanup_duration of this MicrosoftAzureDatabricksClientRun.


        :param cleanup_duration: The cleanup_duration of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: int
        """

        self._cleanup_duration = cleanup_duration

    @property
    def trigger(self):
        """Gets the trigger of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The trigger of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: MicrosoftAzureDatabricksClientTriggerType
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this MicrosoftAzureDatabricksClientRun.


        :param trigger: The trigger of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: MicrosoftAzureDatabricksClientTriggerType
        """

        self._trigger = trigger

    @property
    def run_page_url(self):
        """Gets the run_page_url of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The run_page_url of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: str
        """
        return self._run_page_url

    @run_page_url.setter
    def run_page_url(self, run_page_url):
        """Sets the run_page_url of this MicrosoftAzureDatabricksClientRun.


        :param run_page_url: The run_page_url of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: str
        """

        self._run_page_url = run_page_url

    @property
    def run_type(self):
        """Gets the run_type of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The run_type of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: MicrosoftAzureDatabricksClientRunType
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """Sets the run_type of this MicrosoftAzureDatabricksClientRun.


        :param run_type: The run_type of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: MicrosoftAzureDatabricksClientRunType
        """

        self._run_type = run_type

    @property
    def run_id(self):
        """Gets the run_id of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The run_id of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this MicrosoftAzureDatabricksClientRun.


        :param run_id: The run_id of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: int
        """

        self._run_id = run_id

    @property
    def number_in_job(self):
        """Gets the number_in_job of this MicrosoftAzureDatabricksClientRun.  # noqa: E501


        :return: The number_in_job of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :rtype: int
        """
        return self._number_in_job

    @number_in_job.setter
    def number_in_job(self, number_in_job):
        """Sets the number_in_job of this MicrosoftAzureDatabricksClientRun.


        :param number_in_job: The number_in_job of this MicrosoftAzureDatabricksClientRun.  # noqa: E501
        :type: int
        """

        self._number_in_job = number_in_job

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MicrosoftAzureDatabricksClientRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftAzureDatabricksClientRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
