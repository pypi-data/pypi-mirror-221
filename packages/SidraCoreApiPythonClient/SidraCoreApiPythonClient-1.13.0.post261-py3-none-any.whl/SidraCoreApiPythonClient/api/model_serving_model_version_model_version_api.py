# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from SidraCoreApiPythonClient.api_client import ApiClient


class ModelServingModelVersionModelVersionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_model_serving_model_version_data_storage_unit_data_storage_unit_id_deploy_post(self, data_storage_unit_id, **kwargs):  # noqa: E501
        """Deploys a Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_data_storage_unit_data_storage_unit_id_deploy_post(data_storage_unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int data_storage_unit_id: Id of the dataStorageUnit to deploy the model (required)
        :param APIModelServingModelsModelVersionDeployment body: Data for the Model deployment
        :param str api_version: The requested API version
        :return: ModelServingModelVersionDataBricksRunsSubmitResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_model_serving_model_version_data_storage_unit_data_storage_unit_id_deploy_post_with_http_info(data_storage_unit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_model_serving_model_version_data_storage_unit_data_storage_unit_id_deploy_post_with_http_info(data_storage_unit_id, **kwargs)  # noqa: E501
            return data

    def api_model_serving_model_version_data_storage_unit_data_storage_unit_id_deploy_post_with_http_info(self, data_storage_unit_id, **kwargs):  # noqa: E501
        """Deploys a Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_data_storage_unit_data_storage_unit_id_deploy_post_with_http_info(data_storage_unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int data_storage_unit_id: Id of the dataStorageUnit to deploy the model (required)
        :param APIModelServingModelsModelVersionDeployment body: Data for the Model deployment
        :param str api_version: The requested API version
        :return: ModelServingModelVersionDataBricksRunsSubmitResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_storage_unit_id', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_model_serving_model_version_data_storage_unit_data_storage_unit_id_deploy_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_storage_unit_id' is set
        if ('data_storage_unit_id' not in params or
                params['data_storage_unit_id'] is None):
            raise ValueError("Missing the required parameter `data_storage_unit_id` when calling `api_model_serving_model_version_data_storage_unit_data_storage_unit_id_deploy_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_storage_unit_id' in params:
            path_params['dataStorageUnitId'] = params['data_storage_unit_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ModelServing/ModelVersion/dataStorageUnit/{dataStorageUnitId}/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelServingModelVersionDataBricksRunsSubmitResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_model_serving_model_version_data_storage_unit_data_storage_unit_id_image_post(self, data_storage_unit_id, **kwargs):  # noqa: E501
        """Creates a docker image given a run id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_data_storage_unit_data_storage_unit_id_image_post(data_storage_unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int data_storage_unit_id: DataStorageUnit where the model will be deployed (required)
        :param APIModelServingModelsImageCreation body: Data needed to create the image
        :param str api_version: The requested API version
        :return: ModelServingModelVersionDataBricksRunsSubmitResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_model_serving_model_version_data_storage_unit_data_storage_unit_id_image_post_with_http_info(data_storage_unit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_model_serving_model_version_data_storage_unit_data_storage_unit_id_image_post_with_http_info(data_storage_unit_id, **kwargs)  # noqa: E501
            return data

    def api_model_serving_model_version_data_storage_unit_data_storage_unit_id_image_post_with_http_info(self, data_storage_unit_id, **kwargs):  # noqa: E501
        """Creates a docker image given a run id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_data_storage_unit_data_storage_unit_id_image_post_with_http_info(data_storage_unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int data_storage_unit_id: DataStorageUnit where the model will be deployed (required)
        :param APIModelServingModelsImageCreation body: Data needed to create the image
        :param str api_version: The requested API version
        :return: ModelServingModelVersionDataBricksRunsSubmitResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_storage_unit_id', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_model_serving_model_version_data_storage_unit_data_storage_unit_id_image_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_storage_unit_id' is set
        if ('data_storage_unit_id' not in params or
                params['data_storage_unit_id'] is None):
            raise ValueError("Missing the required parameter `data_storage_unit_id` when calling `api_model_serving_model_version_data_storage_unit_data_storage_unit_id_image_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_storage_unit_id' in params:
            path_params['dataStorageUnitId'] = params['data_storage_unit_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ModelServing/ModelVersion/dataStorageUnit/{dataStorageUnitId}/image', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelServingModelVersionDataBricksRunsSubmitResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_model_serving_model_version_get(self, **kwargs):  # noqa: E501
        """Gets a list of ModelVersions filtered  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int take:
        :param str text:
        :param str field:
        :param bool exact_match:
        :param str sort_field:
        :param bool sort_desc:
        :param str api_version: The requested API version
        :return: FilterResponseModelServingModelVersionModelVersionFullDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_model_serving_model_version_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_model_serving_model_version_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_model_serving_model_version_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of ModelVersions filtered  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int take:
        :param str text:
        :param str field:
        :param bool exact_match:
        :param str sort_field:
        :param bool sort_desc:
        :param str api_version: The requested API version
        :return: FilterResponseModelServingModelVersionModelVersionFullDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip', 'take', 'text', 'field', 'exact_match', 'sort_field', 'sort_desc', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_model_serving_model_version_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
        if 'exact_match' in params:
            query_params.append(('exactMatch', params['exact_match']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_desc' in params:
            query_params.append(('sortDesc', params['sort_desc']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ModelServing/ModelVersion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilterResponseModelServingModelVersionModelVersionFullDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_delete(self, id, data_storage_unit_id, **kwargs):  # noqa: E501
        """Delete a specific ModelVersion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_delete(id, data_storage_unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of the ModelVersion to remove. (required)
        :param int data_storage_unit_id: DataStorageUnit where the model will be deployed. (required)
        :param APIModelServingModelsDeleteModeEnum delete_mode:
        :param str cluster_id:
        :param int time_out_seconds:
        :param str api_version: The requested API version
        :return: ModelServingModelVersionDataBricksRunsSubmitResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_delete_with_http_info(id, data_storage_unit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_delete_with_http_info(id, data_storage_unit_id, **kwargs)  # noqa: E501
            return data

    def api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_delete_with_http_info(self, id, data_storage_unit_id, **kwargs):  # noqa: E501
        """Delete a specific ModelVersion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_delete_with_http_info(id, data_storage_unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The Id of the ModelVersion to remove. (required)
        :param int data_storage_unit_id: DataStorageUnit where the model will be deployed. (required)
        :param APIModelServingModelsDeleteModeEnum delete_mode:
        :param str cluster_id:
        :param int time_out_seconds:
        :param str api_version: The requested API version
        :return: ModelServingModelVersionDataBricksRunsSubmitResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data_storage_unit_id', 'delete_mode', 'cluster_id', 'time_out_seconds', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_delete`")  # noqa: E501
        # verify the required parameter 'data_storage_unit_id' is set
        if ('data_storage_unit_id' not in params or
                params['data_storage_unit_id'] is None):
            raise ValueError("Missing the required parameter `data_storage_unit_id` when calling `api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'data_storage_unit_id' in params:
            path_params['dataStorageUnitId'] = params['data_storage_unit_id']  # noqa: E501

        query_params = []
        if 'delete_mode' in params:
            query_params.append(('deleteMode', params['delete_mode']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'time_out_seconds' in params:
            query_params.append(('timeOutSeconds', params['time_out_seconds']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ModelServing/ModelVersion/{id}/dataStorageUnit/{dataStorageUnitId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelServingModelVersionDataBricksRunsSubmitResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_inference_post(self, id, data_storage_unit_id, **kwargs):  # noqa: E501
        """Inference of a trained model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_inference_post(id, data_storage_unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of Model to execute (required)
        :param int data_storage_unit_id: Id of dataStorageUnit to execute model (required)
        :param APIModelServingModelsModelVersionExecution body: Parameters needed by the Model
        :param str api_version: The requested API version
        :return: ModelServingModelVersionDataBricksRunsSubmitResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_inference_post_with_http_info(id, data_storage_unit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_inference_post_with_http_info(id, data_storage_unit_id, **kwargs)  # noqa: E501
            return data

    def api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_inference_post_with_http_info(self, id, data_storage_unit_id, **kwargs):  # noqa: E501
        """Inference of a trained model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_inference_post_with_http_info(id, data_storage_unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of Model to execute (required)
        :param int data_storage_unit_id: Id of dataStorageUnit to execute model (required)
        :param APIModelServingModelsModelVersionExecution body: Parameters needed by the Model
        :param str api_version: The requested API version
        :return: ModelServingModelVersionDataBricksRunsSubmitResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data_storage_unit_id', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_inference_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_inference_post`")  # noqa: E501
        # verify the required parameter 'data_storage_unit_id' is set
        if ('data_storage_unit_id' not in params or
                params['data_storage_unit_id'] is None):
            raise ValueError("Missing the required parameter `data_storage_unit_id` when calling `api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_inference_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'data_storage_unit_id' in params:
            path_params['dataStorageUnitId'] = params['data_storage_unit_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ModelServing/ModelVersion/{id}/dataStorageUnit/{dataStorageUnitId}/inference', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelServingModelVersionDataBricksRunsSubmitResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_job_job_run_id_status_get(self, id, data_storage_unit_id, job_run_id, **kwargs):  # noqa: E501
        """Get the current status of a execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_job_job_run_id_status_get(id, data_storage_unit_id, job_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of ModelVersion (required)
        :param int data_storage_unit_id: Id of the dataStorageUnit to get execution status (required)
        :param int job_run_id: Run id of the job submitted (required)
        :param str api_version: The requested API version
        :return: HelpersModelDataBricksRunsGetOutputResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_job_job_run_id_status_get_with_http_info(id, data_storage_unit_id, job_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_job_job_run_id_status_get_with_http_info(id, data_storage_unit_id, job_run_id, **kwargs)  # noqa: E501
            return data

    def api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_job_job_run_id_status_get_with_http_info(self, id, data_storage_unit_id, job_run_id, **kwargs):  # noqa: E501
        """Get the current status of a execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_job_job_run_id_status_get_with_http_info(id, data_storage_unit_id, job_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of ModelVersion (required)
        :param int data_storage_unit_id: Id of the dataStorageUnit to get execution status (required)
        :param int job_run_id: Run id of the job submitted (required)
        :param str api_version: The requested API version
        :return: HelpersModelDataBricksRunsGetOutputResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data_storage_unit_id', 'job_run_id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_job_job_run_id_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_job_job_run_id_status_get`")  # noqa: E501
        # verify the required parameter 'data_storage_unit_id' is set
        if ('data_storage_unit_id' not in params or
                params['data_storage_unit_id'] is None):
            raise ValueError("Missing the required parameter `data_storage_unit_id` when calling `api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_job_job_run_id_status_get`")  # noqa: E501
        # verify the required parameter 'job_run_id' is set
        if ('job_run_id' not in params or
                params['job_run_id'] is None):
            raise ValueError("Missing the required parameter `job_run_id` when calling `api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_job_job_run_id_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'data_storage_unit_id' in params:
            path_params['dataStorageUnitId'] = params['data_storage_unit_id']  # noqa: E501
        if 'job_run_id' in params:
            path_params['jobRunId'] = params['job_run_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ModelServing/ModelVersion/{id}/dataStorageUnit/{dataStorageUnitId}/job/{jobRunId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HelpersModelDataBricksRunsGetOutputResponseDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_undeploy_post(self, id, data_storage_unit_id, **kwargs):  # noqa: E501
        """Undeploys a Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_undeploy_post(id, data_storage_unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of ModelVersion to undeploy (required)
        :param int data_storage_unit_id: Id of the dataStorageUnit to deploy the model (required)
        :param APIModelServingModelsModelVersionUndeployment body: Data for the Model deployment
        :param str api_version: The requested API version
        :return: ModelServingModelVersionDataBricksRunsSubmitResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_undeploy_post_with_http_info(id, data_storage_unit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_undeploy_post_with_http_info(id, data_storage_unit_id, **kwargs)  # noqa: E501
            return data

    def api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_undeploy_post_with_http_info(self, id, data_storage_unit_id, **kwargs):  # noqa: E501
        """Undeploys a Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_undeploy_post_with_http_info(id, data_storage_unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of ModelVersion to undeploy (required)
        :param int data_storage_unit_id: Id of the dataStorageUnit to deploy the model (required)
        :param APIModelServingModelsModelVersionUndeployment body: Data for the Model deployment
        :param str api_version: The requested API version
        :return: ModelServingModelVersionDataBricksRunsSubmitResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data_storage_unit_id', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_undeploy_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_undeploy_post`")  # noqa: E501
        # verify the required parameter 'data_storage_unit_id' is set
        if ('data_storage_unit_id' not in params or
                params['data_storage_unit_id'] is None):
            raise ValueError("Missing the required parameter `data_storage_unit_id` when calling `api_model_serving_model_version_id_data_storage_unit_data_storage_unit_id_undeploy_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'data_storage_unit_id' in params:
            path_params['dataStorageUnitId'] = params['data_storage_unit_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ModelServing/ModelVersion/{id}/dataStorageUnit/{dataStorageUnitId}/undeploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelServingModelVersionDataBricksRunsSubmitResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_model_serving_model_version_id_get(self, id, **kwargs):  # noqa: E501
        """Get a ModelVersion by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of ModelVersion to find (required)
        :param str api_version: The requested API version
        :return: ModelServingModelVersionModelVersionFullDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_model_serving_model_version_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_model_serving_model_version_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_model_serving_model_version_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a ModelVersion by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of ModelVersion to find (required)
        :param str api_version: The requested API version
        :return: ModelServingModelVersionModelVersionFullDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_model_serving_model_version_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_model_serving_model_version_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ModelServing/ModelVersion/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelServingModelVersionModelVersionFullDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_model_serving_model_version_id_put(self, id, **kwargs):  # noqa: E501
        """Updates a ModelVersion by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of ModelVersion to edit (required)
        :param ModelServingModelVersionModelVersionDTO body: New data to edit ModelVersion
        :param str api_version: The requested API version
        :return: ModelServingModelVersionModelVersionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_model_serving_model_version_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_model_serving_model_version_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_model_serving_model_version_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates a ModelVersion by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of ModelVersion to edit (required)
        :param ModelServingModelVersionModelVersionDTO body: New data to edit ModelVersion
        :param str api_version: The requested API version
        :return: ModelServingModelVersionModelVersionDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_model_serving_model_version_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_model_serving_model_version_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ModelServing/ModelVersion/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelServingModelVersionModelVersionDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_model_serving_model_version_post(self, **kwargs):  # noqa: E501
        """Creates a ModelVersion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelServingModelVersionModelVersionDTO body: ModelVersion to create
        :param str api_version: The requested API version
        :return: ModelServingModelVersionModelVersionFullDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_model_serving_model_version_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_model_serving_model_version_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_model_serving_model_version_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a ModelVersion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_model_serving_model_version_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelServingModelVersionModelVersionDTO body: ModelVersion to create
        :param str api_version: The requested API version
        :return: ModelServingModelVersionModelVersionFullDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_model_serving_model_version_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/ModelServing/ModelVersion', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelServingModelVersionModelVersionFullDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
