Metadata-Version: 2.1
Name: sxpyr
Version: 0.0.4
Summary: A flexible Lisp reader.
Home-page: https://github.com/tgbugs/sxpyr
Author: Tom Gillespie
Author-email: tgbugs@gmail.com
License: MIT
Keywords: lisp reader edn clojure racket scheme elisp emacs sexp s-expression parser parsing
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: cli
Requires-Dist: clifn ; extra == 'cli'
Provides-Extra: fuzz
Requires-Dist: python-afl ; extra == 'fuzz'
Requires-Dist: clifn ; extra == 'fuzz'
Provides-Extra: test
Requires-Dist: pytest ; extra == 'test'
Requires-Dist: clifn ; extra == 'test'

#+title: sxpyr: a flexible Lisp reader for Python

Parse s-expressions, edn, and a variety of lisp dialects.

* Introduction
Currently supports something approximating the union of Common Lisp,
Scheme, Racket, Clojure, Hy, Fennel, and Emacs Lisp.

Since sxpyr is designed to support a variety of different dialects, a
second pass is almost always needed in order to match the output of
native readers. This second pass is a good place to raise additional
syntax errors for the dialect you are working with. Some dialects have
already been implemented.

Due to deeper differences between dialects, in some cases it is
necessary to configure the reader in advance. This happens in cases
where a particular form is valid in two different dialects and one
or both parses are sufficiently divergent that it is not possible
to recover the correct parse for the other dialect.

At the moment the reader cannot be modified at runtime. This means
that it cannot be used to parse named readtables or things like
Racket's ~#lang at-exp~. In the future it might be possible to pass
the generator through to the functions that handle dispatch macros and
make it possible to register new reader macros, but that is well out
of scope at the moment.

Originally this library was intended to be vendored, however since
then it is significantly increased in complexity. A stripped down
version that is suitable for parsing a minimal sane dialect that can
be used as a configuration language may be added in the future.

* Usage
#+begin_src bash
git clone https://github.com/tgbugs/sxpyr.git
pushd sxpyr
pip install --user -e .[cli]
python -m sxpyr.cli parse test/data/nested-splicing-unsyntax.rkt test/data/plist-test.sxpr
popd
#+end_src

* Testing
In order to run the tests you will need the following repos.
- sbcl
- ccl
- emacs
- org-mode
- clojure
- spec.alpha
- code.specs.alpha
- tawny-owl
- hy
- Fennel
- txr

For now you will also need the following installed on your system.
- xemacs
- app-xemacs/xemacs-packages-all
- guile
- gambit
* Fuzzing
You will need a copy of afl.
#+begin_src bash
pip install --user -e .[fuzz]
pushd test
mkdir initial-inputs
cp data/plist-test.sxpr initial-inputs/  # other seed files can be added as well
py-afl-fuzz -m 400 -i initial-inputs/ -o fuzzing-results/ -- python -m sxpyr.cli parse --fuzz
#+end_src

#+begin_src bash
python -m sxpyr.cli parse test/fuzzing-results/crashes/*
#+end_src

Note that initial inputs cannot be symlinks becuase afl creates hardlinks to the input files.

Also note that afl seems to die after 175k execs?

Sometimes it also seems that some errors are escaping the except block
and making it be classified as crashes?
