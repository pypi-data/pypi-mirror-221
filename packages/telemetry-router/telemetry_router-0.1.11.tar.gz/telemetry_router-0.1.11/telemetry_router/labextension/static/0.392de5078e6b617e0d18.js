"use strict";(self.webpackChunktelemetry_router=self.webpackChunktelemetry_router||[]).push([[0],[(e,o,s)=>{s.r(o),s.d(o,{ITelemetryRouter:()=>d,TelemetryRouter:()=>h,default:()=>v});var t=s(930),n=s(987),r=s(790);async function i(e="",o={}){const s=r.ServerConnection.makeSettings(),t=n.URLExt.join(s.baseUrl,"telemetry-router",e);let i;try{i=await r.ServerConnection.makeRequest(t,o,s)}catch(e){throw new r.ServerConnection.NetworkError(e)}let c=await i.text();if(c.length>0)try{c=JSON.parse(c)}catch(e){console.log("Not a JSON response body.",i)}if(!i.ok)throw new r.ServerConnection.ResponseError(i,c.message||c);return c}class c{constructor(){h.registerConsumer(this)}consume(e){console.log("Base",e)}}class l extends c{constructor(){super()}consume(e){console.log("ConsoleLogger",e)}}class u extends c{constructor(){super()}async consume(e){const o={request:e,response:await i("mongo",{method:"POST",body:JSON.stringify(e)})};console.log("MongoDBLogger",o)}}const a="telemetry-router:plugin",d=new t.Token(a);class h{constructor(){this.sequence=0}static registerConsumer(e){h.registeredConsumers.push(e)}loadNotebookPanel(e){this.notebookPanel=e}async publishEvent(e){var o,s,t,n,r,i,c;this.sessionID===(null===(s=null===(o=this.notebookPanel)||void 0===o?void 0:o.sessionContext.session)||void 0===s?void 0:s.id)?this.sequence=this.sequence+1:(this.sessionID=null===(n=null===(t=this.notebookPanel)||void 0===t?void 0:t.sessionContext.session)||void 0===n?void 0:n.id,this.sequence=0);const l={event:e,notebookState:{sessionID:this.sessionID,sequence:this.sequence,notebookPath:null===(r=this.notebookPanel)||void 0===r?void 0:r.context.path,notebookContent:null===(c=null===(i=this.notebookPanel)||void 0===i?void 0:i.model)||void 0===c?void 0:c.toJSON()}};h.registeredConsumers.forEach((e=>{e.consume(l)}))}}h.registeredConsumers=[];const v={id:a,description:"A JupyterLab extension.",provides:d,autoStart:!0,activate:async e=>{const o=await i("version");console.log(`${a}: ${o}`);const s=new h;return new l,new u,s}}}]]);