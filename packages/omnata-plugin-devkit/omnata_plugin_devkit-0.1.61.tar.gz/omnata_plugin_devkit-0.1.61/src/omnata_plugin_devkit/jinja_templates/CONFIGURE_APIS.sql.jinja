-- For now, we can't store in the proc schema because of the callout objects issue
create or replace procedure PLUGIN.CONFIGURE_APIS()
   returns object
   language javascript
   execute as owner
as
$$
// snowflake object automatically injected by Snowpark

try{
    snowflake.log("info", "CONFIGURE_APIS called");
    var currentDatabaseResults = snowflake.createStatement( {
        sqlText: `select current_database()`,
        binds:[]
    } ).execute();
    currentDatabaseResults.next();
    var currentDatabase = currentDatabaseResults.getColumnValue(1);

    var appsResults = snowflake.createStatement( {
        sqlText: `select 
                    EXTERNAL_ACCESS_INTEGRATION_NAMES ARRAY,
                    SECRETS ARRAY
                from DATA.OMNATA_REGISTRATION`,
        binds:[]
    } ).execute();
    let integrationNames;
    let secrets;
    if (!appsResults.next())  {
        integrationNames = []
        secrets = []
        snowflake.log("info", "No existing OMNATA_REGISTRATION record found, using empty arrays");
    }else{
        integrationNames = appsResults.getColumnValue(1);
        secrets = appsResults.getColumnValue(2);
        snowflake.log("info", `External Access Integrations from registration: ${integrationNames.join(',')}`);
        snowflake.log("info", `Secrets from registration: ${secrets.join(',')}`);
    }
    var currentSecretsResult = snowflake.createStatement( {
        sqlText: `show secrets in schema data`,
        binds:[]
    } ).execute();

    // remove secret names which do not exist in the schema
    var secretsWhichExist = []
    while (currentSecretsResult.next()){
        secretsWhichExist.push(currentSecretsResult.getColumnValue(2));
    }
    snowflake.log("info", `Secrets found in schema: ${secretsWhichExist.join(',')}`);
    secrets = secrets.filter(x => secretsWhichExist.includes(x))
    snowflake.log("info", `Secrets to assign to procs: ${secrets.join(',')}`);
    // format of function/proc binding is SECRETS = ('cred' = oauth_token )
    secrets = secrets.map(x => `'${x}' = ${currentDatabase}.DATA.${x}`)

    const procsToAlter = [
        'SYNC(OBJECT)',
        `CONFIGURATION_FORM(VARCHAR,
                            OBJECT,
                            VARCHAR,
                            VARCHAR,
                            VARCHAR,
                            OBJECT,
                            VARCHAR,
                            OBJECT,
                            OBJECT)`,
        `CONNECTION_TEST(VARCHAR, 
                        OBJECT, 
                        VARCHAR,
                        VARCHAR,
                        VARCHAR)`,
        `RETRIEVE_SECRETS(VARCHAR,
                        VARCHAR)`
            ];
    procsToAlter.forEach(function(procToAlter) {
        var sqlText = `alter procedure ${procToAlter}
                    set EXTERNAL_ACCESS_INTEGRATIONS = (${integrationNames.join(',')}),
                        SECRETS = (${secrets.join(',')})`
        snowflake.log("info", `Executing SQL: ${sqlText}`);
        var appsResults = snowflake.createStatement( {
            sqlText:sqlText,
            binds:[]
        } ).execute();
    });
    return {
        "success": true,
        "data": null
    }
}
catch(e){
   return {
      "success": false,
      "error": `CONFIGURE_APIS: ${String(e)}`
   }
}

$$
;

