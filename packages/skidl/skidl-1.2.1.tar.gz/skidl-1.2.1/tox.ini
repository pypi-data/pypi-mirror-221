# Tox configuration file

[tox]
minversion = 3.15
envlist = py{27,36,37,38,39,310,311}
skip_missing_interpreters = true
; Set virtualenv so py27 works.
requires = virtualenv==20.21


[travis]
python =
    2.7: py27
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311


[pytest]
markers = 
    spice: Unit tests that use SPICE.


[testenv:py{27,36,37,38,39,310,311}]
description = test everything except SKiDL SPICE functions and schematic generation
isolated_build = True
setenv = TOXINIDIR = {toxinidir}
passenv = *
extras = testing
deps =
    pytest
    kinparse >= 0.1.0
changedir = {toxinidir}/tests
commands =
    pip install -e {toxinidir}
    py.test --ignore {toxinidir}/tests/examples -m "not spice" -k "not gen_" --tb=short --color=yes


[testenv:generate]
basepython = python3.10
description = test schematic generation
isolated_build = True
setenv = TOXINIDIR = {toxinidir}
passenv = *
extras = testing
deps =
    pytest
    kinparse >= 0.1.0
changedir = {toxinidir}/tests
commands =
    pip install -e {toxinidir}
    py.test --ignore {toxinidir}/tests/examples -m "not spice" -k "gen_" --tb=short --color=yes


[testenv:spice]
basepython = python3.10
description = test SKiDL SPICE functions
isolated_build = True
setenv = TOXINIDIR = {toxinidir}
passenv = *
extras = testing
deps =
    pytest
    kinparse >= 0.1.0
    matplotlib
    PySpice
changedir = {toxinidir}/tests
commands =
    pip install -e {toxinidir}
    py.test --ignore {toxinidir}/tests/examples -m spice --tb=short --color=yes


[coverage:run]
branch = True
source = {toxinidir}/skidl
omit = *_sklib.py


[coverage:report]
sort = -Cover


[testenv:coverage]
basepython = python3.10
description = test code coverage
setenv = TOXINIDIR = {toxinidir}
passenv = *
deps =
    pytest
    pytest-coverage
    kinparse >= 0.1.0
    matplotlib
    PySpice
changedir = {toxinidir}/tests
commands =
    pip install -e {toxinidir}
    py.test --ignore {toxinidir}/tests/examples -m "spice" --cov-config={toxinidir}/tox.ini --cov={toxinidir}/skidl


[testenv:{clean,build}]
description =
    Build (or clean) the package in isolation according to instructions in:
    https://setuptools.readthedocs.io/en/latest/build_meta.html#how-to-use-it
    https://github.com/pypa/pep517/issues/91
    https://github.com/pypa/build
setenv =
    DOCSRC = {toxinidir}/docsrc
# NOTE: build is still experimental, please refer to the links for updates/issues
skip_install = True
changedir = {toxinidir}
allowlist_externals =
    make
    find
deps =
    build: build[virtualenv]
commands =
    clean: python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'
    clean: find {toxinidir} ( -name '*.erc' -or -name '*.log' ) -delete
    clean: make -C {env:DOCSRC}/sphinx clean
    clean: make -C {env:DOCSRC}/pelicansite clean
    build: python -m build .
# By default `build` produces wheels, you can also explicitly use the flags `--sdist` and `--wheel`


[testenv:{docs,devserver,doctest}]
description = invoke sphinx-build to build the docs/run doctests
setenv =
    DOCSRC = {toxinidir}/docsrc
    BUILDDIR = {toxinidir}/docs
    docs: BUILD = publish
    devserver: BUILD = devserver
    doctest: BUILD = doctest
deps =
    ; -r {toxinidir}/docs/requirements.txt
    # ^  requirements.txt shared with Read The Docs
    # This causes doctests to fail. Don't know why.
allowlist_externals =
    make
    sphinx-build
commands =
    docs: make -C {env:DOCSRC}/pelicansite {env:BUILD}
    docs: make -C {env:DOCSRC}/sphinx html
    devserver: make -C {env:DOCSRC}/sphinx html
    devserver: make -C {env:DOCSRC}/pelicansite {env:BUILD}
    doctest: sphinx-build -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSRC}/sphinx" "{env:BUILDDIR}" {posargs}
    doctest: find {toxinidir} ( -name '*.erc' -or -name '*.log' ) -delete


[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository testpypi} dist/*
