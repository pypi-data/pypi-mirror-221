# Generated from src/trino_query_parser/SqlBase.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,319,2985,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,1,0,
        1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,247,8,5,1,5,1,5,
        1,5,1,5,1,5,3,5,254,8,5,1,5,1,5,3,5,258,8,5,1,5,1,5,3,5,262,8,5,
        1,5,1,5,1,5,1,5,3,5,268,8,5,1,5,1,5,3,5,272,8,5,1,5,1,5,1,5,1,5,
        1,5,3,5,279,8,5,1,5,1,5,1,5,3,5,284,8,5,1,5,1,5,3,5,288,8,5,1,5,
        1,5,1,5,1,5,3,5,294,8,5,1,5,1,5,3,5,298,8,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,319,
        8,5,1,5,1,5,3,5,323,8,5,1,5,1,5,3,5,327,8,5,1,5,1,5,3,5,331,8,5,
        1,5,1,5,1,5,1,5,1,5,1,5,3,5,339,8,5,1,5,1,5,3,5,343,8,5,1,5,3,5,
        346,8,5,1,5,1,5,1,5,1,5,1,5,3,5,353,8,5,1,5,1,5,1,5,1,5,1,5,5,5,
        360,8,5,10,5,12,5,363,9,5,1,5,1,5,1,5,3,5,368,8,5,1,5,1,5,3,5,372,
        8,5,1,5,1,5,1,5,1,5,3,5,378,8,5,1,5,1,5,1,5,1,5,1,5,3,5,385,8,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,394,8,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,3,5,406,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,415,
        8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,424,8,5,1,5,1,5,1,5,1,5,3,5,
        430,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,441,8,5,1,5,1,5,
        1,5,1,5,1,5,1,5,3,5,449,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,457,8,5,
        1,5,1,5,1,5,1,5,1,5,3,5,464,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        3,5,474,8,5,1,5,1,5,1,5,1,5,1,5,3,5,481,8,5,1,5,1,5,1,5,1,5,1,5,
        1,5,3,5,489,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,5,5,523,8,5,10,5,12,5,526,9,5,3,5,528,8,5,1,5,3,
        5,531,8,5,1,5,1,5,3,5,535,8,5,1,5,1,5,1,5,1,5,3,5,541,8,5,1,5,1,
        5,1,5,3,5,546,8,5,1,5,1,5,1,5,1,5,1,5,3,5,553,8,5,1,5,1,5,1,5,1,
        5,3,5,559,8,5,1,5,1,5,3,5,563,8,5,1,5,1,5,3,5,567,8,5,1,5,1,5,1,
        5,1,5,1,5,1,5,3,5,575,8,5,1,5,1,5,1,5,1,5,3,5,581,8,5,1,5,1,5,3,
        5,585,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,599,
        8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,607,8,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,626,8,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,5,5,649,8,5,10,5,12,5,652,9,5,3,5,654,8,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,664,8,5,1,5,1,5,3,5,668,8,5,1,5,1,5,1,
        5,1,5,1,5,3,5,675,8,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,683,8,5,10,5,12,
        5,686,9,5,1,5,1,5,1,5,3,5,691,8,5,1,5,1,5,1,5,3,5,696,8,5,1,5,1,
        5,3,5,700,8,5,1,5,1,5,1,5,1,5,3,5,706,8,5,1,5,1,5,1,5,1,5,1,5,5,
        5,713,8,5,10,5,12,5,716,9,5,1,5,1,5,1,5,3,5,721,8,5,1,5,1,5,3,5,
        725,8,5,1,5,1,5,1,5,1,5,1,5,3,5,732,8,5,1,5,1,5,3,5,736,8,5,1,5,
        1,5,1,5,1,5,5,5,742,8,5,10,5,12,5,745,9,5,1,5,1,5,3,5,749,8,5,1,
        5,1,5,3,5,753,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,761,8,5,1,5,1,5,1,
        5,1,5,5,5,767,8,5,10,5,12,5,770,9,5,1,5,1,5,3,5,774,8,5,1,5,1,5,
        3,5,778,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,788,8,5,1,5,1,5,
        1,5,5,5,793,8,5,10,5,12,5,796,9,5,1,5,1,5,3,5,800,8,5,1,5,1,5,3,
        5,804,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,814,8,5,1,5,3,5,817,
        8,5,1,5,1,5,1,5,1,5,1,5,5,5,824,8,5,10,5,12,5,827,9,5,1,5,1,5,3,
        5,831,8,5,1,5,1,5,1,5,1,5,3,5,837,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,
        5,861,8,5,1,5,1,5,1,5,1,5,3,5,867,8,5,3,5,869,8,5,1,5,1,5,1,5,1,
        5,3,5,875,8,5,1,5,1,5,1,5,1,5,3,5,881,8,5,3,5,883,8,5,1,5,1,5,1,
        5,1,5,1,5,1,5,3,5,891,8,5,3,5,893,8,5,1,5,1,5,1,5,1,5,3,5,899,8,
        5,1,5,1,5,1,5,1,5,3,5,905,8,5,3,5,907,8,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,922,8,5,1,5,1,5,1,5,3,5,927,8,
        5,1,5,1,5,1,5,1,5,1,5,3,5,934,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,3,5,946,8,5,3,5,948,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,956,
        8,5,3,5,958,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,5,5,974,8,5,10,5,12,5,977,9,5,3,5,979,8,5,1,5,1,5,3,5,983,
        8,5,1,5,1,5,3,5,987,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,5,5,1003,8,5,10,5,12,5,1006,9,5,3,5,1008,8,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1024,8,5,
        1,5,1,5,1,5,1,5,1,5,1,5,5,5,1032,8,5,10,5,12,5,1035,9,5,1,5,1,5,
        3,5,1039,8,5,1,5,1,5,1,5,1,5,3,5,1045,8,5,1,5,3,5,1048,8,5,1,5,1,
        5,1,5,1,5,1,5,4,5,1055,8,5,11,5,12,5,1056,3,5,1059,8,5,1,6,3,6,1062,
        8,6,1,6,1,6,1,7,1,7,3,7,1068,8,7,1,7,1,7,1,7,5,7,1073,8,7,10,7,12,
        7,1076,9,7,1,8,1,8,3,8,1080,8,8,1,9,1,9,1,9,1,9,3,9,1086,8,9,1,9,
        1,9,3,9,1090,8,9,1,9,1,9,3,9,1094,8,9,1,10,1,10,1,10,1,10,3,10,1100,
        8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,5,12,1109,8,12,10,12,12,
        12,1112,9,12,1,13,1,13,1,13,1,13,1,14,1,14,3,14,1120,8,14,1,15,1,
        15,1,15,1,15,1,15,1,15,5,15,1128,8,15,10,15,12,15,1131,9,15,3,15,
        1133,8,15,1,15,1,15,1,15,3,15,1138,8,15,3,15,1140,8,15,1,15,1,15,
        1,15,1,15,1,15,3,15,1147,8,15,1,15,1,15,1,15,1,15,3,15,1153,8,15,
        3,15,1155,8,15,1,16,1,16,3,16,1159,8,16,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,18,3,18,1169,8,18,1,18,1,18,1,18,1,18,3,18,1175,8,18,
        1,18,5,18,1178,8,18,10,18,12,18,1181,9,18,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,5,19,1190,8,19,10,19,12,19,1193,9,19,1,19,1,19,1,19,
        1,19,3,19,1199,8,19,1,20,1,20,3,20,1203,8,20,1,20,1,20,3,20,1207,
        8,20,1,21,1,21,3,21,1211,8,21,1,21,1,21,1,21,5,21,1216,8,21,10,21,
        12,21,1219,9,21,1,21,1,21,1,21,1,21,5,21,1225,8,21,10,21,12,21,1228,
        9,21,3,21,1230,8,21,1,21,1,21,3,21,1234,8,21,1,21,1,21,1,21,3,21,
        1239,8,21,1,21,1,21,3,21,1243,8,21,1,21,1,21,1,21,1,21,5,21,1249,
        8,21,10,21,12,21,1252,9,21,3,21,1254,8,21,1,22,3,22,1257,8,22,1,
        22,1,22,1,22,5,22,1262,8,22,10,22,12,22,1265,9,22,1,23,1,23,1,23,
        1,23,1,23,1,23,5,23,1273,8,23,10,23,12,23,1276,9,23,3,23,1278,8,
        23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,1286,8,23,10,23,12,23,1289,
        9,23,3,23,1291,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,1300,
        8,23,10,23,12,23,1303,9,23,1,23,1,23,3,23,1307,8,23,1,24,1,24,1,
        24,1,24,5,24,1313,8,24,10,24,12,24,1316,9,24,3,24,1318,8,24,1,24,
        1,24,3,24,1322,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,3,26,1331,
        8,26,1,26,1,26,1,26,1,26,1,26,5,26,1338,8,26,10,26,12,26,1341,9,
        26,3,26,1343,8,26,1,26,1,26,1,26,1,26,1,26,5,26,1350,8,26,10,26,
        12,26,1353,9,26,3,26,1355,8,26,1,26,3,26,1358,8,26,1,27,1,27,3,27,
        1362,8,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,3,29,1373,
        8,29,1,29,3,29,1376,8,29,1,29,1,29,1,29,1,29,1,29,3,29,1383,8,29,
        1,29,3,29,1386,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1405,8,30,5,30,1407,
        8,30,10,30,12,30,1410,9,30,1,31,3,31,1413,8,31,1,31,1,31,3,31,1417,
        8,31,1,31,1,31,3,31,1421,8,31,1,31,1,31,3,31,1425,8,31,3,31,1427,
        8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,1436,8,32,10,32,12,
        32,1439,9,32,1,32,1,32,3,32,1443,8,32,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,3,33,1452,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,3,36,1461,
        8,36,1,36,3,36,1464,8,36,1,37,1,37,1,37,1,37,3,37,1470,8,37,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,38,1480,8,38,10,38,12,38,1483,
        9,38,3,38,1485,8,38,1,38,1,38,1,38,1,38,1,38,5,38,1492,8,38,10,38,
        12,38,1495,9,38,3,38,1497,8,38,1,38,1,38,1,38,1,38,5,38,1503,8,38,
        10,38,12,38,1506,9,38,3,38,1508,8,38,1,38,3,38,1511,8,38,1,38,1,
        38,1,38,3,38,1516,8,38,1,38,3,38,1519,8,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,5,38,1529,8,38,10,38,12,38,1532,9,38,3,38,1534,
        8,38,1,38,1,38,1,38,1,38,5,38,1540,8,38,10,38,12,38,1543,9,38,1,
        38,1,38,3,38,1547,8,38,1,38,1,38,3,38,1551,8,38,3,38,1553,8,38,3,
        38,1555,8,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,3,40,1570,8,40,3,40,1572,8,40,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,3,41,1583,8,41,1,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
        42,3,42,1604,8,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,1612,8,43,10,
        43,12,43,1615,9,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,3,45,
        1625,8,45,1,45,1,45,3,45,1629,8,45,3,45,1631,8,45,1,46,1,46,1,46,
        1,46,5,46,1637,8,46,10,46,12,46,1640,9,46,1,46,1,46,1,47,1,47,3,
        47,1646,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,1657,
        8,47,10,47,12,47,1660,9,47,1,47,1,47,1,47,3,47,1665,8,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,
        47,1681,8,47,1,48,1,48,1,48,1,48,1,48,5,48,1688,8,48,10,48,12,48,
        1691,9,48,3,48,1693,8,48,1,48,1,48,1,48,1,48,5,48,1699,8,48,10,48,
        12,48,1702,9,48,3,48,1704,8,48,1,48,1,48,1,49,1,49,1,49,3,49,1711,
        8,49,1,49,1,49,1,49,3,49,1716,8,49,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,5,50,1725,8,50,10,50,12,50,1728,9,50,3,50,1730,8,50,1,50,1,
        50,3,50,1734,8,50,3,50,1736,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,
        50,1744,8,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,1752,8,50,10,50,
        12,50,1755,9,50,1,50,1,50,1,50,3,50,1760,8,50,3,50,1762,8,50,1,51,
        1,51,1,51,1,51,1,51,3,51,1769,8,51,1,51,1,51,3,51,1773,8,51,3,51,
        1775,8,51,1,51,1,51,1,51,1,51,1,51,3,51,1782,8,51,1,51,1,51,3,51,
        1786,8,51,3,51,1788,8,51,3,51,1790,8,51,1,52,1,52,1,52,1,52,1,52,
        5,52,1797,8,52,10,52,12,52,1800,9,52,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,3,52,1810,8,52,1,53,1,53,3,53,1814,8,53,1,54,1,54,1,
        54,1,54,1,54,1,54,5,54,1822,8,54,10,54,12,54,1825,9,54,1,54,1,54,
        1,55,1,55,1,56,1,56,1,56,3,56,1834,8,56,1,56,1,56,3,56,1838,8,56,
        1,56,1,56,1,56,1,56,1,56,1,56,5,56,1846,8,56,10,56,12,56,1849,9,
        56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1861,8,
        57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1869,8,57,1,57,1,57,1,57,1,
        57,1,57,5,57,1876,8,57,10,57,12,57,1879,9,57,1,57,1,57,1,57,3,57,
        1884,8,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1892,8,57,1,57,1,57,
        1,57,1,57,3,57,1898,8,57,1,57,1,57,3,57,1902,8,57,1,57,1,57,1,57,
        3,57,1907,8,57,1,57,1,57,1,57,3,57,1912,8,57,1,58,1,58,1,58,1,58,
        3,58,1918,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,5,58,1932,8,58,10,58,12,58,1935,9,58,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,4,59,1962,8,59,11,59,
        12,59,1963,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,1973,8,59,10,
        59,12,59,1976,9,59,1,59,1,59,1,59,1,59,1,59,3,59,1983,8,59,1,59,
        1,59,1,59,3,59,1988,8,59,1,59,1,59,1,59,3,59,1993,8,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2004,8,59,10,59,12,59,2007,
        9,59,1,59,1,59,1,59,3,59,2012,8,59,1,59,1,59,1,59,1,59,1,59,3,59,
        2019,8,59,1,59,1,59,1,59,3,59,2024,8,59,1,59,3,59,2027,8,59,1,59,
        3,59,2030,8,59,1,59,1,59,1,59,3,59,2035,8,59,1,59,1,59,1,59,5,59,
        2040,8,59,10,59,12,59,2043,9,59,3,59,2045,8,59,1,59,1,59,1,59,1,
        59,1,59,5,59,2052,8,59,10,59,12,59,2055,9,59,3,59,2057,8,59,1,59,
        1,59,3,59,2061,8,59,1,59,3,59,2064,8,59,1,59,3,59,2067,8,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2080,8,59,
        10,59,12,59,2083,9,59,3,59,2085,8,59,1,59,1,59,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,4,59,2102,8,59,11,
        59,12,59,2103,1,59,1,59,3,59,2108,8,59,1,59,1,59,1,59,1,59,4,59,
        2114,8,59,11,59,12,59,2115,1,59,1,59,3,59,2120,8,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,5,59,2143,8,59,10,59,12,59,2146,9,59,
        3,59,2148,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2157,8,59,
        1,59,1,59,1,59,1,59,3,59,2163,8,59,1,59,1,59,1,59,1,59,3,59,2169,
        8,59,1,59,1,59,1,59,1,59,3,59,2175,8,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,3,59,2184,8,59,1,59,3,59,2187,8,59,1,59,3,59,2190,8,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,3,59,2209,8,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,3,59,2218,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2238,8,59,10,59,
        12,59,2241,9,59,3,59,2243,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,3,59,2253,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2262,
        8,59,1,59,1,59,1,59,1,59,3,59,2268,8,59,1,59,1,59,1,59,1,59,3,59,
        2274,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2285,
        8,59,3,59,2287,8,59,1,59,1,59,1,59,3,59,2292,8,59,1,59,1,59,1,59,
        1,59,1,59,3,59,2299,8,59,3,59,2301,8,59,1,59,1,59,1,59,1,59,3,59,
        2307,8,59,1,59,1,59,1,59,1,59,3,59,2313,8,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,5,59,2322,8,59,10,59,12,59,2325,9,59,1,59,1,59,1,
        59,1,59,1,59,1,59,3,59,2333,8,59,1,59,1,59,1,59,3,59,2338,8,59,1,
        59,1,59,1,59,3,59,2343,8,59,3,59,2345,8,59,3,59,2347,8,59,1,59,1,
        59,1,59,1,59,3,59,2353,8,59,3,59,2355,8,59,1,59,1,59,1,59,1,59,1,
        59,1,59,5,59,2363,8,59,10,59,12,59,2366,9,59,1,59,1,59,1,59,1,59,
        1,59,1,59,3,59,2374,8,59,3,59,2376,8,59,1,59,1,59,1,59,1,59,3,59,
        2382,8,59,3,59,2384,8,59,1,59,3,59,2387,8,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,5,59,2397,8,59,10,59,12,59,2400,9,59,1,60,1,
        60,1,60,1,60,1,60,1,60,1,60,5,60,2409,8,60,10,60,12,60,2412,9,60,
        3,60,2414,8,60,1,61,1,61,1,61,3,61,2419,8,61,1,62,1,62,1,62,3,62,
        2424,8,62,1,63,1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,65,3,65,
        2436,8,65,1,66,1,66,3,66,2440,8,66,1,66,1,66,3,66,2444,8,66,1,66,
        3,66,2447,8,66,3,66,2449,8,66,1,67,1,67,1,67,1,67,1,67,1,67,3,67,
        2457,8,67,1,68,3,68,2460,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,3,68,2470,8,68,1,69,1,69,1,70,1,70,1,70,1,70,3,70,2478,8,70,
        1,71,1,71,1,71,1,71,3,71,2484,8,71,3,71,2486,8,71,1,72,1,72,1,72,
        1,72,1,72,1,72,3,72,2494,8,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,
        1,76,3,76,2504,8,76,1,76,1,76,1,76,1,76,3,76,2510,8,76,1,77,1,77,
        1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,5,79,2522,8,79,10,79,12,
        79,2525,9,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,2533,8,79,1,79,1,
        79,1,79,1,79,1,79,3,79,2540,8,79,1,79,1,79,1,79,3,79,2545,8,79,1,
        79,1,79,1,79,1,79,1,79,3,79,2552,8,79,1,79,1,79,1,79,1,79,1,79,1,
        79,1,79,1,79,3,79,2562,8,79,1,79,1,79,1,79,3,79,2567,8,79,1,79,1,
        79,1,79,1,79,1,79,3,79,2574,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,
        79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,
        79,1,79,1,79,5,79,2598,8,79,10,79,12,79,2601,9,79,1,79,1,79,3,79,
        2605,8,79,3,79,2607,8,79,1,79,1,79,1,79,1,79,1,79,3,79,2614,8,79,
        5,79,2616,8,79,10,79,12,79,2619,9,79,1,80,1,80,1,80,1,80,3,80,2625,
        8,80,1,81,1,81,3,81,2629,8,81,1,82,1,82,1,82,1,82,1,82,1,83,1,83,
        1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,3,84,2646,8,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,5,84,2659,8,84,10,84,
        12,84,2662,9,84,1,84,1,84,1,84,1,84,3,84,2668,8,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,3,84,2677,8,84,1,84,1,84,1,84,1,84,1,84,1,84,
        5,84,2685,8,84,10,84,12,84,2688,9,84,1,84,1,84,3,84,2692,8,84,1,
        84,1,84,1,84,1,84,1,84,5,84,2699,8,84,10,84,12,84,2702,9,84,1,84,
        1,84,3,84,2706,8,84,1,85,1,85,1,85,1,85,1,85,1,85,3,85,2714,8,85,
        1,86,1,86,1,86,1,86,5,86,2720,8,86,10,86,12,86,2723,9,86,3,86,2725,
        8,86,1,86,1,86,1,86,1,86,3,86,2731,8,86,1,86,3,86,2734,8,86,1,86,
        1,86,1,86,1,86,1,86,3,86,2741,8,86,1,86,1,86,1,86,1,86,5,86,2747,
        8,86,10,86,12,86,2750,9,86,3,86,2752,8,86,1,86,1,86,1,86,1,86,5,
        86,2758,8,86,10,86,12,86,2761,9,86,3,86,2763,8,86,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2789,8,87,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,2800,8,88,1,89,1,89,1,89,
        3,89,2805,8,89,1,89,1,89,1,89,1,89,1,89,5,89,2812,8,89,10,89,12,
        89,2815,9,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,5,90,2825,8,
        90,10,90,12,90,2828,9,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,3,90,2842,8,90,1,91,1,91,3,91,2846,8,91,1,91,
        1,91,3,91,2850,8,91,1,91,1,91,3,91,2854,8,91,1,91,1,91,1,91,1,91,
        3,91,2860,8,91,1,91,1,91,3,91,2864,8,91,1,91,1,91,3,91,2868,8,91,
        1,91,1,91,3,91,2872,8,91,3,91,2874,8,91,1,92,1,92,1,92,1,92,1,93,
        1,93,1,93,1,93,3,93,2884,8,93,1,94,1,94,1,94,1,94,1,94,3,94,2891,
        8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2900,8,95,1,96,1,96,
        1,96,1,96,1,96,3,96,2907,8,96,1,97,1,97,1,97,1,97,1,97,3,97,2914,
        8,97,1,98,1,98,1,98,5,98,2919,8,98,10,98,12,98,2922,9,98,1,99,1,
        99,1,100,1,100,1,100,5,100,2929,8,100,10,100,12,100,2932,9,100,1,
        101,1,101,1,101,1,101,1,101,1,101,1,102,1,102,1,103,1,103,1,103,
        3,103,2945,8,103,1,104,1,104,1,104,1,104,1,104,3,104,2952,8,104,
        1,105,1,105,1,105,5,105,2957,8,105,10,105,12,105,2960,9,105,1,106,
        1,106,1,106,1,106,1,106,3,106,2967,8,106,1,107,3,107,2970,8,107,
        1,107,1,107,3,107,2974,8,107,1,107,1,107,3,107,2978,8,107,1,107,
        3,107,2981,8,107,1,108,1,108,1,108,0,7,36,60,112,116,118,158,178,
        109,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,0,34,
        2,0,37,37,213,213,2,0,69,69,123,123,2,0,225,225,242,242,2,0,99,99,
        114,114,2,0,86,86,115,115,1,0,221,222,2,0,95,95,160,160,2,0,304,
        304,308,308,2,0,85,85,263,263,2,0,29,29,72,72,2,0,95,95,137,137,
        2,0,22,22,75,75,2,0,32,32,241,241,3,0,34,34,139,139,252,252,2,0,
        116,116,229,229,1,0,298,299,1,0,300,302,2,0,134,134,175,175,1,0,
        272,274,4,0,83,83,91,91,255,255,265,265,2,0,47,47,262,262,2,0,94,
        94,223,223,1,0,292,297,3,0,22,22,26,26,236,236,2,0,91,91,255,255,
        5,0,65,65,111,111,157,158,227,227,290,290,1,0,161,164,2,0,96,96,
        197,197,3,0,106,106,128,128,245,245,4,0,76,76,124,124,148,148,275,
        275,2,0,178,178,289,289,5,0,51,51,70,70,119,119,230,230,268,268,
        2,0,250,250,279,279,54,0,18,22,24,24,26,27,29,32,34,34,36,37,40,
        47,49,50,54,54,63,65,67,69,71,72,74,74,76,77,80,81,83,83,86,86,89,
        89,92,96,98,98,101,106,109,109,111,113,115,116,118,118,121,121,123,
        124,126,126,128,128,134,139,141,141,143,143,145,145,148,158,160,
        166,170,175,177,179,182,182,184,198,200,205,207,215,217,219,221,
        229,231,241,243,246,248,253,256,258,260,262,264,266,268,270,272,
        276,278,280,283,283,285,291,3461,0,218,1,0,0,0,2,221,1,0,0,0,4,224,
        1,0,0,0,6,227,1,0,0,0,8,230,1,0,0,0,10,1058,1,0,0,0,12,1061,1,0,
        0,0,14,1065,1,0,0,0,16,1079,1,0,0,0,18,1081,1,0,0,0,20,1095,1,0,
        0,0,22,1101,1,0,0,0,24,1105,1,0,0,0,26,1113,1,0,0,0,28,1119,1,0,
        0,0,30,1121,1,0,0,0,32,1158,1,0,0,0,34,1160,1,0,0,0,36,1162,1,0,
        0,0,38,1198,1,0,0,0,40,1200,1,0,0,0,42,1208,1,0,0,0,44,1256,1,0,
        0,0,46,1306,1,0,0,0,48,1321,1,0,0,0,50,1323,1,0,0,0,52,1330,1,0,
        0,0,54,1359,1,0,0,0,56,1368,1,0,0,0,58,1385,1,0,0,0,60,1387,1,0,
        0,0,62,1426,1,0,0,0,64,1442,1,0,0,0,66,1444,1,0,0,0,68,1453,1,0,
        0,0,70,1455,1,0,0,0,72,1463,1,0,0,0,74,1469,1,0,0,0,76,1471,1,0,
        0,0,78,1556,1,0,0,0,80,1571,1,0,0,0,82,1582,1,0,0,0,84,1603,1,0,
        0,0,86,1605,1,0,0,0,88,1618,1,0,0,0,90,1622,1,0,0,0,92,1632,1,0,
        0,0,94,1680,1,0,0,0,96,1682,1,0,0,0,98,1710,1,0,0,0,100,1717,1,0,
        0,0,102,1789,1,0,0,0,104,1809,1,0,0,0,106,1811,1,0,0,0,108,1815,
        1,0,0,0,110,1828,1,0,0,0,112,1837,1,0,0,0,114,1911,1,0,0,0,116,1917,
        1,0,0,0,118,2386,1,0,0,0,120,2401,1,0,0,0,122,2415,1,0,0,0,124,2420,
        1,0,0,0,126,2425,1,0,0,0,128,2429,1,0,0,0,130,2435,1,0,0,0,132,2448,
        1,0,0,0,134,2456,1,0,0,0,136,2469,1,0,0,0,138,2471,1,0,0,0,140,2477,
        1,0,0,0,142,2485,1,0,0,0,144,2493,1,0,0,0,146,2495,1,0,0,0,148,2497,
        1,0,0,0,150,2499,1,0,0,0,152,2501,1,0,0,0,154,2511,1,0,0,0,156,2513,
        1,0,0,0,158,2606,1,0,0,0,160,2624,1,0,0,0,162,2628,1,0,0,0,164,2630,
        1,0,0,0,166,2635,1,0,0,0,168,2705,1,0,0,0,170,2707,1,0,0,0,172,2724,
        1,0,0,0,174,2788,1,0,0,0,176,2799,1,0,0,0,178,2801,1,0,0,0,180,2841,
        1,0,0,0,182,2873,1,0,0,0,184,2875,1,0,0,0,186,2883,1,0,0,0,188,2890,
        1,0,0,0,190,2899,1,0,0,0,192,2906,1,0,0,0,194,2913,1,0,0,0,196,2915,
        1,0,0,0,198,2923,1,0,0,0,200,2925,1,0,0,0,202,2933,1,0,0,0,204,2939,
        1,0,0,0,206,2944,1,0,0,0,208,2951,1,0,0,0,210,2953,1,0,0,0,212,2966,
        1,0,0,0,214,2980,1,0,0,0,216,2982,1,0,0,0,218,219,3,10,5,0,219,220,
        5,0,0,1,220,1,1,0,0,0,221,222,3,110,55,0,222,223,5,0,0,1,223,3,1,
        0,0,0,224,225,3,196,98,0,225,226,5,0,0,1,226,5,1,0,0,0,227,228,3,
        158,79,0,228,229,5,0,0,1,229,7,1,0,0,0,230,231,3,178,89,0,231,232,
        5,0,0,1,232,9,1,0,0,0,233,1059,3,12,6,0,234,235,5,269,0,0,235,1059,
        3,212,106,0,236,237,5,269,0,0,237,238,3,212,106,0,238,239,5,1,0,
        0,239,240,3,212,106,0,240,1059,1,0,0,0,241,242,5,51,0,0,242,246,
        5,40,0,0,243,244,5,112,0,0,244,245,5,168,0,0,245,247,5,88,0,0,246,
        243,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,3,212,106,0,
        249,250,5,271,0,0,250,253,3,212,106,0,251,252,5,44,0,0,252,254,3,
        142,71,0,253,251,1,0,0,0,253,254,1,0,0,0,254,257,1,0,0,0,255,256,
        5,31,0,0,256,258,3,208,104,0,257,255,1,0,0,0,257,258,1,0,0,0,258,
        261,1,0,0,0,259,260,5,284,0,0,260,262,3,22,11,0,261,259,1,0,0,0,
        261,262,1,0,0,0,262,1059,1,0,0,0,263,264,5,78,0,0,264,267,5,40,0,
        0,265,266,5,112,0,0,266,268,5,88,0,0,267,265,1,0,0,0,267,268,1,0,
        0,0,268,269,1,0,0,0,269,271,3,212,106,0,270,272,7,0,0,0,271,270,
        1,0,0,0,271,272,1,0,0,0,272,1059,1,0,0,0,273,274,5,51,0,0,274,278,
        5,225,0,0,275,276,5,112,0,0,276,277,5,168,0,0,277,279,5,88,0,0,278,
        275,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,283,3,200,100,0,
        281,282,5,31,0,0,282,284,3,208,104,0,283,281,1,0,0,0,283,284,1,0,
        0,0,284,287,1,0,0,0,285,286,5,284,0,0,286,288,3,22,11,0,287,285,
        1,0,0,0,287,288,1,0,0,0,288,1059,1,0,0,0,289,290,5,78,0,0,290,293,
        5,225,0,0,291,292,5,112,0,0,292,294,5,88,0,0,293,291,1,0,0,0,293,
        294,1,0,0,0,294,295,1,0,0,0,295,297,3,200,100,0,296,298,7,0,0,0,
        297,296,1,0,0,0,297,298,1,0,0,0,298,1059,1,0,0,0,299,300,5,23,0,
        0,300,301,5,225,0,0,301,302,3,200,100,0,302,303,5,208,0,0,303,304,
        5,251,0,0,304,305,3,212,106,0,305,1059,1,0,0,0,306,307,5,23,0,0,
        307,308,5,225,0,0,308,309,3,200,100,0,309,310,5,233,0,0,310,311,
        5,31,0,0,311,312,3,208,104,0,312,1059,1,0,0,0,313,314,5,51,0,0,314,
        318,5,242,0,0,315,316,5,112,0,0,316,317,5,168,0,0,317,319,5,88,0,
        0,318,315,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,322,3,200,
        100,0,321,323,3,92,46,0,322,321,1,0,0,0,322,323,1,0,0,0,323,326,
        1,0,0,0,324,325,5,44,0,0,325,327,3,142,71,0,326,324,1,0,0,0,326,
        327,1,0,0,0,327,330,1,0,0,0,328,329,5,284,0,0,329,331,3,22,11,0,
        330,328,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,338,5,28,0,0,
        333,339,3,12,6,0,334,335,5,2,0,0,335,336,3,12,6,0,336,337,5,3,0,
        0,337,339,1,0,0,0,338,333,1,0,0,0,338,334,1,0,0,0,339,345,1,0,0,
        0,340,342,5,284,0,0,341,343,5,165,0,0,342,341,1,0,0,0,342,343,1,
        0,0,0,343,344,1,0,0,0,344,346,5,63,0,0,345,340,1,0,0,0,345,346,1,
        0,0,0,346,1059,1,0,0,0,347,348,5,51,0,0,348,352,5,242,0,0,349,350,
        5,112,0,0,350,351,5,168,0,0,351,353,5,88,0,0,352,349,1,0,0,0,352,
        353,1,0,0,0,353,354,1,0,0,0,354,355,3,200,100,0,355,356,5,2,0,0,
        356,361,3,16,8,0,357,358,5,4,0,0,358,360,3,16,8,0,359,357,1,0,0,
        0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,
        0,363,361,1,0,0,0,364,367,5,3,0,0,365,366,5,44,0,0,366,368,3,142,
        71,0,367,365,1,0,0,0,367,368,1,0,0,0,368,371,1,0,0,0,369,370,5,284,
        0,0,370,372,3,22,11,0,371,369,1,0,0,0,371,372,1,0,0,0,372,1059,1,
        0,0,0,373,374,5,78,0,0,374,377,5,242,0,0,375,376,5,112,0,0,376,378,
        5,88,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,1059,
        3,200,100,0,380,381,5,119,0,0,381,382,5,122,0,0,382,384,3,200,100,
        0,383,385,3,92,46,0,384,383,1,0,0,0,384,385,1,0,0,0,385,386,1,0,
        0,0,386,387,3,12,6,0,387,1059,1,0,0,0,388,389,5,70,0,0,389,390,5,
        99,0,0,390,393,3,200,100,0,391,392,5,282,0,0,392,394,3,112,56,0,
        393,391,1,0,0,0,393,394,1,0,0,0,394,1059,1,0,0,0,395,396,5,256,0,
        0,396,397,5,242,0,0,397,1059,3,200,100,0,398,399,5,44,0,0,399,400,
        5,176,0,0,400,401,5,242,0,0,401,402,3,200,100,0,402,405,5,125,0,
        0,403,406,3,142,71,0,404,406,5,169,0,0,405,403,1,0,0,0,405,404,1,
        0,0,0,406,1059,1,0,0,0,407,408,5,44,0,0,408,409,5,176,0,0,409,410,
        5,280,0,0,410,411,3,200,100,0,411,414,5,125,0,0,412,415,3,142,71,
        0,413,415,5,169,0,0,414,412,1,0,0,0,414,413,1,0,0,0,415,1059,1,0,
        0,0,416,417,5,44,0,0,417,418,5,176,0,0,418,419,5,42,0,0,419,420,
        3,200,100,0,420,423,5,125,0,0,421,424,3,142,71,0,422,424,5,169,0,
        0,423,421,1,0,0,0,423,422,1,0,0,0,424,1059,1,0,0,0,425,426,5,23,
        0,0,426,429,5,242,0,0,427,428,5,112,0,0,428,430,5,88,0,0,429,427,
        1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,3,200,100,0,432,
        433,5,208,0,0,433,434,5,251,0,0,434,435,3,200,100,0,435,1059,1,0,
        0,0,436,437,5,23,0,0,437,440,5,242,0,0,438,439,5,112,0,0,439,441,
        5,88,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,443,
        3,200,100,0,443,444,5,19,0,0,444,448,5,42,0,0,445,446,5,112,0,0,
        446,447,5,168,0,0,447,449,5,88,0,0,448,445,1,0,0,0,448,449,1,0,0,
        0,449,450,1,0,0,0,450,451,3,18,9,0,451,1059,1,0,0,0,452,453,5,23,
        0,0,453,456,5,242,0,0,454,455,5,112,0,0,455,457,5,88,0,0,456,454,
        1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,459,3,200,100,0,459,
        460,5,208,0,0,460,463,5,42,0,0,461,462,5,112,0,0,462,464,5,88,0,
        0,463,461,1,0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,466,3,212,
        106,0,466,467,5,251,0,0,467,468,3,212,106,0,468,1059,1,0,0,0,469,
        470,5,23,0,0,470,473,5,242,0,0,471,472,5,112,0,0,472,474,5,88,0,
        0,473,471,1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,476,3,200,
        100,0,476,477,5,78,0,0,477,480,5,42,0,0,478,479,5,112,0,0,479,481,
        5,88,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,483,
        3,200,100,0,483,1059,1,0,0,0,484,485,5,23,0,0,485,488,5,242,0,0,
        486,487,5,112,0,0,487,489,5,88,0,0,488,486,1,0,0,0,488,489,1,0,0,
        0,489,490,1,0,0,0,490,491,3,200,100,0,491,492,5,23,0,0,492,493,5,
        42,0,0,493,494,3,212,106,0,494,495,5,233,0,0,495,496,5,63,0,0,496,
        497,5,258,0,0,497,498,3,158,79,0,498,1059,1,0,0,0,499,500,5,23,0,
        0,500,501,5,242,0,0,501,502,3,200,100,0,502,503,5,233,0,0,503,504,
        5,31,0,0,504,505,3,208,104,0,505,1059,1,0,0,0,506,507,5,23,0,0,507,
        508,5,242,0,0,508,509,3,200,100,0,509,510,5,233,0,0,510,511,5,201,
        0,0,511,512,3,24,12,0,512,1059,1,0,0,0,513,514,5,23,0,0,514,515,
        5,242,0,0,515,516,3,200,100,0,516,517,5,87,0,0,517,530,3,212,106,
        0,518,527,5,2,0,0,519,524,3,192,96,0,520,521,5,4,0,0,521,523,3,192,
        96,0,522,520,1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,
        0,0,525,528,1,0,0,0,526,524,1,0,0,0,527,519,1,0,0,0,527,528,1,0,
        0,0,528,529,1,0,0,0,529,531,5,3,0,0,530,518,1,0,0,0,530,531,1,0,
        0,0,531,534,1,0,0,0,532,533,5,282,0,0,533,535,3,112,56,0,534,532,
        1,0,0,0,534,535,1,0,0,0,535,1059,1,0,0,0,536,537,5,24,0,0,537,540,
        3,200,100,0,538,539,5,284,0,0,539,541,3,22,11,0,540,538,1,0,0,0,
        540,541,1,0,0,0,541,1059,1,0,0,0,542,545,5,51,0,0,543,544,5,180,
        0,0,544,546,5,210,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,547,1,
        0,0,0,547,548,5,154,0,0,548,552,5,280,0,0,549,550,5,112,0,0,550,
        551,5,168,0,0,551,553,5,88,0,0,552,549,1,0,0,0,552,553,1,0,0,0,553,
        554,1,0,0,0,554,558,3,200,100,0,555,556,5,102,0,0,556,557,5,194,
        0,0,557,559,3,152,76,0,558,555,1,0,0,0,558,559,1,0,0,0,559,562,1,
        0,0,0,560,561,5,44,0,0,561,563,3,142,71,0,562,560,1,0,0,0,562,563,
        1,0,0,0,563,566,1,0,0,0,564,565,5,284,0,0,565,567,3,22,11,0,566,
        564,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,569,5,28,0,0,569,
        570,3,12,6,0,570,1059,1,0,0,0,571,574,5,51,0,0,572,573,5,180,0,0,
        573,575,5,210,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,
        0,576,577,5,280,0,0,577,580,3,200,100,0,578,579,5,44,0,0,579,581,
        3,142,71,0,580,578,1,0,0,0,580,581,1,0,0,0,581,584,1,0,0,0,582,583,
        5,228,0,0,583,585,7,1,0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,586,
        1,0,0,0,586,587,5,28,0,0,587,588,3,12,6,0,588,1059,1,0,0,0,589,590,
        5,207,0,0,590,591,5,154,0,0,591,592,5,280,0,0,592,1059,3,200,100,
        0,593,594,5,78,0,0,594,595,5,154,0,0,595,598,5,280,0,0,596,597,5,
        112,0,0,597,599,5,88,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,600,
        1,0,0,0,600,1059,3,200,100,0,601,602,5,23,0,0,602,603,5,154,0,0,
        603,606,5,280,0,0,604,605,5,112,0,0,605,607,5,88,0,0,606,604,1,0,
        0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,609,3,200,100,0,609,610,
        5,208,0,0,610,611,5,251,0,0,611,612,3,200,100,0,612,1059,1,0,0,0,
        613,614,5,23,0,0,614,615,5,154,0,0,615,616,5,280,0,0,616,617,3,200,
        100,0,617,618,5,233,0,0,618,619,5,201,0,0,619,620,3,24,12,0,620,
        1059,1,0,0,0,621,622,5,78,0,0,622,625,5,280,0,0,623,624,5,112,0,
        0,624,626,5,88,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,627,1,0,0,
        0,627,1059,3,200,100,0,628,629,5,23,0,0,629,630,5,280,0,0,630,631,
        3,200,100,0,631,632,5,208,0,0,632,633,5,251,0,0,633,634,3,200,100,
        0,634,1059,1,0,0,0,635,636,5,23,0,0,636,637,5,280,0,0,637,638,3,
        200,100,0,638,639,5,233,0,0,639,640,5,31,0,0,640,641,3,208,104,0,
        641,1059,1,0,0,0,642,643,5,36,0,0,643,644,3,200,100,0,644,653,5,
        2,0,0,645,650,3,192,96,0,646,647,5,4,0,0,647,649,3,192,96,0,648,
        646,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,
        654,1,0,0,0,652,650,1,0,0,0,653,645,1,0,0,0,653,654,1,0,0,0,654,
        655,1,0,0,0,655,656,5,3,0,0,656,1059,1,0,0,0,657,658,5,51,0,0,658,
        659,5,217,0,0,659,663,3,212,106,0,660,661,5,284,0,0,661,662,5,20,
        0,0,662,664,3,206,103,0,663,660,1,0,0,0,663,664,1,0,0,0,664,667,
        1,0,0,0,665,666,5,114,0,0,666,668,3,212,106,0,667,665,1,0,0,0,667,
        668,1,0,0,0,668,1059,1,0,0,0,669,670,5,78,0,0,670,671,5,217,0,0,
        671,674,3,212,106,0,672,673,5,114,0,0,673,675,3,212,106,0,674,672,
        1,0,0,0,674,675,1,0,0,0,675,1059,1,0,0,0,676,677,5,103,0,0,677,678,
        3,210,105,0,678,679,5,251,0,0,679,684,3,208,104,0,680,681,5,4,0,
        0,681,683,3,208,104,0,682,680,1,0,0,0,683,686,1,0,0,0,684,682,1,
        0,0,0,684,685,1,0,0,0,685,690,1,0,0,0,686,684,1,0,0,0,687,688,5,
        284,0,0,688,689,5,20,0,0,689,691,5,179,0,0,690,687,1,0,0,0,690,691,
        1,0,0,0,691,695,1,0,0,0,692,693,5,104,0,0,693,694,5,35,0,0,694,696,
        3,206,103,0,695,692,1,0,0,0,695,696,1,0,0,0,696,699,1,0,0,0,697,
        698,5,114,0,0,698,700,3,212,106,0,699,697,1,0,0,0,699,700,1,0,0,
        0,700,1059,1,0,0,0,701,705,5,215,0,0,702,703,5,20,0,0,703,704,5,
        179,0,0,704,706,5,97,0,0,705,702,1,0,0,0,705,706,1,0,0,0,706,707,
        1,0,0,0,707,708,3,210,105,0,708,709,5,99,0,0,709,714,3,208,104,0,
        710,711,5,4,0,0,711,713,3,208,104,0,712,710,1,0,0,0,713,716,1,0,
        0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,720,1,0,0,0,716,714,1,0,
        0,0,717,718,5,104,0,0,718,719,5,35,0,0,719,721,3,206,103,0,720,717,
        1,0,0,0,720,721,1,0,0,0,721,724,1,0,0,0,722,723,5,114,0,0,723,725,
        3,212,106,0,724,722,1,0,0,0,724,725,1,0,0,0,725,1059,1,0,0,0,726,
        727,5,233,0,0,727,731,5,217,0,0,728,732,5,22,0,0,729,732,5,166,0,
        0,730,732,3,212,106,0,731,728,1,0,0,0,731,729,1,0,0,0,731,730,1,
        0,0,0,732,735,1,0,0,0,733,734,5,114,0,0,734,736,3,212,106,0,735,
        733,1,0,0,0,735,736,1,0,0,0,736,1059,1,0,0,0,737,748,5,103,0,0,738,
        743,3,198,99,0,739,740,5,4,0,0,740,742,3,198,99,0,741,739,1,0,0,
        0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,749,1,0,0,
        0,745,743,1,0,0,0,746,747,5,22,0,0,747,749,5,200,0,0,748,738,1,0,
        0,0,748,746,1,0,0,0,749,750,1,0,0,0,750,752,5,176,0,0,751,753,7,
        2,0,0,752,751,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,755,3,
        200,100,0,755,756,5,251,0,0,756,760,3,208,104,0,757,758,5,284,0,
        0,758,759,5,103,0,0,759,761,5,179,0,0,760,757,1,0,0,0,760,761,1,
        0,0,0,761,1059,1,0,0,0,762,773,5,71,0,0,763,768,3,198,99,0,764,765,
        5,4,0,0,765,767,3,198,99,0,766,764,1,0,0,0,767,770,1,0,0,0,768,766,
        1,0,0,0,768,769,1,0,0,0,769,774,1,0,0,0,770,768,1,0,0,0,771,772,
        5,22,0,0,772,774,5,200,0,0,773,763,1,0,0,0,773,771,1,0,0,0,774,775,
        1,0,0,0,775,777,5,176,0,0,776,778,7,2,0,0,777,776,1,0,0,0,777,778,
        1,0,0,0,778,779,1,0,0,0,779,780,3,200,100,0,780,781,5,251,0,0,781,
        782,3,208,104,0,782,1059,1,0,0,0,783,787,5,215,0,0,784,785,5,103,
        0,0,785,786,5,179,0,0,786,788,5,97,0,0,787,784,1,0,0,0,787,788,1,
        0,0,0,788,799,1,0,0,0,789,794,3,198,99,0,790,791,5,4,0,0,791,793,
        3,198,99,0,792,790,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,794,795,
        1,0,0,0,795,800,1,0,0,0,796,794,1,0,0,0,797,798,5,22,0,0,798,800,
        5,200,0,0,799,789,1,0,0,0,799,797,1,0,0,0,800,801,1,0,0,0,801,803,
        5,176,0,0,802,804,7,2,0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,805,
        1,0,0,0,805,806,3,200,100,0,806,807,5,99,0,0,807,808,3,208,104,0,
        808,1059,1,0,0,0,809,810,5,235,0,0,810,816,5,105,0,0,811,813,5,176,
        0,0,812,814,5,242,0,0,813,812,1,0,0,0,813,814,1,0,0,0,814,815,1,
        0,0,0,815,817,3,200,100,0,816,811,1,0,0,0,816,817,1,0,0,0,817,1059,
        1,0,0,0,818,830,5,89,0,0,819,820,5,2,0,0,820,825,3,186,93,0,821,
        822,5,4,0,0,822,824,3,186,93,0,823,821,1,0,0,0,824,827,1,0,0,0,825,
        823,1,0,0,0,825,826,1,0,0,0,826,828,1,0,0,0,827,825,1,0,0,0,828,
        829,5,3,0,0,829,831,1,0,0,0,830,819,1,0,0,0,830,831,1,0,0,0,831,
        832,1,0,0,0,832,1059,3,10,5,0,833,834,5,89,0,0,834,836,5,24,0,0,
        835,837,5,278,0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,
        0,838,1059,3,10,5,0,839,840,5,235,0,0,840,841,5,51,0,0,841,842,5,
        242,0,0,842,1059,3,200,100,0,843,844,5,235,0,0,844,845,5,51,0,0,
        845,846,5,225,0,0,846,1059,3,200,100,0,847,848,5,235,0,0,848,849,
        5,51,0,0,849,850,5,280,0,0,850,1059,3,200,100,0,851,852,5,235,0,
        0,852,853,5,51,0,0,853,854,5,154,0,0,854,855,5,280,0,0,855,1059,
        3,200,100,0,856,857,5,235,0,0,857,860,5,243,0,0,858,859,7,3,0,0,
        859,861,3,200,100,0,860,858,1,0,0,0,860,861,1,0,0,0,861,868,1,0,
        0,0,862,863,5,142,0,0,863,866,3,142,71,0,864,865,5,84,0,0,865,867,
        3,142,71,0,866,864,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,862,
        1,0,0,0,868,869,1,0,0,0,869,1059,1,0,0,0,870,871,5,235,0,0,871,874,
        5,226,0,0,872,873,7,3,0,0,873,875,3,212,106,0,874,872,1,0,0,0,874,
        875,1,0,0,0,875,882,1,0,0,0,876,877,5,142,0,0,877,880,3,142,71,0,
        878,879,5,84,0,0,879,881,3,142,71,0,880,878,1,0,0,0,880,881,1,0,
        0,0,881,883,1,0,0,0,882,876,1,0,0,0,882,883,1,0,0,0,883,1059,1,0,
        0,0,884,885,5,235,0,0,885,892,5,41,0,0,886,887,5,142,0,0,887,890,
        3,142,71,0,888,889,5,84,0,0,889,891,3,142,71,0,890,888,1,0,0,0,890,
        891,1,0,0,0,891,893,1,0,0,0,892,886,1,0,0,0,892,893,1,0,0,0,893,
        1059,1,0,0,0,894,895,5,235,0,0,895,896,5,43,0,0,896,898,7,3,0,0,
        897,899,3,200,100,0,898,897,1,0,0,0,898,899,1,0,0,0,899,906,1,0,
        0,0,900,901,5,142,0,0,901,904,3,142,71,0,902,903,5,84,0,0,903,905,
        3,142,71,0,904,902,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,900,
        1,0,0,0,906,907,1,0,0,0,907,1059,1,0,0,0,908,909,5,235,0,0,909,910,
        5,238,0,0,910,911,5,97,0,0,911,1059,3,200,100,0,912,913,5,235,0,
        0,913,914,5,238,0,0,914,915,5,97,0,0,915,916,5,2,0,0,916,917,3,12,
        6,0,917,918,5,3,0,0,918,1059,1,0,0,0,919,921,5,235,0,0,920,922,5,
        54,0,0,921,920,1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,926,5,
        218,0,0,924,925,7,3,0,0,925,927,3,212,106,0,926,924,1,0,0,0,926,
        927,1,0,0,0,927,1059,1,0,0,0,928,929,5,235,0,0,929,930,5,217,0,0,
        930,933,5,105,0,0,931,932,7,3,0,0,932,934,3,212,106,0,933,931,1,
        0,0,0,933,934,1,0,0,0,934,1059,1,0,0,0,935,936,5,73,0,0,936,1059,
        3,200,100,0,937,938,5,72,0,0,938,1059,3,200,100,0,939,940,5,235,
        0,0,940,947,5,101,0,0,941,942,5,142,0,0,942,945,3,142,71,0,943,944,
        5,84,0,0,944,946,3,142,71,0,945,943,1,0,0,0,945,946,1,0,0,0,946,
        948,1,0,0,0,947,941,1,0,0,0,947,948,1,0,0,0,948,1059,1,0,0,0,949,
        950,5,235,0,0,950,957,5,232,0,0,951,952,5,142,0,0,952,955,3,142,
        71,0,953,954,5,84,0,0,954,956,3,142,71,0,955,953,1,0,0,0,955,956,
        1,0,0,0,956,958,1,0,0,0,957,951,1,0,0,0,957,958,1,0,0,0,958,1059,
        1,0,0,0,959,960,5,233,0,0,960,961,5,232,0,0,961,962,3,200,100,0,
        962,963,5,292,0,0,963,964,3,110,55,0,964,1059,1,0,0,0,965,966,5,
        211,0,0,966,967,5,232,0,0,967,1059,3,200,100,0,968,969,5,237,0,0,
        969,978,5,253,0,0,970,975,3,188,94,0,971,972,5,4,0,0,972,974,3,188,
        94,0,973,971,1,0,0,0,974,977,1,0,0,0,975,973,1,0,0,0,975,976,1,0,
        0,0,976,979,1,0,0,0,977,975,1,0,0,0,978,970,1,0,0,0,978,979,1,0,
        0,0,979,1059,1,0,0,0,980,982,5,45,0,0,981,983,5,287,0,0,982,981,
        1,0,0,0,982,983,1,0,0,0,983,1059,1,0,0,0,984,986,5,219,0,0,985,987,
        5,287,0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,1059,1,0,0,0,988,989,
        5,199,0,0,989,990,3,212,106,0,990,991,5,99,0,0,991,992,3,10,5,0,
        992,1059,1,0,0,0,993,994,5,66,0,0,994,995,5,199,0,0,995,1059,3,212,
        106,0,996,997,5,87,0,0,997,1007,3,212,106,0,998,999,5,271,0,0,999,
        1004,3,110,55,0,1000,1001,5,4,0,0,1001,1003,3,110,55,0,1002,1000,
        1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,
        1008,1,0,0,0,1006,1004,1,0,0,0,1007,998,1,0,0,0,1007,1008,1,0,0,
        0,1008,1059,1,0,0,0,1009,1010,5,73,0,0,1010,1011,5,118,0,0,1011,
        1059,3,212,106,0,1012,1013,5,73,0,0,1013,1014,5,184,0,0,1014,1059,
        3,212,106,0,1015,1016,5,233,0,0,1016,1017,5,191,0,0,1017,1059,3,
        196,98,0,1018,1019,5,233,0,0,1019,1020,5,249,0,0,1020,1023,5,291,
        0,0,1021,1024,5,145,0,0,1022,1024,3,110,55,0,1023,1021,1,0,0,0,1023,
        1022,1,0,0,0,1024,1059,1,0,0,0,1025,1026,5,268,0,0,1026,1027,3,200,
        100,0,1027,1028,5,233,0,0,1028,1033,3,184,92,0,1029,1030,5,4,0,0,
        1030,1032,3,184,92,0,1031,1029,1,0,0,0,1032,1035,1,0,0,0,1033,1031,
        1,0,0,0,1033,1034,1,0,0,0,1034,1038,1,0,0,0,1035,1033,1,0,0,0,1036,
        1037,5,282,0,0,1037,1039,3,112,56,0,1038,1036,1,0,0,0,1038,1039,
        1,0,0,0,1039,1059,1,0,0,0,1040,1041,5,156,0,0,1041,1042,5,122,0,
        0,1042,1047,3,200,100,0,1043,1045,5,28,0,0,1044,1043,1,0,0,0,1044,
        1045,1,0,0,0,1045,1046,1,0,0,0,1046,1048,3,212,106,0,1047,1044,1,
        0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,1049,1050,5,271,0,0,1050,
        1051,3,60,30,0,1051,1052,5,176,0,0,1052,1054,3,110,55,0,1053,1055,
        3,168,84,0,1054,1053,1,0,0,0,1055,1056,1,0,0,0,1056,1054,1,0,0,0,
        1056,1057,1,0,0,0,1057,1059,1,0,0,0,1058,233,1,0,0,0,1058,234,1,
        0,0,0,1058,236,1,0,0,0,1058,241,1,0,0,0,1058,263,1,0,0,0,1058,273,
        1,0,0,0,1058,289,1,0,0,0,1058,299,1,0,0,0,1058,306,1,0,0,0,1058,
        313,1,0,0,0,1058,347,1,0,0,0,1058,373,1,0,0,0,1058,380,1,0,0,0,1058,
        388,1,0,0,0,1058,395,1,0,0,0,1058,398,1,0,0,0,1058,407,1,0,0,0,1058,
        416,1,0,0,0,1058,425,1,0,0,0,1058,436,1,0,0,0,1058,452,1,0,0,0,1058,
        469,1,0,0,0,1058,484,1,0,0,0,1058,499,1,0,0,0,1058,506,1,0,0,0,1058,
        513,1,0,0,0,1058,536,1,0,0,0,1058,542,1,0,0,0,1058,571,1,0,0,0,1058,
        589,1,0,0,0,1058,593,1,0,0,0,1058,601,1,0,0,0,1058,613,1,0,0,0,1058,
        621,1,0,0,0,1058,628,1,0,0,0,1058,635,1,0,0,0,1058,642,1,0,0,0,1058,
        657,1,0,0,0,1058,669,1,0,0,0,1058,676,1,0,0,0,1058,701,1,0,0,0,1058,
        726,1,0,0,0,1058,737,1,0,0,0,1058,762,1,0,0,0,1058,783,1,0,0,0,1058,
        809,1,0,0,0,1058,818,1,0,0,0,1058,833,1,0,0,0,1058,839,1,0,0,0,1058,
        843,1,0,0,0,1058,847,1,0,0,0,1058,851,1,0,0,0,1058,856,1,0,0,0,1058,
        870,1,0,0,0,1058,884,1,0,0,0,1058,894,1,0,0,0,1058,908,1,0,0,0,1058,
        912,1,0,0,0,1058,919,1,0,0,0,1058,928,1,0,0,0,1058,935,1,0,0,0,1058,
        937,1,0,0,0,1058,939,1,0,0,0,1058,949,1,0,0,0,1058,959,1,0,0,0,1058,
        965,1,0,0,0,1058,968,1,0,0,0,1058,980,1,0,0,0,1058,984,1,0,0,0,1058,
        988,1,0,0,0,1058,993,1,0,0,0,1058,996,1,0,0,0,1058,1009,1,0,0,0,
        1058,1012,1,0,0,0,1058,1015,1,0,0,0,1058,1018,1,0,0,0,1058,1025,
        1,0,0,0,1058,1040,1,0,0,0,1059,11,1,0,0,0,1060,1062,3,14,7,0,1061,
        1060,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1064,3,30,
        15,0,1064,13,1,0,0,0,1065,1067,5,284,0,0,1066,1068,5,206,0,0,1067,
        1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1074,3,54,
        27,0,1070,1071,5,4,0,0,1071,1073,3,54,27,0,1072,1070,1,0,0,0,1073,
        1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,15,1,0,0,0,
        1076,1074,1,0,0,0,1077,1080,3,18,9,0,1078,1080,3,20,10,0,1079,1077,
        1,0,0,0,1079,1078,1,0,0,0,1080,17,1,0,0,0,1081,1082,3,212,106,0,
        1082,1085,3,158,79,0,1083,1084,5,168,0,0,1084,1086,5,169,0,0,1085,
        1083,1,0,0,0,1085,1086,1,0,0,0,1086,1089,1,0,0,0,1087,1088,5,44,
        0,0,1088,1090,3,142,71,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,
        1093,1,0,0,0,1091,1092,5,284,0,0,1092,1094,3,22,11,0,1093,1091,1,
        0,0,0,1093,1094,1,0,0,0,1094,19,1,0,0,0,1095,1096,5,142,0,0,1096,
        1099,3,200,100,0,1097,1098,7,4,0,0,1098,1100,5,201,0,0,1099,1097,
        1,0,0,0,1099,1100,1,0,0,0,1100,21,1,0,0,0,1101,1102,5,2,0,0,1102,
        1103,3,24,12,0,1103,1104,5,3,0,0,1104,23,1,0,0,0,1105,1110,3,26,
        13,0,1106,1107,5,4,0,0,1107,1109,3,26,13,0,1108,1106,1,0,0,0,1109,
        1112,1,0,0,0,1110,1108,1,0,0,0,1110,1111,1,0,0,0,1111,25,1,0,0,0,
        1112,1110,1,0,0,0,1113,1114,3,212,106,0,1114,1115,5,292,0,0,1115,
        1116,3,28,14,0,1116,27,1,0,0,0,1117,1120,5,67,0,0,1118,1120,3,110,
        55,0,1119,1117,1,0,0,0,1119,1118,1,0,0,0,1120,29,1,0,0,0,1121,1132,
        3,36,18,0,1122,1123,5,181,0,0,1123,1124,5,35,0,0,1124,1129,3,40,
        20,0,1125,1126,5,4,0,0,1126,1128,3,40,20,0,1127,1125,1,0,0,0,1128,
        1131,1,0,0,0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,1130,1133,1,0,0,
        0,1131,1129,1,0,0,0,1132,1122,1,0,0,0,1132,1133,1,0,0,0,1133,1139,
        1,0,0,0,1134,1135,5,174,0,0,1135,1137,3,34,17,0,1136,1138,7,5,0,
        0,1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,1140,1,0,0,0,1139,1134,
        1,0,0,0,1139,1140,1,0,0,0,1140,1154,1,0,0,0,1141,1142,5,143,0,0,
        1142,1155,3,32,16,0,1143,1144,5,92,0,0,1144,1146,7,6,0,0,1145,1147,
        3,34,17,0,1146,1145,1,0,0,0,1146,1147,1,0,0,0,1147,1148,1,0,0,0,
        1148,1152,7,5,0,0,1149,1153,5,178,0,0,1150,1151,5,284,0,0,1151,1153,
        5,248,0,0,1152,1149,1,0,0,0,1152,1150,1,0,0,0,1153,1155,1,0,0,0,
        1154,1141,1,0,0,0,1154,1143,1,0,0,0,1154,1155,1,0,0,0,1155,31,1,
        0,0,0,1156,1159,5,22,0,0,1157,1159,3,34,17,0,1158,1156,1,0,0,0,1158,
        1157,1,0,0,0,1159,33,1,0,0,0,1160,1161,7,7,0,0,1161,35,1,0,0,0,1162,
        1163,6,18,-1,0,1163,1164,3,38,19,0,1164,1179,1,0,0,0,1165,1166,10,
        2,0,0,1166,1168,5,120,0,0,1167,1169,3,56,28,0,1168,1167,1,0,0,0,
        1168,1169,1,0,0,0,1169,1170,1,0,0,0,1170,1178,3,36,18,3,1171,1172,
        10,1,0,0,1172,1174,7,8,0,0,1173,1175,3,56,28,0,1174,1173,1,0,0,0,
        1174,1175,1,0,0,0,1175,1176,1,0,0,0,1176,1178,3,36,18,2,1177,1165,
        1,0,0,0,1177,1171,1,0,0,0,1178,1181,1,0,0,0,1179,1177,1,0,0,0,1179,
        1180,1,0,0,0,1180,37,1,0,0,0,1181,1179,1,0,0,0,1182,1199,3,42,21,
        0,1183,1184,5,242,0,0,1184,1199,3,200,100,0,1185,1186,5,277,0,0,
        1186,1191,3,110,55,0,1187,1188,5,4,0,0,1188,1190,3,110,55,0,1189,
        1187,1,0,0,0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,1191,1192,1,0,0,
        0,1192,1199,1,0,0,0,1193,1191,1,0,0,0,1194,1195,5,2,0,0,1195,1196,
        3,30,15,0,1196,1197,5,3,0,0,1197,1199,1,0,0,0,1198,1182,1,0,0,0,
        1198,1183,1,0,0,0,1198,1185,1,0,0,0,1198,1194,1,0,0,0,1199,39,1,
        0,0,0,1200,1202,3,110,55,0,1201,1203,7,9,0,0,1202,1201,1,0,0,0,1202,
        1203,1,0,0,0,1203,1206,1,0,0,0,1204,1205,5,171,0,0,1205,1207,7,10,
        0,0,1206,1204,1,0,0,0,1206,1207,1,0,0,0,1207,41,1,0,0,0,1208,1210,
        5,230,0,0,1209,1211,3,56,28,0,1210,1209,1,0,0,0,1210,1211,1,0,0,
        0,1211,1212,1,0,0,0,1212,1217,3,58,29,0,1213,1214,5,4,0,0,1214,1216,
        3,58,29,0,1215,1213,1,0,0,0,1216,1219,1,0,0,0,1217,1215,1,0,0,0,
        1217,1218,1,0,0,0,1218,1229,1,0,0,0,1219,1217,1,0,0,0,1220,1221,
        5,99,0,0,1221,1226,3,60,30,0,1222,1223,5,4,0,0,1223,1225,3,60,30,
        0,1224,1222,1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1226,1227,
        1,0,0,0,1227,1230,1,0,0,0,1228,1226,1,0,0,0,1229,1220,1,0,0,0,1229,
        1230,1,0,0,0,1230,1233,1,0,0,0,1231,1232,5,282,0,0,1232,1234,3,112,
        56,0,1233,1231,1,0,0,0,1233,1234,1,0,0,0,1234,1238,1,0,0,0,1235,
        1236,5,107,0,0,1236,1237,5,35,0,0,1237,1239,3,44,22,0,1238,1235,
        1,0,0,0,1238,1239,1,0,0,0,1239,1242,1,0,0,0,1240,1241,5,110,0,0,
        1241,1243,3,112,56,0,1242,1240,1,0,0,0,1242,1243,1,0,0,0,1243,1253,
        1,0,0,0,1244,1245,5,283,0,0,1245,1250,3,50,25,0,1246,1247,5,4,0,
        0,1247,1249,3,50,25,0,1248,1246,1,0,0,0,1249,1252,1,0,0,0,1250,1248,
        1,0,0,0,1250,1251,1,0,0,0,1251,1254,1,0,0,0,1252,1250,1,0,0,0,1253,
        1244,1,0,0,0,1253,1254,1,0,0,0,1254,43,1,0,0,0,1255,1257,3,56,28,
        0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1263,
        3,46,23,0,1259,1260,5,4,0,0,1260,1262,3,46,23,0,1261,1259,1,0,0,
        0,1262,1265,1,0,0,0,1263,1261,1,0,0,0,1263,1264,1,0,0,0,1264,45,
        1,0,0,0,1265,1263,1,0,0,0,1266,1307,3,48,24,0,1267,1268,5,220,0,
        0,1268,1277,5,2,0,0,1269,1274,3,48,24,0,1270,1271,5,4,0,0,1271,1273,
        3,48,24,0,1272,1270,1,0,0,0,1273,1276,1,0,0,0,1274,1272,1,0,0,0,
        1274,1275,1,0,0,0,1275,1278,1,0,0,0,1276,1274,1,0,0,0,1277,1269,
        1,0,0,0,1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,1307,5,3,0,0,1280,
        1281,5,53,0,0,1281,1290,5,2,0,0,1282,1287,3,48,24,0,1283,1284,5,
        4,0,0,1284,1286,3,48,24,0,1285,1283,1,0,0,0,1286,1289,1,0,0,0,1287,
        1285,1,0,0,0,1287,1288,1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,
        0,1290,1282,1,0,0,0,1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1307,
        5,3,0,0,1293,1294,5,108,0,0,1294,1295,5,234,0,0,1295,1296,5,2,0,
        0,1296,1301,3,48,24,0,1297,1298,5,4,0,0,1298,1300,3,48,24,0,1299,
        1297,1,0,0,0,1300,1303,1,0,0,0,1301,1299,1,0,0,0,1301,1302,1,0,0,
        0,1302,1304,1,0,0,0,1303,1301,1,0,0,0,1304,1305,5,3,0,0,1305,1307,
        1,0,0,0,1306,1266,1,0,0,0,1306,1267,1,0,0,0,1306,1280,1,0,0,0,1306,
        1293,1,0,0,0,1307,47,1,0,0,0,1308,1317,5,2,0,0,1309,1314,3,110,55,
        0,1310,1311,5,4,0,0,1311,1313,3,110,55,0,1312,1310,1,0,0,0,1313,
        1316,1,0,0,0,1314,1312,1,0,0,0,1314,1315,1,0,0,0,1315,1318,1,0,0,
        0,1316,1314,1,0,0,0,1317,1309,1,0,0,0,1317,1318,1,0,0,0,1318,1319,
        1,0,0,0,1319,1322,5,3,0,0,1320,1322,3,110,55,0,1321,1308,1,0,0,0,
        1321,1320,1,0,0,0,1322,49,1,0,0,0,1323,1324,3,212,106,0,1324,1325,
        5,28,0,0,1325,1326,5,2,0,0,1326,1327,3,52,26,0,1327,1328,5,3,0,0,
        1328,51,1,0,0,0,1329,1331,3,212,106,0,1330,1329,1,0,0,0,1330,1331,
        1,0,0,0,1331,1342,1,0,0,0,1332,1333,5,187,0,0,1333,1334,5,35,0,0,
        1334,1339,3,110,55,0,1335,1336,5,4,0,0,1336,1338,3,110,55,0,1337,
        1335,1,0,0,0,1338,1341,1,0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,
        0,1340,1343,1,0,0,0,1341,1339,1,0,0,0,1342,1332,1,0,0,0,1342,1343,
        1,0,0,0,1343,1354,1,0,0,0,1344,1345,5,181,0,0,1345,1346,5,35,0,0,
        1346,1351,3,40,20,0,1347,1348,5,4,0,0,1348,1350,3,40,20,0,1349,1347,
        1,0,0,0,1350,1353,1,0,0,0,1351,1349,1,0,0,0,1351,1352,1,0,0,0,1352,
        1355,1,0,0,0,1353,1351,1,0,0,0,1354,1344,1,0,0,0,1354,1355,1,0,0,
        0,1355,1357,1,0,0,0,1356,1358,3,172,86,0,1357,1356,1,0,0,0,1357,
        1358,1,0,0,0,1358,53,1,0,0,0,1359,1361,3,212,106,0,1360,1362,3,92,
        46,0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,1363,1,0,0,0,1363,
        1364,5,28,0,0,1364,1365,5,2,0,0,1365,1366,3,12,6,0,1366,1367,5,3,
        0,0,1367,55,1,0,0,0,1368,1369,7,11,0,0,1369,57,1,0,0,0,1370,1375,
        3,110,55,0,1371,1373,5,28,0,0,1372,1371,1,0,0,0,1372,1373,1,0,0,
        0,1373,1374,1,0,0,0,1374,1376,3,212,106,0,1375,1372,1,0,0,0,1375,
        1376,1,0,0,0,1376,1386,1,0,0,0,1377,1378,3,118,59,0,1378,1379,5,
        1,0,0,1379,1382,5,300,0,0,1380,1381,5,28,0,0,1381,1383,3,92,46,0,
        1382,1380,1,0,0,0,1382,1383,1,0,0,0,1383,1386,1,0,0,0,1384,1386,
        5,300,0,0,1385,1370,1,0,0,0,1385,1377,1,0,0,0,1385,1384,1,0,0,0,
        1386,59,1,0,0,0,1387,1388,6,30,-1,0,1388,1389,3,66,33,0,1389,1408,
        1,0,0,0,1390,1404,10,2,0,0,1391,1392,5,52,0,0,1392,1393,5,127,0,
        0,1393,1405,3,66,33,0,1394,1395,3,62,31,0,1395,1396,5,127,0,0,1396,
        1397,3,60,30,0,1397,1398,3,64,32,0,1398,1405,1,0,0,0,1399,1400,5,
        159,0,0,1400,1401,3,62,31,0,1401,1402,5,127,0,0,1402,1403,3,66,33,
        0,1403,1405,1,0,0,0,1404,1391,1,0,0,0,1404,1394,1,0,0,0,1404,1399,
        1,0,0,0,1405,1407,1,0,0,0,1406,1390,1,0,0,0,1407,1410,1,0,0,0,1408,
        1406,1,0,0,0,1408,1409,1,0,0,0,1409,61,1,0,0,0,1410,1408,1,0,0,0,
        1411,1413,5,117,0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,1427,
        1,0,0,0,1414,1416,5,140,0,0,1415,1417,5,183,0,0,1416,1415,1,0,0,
        0,1416,1417,1,0,0,0,1417,1427,1,0,0,0,1418,1420,5,216,0,0,1419,1421,
        5,183,0,0,1420,1419,1,0,0,0,1420,1421,1,0,0,0,1421,1427,1,0,0,0,
        1422,1424,5,100,0,0,1423,1425,5,183,0,0,1424,1423,1,0,0,0,1424,1425,
        1,0,0,0,1425,1427,1,0,0,0,1426,1412,1,0,0,0,1426,1414,1,0,0,0,1426,
        1418,1,0,0,0,1426,1422,1,0,0,0,1427,63,1,0,0,0,1428,1429,5,176,0,
        0,1429,1443,3,112,56,0,1430,1431,5,271,0,0,1431,1432,5,2,0,0,1432,
        1437,3,212,106,0,1433,1434,5,4,0,0,1434,1436,3,212,106,0,1435,1433,
        1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,
        1440,1,0,0,0,1439,1437,1,0,0,0,1440,1441,5,3,0,0,1441,1443,1,0,0,
        0,1442,1428,1,0,0,0,1442,1430,1,0,0,0,1443,65,1,0,0,0,1444,1451,
        3,76,38,0,1445,1446,5,244,0,0,1446,1447,3,68,34,0,1447,1448,5,2,
        0,0,1448,1449,3,110,55,0,1449,1450,5,3,0,0,1450,1452,1,0,0,0,1451,
        1445,1,0,0,0,1451,1452,1,0,0,0,1452,67,1,0,0,0,1453,1454,7,12,0,
        0,1454,69,1,0,0,0,1455,1456,7,13,0,0,1456,71,1,0,0,0,1457,1464,5,
        83,0,0,1458,1460,5,256,0,0,1459,1461,3,142,71,0,1460,1459,1,0,0,
        0,1460,1461,1,0,0,0,1461,1462,1,0,0,0,1462,1464,3,74,37,0,1463,1457,
        1,0,0,0,1463,1458,1,0,0,0,1464,73,1,0,0,0,1465,1466,5,284,0,0,1466,
        1470,5,49,0,0,1467,1468,5,286,0,0,1468,1470,5,49,0,0,1469,1465,1,
        0,0,0,1469,1467,1,0,0,0,1470,75,1,0,0,0,1471,1554,3,90,45,0,1472,
        1473,5,153,0,0,1473,1484,5,2,0,0,1474,1475,5,187,0,0,1475,1476,5,
        35,0,0,1476,1481,3,110,55,0,1477,1478,5,4,0,0,1478,1480,3,110,55,
        0,1479,1477,1,0,0,0,1480,1483,1,0,0,0,1481,1479,1,0,0,0,1481,1482,
        1,0,0,0,1482,1485,1,0,0,0,1483,1481,1,0,0,0,1484,1474,1,0,0,0,1484,
        1485,1,0,0,0,1485,1496,1,0,0,0,1486,1487,5,181,0,0,1487,1488,5,35,
        0,0,1488,1493,3,40,20,0,1489,1490,5,4,0,0,1490,1492,3,40,20,0,1491,
        1489,1,0,0,0,1492,1495,1,0,0,0,1493,1491,1,0,0,0,1493,1494,1,0,0,
        0,1494,1497,1,0,0,0,1495,1493,1,0,0,0,1496,1486,1,0,0,0,1496,1497,
        1,0,0,0,1497,1507,1,0,0,0,1498,1499,5,155,0,0,1499,1504,3,78,39,
        0,1500,1501,5,4,0,0,1501,1503,3,78,39,0,1502,1500,1,0,0,0,1503,1506,
        1,0,0,0,1504,1502,1,0,0,0,1504,1505,1,0,0,0,1505,1508,1,0,0,0,1506,
        1504,1,0,0,0,1507,1498,1,0,0,0,1507,1508,1,0,0,0,1508,1510,1,0,0,
        0,1509,1511,3,80,40,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,1515,
        1,0,0,0,1512,1513,5,21,0,0,1513,1514,5,150,0,0,1514,1516,3,84,42,
        0,1515,1512,1,0,0,0,1515,1516,1,0,0,0,1516,1518,1,0,0,0,1517,1519,
        7,14,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,1520,1,0,0,0,1520,
        1521,5,192,0,0,1521,1522,5,2,0,0,1522,1523,3,178,89,0,1523,1533,
        5,3,0,0,1524,1525,5,239,0,0,1525,1530,3,86,43,0,1526,1527,5,4,0,
        0,1527,1529,3,86,43,0,1528,1526,1,0,0,0,1529,1532,1,0,0,0,1530,1528,
        1,0,0,0,1530,1531,1,0,0,0,1531,1534,1,0,0,0,1532,1530,1,0,0,0,1533,
        1524,1,0,0,0,1533,1534,1,0,0,0,1534,1535,1,0,0,0,1535,1536,5,68,
        0,0,1536,1541,3,88,44,0,1537,1538,5,4,0,0,1538,1540,3,88,44,0,1539,
        1537,1,0,0,0,1540,1543,1,0,0,0,1541,1539,1,0,0,0,1541,1542,1,0,0,
        0,1542,1544,1,0,0,0,1543,1541,1,0,0,0,1544,1552,5,3,0,0,1545,1547,
        5,28,0,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,1548,1,0,0,0,1548,
        1550,3,212,106,0,1549,1551,3,92,46,0,1550,1549,1,0,0,0,1550,1551,
        1,0,0,0,1551,1553,1,0,0,0,1552,1546,1,0,0,0,1552,1553,1,0,0,0,1553,
        1555,1,0,0,0,1554,1472,1,0,0,0,1554,1555,1,0,0,0,1555,77,1,0,0,0,
        1556,1557,3,110,55,0,1557,1558,5,28,0,0,1558,1559,3,212,106,0,1559,
        79,1,0,0,0,1560,1561,5,177,0,0,1561,1562,5,221,0,0,1562,1563,5,193,
        0,0,1563,1572,5,150,0,0,1564,1565,5,22,0,0,1565,1566,5,222,0,0,1566,
        1567,5,193,0,0,1567,1569,5,150,0,0,1568,1570,3,82,41,0,1569,1568,
        1,0,0,0,1569,1570,1,0,0,0,1570,1572,1,0,0,0,1571,1560,1,0,0,0,1571,
        1564,1,0,0,0,1572,81,1,0,0,0,1573,1574,5,235,0,0,1574,1575,5,80,
        0,0,1575,1583,5,152,0,0,1576,1577,5,175,0,0,1577,1578,5,80,0,0,1578,
        1583,5,152,0,0,1579,1580,5,284,0,0,1580,1581,5,266,0,0,1581,1583,
        5,222,0,0,1582,1573,1,0,0,0,1582,1576,1,0,0,0,1582,1579,1,0,0,0,
        1583,83,1,0,0,0,1584,1585,5,5,0,0,1585,1586,5,251,0,0,1586,1587,
        5,160,0,0,1587,1604,5,221,0,0,1588,1589,5,5,0,0,1589,1590,5,190,
        0,0,1590,1591,5,137,0,0,1591,1604,5,221,0,0,1592,1593,5,5,0,0,1593,
        1594,5,251,0,0,1594,1595,5,95,0,0,1595,1604,3,212,106,0,1596,1597,
        5,5,0,0,1597,1598,5,251,0,0,1598,1599,5,137,0,0,1599,1604,3,212,
        106,0,1600,1601,5,5,0,0,1601,1602,5,251,0,0,1602,1604,3,212,106,
        0,1603,1584,1,0,0,0,1603,1588,1,0,0,0,1603,1592,1,0,0,0,1603,1596,
        1,0,0,0,1603,1600,1,0,0,0,1604,85,1,0,0,0,1605,1606,3,212,106,0,
        1606,1607,5,292,0,0,1607,1608,5,2,0,0,1608,1613,3,212,106,0,1609,
        1610,5,4,0,0,1610,1612,3,212,106,0,1611,1609,1,0,0,0,1612,1615,1,
        0,0,0,1613,1611,1,0,0,0,1613,1614,1,0,0,0,1614,1616,1,0,0,0,1615,
        1613,1,0,0,0,1616,1617,5,3,0,0,1617,87,1,0,0,0,1618,1619,3,212,106,
        0,1619,1620,5,28,0,0,1620,1621,3,110,55,0,1621,89,1,0,0,0,1622,1630,
        3,94,47,0,1623,1625,5,28,0,0,1624,1623,1,0,0,0,1624,1625,1,0,0,0,
        1625,1626,1,0,0,0,1626,1628,3,212,106,0,1627,1629,3,92,46,0,1628,
        1627,1,0,0,0,1628,1629,1,0,0,0,1629,1631,1,0,0,0,1630,1624,1,0,0,
        0,1630,1631,1,0,0,0,1631,91,1,0,0,0,1632,1633,5,2,0,0,1633,1638,
        3,212,106,0,1634,1635,5,4,0,0,1635,1637,3,212,106,0,1636,1634,1,
        0,0,0,1637,1640,1,0,0,0,1638,1636,1,0,0,0,1638,1639,1,0,0,0,1639,
        1641,1,0,0,0,1640,1638,1,0,0,0,1641,1642,5,3,0,0,1642,93,1,0,0,0,
        1643,1645,3,200,100,0,1644,1646,3,202,101,0,1645,1644,1,0,0,0,1645,
        1646,1,0,0,0,1646,1681,1,0,0,0,1647,1648,5,2,0,0,1648,1649,3,12,
        6,0,1649,1650,5,3,0,0,1650,1681,1,0,0,0,1651,1652,5,267,0,0,1652,
        1653,5,2,0,0,1653,1658,3,110,55,0,1654,1655,5,4,0,0,1655,1657,3,
        110,55,0,1656,1654,1,0,0,0,1657,1660,1,0,0,0,1658,1656,1,0,0,0,1658,
        1659,1,0,0,0,1659,1661,1,0,0,0,1660,1658,1,0,0,0,1661,1664,5,3,0,
        0,1662,1663,5,284,0,0,1663,1665,5,182,0,0,1664,1662,1,0,0,0,1664,
        1665,1,0,0,0,1665,1681,1,0,0,0,1666,1667,5,138,0,0,1667,1668,5,2,
        0,0,1668,1669,3,12,6,0,1669,1670,5,3,0,0,1670,1681,1,0,0,0,1671,
        1672,5,242,0,0,1672,1673,5,2,0,0,1673,1674,3,96,48,0,1674,1675,5,
        3,0,0,1675,1681,1,0,0,0,1676,1677,5,2,0,0,1677,1678,3,60,30,0,1678,
        1679,5,3,0,0,1679,1681,1,0,0,0,1680,1643,1,0,0,0,1680,1647,1,0,0,
        0,1680,1651,1,0,0,0,1680,1666,1,0,0,0,1680,1671,1,0,0,0,1680,1676,
        1,0,0,0,1681,95,1,0,0,0,1682,1683,3,200,100,0,1683,1692,5,2,0,0,
        1684,1689,3,98,49,0,1685,1686,5,4,0,0,1686,1688,3,98,49,0,1687,1685,
        1,0,0,0,1688,1691,1,0,0,0,1689,1687,1,0,0,0,1689,1690,1,0,0,0,1690,
        1693,1,0,0,0,1691,1689,1,0,0,0,1692,1684,1,0,0,0,1692,1693,1,0,0,
        0,1693,1703,1,0,0,0,1694,1695,5,50,0,0,1695,1700,3,108,54,0,1696,
        1697,5,4,0,0,1697,1699,3,108,54,0,1698,1696,1,0,0,0,1699,1702,1,
        0,0,0,1700,1698,1,0,0,0,1700,1701,1,0,0,0,1701,1704,1,0,0,0,1702,
        1700,1,0,0,0,1703,1694,1,0,0,0,1703,1704,1,0,0,0,1704,1705,1,0,0,
        0,1705,1706,5,3,0,0,1706,97,1,0,0,0,1707,1708,3,212,106,0,1708,1709,
        5,6,0,0,1709,1711,1,0,0,0,1710,1707,1,0,0,0,1710,1711,1,0,0,0,1711,
        1715,1,0,0,0,1712,1716,3,100,50,0,1713,1716,3,104,52,0,1714,1716,
        3,110,55,0,1715,1712,1,0,0,0,1715,1713,1,0,0,0,1715,1714,1,0,0,0,
        1716,99,1,0,0,0,1717,1735,3,102,51,0,1718,1719,5,187,0,0,1719,1733,
        5,35,0,0,1720,1729,5,2,0,0,1721,1726,3,110,55,0,1722,1723,5,4,0,
        0,1723,1725,3,110,55,0,1724,1722,1,0,0,0,1725,1728,1,0,0,0,1726,
        1724,1,0,0,0,1726,1727,1,0,0,0,1727,1730,1,0,0,0,1728,1726,1,0,0,
        0,1729,1721,1,0,0,0,1729,1730,1,0,0,0,1730,1731,1,0,0,0,1731,1734,
        5,3,0,0,1732,1734,3,110,55,0,1733,1720,1,0,0,0,1733,1732,1,0,0,0,
        1734,1736,1,0,0,0,1735,1718,1,0,0,0,1735,1736,1,0,0,0,1736,1743,
        1,0,0,0,1737,1738,5,202,0,0,1738,1739,5,281,0,0,1739,1744,5,80,0,
        0,1740,1741,5,134,0,0,1741,1742,5,281,0,0,1742,1744,5,80,0,0,1743,
        1737,1,0,0,0,1743,1740,1,0,0,0,1743,1744,1,0,0,0,1744,1761,1,0,0,
        0,1745,1746,5,181,0,0,1746,1759,5,35,0,0,1747,1748,5,2,0,0,1748,
        1753,3,40,20,0,1749,1750,5,4,0,0,1750,1752,3,40,20,0,1751,1749,1,
        0,0,0,1752,1755,1,0,0,0,1753,1751,1,0,0,0,1753,1754,1,0,0,0,1754,
        1756,1,0,0,0,1755,1753,1,0,0,0,1756,1757,5,3,0,0,1757,1760,1,0,0,
        0,1758,1760,3,40,20,0,1759,1747,1,0,0,0,1759,1758,1,0,0,0,1760,1762,
        1,0,0,0,1761,1745,1,0,0,0,1761,1762,1,0,0,0,1762,101,1,0,0,0,1763,
        1764,5,242,0,0,1764,1765,5,2,0,0,1765,1766,3,200,100,0,1766,1774,
        5,3,0,0,1767,1769,5,28,0,0,1768,1767,1,0,0,0,1768,1769,1,0,0,0,1769,
        1770,1,0,0,0,1770,1772,3,212,106,0,1771,1773,3,92,46,0,1772,1771,
        1,0,0,0,1772,1773,1,0,0,0,1773,1775,1,0,0,0,1774,1768,1,0,0,0,1774,
        1775,1,0,0,0,1775,1790,1,0,0,0,1776,1777,5,242,0,0,1777,1778,5,2,
        0,0,1778,1779,3,12,6,0,1779,1787,5,3,0,0,1780,1782,5,28,0,0,1781,
        1780,1,0,0,0,1781,1782,1,0,0,0,1782,1783,1,0,0,0,1783,1785,3,212,
        106,0,1784,1786,3,92,46,0,1785,1784,1,0,0,0,1785,1786,1,0,0,0,1786,
        1788,1,0,0,0,1787,1781,1,0,0,0,1787,1788,1,0,0,0,1788,1790,1,0,0,
        0,1789,1763,1,0,0,0,1789,1776,1,0,0,0,1790,103,1,0,0,0,1791,1792,
        5,74,0,0,1792,1793,5,2,0,0,1793,1798,3,106,53,0,1794,1795,5,4,0,
        0,1795,1797,3,106,53,0,1796,1794,1,0,0,0,1797,1800,1,0,0,0,1798,
        1796,1,0,0,0,1798,1799,1,0,0,0,1799,1801,1,0,0,0,1800,1798,1,0,0,
        0,1801,1802,5,3,0,0,1802,1810,1,0,0,0,1803,1804,5,39,0,0,1804,1805,
        5,2,0,0,1805,1806,5,169,0,0,1806,1807,5,28,0,0,1807,1808,5,74,0,
        0,1808,1810,5,3,0,0,1809,1791,1,0,0,0,1809,1803,1,0,0,0,1810,105,
        1,0,0,0,1811,1813,3,212,106,0,1812,1814,3,158,79,0,1813,1812,1,0,
        0,0,1813,1814,1,0,0,0,1814,107,1,0,0,0,1815,1816,5,2,0,0,1816,1817,
        3,200,100,0,1817,1818,5,4,0,0,1818,1823,3,200,100,0,1819,1820,5,
        4,0,0,1820,1822,3,200,100,0,1821,1819,1,0,0,0,1822,1825,1,0,0,0,
        1823,1821,1,0,0,0,1823,1824,1,0,0,0,1824,1826,1,0,0,0,1825,1823,
        1,0,0,0,1826,1827,5,3,0,0,1827,109,1,0,0,0,1828,1829,3,112,56,0,
        1829,111,1,0,0,0,1830,1831,6,56,-1,0,1831,1833,3,116,58,0,1832,1834,
        3,114,57,0,1833,1832,1,0,0,0,1833,1834,1,0,0,0,1834,1838,1,0,0,0,
        1835,1836,5,168,0,0,1836,1838,3,112,56,3,1837,1830,1,0,0,0,1837,
        1835,1,0,0,0,1838,1847,1,0,0,0,1839,1840,10,2,0,0,1840,1841,5,25,
        0,0,1841,1846,3,112,56,3,1842,1843,10,1,0,0,1843,1844,5,180,0,0,
        1844,1846,3,112,56,2,1845,1839,1,0,0,0,1845,1842,1,0,0,0,1846,1849,
        1,0,0,0,1847,1845,1,0,0,0,1847,1848,1,0,0,0,1848,113,1,0,0,0,1849,
        1847,1,0,0,0,1850,1851,3,146,73,0,1851,1852,3,116,58,0,1852,1912,
        1,0,0,0,1853,1854,3,146,73,0,1854,1855,3,148,74,0,1855,1856,5,2,
        0,0,1856,1857,3,12,6,0,1857,1858,5,3,0,0,1858,1912,1,0,0,0,1859,
        1861,5,168,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,
        0,0,1862,1863,5,33,0,0,1863,1864,3,116,58,0,1864,1865,5,25,0,0,1865,
        1866,3,116,58,0,1866,1912,1,0,0,0,1867,1869,5,168,0,0,1868,1867,
        1,0,0,0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,1870,1871,5,114,0,0,
        1871,1872,5,2,0,0,1872,1877,3,110,55,0,1873,1874,5,4,0,0,1874,1876,
        3,110,55,0,1875,1873,1,0,0,0,1876,1879,1,0,0,0,1877,1875,1,0,0,0,
        1877,1878,1,0,0,0,1878,1880,1,0,0,0,1879,1877,1,0,0,0,1880,1881,
        5,3,0,0,1881,1912,1,0,0,0,1882,1884,5,168,0,0,1883,1882,1,0,0,0,
        1883,1884,1,0,0,0,1884,1885,1,0,0,0,1885,1886,5,114,0,0,1886,1887,
        5,2,0,0,1887,1888,3,12,6,0,1888,1889,5,3,0,0,1889,1912,1,0,0,0,1890,
        1892,5,168,0,0,1891,1890,1,0,0,0,1891,1892,1,0,0,0,1892,1893,1,0,
        0,0,1893,1894,5,142,0,0,1894,1897,3,116,58,0,1895,1896,5,84,0,0,
        1896,1898,3,116,58,0,1897,1895,1,0,0,0,1897,1898,1,0,0,0,1898,1912,
        1,0,0,0,1899,1901,5,125,0,0,1900,1902,5,168,0,0,1901,1900,1,0,0,
        0,1901,1902,1,0,0,0,1902,1903,1,0,0,0,1903,1912,5,169,0,0,1904,1906,
        5,125,0,0,1905,1907,5,168,0,0,1906,1905,1,0,0,0,1906,1907,1,0,0,
        0,1907,1908,1,0,0,0,1908,1909,5,75,0,0,1909,1910,5,99,0,0,1910,1912,
        3,116,58,0,1911,1850,1,0,0,0,1911,1853,1,0,0,0,1911,1860,1,0,0,0,
        1911,1868,1,0,0,0,1911,1883,1,0,0,0,1911,1891,1,0,0,0,1911,1899,
        1,0,0,0,1911,1904,1,0,0,0,1912,115,1,0,0,0,1913,1914,6,58,-1,0,1914,
        1918,3,118,59,0,1915,1916,7,15,0,0,1916,1918,3,116,58,4,1917,1913,
        1,0,0,0,1917,1915,1,0,0,0,1918,1933,1,0,0,0,1919,1920,10,3,0,0,1920,
        1921,7,16,0,0,1921,1932,3,116,58,4,1922,1923,10,2,0,0,1923,1924,
        7,15,0,0,1924,1932,3,116,58,3,1925,1926,10,1,0,0,1926,1927,5,303,
        0,0,1927,1932,3,116,58,2,1928,1929,10,5,0,0,1929,1930,5,30,0,0,1930,
        1932,3,144,72,0,1931,1919,1,0,0,0,1931,1922,1,0,0,0,1931,1925,1,
        0,0,0,1931,1928,1,0,0,0,1932,1935,1,0,0,0,1933,1931,1,0,0,0,1933,
        1934,1,0,0,0,1934,117,1,0,0,0,1935,1933,1,0,0,0,1936,1937,6,59,-1,
        0,1937,2387,5,169,0,0,1938,2387,3,152,76,0,1939,1940,3,212,106,0,
        1940,1941,3,142,71,0,1941,2387,1,0,0,0,1942,1943,5,77,0,0,1943,1944,
        5,198,0,0,1944,2387,3,142,71,0,1945,2387,3,214,107,0,1946,2387,3,
        150,75,0,1947,2387,3,142,71,0,1948,2387,5,307,0,0,1949,2387,5,304,
        0,0,1950,1951,5,196,0,0,1951,1952,5,2,0,0,1952,1953,3,116,58,0,1953,
        1954,5,114,0,0,1954,1955,3,116,58,0,1955,1956,5,3,0,0,1956,2387,
        1,0,0,0,1957,1958,5,2,0,0,1958,1961,3,110,55,0,1959,1960,5,4,0,0,
        1960,1962,3,110,55,0,1961,1959,1,0,0,0,1962,1963,1,0,0,0,1963,1961,
        1,0,0,0,1963,1964,1,0,0,0,1964,1965,1,0,0,0,1965,1966,5,3,0,0,1966,
        2387,1,0,0,0,1967,1968,5,221,0,0,1968,1969,5,2,0,0,1969,1974,3,110,
        55,0,1970,1971,5,4,0,0,1971,1973,3,110,55,0,1972,1970,1,0,0,0,1973,
        1976,1,0,0,0,1974,1972,1,0,0,0,1974,1975,1,0,0,0,1975,1977,1,0,0,
        0,1976,1974,1,0,0,0,1977,1978,5,3,0,0,1978,2387,1,0,0,0,1979,1980,
        5,144,0,0,1980,1982,5,2,0,0,1981,1983,3,56,28,0,1982,1981,1,0,0,
        0,1982,1983,1,0,0,0,1983,1984,1,0,0,0,1984,1987,3,110,55,0,1985,
        1986,5,4,0,0,1986,1988,3,142,71,0,1987,1985,1,0,0,0,1987,1988,1,
        0,0,0,1988,1992,1,0,0,0,1989,1990,5,176,0,0,1990,1991,5,186,0,0,
        1991,1993,3,72,36,0,1992,1989,1,0,0,0,1992,1993,1,0,0,0,1993,1994,
        1,0,0,0,1994,1995,5,3,0,0,1995,1996,5,285,0,0,1996,1997,5,107,0,
        0,1997,1998,5,2,0,0,1998,1999,5,181,0,0,1999,2000,5,35,0,0,2000,
        2005,3,40,20,0,2001,2002,5,4,0,0,2002,2004,3,40,20,0,2003,2001,1,
        0,0,0,2004,2007,1,0,0,0,2005,2003,1,0,0,0,2005,2006,1,0,0,0,2006,
        2008,1,0,0,0,2007,2005,1,0,0,0,2008,2009,5,3,0,0,2009,2387,1,0,0,
        0,2010,2012,3,138,69,0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,2012,
        2013,1,0,0,0,2013,2014,3,200,100,0,2014,2018,5,2,0,0,2015,2016,3,
        212,106,0,2016,2017,5,1,0,0,2017,2019,1,0,0,0,2018,2015,1,0,0,0,
        2018,2019,1,0,0,0,2019,2020,1,0,0,0,2020,2021,5,300,0,0,2021,2023,
        5,3,0,0,2022,2024,3,166,83,0,2023,2022,1,0,0,0,2023,2024,1,0,0,0,
        2024,2026,1,0,0,0,2025,2027,3,170,85,0,2026,2025,1,0,0,0,2026,2027,
        1,0,0,0,2027,2387,1,0,0,0,2028,2030,3,138,69,0,2029,2028,1,0,0,0,
        2029,2030,1,0,0,0,2030,2031,1,0,0,0,2031,2032,3,200,100,0,2032,2044,
        5,2,0,0,2033,2035,3,56,28,0,2034,2033,1,0,0,0,2034,2035,1,0,0,0,
        2035,2036,1,0,0,0,2036,2041,3,110,55,0,2037,2038,5,4,0,0,2038,2040,
        3,110,55,0,2039,2037,1,0,0,0,2040,2043,1,0,0,0,2041,2039,1,0,0,0,
        2041,2042,1,0,0,0,2042,2045,1,0,0,0,2043,2041,1,0,0,0,2044,2034,
        1,0,0,0,2044,2045,1,0,0,0,2045,2056,1,0,0,0,2046,2047,5,181,0,0,
        2047,2048,5,35,0,0,2048,2053,3,40,20,0,2049,2050,5,4,0,0,2050,2052,
        3,40,20,0,2051,2049,1,0,0,0,2052,2055,1,0,0,0,2053,2051,1,0,0,0,
        2053,2054,1,0,0,0,2054,2057,1,0,0,0,2055,2053,1,0,0,0,2056,2046,
        1,0,0,0,2056,2057,1,0,0,0,2057,2058,1,0,0,0,2058,2060,5,3,0,0,2059,
        2061,3,166,83,0,2060,2059,1,0,0,0,2060,2061,1,0,0,0,2061,2066,1,
        0,0,0,2062,2064,3,140,70,0,2063,2062,1,0,0,0,2063,2064,1,0,0,0,2064,
        2065,1,0,0,0,2065,2067,3,170,85,0,2066,2063,1,0,0,0,2066,2067,1,
        0,0,0,2067,2387,1,0,0,0,2068,2069,3,212,106,0,2069,2070,3,170,85,
        0,2070,2387,1,0,0,0,2071,2072,3,212,106,0,2072,2073,5,7,0,0,2073,
        2074,3,110,55,0,2074,2387,1,0,0,0,2075,2084,5,2,0,0,2076,2081,3,
        212,106,0,2077,2078,5,4,0,0,2078,2080,3,212,106,0,2079,2077,1,0,
        0,0,2080,2083,1,0,0,0,2081,2079,1,0,0,0,2081,2082,1,0,0,0,2082,2085,
        1,0,0,0,2083,2081,1,0,0,0,2084,2076,1,0,0,0,2084,2085,1,0,0,0,2085,
        2086,1,0,0,0,2086,2087,5,3,0,0,2087,2088,5,7,0,0,2088,2387,3,110,
        55,0,2089,2090,5,2,0,0,2090,2091,3,12,6,0,2091,2092,5,3,0,0,2092,
        2387,1,0,0,0,2093,2094,5,88,0,0,2094,2095,5,2,0,0,2095,2096,3,12,
        6,0,2096,2097,5,3,0,0,2097,2387,1,0,0,0,2098,2099,5,38,0,0,2099,
        2101,3,110,55,0,2100,2102,3,164,82,0,2101,2100,1,0,0,0,2102,2103,
        1,0,0,0,2103,2101,1,0,0,0,2103,2104,1,0,0,0,2104,2107,1,0,0,0,2105,
        2106,5,79,0,0,2106,2108,3,110,55,0,2107,2105,1,0,0,0,2107,2108,1,
        0,0,0,2108,2109,1,0,0,0,2109,2110,5,82,0,0,2110,2387,1,0,0,0,2111,
        2113,5,38,0,0,2112,2114,3,164,82,0,2113,2112,1,0,0,0,2114,2115,1,
        0,0,0,2115,2113,1,0,0,0,2115,2116,1,0,0,0,2116,2119,1,0,0,0,2117,
        2118,5,79,0,0,2118,2120,3,110,55,0,2119,2117,1,0,0,0,2119,2120,1,
        0,0,0,2120,2121,1,0,0,0,2121,2122,5,82,0,0,2122,2387,1,0,0,0,2123,
        2124,5,39,0,0,2124,2125,5,2,0,0,2125,2126,3,110,55,0,2126,2127,5,
        28,0,0,2127,2128,3,158,79,0,2128,2129,5,3,0,0,2129,2387,1,0,0,0,
        2130,2131,5,257,0,0,2131,2132,5,2,0,0,2132,2133,3,110,55,0,2133,
        2134,5,28,0,0,2134,2135,3,158,79,0,2135,2136,5,3,0,0,2136,2387,1,
        0,0,0,2137,2138,5,27,0,0,2138,2147,5,8,0,0,2139,2144,3,110,55,0,
        2140,2141,5,4,0,0,2141,2143,3,110,55,0,2142,2140,1,0,0,0,2143,2146,
        1,0,0,0,2144,2142,1,0,0,0,2144,2145,1,0,0,0,2145,2148,1,0,0,0,2146,
        2144,1,0,0,0,2147,2139,1,0,0,0,2147,2148,1,0,0,0,2148,2149,1,0,0,
        0,2149,2387,5,9,0,0,2150,2387,3,212,106,0,2151,2387,5,56,0,0,2152,
        2156,5,60,0,0,2153,2154,5,2,0,0,2154,2155,5,308,0,0,2155,2157,5,
        3,0,0,2156,2153,1,0,0,0,2156,2157,1,0,0,0,2157,2387,1,0,0,0,2158,
        2162,5,61,0,0,2159,2160,5,2,0,0,2160,2161,5,308,0,0,2161,2163,5,
        3,0,0,2162,2159,1,0,0,0,2162,2163,1,0,0,0,2163,2387,1,0,0,0,2164,
        2168,5,146,0,0,2165,2166,5,2,0,0,2166,2167,5,308,0,0,2167,2169,5,
        3,0,0,2168,2165,1,0,0,0,2168,2169,1,0,0,0,2169,2387,1,0,0,0,2170,
        2174,5,147,0,0,2171,2172,5,2,0,0,2172,2173,5,308,0,0,2173,2175,5,
        3,0,0,2174,2171,1,0,0,0,2174,2175,1,0,0,0,2175,2387,1,0,0,0,2176,
        2387,5,62,0,0,2177,2387,5,55,0,0,2178,2387,5,59,0,0,2179,2387,5,
        57,0,0,2180,2181,5,254,0,0,2181,2189,5,2,0,0,2182,2184,3,70,35,0,
        2183,2182,1,0,0,0,2183,2184,1,0,0,0,2184,2186,1,0,0,0,2185,2187,
        3,116,58,0,2186,2185,1,0,0,0,2186,2187,1,0,0,0,2187,2188,1,0,0,0,
        2188,2190,5,99,0,0,2189,2183,1,0,0,0,2189,2190,1,0,0,0,2190,2191,
        1,0,0,0,2191,2192,3,116,58,0,2192,2193,5,3,0,0,2193,2387,1,0,0,0,
        2194,2195,5,254,0,0,2195,2196,5,2,0,0,2196,2197,3,116,58,0,2197,
        2198,5,4,0,0,2198,2199,3,116,58,0,2199,2200,5,3,0,0,2200,2387,1,
        0,0,0,2201,2202,5,240,0,0,2202,2203,5,2,0,0,2203,2204,3,116,58,0,
        2204,2205,5,99,0,0,2205,2208,3,116,58,0,2206,2207,5,97,0,0,2207,
        2209,3,116,58,0,2208,2206,1,0,0,0,2208,2209,1,0,0,0,2209,2210,1,
        0,0,0,2210,2211,5,3,0,0,2211,2387,1,0,0,0,2212,2213,5,167,0,0,2213,
        2214,5,2,0,0,2214,2217,3,116,58,0,2215,2216,5,4,0,0,2216,2218,3,
        156,78,0,2217,2215,1,0,0,0,2217,2218,1,0,0,0,2218,2219,1,0,0,0,2219,
        2220,5,3,0,0,2220,2387,1,0,0,0,2221,2222,5,90,0,0,2222,2223,5,2,
        0,0,2223,2224,3,212,106,0,2224,2225,5,99,0,0,2225,2226,3,116,58,
        0,2226,2227,5,3,0,0,2227,2387,1,0,0,0,2228,2229,5,2,0,0,2229,2230,
        3,110,55,0,2230,2231,5,3,0,0,2231,2387,1,0,0,0,2232,2233,5,108,0,
        0,2233,2242,5,2,0,0,2234,2239,3,200,100,0,2235,2236,5,4,0,0,2236,
        2238,3,200,100,0,2237,2235,1,0,0,0,2238,2241,1,0,0,0,2239,2237,1,
        0,0,0,2239,2240,1,0,0,0,2240,2243,1,0,0,0,2241,2239,1,0,0,0,2242,
        2234,1,0,0,0,2242,2243,1,0,0,0,2243,2244,1,0,0,0,2244,2387,5,3,0,
        0,2245,2246,5,130,0,0,2246,2247,5,2,0,0,2247,2252,3,120,60,0,2248,
        2249,3,128,64,0,2249,2250,5,176,0,0,2250,2251,5,83,0,0,2251,2253,
        1,0,0,0,2252,2248,1,0,0,0,2252,2253,1,0,0,0,2253,2254,1,0,0,0,2254,
        2255,5,3,0,0,2255,2387,1,0,0,0,2256,2257,5,133,0,0,2257,2258,5,2,
        0,0,2258,2261,3,120,60,0,2259,2260,5,214,0,0,2260,2262,3,158,79,
        0,2261,2259,1,0,0,0,2261,2262,1,0,0,0,2262,2267,1,0,0,0,2263,2264,
        3,130,65,0,2264,2265,5,176,0,0,2265,2266,5,80,0,0,2266,2268,1,0,
        0,0,2267,2263,1,0,0,0,2267,2268,1,0,0,0,2268,2273,1,0,0,0,2269,2270,
        3,130,65,0,2270,2271,5,176,0,0,2271,2272,5,83,0,0,2272,2274,1,0,
        0,0,2273,2269,1,0,0,0,2273,2274,1,0,0,0,2274,2275,1,0,0,0,2275,2276,
        5,3,0,0,2276,2387,1,0,0,0,2277,2278,5,132,0,0,2278,2279,5,2,0,0,
        2279,2286,3,120,60,0,2280,2281,5,214,0,0,2281,2284,3,158,79,0,2282,
        2283,5,98,0,0,2283,2285,3,124,62,0,2284,2282,1,0,0,0,2284,2285,1,
        0,0,0,2285,2287,1,0,0,0,2286,2280,1,0,0,0,2286,2287,1,0,0,0,2287,
        2291,1,0,0,0,2288,2289,3,132,66,0,2289,2290,5,288,0,0,2290,2292,
        1,0,0,0,2291,2288,1,0,0,0,2291,2292,1,0,0,0,2292,2300,1,0,0,0,2293,
        2294,7,17,0,0,2294,2298,5,203,0,0,2295,2296,5,176,0,0,2296,2297,
        5,224,0,0,2297,2299,5,246,0,0,2298,2295,1,0,0,0,2298,2299,1,0,0,
        0,2299,2301,1,0,0,0,2300,2293,1,0,0,0,2300,2301,1,0,0,0,2301,2306,
        1,0,0,0,2302,2303,3,134,67,0,2303,2304,5,176,0,0,2304,2305,5,80,
        0,0,2305,2307,1,0,0,0,2306,2302,1,0,0,0,2306,2307,1,0,0,0,2307,2312,
        1,0,0,0,2308,2309,3,134,67,0,2309,2310,5,176,0,0,2310,2311,5,83,
        0,0,2311,2313,1,0,0,0,2312,2308,1,0,0,0,2312,2313,1,0,0,0,2313,2314,
        1,0,0,0,2314,2315,5,3,0,0,2315,2387,1,0,0,0,2316,2317,5,131,0,0,
        2317,2346,5,2,0,0,2318,2323,3,136,68,0,2319,2320,5,4,0,0,2320,2322,
        3,136,68,0,2321,2319,1,0,0,0,2322,2325,1,0,0,0,2323,2321,1,0,0,0,
        2323,2324,1,0,0,0,2324,2332,1,0,0,0,2325,2323,1,0,0,0,2326,2327,
        5,169,0,0,2327,2328,5,176,0,0,2328,2333,5,169,0,0,2329,2330,5,18,
        0,0,2330,2331,5,176,0,0,2331,2333,5,169,0,0,2332,2326,1,0,0,0,2332,
        2329,1,0,0,0,2332,2333,1,0,0,0,2333,2344,1,0,0,0,2334,2335,5,284,
        0,0,2335,2337,5,264,0,0,2336,2338,5,136,0,0,2337,2336,1,0,0,0,2337,
        2338,1,0,0,0,2338,2345,1,0,0,0,2339,2340,5,286,0,0,2340,2342,5,264,
        0,0,2341,2343,5,136,0,0,2342,2341,1,0,0,0,2342,2343,1,0,0,0,2343,
        2345,1,0,0,0,2344,2334,1,0,0,0,2344,2339,1,0,0,0,2344,2345,1,0,0,
        0,2345,2347,1,0,0,0,2346,2318,1,0,0,0,2346,2347,1,0,0,0,2347,2354,
        1,0,0,0,2348,2349,5,214,0,0,2349,2352,3,158,79,0,2350,2351,5,98,
        0,0,2351,2353,3,124,62,0,2352,2350,1,0,0,0,2352,2353,1,0,0,0,2353,
        2355,1,0,0,0,2354,2348,1,0,0,0,2354,2355,1,0,0,0,2355,2356,1,0,0,
        0,2356,2387,5,3,0,0,2357,2358,5,129,0,0,2358,2375,5,2,0,0,2359,2364,
        3,122,61,0,2360,2361,5,4,0,0,2361,2363,3,122,61,0,2362,2360,1,0,
        0,0,2363,2366,1,0,0,0,2364,2362,1,0,0,0,2364,2365,1,0,0,0,2365,2373,
        1,0,0,0,2366,2364,1,0,0,0,2367,2368,5,169,0,0,2368,2369,5,176,0,
        0,2369,2374,5,169,0,0,2370,2371,5,18,0,0,2371,2372,5,176,0,0,2372,
        2374,5,169,0,0,2373,2367,1,0,0,0,2373,2370,1,0,0,0,2373,2374,1,0,
        0,0,2374,2376,1,0,0,0,2375,2359,1,0,0,0,2375,2376,1,0,0,0,2376,2383,
        1,0,0,0,2377,2378,5,214,0,0,2378,2381,3,158,79,0,2379,2380,5,98,
        0,0,2380,2382,3,124,62,0,2381,2379,1,0,0,0,2381,2382,1,0,0,0,2382,
        2384,1,0,0,0,2383,2377,1,0,0,0,2383,2384,1,0,0,0,2384,2385,1,0,0,
        0,2385,2387,5,3,0,0,2386,1936,1,0,0,0,2386,1938,1,0,0,0,2386,1939,
        1,0,0,0,2386,1942,1,0,0,0,2386,1945,1,0,0,0,2386,1946,1,0,0,0,2386,
        1947,1,0,0,0,2386,1948,1,0,0,0,2386,1949,1,0,0,0,2386,1950,1,0,0,
        0,2386,1957,1,0,0,0,2386,1967,1,0,0,0,2386,1979,1,0,0,0,2386,2011,
        1,0,0,0,2386,2029,1,0,0,0,2386,2068,1,0,0,0,2386,2071,1,0,0,0,2386,
        2075,1,0,0,0,2386,2089,1,0,0,0,2386,2093,1,0,0,0,2386,2098,1,0,0,
        0,2386,2111,1,0,0,0,2386,2123,1,0,0,0,2386,2130,1,0,0,0,2386,2137,
        1,0,0,0,2386,2150,1,0,0,0,2386,2151,1,0,0,0,2386,2152,1,0,0,0,2386,
        2158,1,0,0,0,2386,2164,1,0,0,0,2386,2170,1,0,0,0,2386,2176,1,0,0,
        0,2386,2177,1,0,0,0,2386,2178,1,0,0,0,2386,2179,1,0,0,0,2386,2180,
        1,0,0,0,2386,2194,1,0,0,0,2386,2201,1,0,0,0,2386,2212,1,0,0,0,2386,
        2221,1,0,0,0,2386,2228,1,0,0,0,2386,2232,1,0,0,0,2386,2245,1,0,0,
        0,2386,2256,1,0,0,0,2386,2277,1,0,0,0,2386,2316,1,0,0,0,2386,2357,
        1,0,0,0,2387,2398,1,0,0,0,2388,2389,10,24,0,0,2389,2390,5,8,0,0,
        2390,2391,3,116,58,0,2391,2392,5,9,0,0,2392,2397,1,0,0,0,2393,2394,
        10,22,0,0,2394,2395,5,1,0,0,2395,2397,3,212,106,0,2396,2388,1,0,
        0,0,2396,2393,1,0,0,0,2397,2400,1,0,0,0,2398,2396,1,0,0,0,2398,2399,
        1,0,0,0,2399,119,1,0,0,0,2400,2398,1,0,0,0,2401,2402,3,122,61,0,
        2402,2403,5,4,0,0,2403,2413,3,142,71,0,2404,2405,5,189,0,0,2405,
        2410,3,126,63,0,2406,2407,5,4,0,0,2407,2409,3,126,63,0,2408,2406,
        1,0,0,0,2409,2412,1,0,0,0,2410,2408,1,0,0,0,2410,2411,1,0,0,0,2411,
        2414,1,0,0,0,2412,2410,1,0,0,0,2413,2404,1,0,0,0,2413,2414,1,0,0,
        0,2414,121,1,0,0,0,2415,2418,3,110,55,0,2416,2417,5,98,0,0,2417,
        2419,3,124,62,0,2418,2416,1,0,0,0,2418,2419,1,0,0,0,2419,123,1,0,
        0,0,2420,2423,5,128,0,0,2421,2422,5,81,0,0,2422,2424,7,18,0,0,2423,
        2421,1,0,0,0,2423,2424,1,0,0,0,2424,125,1,0,0,0,2425,2426,3,122,
        61,0,2426,2427,5,28,0,0,2427,2428,3,212,106,0,2428,127,1,0,0,0,2429,
        2430,7,19,0,0,2430,129,1,0,0,0,2431,2436,5,83,0,0,2432,2436,5,169,
        0,0,2433,2434,5,67,0,0,2434,2436,3,110,55,0,2435,2431,1,0,0,0,2435,
        2432,1,0,0,0,2435,2433,1,0,0,0,2436,131,1,0,0,0,2437,2439,5,286,
        0,0,2438,2440,5,27,0,0,2439,2438,1,0,0,0,2439,2440,1,0,0,0,2440,
        2449,1,0,0,0,2441,2443,5,284,0,0,2442,2444,7,20,0,0,2443,2442,1,
        0,0,0,2443,2444,1,0,0,0,2444,2446,1,0,0,0,2445,2447,5,27,0,0,2446,
        2445,1,0,0,0,2446,2447,1,0,0,0,2447,2449,1,0,0,0,2448,2437,1,0,0,
        0,2448,2441,1,0,0,0,2449,133,1,0,0,0,2450,2457,5,83,0,0,2451,2457,
        5,169,0,0,2452,2453,5,80,0,0,2453,2457,5,27,0,0,2454,2455,5,80,0,
        0,2455,2457,5,172,0,0,2456,2450,1,0,0,0,2456,2451,1,0,0,0,2456,2452,
        1,0,0,0,2456,2454,1,0,0,0,2457,135,1,0,0,0,2458,2460,5,135,0,0,2459,
        2458,1,0,0,0,2459,2460,1,0,0,0,2460,2461,1,0,0,0,2461,2462,3,110,
        55,0,2462,2463,5,276,0,0,2463,2464,3,122,61,0,2464,2470,1,0,0,0,
        2465,2466,3,110,55,0,2466,2467,5,10,0,0,2467,2468,3,122,61,0,2468,
        2470,1,0,0,0,2469,2459,1,0,0,0,2469,2465,1,0,0,0,2470,137,1,0,0,
        0,2471,2472,7,21,0,0,2472,139,1,0,0,0,2473,2474,5,113,0,0,2474,2478,
        5,171,0,0,2475,2476,5,212,0,0,2476,2478,5,171,0,0,2477,2473,1,0,
        0,0,2477,2475,1,0,0,0,2478,141,1,0,0,0,2479,2486,5,305,0,0,2480,
        2483,5,306,0,0,2481,2482,5,259,0,0,2482,2484,5,305,0,0,2483,2481,
        1,0,0,0,2483,2484,1,0,0,0,2484,2486,1,0,0,0,2485,2479,1,0,0,0,2485,
        2480,1,0,0,0,2486,143,1,0,0,0,2487,2488,5,249,0,0,2488,2489,5,291,
        0,0,2489,2494,3,152,76,0,2490,2491,5,249,0,0,2491,2492,5,291,0,0,
        2492,2494,3,142,71,0,2493,2487,1,0,0,0,2493,2490,1,0,0,0,2494,145,
        1,0,0,0,2495,2496,7,22,0,0,2496,147,1,0,0,0,2497,2498,7,23,0,0,2498,
        149,1,0,0,0,2499,2500,7,24,0,0,2500,151,1,0,0,0,2501,2503,5,121,
        0,0,2502,2504,7,15,0,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,
        2505,1,0,0,0,2505,2506,3,142,71,0,2506,2509,3,154,77,0,2507,2508,
        5,251,0,0,2508,2510,3,154,77,0,2509,2507,1,0,0,0,2509,2510,1,0,0,
        0,2510,153,1,0,0,0,2511,2512,7,25,0,0,2512,155,1,0,0,0,2513,2514,
        7,26,0,0,2514,157,1,0,0,0,2515,2516,6,79,-1,0,2516,2517,5,221,0,
        0,2517,2518,5,2,0,0,2518,2523,3,160,80,0,2519,2520,5,4,0,0,2520,
        2522,3,160,80,0,2521,2519,1,0,0,0,2522,2525,1,0,0,0,2523,2521,1,
        0,0,0,2523,2524,1,0,0,0,2524,2526,1,0,0,0,2525,2523,1,0,0,0,2526,
        2527,5,3,0,0,2527,2607,1,0,0,0,2528,2529,5,121,0,0,2529,2532,3,154,
        77,0,2530,2531,5,251,0,0,2531,2533,3,154,77,0,2532,2530,1,0,0,0,
        2532,2533,1,0,0,0,2533,2607,1,0,0,0,2534,2539,5,250,0,0,2535,2536,
        5,2,0,0,2536,2537,3,162,81,0,2537,2538,5,3,0,0,2538,2540,1,0,0,0,
        2539,2535,1,0,0,0,2539,2540,1,0,0,0,2540,2544,1,0,0,0,2541,2542,
        5,286,0,0,2542,2543,5,249,0,0,2543,2545,5,291,0,0,2544,2541,1,0,
        0,0,2544,2545,1,0,0,0,2545,2607,1,0,0,0,2546,2551,5,250,0,0,2547,
        2548,5,2,0,0,2548,2549,3,162,81,0,2549,2550,5,3,0,0,2550,2552,1,
        0,0,0,2551,2547,1,0,0,0,2551,2552,1,0,0,0,2552,2553,1,0,0,0,2553,
        2554,5,284,0,0,2554,2555,5,249,0,0,2555,2607,5,291,0,0,2556,2561,
        5,249,0,0,2557,2558,5,2,0,0,2558,2559,3,162,81,0,2559,2560,5,3,0,
        0,2560,2562,1,0,0,0,2561,2557,1,0,0,0,2561,2562,1,0,0,0,2562,2566,
        1,0,0,0,2563,2564,5,286,0,0,2564,2565,5,249,0,0,2565,2567,5,291,
        0,0,2566,2563,1,0,0,0,2566,2567,1,0,0,0,2567,2607,1,0,0,0,2568,2573,
        5,249,0,0,2569,2570,5,2,0,0,2570,2571,3,162,81,0,2571,2572,5,3,0,
        0,2572,2574,1,0,0,0,2573,2569,1,0,0,0,2573,2574,1,0,0,0,2574,2575,
        1,0,0,0,2575,2576,5,284,0,0,2576,2577,5,249,0,0,2577,2607,5,291,
        0,0,2578,2579,5,77,0,0,2579,2607,5,198,0,0,2580,2581,5,27,0,0,2581,
        2582,5,294,0,0,2582,2583,3,158,79,0,2583,2584,5,296,0,0,2584,2607,
        1,0,0,0,2585,2586,5,149,0,0,2586,2587,5,294,0,0,2587,2588,3,158,
        79,0,2588,2589,5,4,0,0,2589,2590,3,158,79,0,2590,2591,5,296,0,0,
        2591,2607,1,0,0,0,2592,2604,3,212,106,0,2593,2594,5,2,0,0,2594,2599,
        3,162,81,0,2595,2596,5,4,0,0,2596,2598,3,162,81,0,2597,2595,1,0,
        0,0,2598,2601,1,0,0,0,2599,2597,1,0,0,0,2599,2600,1,0,0,0,2600,2602,
        1,0,0,0,2601,2599,1,0,0,0,2602,2603,5,3,0,0,2603,2605,1,0,0,0,2604,
        2593,1,0,0,0,2604,2605,1,0,0,0,2605,2607,1,0,0,0,2606,2515,1,0,0,
        0,2606,2528,1,0,0,0,2606,2534,1,0,0,0,2606,2546,1,0,0,0,2606,2556,
        1,0,0,0,2606,2568,1,0,0,0,2606,2578,1,0,0,0,2606,2580,1,0,0,0,2606,
        2585,1,0,0,0,2606,2592,1,0,0,0,2607,2617,1,0,0,0,2608,2609,10,2,
        0,0,2609,2613,5,27,0,0,2610,2611,5,8,0,0,2611,2612,5,308,0,0,2612,
        2614,5,9,0,0,2613,2610,1,0,0,0,2613,2614,1,0,0,0,2614,2616,1,0,0,
        0,2615,2608,1,0,0,0,2616,2619,1,0,0,0,2617,2615,1,0,0,0,2617,2618,
        1,0,0,0,2618,159,1,0,0,0,2619,2617,1,0,0,0,2620,2625,3,158,79,0,
        2621,2622,3,212,106,0,2622,2623,3,158,79,0,2623,2625,1,0,0,0,2624,
        2620,1,0,0,0,2624,2621,1,0,0,0,2625,161,1,0,0,0,2626,2629,5,308,
        0,0,2627,2629,3,158,79,0,2628,2626,1,0,0,0,2628,2627,1,0,0,0,2629,
        163,1,0,0,0,2630,2631,5,281,0,0,2631,2632,3,110,55,0,2632,2633,5,
        247,0,0,2633,2634,3,110,55,0,2634,165,1,0,0,0,2635,2636,5,93,0,0,
        2636,2637,5,2,0,0,2637,2638,5,282,0,0,2638,2639,3,112,56,0,2639,
        2640,5,3,0,0,2640,167,1,0,0,0,2641,2642,5,281,0,0,2642,2645,5,151,
        0,0,2643,2644,5,25,0,0,2644,2646,3,110,55,0,2645,2643,1,0,0,0,2645,
        2646,1,0,0,0,2646,2647,1,0,0,0,2647,2648,5,247,0,0,2648,2649,5,268,
        0,0,2649,2650,5,233,0,0,2650,2651,3,212,106,0,2651,2652,5,292,0,
        0,2652,2660,3,110,55,0,2653,2654,5,4,0,0,2654,2655,3,212,106,0,2655,
        2656,5,292,0,0,2656,2657,3,110,55,0,2657,2659,1,0,0,0,2658,2653,
        1,0,0,0,2659,2662,1,0,0,0,2660,2658,1,0,0,0,2660,2661,1,0,0,0,2661,
        2706,1,0,0,0,2662,2660,1,0,0,0,2663,2664,5,281,0,0,2664,2667,5,151,
        0,0,2665,2666,5,25,0,0,2666,2668,3,110,55,0,2667,2665,1,0,0,0,2667,
        2668,1,0,0,0,2668,2669,1,0,0,0,2669,2670,5,247,0,0,2670,2706,5,70,
        0,0,2671,2672,5,281,0,0,2672,2673,5,168,0,0,2673,2676,5,151,0,0,
        2674,2675,5,25,0,0,2675,2677,3,110,55,0,2676,2674,1,0,0,0,2676,2677,
        1,0,0,0,2677,2678,1,0,0,0,2678,2679,5,247,0,0,2679,2691,5,119,0,
        0,2680,2681,5,2,0,0,2681,2686,3,212,106,0,2682,2683,5,4,0,0,2683,
        2685,3,212,106,0,2684,2682,1,0,0,0,2685,2688,1,0,0,0,2686,2684,1,
        0,0,0,2686,2687,1,0,0,0,2687,2689,1,0,0,0,2688,2686,1,0,0,0,2689,
        2690,5,3,0,0,2690,2692,1,0,0,0,2691,2680,1,0,0,0,2691,2692,1,0,0,
        0,2692,2693,1,0,0,0,2693,2694,5,277,0,0,2694,2695,5,2,0,0,2695,2700,
        3,110,55,0,2696,2697,5,4,0,0,2697,2699,3,110,55,0,2698,2696,1,0,
        0,0,2699,2702,1,0,0,0,2700,2698,1,0,0,0,2700,2701,1,0,0,0,2701,2703,
        1,0,0,0,2702,2700,1,0,0,0,2703,2704,5,3,0,0,2704,2706,1,0,0,0,2705,
        2641,1,0,0,0,2705,2663,1,0,0,0,2705,2671,1,0,0,0,2706,169,1,0,0,
        0,2707,2713,5,185,0,0,2708,2714,3,212,106,0,2709,2710,5,2,0,0,2710,
        2711,3,52,26,0,2711,2712,5,3,0,0,2712,2714,1,0,0,0,2713,2708,1,0,
        0,0,2713,2709,1,0,0,0,2714,171,1,0,0,0,2715,2716,5,155,0,0,2716,
        2721,3,78,39,0,2717,2718,5,4,0,0,2718,2720,3,78,39,0,2719,2717,1,
        0,0,0,2720,2723,1,0,0,0,2721,2719,1,0,0,0,2721,2722,1,0,0,0,2722,
        2725,1,0,0,0,2723,2721,1,0,0,0,2724,2715,1,0,0,0,2724,2725,1,0,0,
        0,2725,2726,1,0,0,0,2726,2730,3,174,87,0,2727,2728,5,21,0,0,2728,
        2729,5,150,0,0,2729,2731,3,84,42,0,2730,2727,1,0,0,0,2730,2731,1,
        0,0,0,2731,2733,1,0,0,0,2732,2734,7,14,0,0,2733,2732,1,0,0,0,2733,
        2734,1,0,0,0,2734,2740,1,0,0,0,2735,2736,5,192,0,0,2736,2737,5,2,
        0,0,2737,2738,3,178,89,0,2738,2739,5,3,0,0,2739,2741,1,0,0,0,2740,
        2735,1,0,0,0,2740,2741,1,0,0,0,2741,2751,1,0,0,0,2742,2743,5,239,
        0,0,2743,2748,3,86,43,0,2744,2745,5,4,0,0,2745,2747,3,86,43,0,2746,
        2744,1,0,0,0,2747,2750,1,0,0,0,2748,2746,1,0,0,0,2748,2749,1,0,0,
        0,2749,2752,1,0,0,0,2750,2748,1,0,0,0,2751,2742,1,0,0,0,2751,2752,
        1,0,0,0,2752,2762,1,0,0,0,2753,2754,5,68,0,0,2754,2759,3,88,44,0,
        2755,2756,5,4,0,0,2756,2758,3,88,44,0,2757,2755,1,0,0,0,2758,2761,
        1,0,0,0,2759,2757,1,0,0,0,2759,2760,1,0,0,0,2760,2763,1,0,0,0,2761,
        2759,1,0,0,0,2762,2753,1,0,0,0,2762,2763,1,0,0,0,2763,173,1,0,0,
        0,2764,2765,5,204,0,0,2765,2789,3,176,88,0,2766,2767,5,222,0,0,2767,
        2789,3,176,88,0,2768,2769,5,109,0,0,2769,2789,3,176,88,0,2770,2771,
        5,204,0,0,2771,2772,5,33,0,0,2772,2773,3,176,88,0,2773,2774,5,25,
        0,0,2774,2775,3,176,88,0,2775,2789,1,0,0,0,2776,2777,5,222,0,0,2777,
        2778,5,33,0,0,2778,2779,3,176,88,0,2779,2780,5,25,0,0,2780,2781,
        3,176,88,0,2781,2789,1,0,0,0,2782,2783,5,109,0,0,2783,2784,5,33,
        0,0,2784,2785,3,176,88,0,2785,2786,5,25,0,0,2786,2787,3,176,88,0,
        2787,2789,1,0,0,0,2788,2764,1,0,0,0,2788,2766,1,0,0,0,2788,2768,
        1,0,0,0,2788,2770,1,0,0,0,2788,2776,1,0,0,0,2788,2782,1,0,0,0,2789,
        175,1,0,0,0,2790,2791,5,260,0,0,2791,2800,5,197,0,0,2792,2793,5,
        260,0,0,2793,2800,5,96,0,0,2794,2795,5,54,0,0,2795,2800,5,221,0,
        0,2796,2797,3,110,55,0,2797,2798,7,27,0,0,2798,2800,1,0,0,0,2799,
        2790,1,0,0,0,2799,2792,1,0,0,0,2799,2794,1,0,0,0,2799,2796,1,0,0,
        0,2800,177,1,0,0,0,2801,2802,6,89,-1,0,2802,2804,3,180,90,0,2803,
        2805,3,182,91,0,2804,2803,1,0,0,0,2804,2805,1,0,0,0,2805,2813,1,
        0,0,0,2806,2807,10,2,0,0,2807,2812,3,178,89,3,2808,2809,10,1,0,0,
        2809,2810,5,11,0,0,2810,2812,3,178,89,2,2811,2806,1,0,0,0,2811,2808,
        1,0,0,0,2812,2815,1,0,0,0,2813,2811,1,0,0,0,2813,2814,1,0,0,0,2814,
        179,1,0,0,0,2815,2813,1,0,0,0,2816,2842,3,212,106,0,2817,2818,5,
        2,0,0,2818,2842,5,3,0,0,2819,2820,5,195,0,0,2820,2821,5,2,0,0,2821,
        2826,3,178,89,0,2822,2823,5,4,0,0,2823,2825,3,178,89,0,2824,2822,
        1,0,0,0,2825,2828,1,0,0,0,2826,2824,1,0,0,0,2826,2827,1,0,0,0,2827,
        2829,1,0,0,0,2828,2826,1,0,0,0,2829,2830,5,3,0,0,2830,2842,1,0,0,
        0,2831,2832,5,2,0,0,2832,2833,3,178,89,0,2833,2834,5,3,0,0,2834,
        2842,1,0,0,0,2835,2842,5,12,0,0,2836,2842,5,13,0,0,2837,2838,5,14,
        0,0,2838,2839,3,178,89,0,2839,2840,5,15,0,0,2840,2842,1,0,0,0,2841,
        2816,1,0,0,0,2841,2817,1,0,0,0,2841,2819,1,0,0,0,2841,2831,1,0,0,
        0,2841,2835,1,0,0,0,2841,2836,1,0,0,0,2841,2837,1,0,0,0,2842,181,
        1,0,0,0,2843,2845,5,300,0,0,2844,2846,5,304,0,0,2845,2844,1,0,0,
        0,2845,2846,1,0,0,0,2846,2874,1,0,0,0,2847,2849,5,298,0,0,2848,2850,
        5,304,0,0,2849,2848,1,0,0,0,2849,2850,1,0,0,0,2850,2874,1,0,0,0,
        2851,2853,5,304,0,0,2852,2854,5,304,0,0,2853,2852,1,0,0,0,2853,2854,
        1,0,0,0,2854,2874,1,0,0,0,2855,2856,5,16,0,0,2856,2857,5,308,0,0,
        2857,2859,5,17,0,0,2858,2860,5,304,0,0,2859,2858,1,0,0,0,2859,2860,
        1,0,0,0,2860,2874,1,0,0,0,2861,2863,5,16,0,0,2862,2864,5,308,0,0,
        2863,2862,1,0,0,0,2863,2864,1,0,0,0,2864,2865,1,0,0,0,2865,2867,
        5,4,0,0,2866,2868,5,308,0,0,2867,2866,1,0,0,0,2867,2868,1,0,0,0,
        2868,2869,1,0,0,0,2869,2871,5,17,0,0,2870,2872,5,304,0,0,2871,2870,
        1,0,0,0,2871,2872,1,0,0,0,2872,2874,1,0,0,0,2873,2843,1,0,0,0,2873,
        2847,1,0,0,0,2873,2851,1,0,0,0,2873,2855,1,0,0,0,2873,2861,1,0,0,
        0,2874,183,1,0,0,0,2875,2876,3,212,106,0,2876,2877,5,292,0,0,2877,
        2878,3,110,55,0,2878,185,1,0,0,0,2879,2880,5,98,0,0,2880,2884,7,
        28,0,0,2881,2882,5,258,0,0,2882,2884,7,29,0,0,2883,2879,1,0,0,0,
        2883,2881,1,0,0,0,2884,187,1,0,0,0,2885,2886,5,126,0,0,2886,2887,
        5,141,0,0,2887,2891,3,190,95,0,2888,2889,5,205,0,0,2889,2891,7,30,
        0,0,2890,2885,1,0,0,0,2890,2888,1,0,0,0,2891,189,1,0,0,0,2892,2893,
        5,205,0,0,2893,2900,5,261,0,0,2894,2895,5,205,0,0,2895,2900,5,46,
        0,0,2896,2897,5,209,0,0,2897,2900,5,205,0,0,2898,2900,5,231,0,0,
        2899,2892,1,0,0,0,2899,2894,1,0,0,0,2899,2896,1,0,0,0,2899,2898,
        1,0,0,0,2900,191,1,0,0,0,2901,2907,3,110,55,0,2902,2903,3,212,106,
        0,2903,2904,5,6,0,0,2904,2905,3,110,55,0,2905,2907,1,0,0,0,2906,
        2901,1,0,0,0,2906,2902,1,0,0,0,2907,193,1,0,0,0,2908,2909,3,212,
        106,0,2909,2910,5,1,0,0,2910,2911,3,212,106,0,2911,2914,1,0,0,0,
        2912,2914,3,212,106,0,2913,2908,1,0,0,0,2913,2912,1,0,0,0,2914,195,
        1,0,0,0,2915,2920,3,194,97,0,2916,2917,5,4,0,0,2917,2919,3,194,97,
        0,2918,2916,1,0,0,0,2919,2922,1,0,0,0,2920,2918,1,0,0,0,2920,2921,
        1,0,0,0,2921,197,1,0,0,0,2922,2920,1,0,0,0,2923,2924,7,31,0,0,2924,
        199,1,0,0,0,2925,2930,3,212,106,0,2926,2927,5,1,0,0,2927,2929,3,
        212,106,0,2928,2926,1,0,0,0,2929,2932,1,0,0,0,2930,2928,1,0,0,0,
        2930,2931,1,0,0,0,2931,201,1,0,0,0,2932,2930,1,0,0,0,2933,2934,5,
        97,0,0,2934,2935,3,204,102,0,2935,2936,5,28,0,0,2936,2937,5,173,
        0,0,2937,2938,3,116,58,0,2938,203,1,0,0,0,2939,2940,7,32,0,0,2940,
        205,1,0,0,0,2941,2945,3,208,104,0,2942,2945,5,62,0,0,2943,2945,5,
        58,0,0,2944,2941,1,0,0,0,2944,2942,1,0,0,0,2944,2943,1,0,0,0,2945,
        207,1,0,0,0,2946,2952,3,212,106,0,2947,2948,5,270,0,0,2948,2952,
        3,212,106,0,2949,2950,5,217,0,0,2950,2952,3,212,106,0,2951,2946,
        1,0,0,0,2951,2947,1,0,0,0,2951,2949,1,0,0,0,2952,209,1,0,0,0,2953,
        2958,3,212,106,0,2954,2955,5,4,0,0,2955,2957,3,212,106,0,2956,2954,
        1,0,0,0,2957,2960,1,0,0,0,2958,2956,1,0,0,0,2958,2959,1,0,0,0,2959,
        211,1,0,0,0,2960,2958,1,0,0,0,2961,2967,5,311,0,0,2962,2967,5,313,
        0,0,2963,2967,3,216,108,0,2964,2967,5,314,0,0,2965,2967,5,312,0,
        0,2966,2961,1,0,0,0,2966,2962,1,0,0,0,2966,2963,1,0,0,0,2966,2964,
        1,0,0,0,2966,2965,1,0,0,0,2967,213,1,0,0,0,2968,2970,5,299,0,0,2969,
        2968,1,0,0,0,2969,2970,1,0,0,0,2970,2971,1,0,0,0,2971,2981,5,309,
        0,0,2972,2974,5,299,0,0,2973,2972,1,0,0,0,2973,2974,1,0,0,0,2974,
        2975,1,0,0,0,2975,2981,5,310,0,0,2976,2978,5,299,0,0,2977,2976,1,
        0,0,0,2977,2978,1,0,0,0,2978,2979,1,0,0,0,2979,2981,5,308,0,0,2980,
        2969,1,0,0,0,2980,2973,1,0,0,0,2980,2977,1,0,0,0,2981,215,1,0,0,
        0,2982,2983,7,33,0,0,2983,217,1,0,0,0,400,246,253,257,261,267,271,
        278,283,287,293,297,318,322,326,330,338,342,345,352,361,367,371,
        377,384,393,405,414,423,429,440,448,456,463,473,480,488,524,527,
        530,534,540,545,552,558,562,566,574,580,584,598,606,625,650,653,
        663,667,674,684,690,695,699,705,714,720,724,731,735,743,748,752,
        760,768,773,777,787,794,799,803,813,816,825,830,836,860,866,868,
        874,880,882,890,892,898,904,906,921,926,933,945,947,955,957,975,
        978,982,986,1004,1007,1023,1033,1038,1044,1047,1056,1058,1061,1067,
        1074,1079,1085,1089,1093,1099,1110,1119,1129,1132,1137,1139,1146,
        1152,1154,1158,1168,1174,1177,1179,1191,1198,1202,1206,1210,1217,
        1226,1229,1233,1238,1242,1250,1253,1256,1263,1274,1277,1287,1290,
        1301,1306,1314,1317,1321,1330,1339,1342,1351,1354,1357,1361,1372,
        1375,1382,1385,1404,1408,1412,1416,1420,1424,1426,1437,1442,1451,
        1460,1463,1469,1481,1484,1493,1496,1504,1507,1510,1515,1518,1530,
        1533,1541,1546,1550,1552,1554,1569,1571,1582,1603,1613,1624,1628,
        1630,1638,1645,1658,1664,1680,1689,1692,1700,1703,1710,1715,1726,
        1729,1733,1735,1743,1753,1759,1761,1768,1772,1774,1781,1785,1787,
        1789,1798,1809,1813,1823,1833,1837,1845,1847,1860,1868,1877,1883,
        1891,1897,1901,1906,1911,1917,1931,1933,1963,1974,1982,1987,1992,
        2005,2011,2018,2023,2026,2029,2034,2041,2044,2053,2056,2060,2063,
        2066,2081,2084,2103,2107,2115,2119,2144,2147,2156,2162,2168,2174,
        2183,2186,2189,2208,2217,2239,2242,2252,2261,2267,2273,2284,2286,
        2291,2298,2300,2306,2312,2323,2332,2337,2342,2344,2346,2352,2354,
        2364,2373,2375,2381,2383,2386,2396,2398,2410,2413,2418,2423,2435,
        2439,2443,2446,2448,2456,2459,2469,2477,2483,2485,2493,2503,2509,
        2523,2532,2539,2544,2551,2561,2566,2573,2599,2604,2606,2613,2617,
        2624,2628,2645,2660,2667,2676,2686,2691,2700,2705,2713,2721,2724,
        2730,2733,2740,2748,2751,2759,2762,2788,2799,2804,2811,2813,2826,
        2841,2845,2849,2853,2859,2863,2867,2871,2873,2883,2890,2899,2906,
        2913,2920,2930,2944,2951,2958,2966,2969,2973,2977,2980
    ]

class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'('", "')'", "','", "'SKIP'", 
                     "'=>'", "'->'", "'['", "']'", "':'", "'|'", "'^'", 
                     "'$'", "'{-'", "'-}'", "'{'", "'}'", "'ABSENT'", "'ADD'", 
                     "'ADMIN'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", 
                     "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", 
                     "'AUTHORIZATION'", "'BERNOULLI'", "'BETWEEN'", "'BOTH'", 
                     "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
                     "'CATALOG'", "'CATALOGS'", "'COLUMN'", "'COLUMNS'", 
                     "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'CONDITIONAL'", 
                     "'CONSTRAINT'", "'COUNT'", "'COPARTITION'", "'CREATE'", 
                     "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_CATALOG'", 
                     "'CURRENT_DATE'", "'CURRENT_PATH'", "'CURRENT_ROLE'", 
                     "'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_USER'", "'DATA'", "'DATE'", "'DAY'", "'DEALLOCATE'", 
                     "'DEFAULT'", "'DEFINE'", "'DEFINER'", "'DELETE'", "'DENY'", 
                     "'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", "'DISTINCT'", 
                     "'DISTRIBUTED'", "'DOUBLE'", "'DROP'", "'ELSE'", "'EMPTY'", 
                     "'ENCODING'", "'END'", "'ERROR'", "'ESCAPE'", "'EXCEPT'", 
                     "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", 
                     "'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FINAL'", 
                     "'FIRST'", "'FOLLOWING'", "'FOR'", "'FORMAT'", "'FROM'", 
                     "'FULL'", "'FUNCTIONS'", "'GRACE'", "'GRANT'", "'GRANTED'", 
                     "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", "'GROUPING'", 
                     "'GROUPS'", "'HAVING'", "'HOUR'", "'IF'", "'IGNORE'", 
                     "'IN'", "'INCLUDING'", "'INITIAL'", "'INNER'", "'INPUT'", 
                     "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INTO'", 
                     "'INVOKER'", "'IO'", "'IS'", "'ISOLATION'", "'JOIN'", 
                     "'JSON'", "'JSON_ARRAY'", "'JSON_EXISTS'", "'JSON_OBJECT'", 
                     "'JSON_QUERY'", "'JSON_VALUE'", "'KEEP'", "'KEY'", 
                     "'KEYS'", "'LAST'", "'LATERAL'", "'LEADING'", "'LEFT'", 
                     "'LEVEL'", "'LIKE'", "'LIMIT'", "'LISTAGG'", "'LOCAL'", 
                     "'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOGICAL'", "'MAP'", 
                     "'MATCH'", "'MATCHED'", "'MATCHES'", "'MATCH_RECOGNIZE'", 
                     "'MATERIALIZED'", "'MEASURES'", "'MERGE'", "'MINUTE'", 
                     "'MONTH'", "'NATURAL'", "'NEXT'", "'NFC'", "'NFD'", 
                     "'NFKC'", "'NFKD'", "'NO'", "'NONE'", "'NORMALIZE'", 
                     "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", "'OBJECT'", 
                     "'OF'", "'OFFSET'", "'OMIT'", "'ON'", "'ONE'", "'ONLY'", 
                     "'OPTION'", "'OR'", "'ORDER'", "'ORDINALITY'", "'OUTER'", 
                     "'OUTPUT'", "'OVER'", "'OVERFLOW'", "'PARTITION'", 
                     "'PARTITIONS'", "'PASSING'", "'PAST'", "'PATH'", "'PATTERN'", 
                     "'PER'", "'PERIOD'", "'PERMUTE'", "'POSITION'", "'PRECEDING'", 
                     "'PRECISION'", "'PREPARE'", "'PRIVILEGES'", "'PROPERTIES'", 
                     "'PRUNE'", "'QUOTES'", "'RANGE'", "'READ'", "'RECURSIVE'", 
                     "'REFRESH'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", 
                     "'RESET'", "'RESPECT'", "'RESTRICT'", "'RETURNING'", 
                     "'REVOKE'", "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", 
                     "'ROLLUP'", "'ROW'", "'ROWS'", "'RUNNING'", "'SCALAR'", 
                     "'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SECURITY'", 
                     "'SEEK'", "'SELECT'", "'SERIALIZABLE'", "'SESSION'", 
                     "'SET'", "'SETS'", "'SHOW'", "'SOME'", "'START'", "'STATS'", 
                     "'SUBSET'", "'SUBSTRING'", "'SYSTEM'", "'TABLE'", "'TABLES'", 
                     "'TABLESAMPLE'", "'TEXT'", "'STRING'", "'THEN'", "'TIES'", 
                     "'TIME'", "'TIMESTAMP'", "'TO'", "'TRAILING'", "'TRANSACTION'", 
                     "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", 
                     "'UESCAPE'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNCONDITIONAL'", 
                     "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNMATCHED'", 
                     "'UNNEST'", "'UPDATE'", "'USE'", "'USER'", "'USING'", 
                     "'UTF16'", "'UTF32'", "'UTF8'", "'VALIDATE'", "'VALUE'", 
                     "'VALUES'", "'VERBOSE'", "'VERSION'", "'VIEW'", "'WHEN'", 
                     "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'WITHOUT'", 
                     "'WORK'", "'WRAPPER'", "'WRITE'", "'YEAR'", "'ZONE'", 
                     "'='", "<INVALID>", "'<'", "'<='", "'>'", "'>='", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'||'", "'?'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "ABSENT", "ADD", "ADMIN", 
                      "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANY", 
                      "ARRAY", "AS", "ASC", "AT", "AUTHORIZATION", "BERNOULLI", 
                      "BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", 
                      "CAST", "CATALOG", "CATALOGS", "COLUMN", "COLUMNS", 
                      "COMMENT", "COMMIT", "COMMITTED", "CONDITIONAL", "CONSTRAINT", 
                      "COUNT", "COPARTITION", "CREATE", "CROSS", "CUBE", 
                      "CURRENT", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_PATH", 
                      "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATE", 
                      "DAY", "DEALLOCATE", "DEFAULT", "DEFINE", "DEFINER", 
                      "DELETE", "DENY", "DESC", "DESCRIBE", "DESCRIPTOR", 
                      "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "ELSE", 
                      "EMPTY", "ENCODING", "END", "ERROR", "ESCAPE", "EXCEPT", 
                      "EXCLUDING", "EXECUTE", "EXISTS", "EXPLAIN", "EXTRACT", 
                      "FALSE", "FETCH", "FILTER", "FINAL", "FIRST", "FOLLOWING", 
                      "FOR", "FORMAT", "FROM", "FULL", "FUNCTIONS", "GRACE", 
                      "GRANT", "GRANTED", "GRANTS", "GRAPHVIZ", "GROUP", 
                      "GROUPING", "GROUPS", "HAVING", "HOUR", "IF", "IGNORE", 
                      "IN", "INCLUDING", "INITIAL", "INNER", "INPUT", "INSERT", 
                      "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IO", 
                      "IS", "ISOLATION", "JOIN", "JSON", "JSON_ARRAY", "JSON_EXISTS", 
                      "JSON_OBJECT", "JSON_QUERY", "JSON_VALUE", "KEEP", 
                      "KEY", "KEYS", "LAST", "LATERAL", "LEADING", "LEFT", 
                      "LEVEL", "LIKE", "LIMIT", "LISTAGG", "LOCAL", "LOCALTIME", 
                      "LOCALTIMESTAMP", "LOGICAL", "MAP", "MATCH", "MATCHED", 
                      "MATCHES", "MATCH_RECOGNIZE", "MATERIALIZED", "MEASURES", 
                      "MERGE", "MINUTE", "MONTH", "NATURAL", "NEXT", "NFC", 
                      "NFD", "NFKC", "NFKD", "NO", "NONE", "NORMALIZE", 
                      "NOT", "NULL", "NULLIF", "NULLS", "OBJECT", "OF", 
                      "OFFSET", "OMIT", "ON", "ONE", "ONLY", "OPTION", "OR", 
                      "ORDER", "ORDINALITY", "OUTER", "OUTPUT", "OVER", 
                      "OVERFLOW", "PARTITION", "PARTITIONS", "PASSING", 
                      "PAST", "PATH", "PATTERN", "PER", "PERIOD", "PERMUTE", 
                      "POSITION", "PRECEDING", "PRECISION", "PREPARE", "PRIVILEGES", 
                      "PROPERTIES", "PRUNE", "QUOTES", "RANGE", "READ", 
                      "RECURSIVE", "REFRESH", "RENAME", "REPEATABLE", "REPLACE", 
                      "RESET", "RESPECT", "RESTRICT", "RETURNING", "REVOKE", 
                      "RIGHT", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", 
                      "ROWS", "RUNNING", "SCALAR", "SCHEMA", "SCHEMAS", 
                      "SECOND", "SECURITY", "SEEK", "SELECT", "SERIALIZABLE", 
                      "SESSION", "SET", "SETS", "SHOW", "SOME", "START", 
                      "STATS", "SUBSET", "SUBSTRING", "SYSTEM", "TABLE", 
                      "TABLES", "TABLESAMPLE", "TEXT", "TEXT_STRING", "THEN", 
                      "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", 
                      "TRIM", "TRUE", "TRUNCATE", "TRY_CAST", "TYPE", "UESCAPE", 
                      "UNBOUNDED", "UNCOMMITTED", "UNCONDITIONAL", "UNION", 
                      "UNIQUE", "UNKNOWN", "UNMATCHED", "UNNEST", "UPDATE", 
                      "USE", "USER", "USING", "UTF16", "UTF32", "UTF8", 
                      "VALIDATE", "VALUE", "VALUES", "VERBOSE", "VERSION", 
                      "VIEW", "WHEN", "WHERE", "WINDOW", "WITH", "WITHIN", 
                      "WITHOUT", "WORK", "WRAPPER", "WRITE", "YEAR", "ZONE", 
                      "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
                      "ASTERISK", "SLASH", "PERCENT", "CONCAT", "QUESTION_MARK", 
                      "STRING", "UNICODE_STRING", "BINARY_LITERAL", "INTEGER_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", 
                      "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "DELIMITER" ]

    RULE_singleStatement = 0
    RULE_standaloneExpression = 1
    RULE_standalonePathSpecification = 2
    RULE_standaloneType = 3
    RULE_standaloneRowPattern = 4
    RULE_statement = 5
    RULE_query = 6
    RULE_with = 7
    RULE_tableElement = 8
    RULE_columnDefinition = 9
    RULE_likeClause = 10
    RULE_properties = 11
    RULE_propertyAssignments = 12
    RULE_property = 13
    RULE_propertyValue = 14
    RULE_queryNoWith = 15
    RULE_limitRowCount = 16
    RULE_rowCount = 17
    RULE_queryTerm = 18
    RULE_queryPrimary = 19
    RULE_sortItem = 20
    RULE_querySpecification = 21
    RULE_groupBy = 22
    RULE_groupingElement = 23
    RULE_groupingSet = 24
    RULE_windowDefinition = 25
    RULE_windowSpecification = 26
    RULE_namedQuery = 27
    RULE_setQuantifier = 28
    RULE_selectItem = 29
    RULE_relation = 30
    RULE_joinType = 31
    RULE_joinCriteria = 32
    RULE_sampledRelation = 33
    RULE_sampleType = 34
    RULE_trimsSpecification = 35
    RULE_listAggOverflowBehavior = 36
    RULE_listaggCountIndication = 37
    RULE_patternRecognition = 38
    RULE_measureDefinition = 39
    RULE_rowsPerMatch = 40
    RULE_emptyMatchHandling = 41
    RULE_skipTo = 42
    RULE_subsetDefinition = 43
    RULE_variableDefinition = 44
    RULE_aliasedRelation = 45
    RULE_columnAliases = 46
    RULE_relationPrimary = 47
    RULE_tableFunctionCall = 48
    RULE_tableFunctionArgument = 49
    RULE_tableArgument = 50
    RULE_tableArgumentRelation = 51
    RULE_descriptorArgument = 52
    RULE_descriptorField = 53
    RULE_copartitionTables = 54
    RULE_expression = 55
    RULE_booleanExpression = 56
    RULE_predicate = 57
    RULE_valueExpression = 58
    RULE_primaryExpression = 59
    RULE_jsonPathInvocation = 60
    RULE_jsonValueExpression = 61
    RULE_jsonRepresentation = 62
    RULE_jsonArgument = 63
    RULE_jsonExistsErrorBehavior = 64
    RULE_jsonValueBehavior = 65
    RULE_jsonQueryWrapperBehavior = 66
    RULE_jsonQueryBehavior = 67
    RULE_jsonObjectMember = 68
    RULE_processingMode = 69
    RULE_nullTreatment = 70
    RULE_string = 71
    RULE_timeZoneSpecifier = 72
    RULE_comparisonOperator = 73
    RULE_comparisonQuantifier = 74
    RULE_booleanValue = 75
    RULE_interval = 76
    RULE_intervalField = 77
    RULE_normalForm = 78
    RULE_type = 79
    RULE_rowField = 80
    RULE_typeParameter = 81
    RULE_whenClause = 82
    RULE_filter = 83
    RULE_mergeCase = 84
    RULE_over = 85
    RULE_windowFrame = 86
    RULE_frameExtent = 87
    RULE_frameBound = 88
    RULE_rowPattern = 89
    RULE_patternPrimary = 90
    RULE_patternQuantifier = 91
    RULE_updateAssignment = 92
    RULE_explainOption = 93
    RULE_transactionMode = 94
    RULE_levelOfIsolation = 95
    RULE_callArgument = 96
    RULE_pathElement = 97
    RULE_pathSpecification = 98
    RULE_privilege = 99
    RULE_qualifiedName = 100
    RULE_queryPeriod = 101
    RULE_rangeType = 102
    RULE_grantor = 103
    RULE_principal = 104
    RULE_roles = 105
    RULE_identifier = 106
    RULE_number = 107
    RULE_nonReserved = 108

    ruleNames =  [ "singleStatement", "standaloneExpression", "standalonePathSpecification", 
                   "standaloneType", "standaloneRowPattern", "statement", 
                   "query", "with", "tableElement", "columnDefinition", 
                   "likeClause", "properties", "propertyAssignments", "property", 
                   "propertyValue", "queryNoWith", "limitRowCount", "rowCount", 
                   "queryTerm", "queryPrimary", "sortItem", "querySpecification", 
                   "groupBy", "groupingElement", "groupingSet", "windowDefinition", 
                   "windowSpecification", "namedQuery", "setQuantifier", 
                   "selectItem", "relation", "joinType", "joinCriteria", 
                   "sampledRelation", "sampleType", "trimsSpecification", 
                   "listAggOverflowBehavior", "listaggCountIndication", 
                   "patternRecognition", "measureDefinition", "rowsPerMatch", 
                   "emptyMatchHandling", "skipTo", "subsetDefinition", "variableDefinition", 
                   "aliasedRelation", "columnAliases", "relationPrimary", 
                   "tableFunctionCall", "tableFunctionArgument", "tableArgument", 
                   "tableArgumentRelation", "descriptorArgument", "descriptorField", 
                   "copartitionTables", "expression", "booleanExpression", 
                   "predicate", "valueExpression", "primaryExpression", 
                   "jsonPathInvocation", "jsonValueExpression", "jsonRepresentation", 
                   "jsonArgument", "jsonExistsErrorBehavior", "jsonValueBehavior", 
                   "jsonQueryWrapperBehavior", "jsonQueryBehavior", "jsonObjectMember", 
                   "processingMode", "nullTreatment", "string", "timeZoneSpecifier", 
                   "comparisonOperator", "comparisonQuantifier", "booleanValue", 
                   "interval", "intervalField", "normalForm", "type", "rowField", 
                   "typeParameter", "whenClause", "filter", "mergeCase", 
                   "over", "windowFrame", "frameExtent", "frameBound", "rowPattern", 
                   "patternPrimary", "patternQuantifier", "updateAssignment", 
                   "explainOption", "transactionMode", "levelOfIsolation", 
                   "callArgument", "pathElement", "pathSpecification", "privilege", 
                   "qualifiedName", "queryPeriod", "rangeType", "grantor", 
                   "principal", "roles", "identifier", "number", "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    ABSENT=18
    ADD=19
    ADMIN=20
    AFTER=21
    ALL=22
    ALTER=23
    ANALYZE=24
    AND=25
    ANY=26
    ARRAY=27
    AS=28
    ASC=29
    AT=30
    AUTHORIZATION=31
    BERNOULLI=32
    BETWEEN=33
    BOTH=34
    BY=35
    CALL=36
    CASCADE=37
    CASE=38
    CAST=39
    CATALOG=40
    CATALOGS=41
    COLUMN=42
    COLUMNS=43
    COMMENT=44
    COMMIT=45
    COMMITTED=46
    CONDITIONAL=47
    CONSTRAINT=48
    COUNT=49
    COPARTITION=50
    CREATE=51
    CROSS=52
    CUBE=53
    CURRENT=54
    CURRENT_CATALOG=55
    CURRENT_DATE=56
    CURRENT_PATH=57
    CURRENT_ROLE=58
    CURRENT_SCHEMA=59
    CURRENT_TIME=60
    CURRENT_TIMESTAMP=61
    CURRENT_USER=62
    DATA=63
    DATE=64
    DAY=65
    DEALLOCATE=66
    DEFAULT=67
    DEFINE=68
    DEFINER=69
    DELETE=70
    DENY=71
    DESC=72
    DESCRIBE=73
    DESCRIPTOR=74
    DISTINCT=75
    DISTRIBUTED=76
    DOUBLE=77
    DROP=78
    ELSE=79
    EMPTY=80
    ENCODING=81
    END=82
    ERROR=83
    ESCAPE=84
    EXCEPT=85
    EXCLUDING=86
    EXECUTE=87
    EXISTS=88
    EXPLAIN=89
    EXTRACT=90
    FALSE=91
    FETCH=92
    FILTER=93
    FINAL=94
    FIRST=95
    FOLLOWING=96
    FOR=97
    FORMAT=98
    FROM=99
    FULL=100
    FUNCTIONS=101
    GRACE=102
    GRANT=103
    GRANTED=104
    GRANTS=105
    GRAPHVIZ=106
    GROUP=107
    GROUPING=108
    GROUPS=109
    HAVING=110
    HOUR=111
    IF=112
    IGNORE=113
    IN=114
    INCLUDING=115
    INITIAL=116
    INNER=117
    INPUT=118
    INSERT=119
    INTERSECT=120
    INTERVAL=121
    INTO=122
    INVOKER=123
    IO=124
    IS=125
    ISOLATION=126
    JOIN=127
    JSON=128
    JSON_ARRAY=129
    JSON_EXISTS=130
    JSON_OBJECT=131
    JSON_QUERY=132
    JSON_VALUE=133
    KEEP=134
    KEY=135
    KEYS=136
    LAST=137
    LATERAL=138
    LEADING=139
    LEFT=140
    LEVEL=141
    LIKE=142
    LIMIT=143
    LISTAGG=144
    LOCAL=145
    LOCALTIME=146
    LOCALTIMESTAMP=147
    LOGICAL=148
    MAP=149
    MATCH=150
    MATCHED=151
    MATCHES=152
    MATCH_RECOGNIZE=153
    MATERIALIZED=154
    MEASURES=155
    MERGE=156
    MINUTE=157
    MONTH=158
    NATURAL=159
    NEXT=160
    NFC=161
    NFD=162
    NFKC=163
    NFKD=164
    NO=165
    NONE=166
    NORMALIZE=167
    NOT=168
    NULL=169
    NULLIF=170
    NULLS=171
    OBJECT=172
    OF=173
    OFFSET=174
    OMIT=175
    ON=176
    ONE=177
    ONLY=178
    OPTION=179
    OR=180
    ORDER=181
    ORDINALITY=182
    OUTER=183
    OUTPUT=184
    OVER=185
    OVERFLOW=186
    PARTITION=187
    PARTITIONS=188
    PASSING=189
    PAST=190
    PATH=191
    PATTERN=192
    PER=193
    PERIOD=194
    PERMUTE=195
    POSITION=196
    PRECEDING=197
    PRECISION=198
    PREPARE=199
    PRIVILEGES=200
    PROPERTIES=201
    PRUNE=202
    QUOTES=203
    RANGE=204
    READ=205
    RECURSIVE=206
    REFRESH=207
    RENAME=208
    REPEATABLE=209
    REPLACE=210
    RESET=211
    RESPECT=212
    RESTRICT=213
    RETURNING=214
    REVOKE=215
    RIGHT=216
    ROLE=217
    ROLES=218
    ROLLBACK=219
    ROLLUP=220
    ROW=221
    ROWS=222
    RUNNING=223
    SCALAR=224
    SCHEMA=225
    SCHEMAS=226
    SECOND=227
    SECURITY=228
    SEEK=229
    SELECT=230
    SERIALIZABLE=231
    SESSION=232
    SET=233
    SETS=234
    SHOW=235
    SOME=236
    START=237
    STATS=238
    SUBSET=239
    SUBSTRING=240
    SYSTEM=241
    TABLE=242
    TABLES=243
    TABLESAMPLE=244
    TEXT=245
    TEXT_STRING=246
    THEN=247
    TIES=248
    TIME=249
    TIMESTAMP=250
    TO=251
    TRAILING=252
    TRANSACTION=253
    TRIM=254
    TRUE=255
    TRUNCATE=256
    TRY_CAST=257
    TYPE=258
    UESCAPE=259
    UNBOUNDED=260
    UNCOMMITTED=261
    UNCONDITIONAL=262
    UNION=263
    UNIQUE=264
    UNKNOWN=265
    UNMATCHED=266
    UNNEST=267
    UPDATE=268
    USE=269
    USER=270
    USING=271
    UTF16=272
    UTF32=273
    UTF8=274
    VALIDATE=275
    VALUE=276
    VALUES=277
    VERBOSE=278
    VERSION=279
    VIEW=280
    WHEN=281
    WHERE=282
    WINDOW=283
    WITH=284
    WITHIN=285
    WITHOUT=286
    WORK=287
    WRAPPER=288
    WRITE=289
    YEAR=290
    ZONE=291
    EQ=292
    NEQ=293
    LT=294
    LTE=295
    GT=296
    GTE=297
    PLUS=298
    MINUS=299
    ASTERISK=300
    SLASH=301
    PERCENT=302
    CONCAT=303
    QUESTION_MARK=304
    STRING=305
    UNICODE_STRING=306
    BINARY_LITERAL=307
    INTEGER_VALUE=308
    DECIMAL_VALUE=309
    DOUBLE_VALUE=310
    IDENTIFIER=311
    DIGIT_IDENTIFIER=312
    QUOTED_IDENTIFIER=313
    BACKQUOTED_IDENTIFIER=314
    SIMPLE_COMMENT=315
    BRACKETED_COMMENT=316
    WS=317
    UNRECOGNIZED=318
    DELIMITER=319

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.statement()
            self.state = 219
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneExpression" ):
                listener.enterStandaloneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneExpression" ):
                listener.exitStandaloneExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneExpression" ):
                return visitor.visitStandaloneExpression(self)
            else:
                return visitor.visitChildren(self)




    def standaloneExpression(self):

        localctx = SqlBaseParser.StandaloneExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_standaloneExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.expression()
            self.state = 222
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandalonePathSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.PathSpecificationContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standalonePathSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalonePathSpecification" ):
                listener.enterStandalonePathSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalonePathSpecification" ):
                listener.exitStandalonePathSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalonePathSpecification" ):
                return visitor.visitStandalonePathSpecification(self)
            else:
                return visitor.visitChildren(self)




    def standalonePathSpecification(self):

        localctx = SqlBaseParser.StandalonePathSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_standalonePathSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.pathSpecification()
            self.state = 225
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneType" ):
                listener.enterStandaloneType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneType" ):
                listener.exitStandaloneType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneType" ):
                return visitor.visitStandaloneType(self)
            else:
                return visitor.visitChildren(self)




    def standaloneType(self):

        localctx = SqlBaseParser.StandaloneTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_standaloneType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.type_(0)
            self.state = 228
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneRowPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneRowPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneRowPattern" ):
                listener.enterStandaloneRowPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneRowPattern" ):
                listener.exitStandaloneRowPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneRowPattern" ):
                return visitor.visitStandaloneRowPattern(self)
            else:
                return visitor.visitChildren(self)




    def standaloneRowPattern(self):

        localctx = SqlBaseParser.StandaloneRowPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_standaloneRowPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.rowPattern(0)
            self.state = 231
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExplainOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class PrepareContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepare" ):
                listener.enterPrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepare" ):
                listener.exitPrepare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrepare" ):
                return visitor.visitPrepare(self)
            else:
                return visitor.visitChildren(self)


    class DropMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMaterializedView" ):
                listener.enterDropMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMaterializedView" ):
                listener.exitDropMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropMaterializedView" ):
                return visitor.visitDropMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class SetMaterializedViewPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)
        def propertyAssignments(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyAssignmentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetMaterializedViewProperties" ):
                listener.enterSetMaterializedViewProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetMaterializedViewProperties" ):
                listener.exitSetMaterializedViewProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetMaterializedViewProperties" ):
                return visitor.visitSetMaterializedViewProperties(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.schema = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DeallocateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEALLOCATE(self):
            return self.getToken(SqlBaseParser.DEALLOCATE, 0)
        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate" ):
                listener.enterDeallocate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate" ):
                listener.exitDeallocate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocate" ):
                return visitor.visitDeallocate(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class CommitContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit" ):
                return visitor.visitCommit(self)
            else:
                return visitor.visitChildren(self)


    class CreateRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRole" ):
                return visitor.visitCreateRole(self)
            else:
                return visitor.visitChildren(self)


    class DropColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumn" ):
                listener.enterDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumn" ):
                listener.exitDropColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropColumn" ):
                return visitor.visitDropColumn(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class SetViewAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetViewAuthorization" ):
                listener.enterSetViewAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetViewAuthorization" ):
                listener.exitSetViewAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetViewAuthorization" ):
                return visitor.visitSetViewAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class ShowCatalogsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogs" ):
                listener.enterShowCatalogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogs" ):
                listener.exitShowCatalogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCatalogs" ):
                return visitor.visitShowCatalogs(self)
            else:
                return visitor.visitChildren(self)


    class ShowRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)
        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoles" ):
                listener.enterShowRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoles" ):
                listener.exitShowRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoles" ):
                return visitor.visitShowRoles(self)
            else:
                return visitor.visitChildren(self)


    class MergeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def mergeCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MergeCaseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MergeCaseContext,i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge" ):
                listener.enterMerge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge" ):
                listener.exitMerge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge" ):
                return visitor.visitMerge(self)
            else:
                return visitor.visitChildren(self)


    class RenameColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.from_ = None # IdentifierContext
            self.to = None # IdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameColumn" ):
                listener.enterRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameColumn" ):
                listener.exitRenameColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameColumn" ):
                return visitor.visitRenameColumn(self)
            else:
                return visitor.visitChildren(self)


    class CommentColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumn" ):
                listener.enterCommentColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumn" ):
                listener.exitCommentColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentColumn" ):
                return visitor.visitCommentColumn(self)
            else:
                return visitor.visitChildren(self)


    class RevokeRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def roles(self):
            return self.getTypedRuleContext(SqlBaseParser.RolesContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,i)

        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRoles" ):
                listener.enterRevokeRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRoles" ):
                listener.exitRevokeRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeRoles" ):
                return visitor.visitRevokeRoles(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowRoleGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoleGrants" ):
                listener.enterShowRoleGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoleGrants" ):
                listener.exitShowRoleGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoleGrants" ):
                return visitor.visitShowRoleGrants(self)
            else:
                return visitor.visitChildren(self)


    class AddColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # ColumnDefinitionContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumn" ):
                listener.enterAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumn" ):
                listener.exitAddColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddColumn" ):
                return visitor.visitAddColumn(self)
            else:
                return visitor.visitChildren(self)


    class DenyContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def DENY(self):
            return self.getToken(SqlBaseParser.DENY, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeny" ):
                listener.enterDeny(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeny" ):
                listener.exitDeny(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeny" ):
                return visitor.visitDeny(self)
            else:
                return visitor.visitChildren(self)


    class ResetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSession" ):
                listener.enterResetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSession" ):
                listener.exitResetSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetSession" ):
                return visitor.visitResetSession(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertInto" ):
                listener.enterInsertInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertInto" ):
                listener.exitInsertInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertInto" ):
                return visitor.visitInsertInto(self)
            else:
                return visitor.visitChildren(self)


    class ShowSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSession" ):
                listener.enterShowSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSession" ):
                listener.exitShowSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSession" ):
                return visitor.visitShowSession(self)
            else:
                return visitor.visitChildren(self)


    class CreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSchema" ):
                listener.enterCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSchema" ):
                listener.exitCreateSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateSchema" ):
                return visitor.visitCreateSchema(self)
            else:
                return visitor.visitChildren(self)


    class ExplainAnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainAnalyze" ):
                listener.enterExplainAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainAnalyze" ):
                listener.exitExplainAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainAnalyze" ):
                return visitor.visitExplainAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class ExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute" ):
                return visitor.visitExecute(self)
            else:
                return visitor.visitChildren(self)


    class RenameSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameSchema" ):
                listener.enterRenameSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameSchema" ):
                listener.exitRenameSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameSchema" ):
                return visitor.visitRenameSchema(self)
            else:
                return visitor.visitChildren(self)


    class DropRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropRole" ):
                return visitor.visitDropRole(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class SetRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.role = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def NONE(self):
            return self.getToken(SqlBaseParser.NONE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetRole" ):
                return visitor.visitSetRole(self)
            else:
                return visitor.visitChildren(self)


    class DropCatalogContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropCatalog" ):
                listener.enterDropCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropCatalog" ):
                listener.exitDropCatalog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropCatalog" ):
                return visitor.visitDropCatalog(self)
            else:
                return visitor.visitChildren(self)


    class ShowGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGrants" ):
                return visitor.visitShowGrants(self)
            else:
                return visitor.visitChildren(self)


    class DropSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSchema" ):
                listener.enterDropSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSchema" ):
                listener.exitDropSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropSchema" ):
                return visitor.visitDropSchema(self)
            else:
                return visitor.visitChildren(self)


    class SetTableAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableAuthorization" ):
                listener.enterSetTableAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableAuthorization" ):
                listener.exitSetTableAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableAuthorization" ):
                return visitor.visitSetTableAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateView" ):
                listener.enterShowCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateView" ):
                listener.exitShowCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateView" ):
                return visitor.visitShowCreateView(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableElementContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class StartTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartTransaction" ):
                return visitor.visitStartTransaction(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableAsSelectContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.WITH)
            else:
                return self.getToken(SqlBaseParser.WITH, i)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableAsSelect" ):
                listener.enterCreateTableAsSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableAsSelect" ):
                listener.exitCreateTableAsSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableAsSelect" ):
                return visitor.visitCreateTableAsSelect(self)
            else:
                return visitor.visitChildren(self)


    class CommentViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentView" ):
                listener.enterCommentView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentView" ):
                listener.exitCommentView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentView" ):
                return visitor.visitCommentView(self)
            else:
                return visitor.visitChildren(self)


    class ShowStatsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStats" ):
                listener.enterShowStats(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStats" ):
                listener.exitShowStats(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStats" ):
                return visitor.visitShowStats(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateSchema" ):
                listener.enterShowCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateSchema" ):
                listener.exitShowCreateSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateSchema" ):
                return visitor.visitShowCreateSchema(self)
            else:
                return visitor.visitChildren(self)


    class RevokeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke" ):
                listener.enterRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke" ):
                listener.exitRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevoke" ):
                return visitor.visitRevoke(self)
            else:
                return visitor.visitChildren(self)


    class UpdateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def updateAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UpdateAssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UpdateAssignmentContext,i)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate" ):
                listener.enterUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate" ):
                listener.exitUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate" ):
                return visitor.visitUpdate(self)
            else:
                return visitor.visitChildren(self)


    class TableExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.procedureName = None # IdentifierContext
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CallArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableExecute" ):
                listener.enterTableExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableExecute" ):
                listener.exitTableExecute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExecute" ):
                return visitor.visitTableExecute(self)
            else:
                return visitor.visitChildren(self)


    class DeleteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete" ):
                listener.enterDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete" ):
                listener.exitDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete" ):
                return visitor.visitDelete(self)
            else:
                return visitor.visitChildren(self)


    class DescribeInputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def INPUT(self):
            return self.getToken(SqlBaseParser.INPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeInput" ):
                listener.enterDescribeInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeInput" ):
                listener.exitDescribeInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeInput" ):
                return visitor.visitDescribeInput(self)
            else:
                return visitor.visitChildren(self)


    class ShowStatsForQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatsForQuery" ):
                listener.enterShowStatsForQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatsForQuery" ):
                listener.exitShowStatsForQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStatsForQuery" ):
                return visitor.visitShowStatsForQuery(self)
            else:
                return visitor.visitChildren(self)


    class SetColumnTypeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.columnName = None # IdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ALTER)
            else:
                return self.getToken(SqlBaseParser.ALTER, i)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetColumnType" ):
                listener.enterSetColumnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetColumnType" ):
                listener.exitSetColumnType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetColumnType" ):
                return visitor.visitSetColumnType(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetTimeZoneContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTimeZone" ):
                listener.enterSetTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTimeZone" ):
                listener.exitSetTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTimeZone" ):
                return visitor.visitSetTimeZone(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def GRACE(self):
            return self.getToken(SqlBaseParser.GRACE, 0)
        def PERIOD(self):
            return self.getToken(SqlBaseParser.PERIOD, 0)
        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedView" ):
                listener.enterCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedView" ):
                listener.exitCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateMaterializedView" ):
                return visitor.visitCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class SetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSession" ):
                listener.enterSetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSession" ):
                listener.exitSetSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSession" ):
                return visitor.visitSetSession(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def SECURITY(self):
            return self.getToken(SqlBaseParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(SqlBaseParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(SqlBaseParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class RenameMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameMaterializedView" ):
                listener.enterRenameMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameMaterializedView" ):
                listener.exitRenameMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameMaterializedView" ):
                return visitor.visitRenameMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class ShowSchemasContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemas" ):
                listener.enterShowSchemas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemas" ):
                listener.exitShowSchemas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSchemas" ):
                return visitor.visitShowSchemas(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class SetSchemaAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSchemaAuthorization" ):
                listener.enterSetSchemaAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSchemaAuthorization" ):
                listener.exitSetSchemaAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSchemaAuthorization" ):
                return visitor.visitSetSchemaAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class RollbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback" ):
                listener.enterRollback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback" ):
                listener.exitRollback(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback" ):
                return visitor.visitRollback(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class RenameViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameView" ):
                listener.enterRenameView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameView" ):
                listener.exitRenameView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameView" ):
                return visitor.visitRenameView(self)
            else:
                return visitor.visitChildren(self)


    class SetPathContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)
        def pathSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.PathSpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPath" ):
                listener.enterSetPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPath" ):
                listener.exitSetPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetPath" ):
                return visitor.visitSetPath(self)
            else:
                return visitor.visitChildren(self)


    class GrantRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def roles(self):
            return self.getTypedRuleContext(SqlBaseParser.RolesContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRoles" ):
                listener.enterGrantRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRoles" ):
                listener.exitGrantRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantRoles" ):
                return visitor.visitGrantRoles(self)
            else:
                return visitor.visitChildren(self)


    class CallContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CALL(self):
            return self.getToken(SqlBaseParser.CALL, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CallArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall" ):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)


    class RefreshMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshMaterializedView" ):
                listener.enterRefreshMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshMaterializedView" ):
                listener.exitRefreshMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshMaterializedView" ):
                return visitor.visitRefreshMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateMaterializedView" ):
                listener.enterShowCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateMaterializedView" ):
                listener.exitShowCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateMaterializedView" ):
                return visitor.visitShowCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class CreateCatalogContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.connectorName = None # IdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateCatalog" ):
                listener.enterCreateCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateCatalog" ):
                listener.exitCreateCatalog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateCatalog" ):
                return visitor.visitCreateCatalog(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeOutputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def OUTPUT(self):
            return self.getToken(SqlBaseParser.OUTPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeOutput" ):
                listener.enterDescribeOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeOutput" ):
                listener.exitDescribeOutput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeOutput" ):
                return visitor.visitDescribeOutput(self)
            else:
                return visitor.visitChildren(self)


    class GrantContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.GRANT)
            else:
                return self.getToken(SqlBaseParser.GRANT, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant" ):
                listener.enterGrant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant" ):
                listener.exitGrant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant" ):
                return visitor.visitGrant(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)
        def propertyAssignments(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyAssignmentsContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 233
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.match(SqlBaseParser.USE)
                self.state = 235
                localctx.schema = self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 236
                self.match(SqlBaseParser.USE)
                self.state = 237
                localctx.catalog = self.identifier()
                self.state = 238
                self.match(SqlBaseParser.T__0)
                self.state = 239
                localctx.schema = self.identifier()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CreateCatalogContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 241
                self.match(SqlBaseParser.CREATE)
                self.state = 242
                self.match(SqlBaseParser.CATALOG)
                self.state = 246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 243
                    self.match(SqlBaseParser.IF)
                    self.state = 244
                    self.match(SqlBaseParser.NOT)
                    self.state = 245
                    self.match(SqlBaseParser.EXISTS)


                self.state = 248
                localctx.catalog = self.identifier()
                self.state = 249
                self.match(SqlBaseParser.USING)
                self.state = 250
                localctx.connectorName = self.identifier()
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 251
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 252
                    self.string()


                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 255
                    self.match(SqlBaseParser.AUTHORIZATION)
                    self.state = 256
                    self.principal()


                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 259
                    self.match(SqlBaseParser.WITH)
                    self.state = 260
                    self.properties()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropCatalogContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 263
                self.match(SqlBaseParser.DROP)
                self.state = 264
                self.match(SqlBaseParser.CATALOG)
                self.state = 267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 265
                    self.match(SqlBaseParser.IF)
                    self.state = 266
                    self.match(SqlBaseParser.EXISTS)


                self.state = 269
                localctx.catalog = self.identifier()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37 or _la==213:
                    self.state = 270
                    _la = self._input.LA(1)
                    if not(_la==37 or _la==213):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 273
                self.match(SqlBaseParser.CREATE)
                self.state = 274
                self.match(SqlBaseParser.SCHEMA)
                self.state = 278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 275
                    self.match(SqlBaseParser.IF)
                    self.state = 276
                    self.match(SqlBaseParser.NOT)
                    self.state = 277
                    self.match(SqlBaseParser.EXISTS)


                self.state = 280
                self.qualifiedName()
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 281
                    self.match(SqlBaseParser.AUTHORIZATION)
                    self.state = 282
                    self.principal()


                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 285
                    self.match(SqlBaseParser.WITH)
                    self.state = 286
                    self.properties()


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.DropSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 289
                self.match(SqlBaseParser.DROP)
                self.state = 290
                self.match(SqlBaseParser.SCHEMA)
                self.state = 293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 291
                    self.match(SqlBaseParser.IF)
                    self.state = 292
                    self.match(SqlBaseParser.EXISTS)


                self.state = 295
                self.qualifiedName()
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37 or _la==213:
                    self.state = 296
                    _la = self._input.LA(1)
                    if not(_la==37 or _la==213):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.RenameSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 299
                self.match(SqlBaseParser.ALTER)
                self.state = 300
                self.match(SqlBaseParser.SCHEMA)
                self.state = 301
                self.qualifiedName()
                self.state = 302
                self.match(SqlBaseParser.RENAME)
                self.state = 303
                self.match(SqlBaseParser.TO)
                self.state = 304
                self.identifier()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.SetSchemaAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 306
                self.match(SqlBaseParser.ALTER)
                self.state = 307
                self.match(SqlBaseParser.SCHEMA)
                self.state = 308
                self.qualifiedName()
                self.state = 309
                self.match(SqlBaseParser.SET)
                self.state = 310
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 311
                self.principal()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.CreateTableAsSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 313
                self.match(SqlBaseParser.CREATE)
                self.state = 314
                self.match(SqlBaseParser.TABLE)
                self.state = 318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 315
                    self.match(SqlBaseParser.IF)
                    self.state = 316
                    self.match(SqlBaseParser.NOT)
                    self.state = 317
                    self.match(SqlBaseParser.EXISTS)


                self.state = 320
                self.qualifiedName()
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 321
                    self.columnAliases()


                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 324
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 325
                    self.string()


                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 328
                    self.match(SqlBaseParser.WITH)
                    self.state = 329
                    self.properties()


                self.state = 332
                self.match(SqlBaseParser.AS)
                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 333
                    self.query()
                    pass

                elif la_ == 2:
                    self.state = 334
                    self.match(SqlBaseParser.T__1)
                    self.state = 335
                    self.query()
                    self.state = 336
                    self.match(SqlBaseParser.T__2)
                    pass


                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 340
                    self.match(SqlBaseParser.WITH)
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==165:
                        self.state = 341
                        self.match(SqlBaseParser.NO)


                    self.state = 344
                    self.match(SqlBaseParser.DATA)


                pass

            elif la_ == 11:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 347
                self.match(SqlBaseParser.CREATE)
                self.state = 348
                self.match(SqlBaseParser.TABLE)
                self.state = 352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 349
                    self.match(SqlBaseParser.IF)
                    self.state = 350
                    self.match(SqlBaseParser.NOT)
                    self.state = 351
                    self.match(SqlBaseParser.EXISTS)


                self.state = 354
                self.qualifiedName()
                self.state = 355
                self.match(SqlBaseParser.T__1)
                self.state = 356
                self.tableElement()
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 357
                    self.match(SqlBaseParser.T__3)
                    self.state = 358
                    self.tableElement()
                    self.state = 363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 364
                self.match(SqlBaseParser.T__2)
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 365
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 366
                    self.string()


                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 369
                    self.match(SqlBaseParser.WITH)
                    self.state = 370
                    self.properties()


                pass

            elif la_ == 12:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 373
                self.match(SqlBaseParser.DROP)
                self.state = 374
                self.match(SqlBaseParser.TABLE)
                self.state = 377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 375
                    self.match(SqlBaseParser.IF)
                    self.state = 376
                    self.match(SqlBaseParser.EXISTS)


                self.state = 379
                self.qualifiedName()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.InsertIntoContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 380
                self.match(SqlBaseParser.INSERT)
                self.state = 381
                self.match(SqlBaseParser.INTO)
                self.state = 382
                self.qualifiedName()
                self.state = 384
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 383
                    self.columnAliases()


                self.state = 386
                self.query()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.DeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 388
                self.match(SqlBaseParser.DELETE)
                self.state = 389
                self.match(SqlBaseParser.FROM)
                self.state = 390
                self.qualifiedName()
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==282:
                    self.state = 391
                    self.match(SqlBaseParser.WHERE)
                    self.state = 392
                    self.booleanExpression(0)


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 395
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 396
                self.match(SqlBaseParser.TABLE)
                self.state = 397
                self.qualifiedName()
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 398
                self.match(SqlBaseParser.COMMENT)
                self.state = 399
                self.match(SqlBaseParser.ON)
                self.state = 400
                self.match(SqlBaseParser.TABLE)
                self.state = 401
                self.qualifiedName()
                self.state = 402
                self.match(SqlBaseParser.IS)
                self.state = 405
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [305, 306]:
                    self.state = 403
                    self.string()
                    pass
                elif token in [169]:
                    self.state = 404
                    self.match(SqlBaseParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 17:
                localctx = SqlBaseParser.CommentViewContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 407
                self.match(SqlBaseParser.COMMENT)
                self.state = 408
                self.match(SqlBaseParser.ON)
                self.state = 409
                self.match(SqlBaseParser.VIEW)
                self.state = 410
                self.qualifiedName()
                self.state = 411
                self.match(SqlBaseParser.IS)
                self.state = 414
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [305, 306]:
                    self.state = 412
                    self.string()
                    pass
                elif token in [169]:
                    self.state = 413
                    self.match(SqlBaseParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                localctx = SqlBaseParser.CommentColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 416
                self.match(SqlBaseParser.COMMENT)
                self.state = 417
                self.match(SqlBaseParser.ON)
                self.state = 418
                self.match(SqlBaseParser.COLUMN)
                self.state = 419
                self.qualifiedName()
                self.state = 420
                self.match(SqlBaseParser.IS)
                self.state = 423
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [305, 306]:
                    self.state = 421
                    self.string()
                    pass
                elif token in [169]:
                    self.state = 422
                    self.match(SqlBaseParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 425
                self.match(SqlBaseParser.ALTER)
                self.state = 426
                self.match(SqlBaseParser.TABLE)
                self.state = 429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 427
                    self.match(SqlBaseParser.IF)
                    self.state = 428
                    self.match(SqlBaseParser.EXISTS)


                self.state = 431
                localctx.from_ = self.qualifiedName()
                self.state = 432
                self.match(SqlBaseParser.RENAME)
                self.state = 433
                self.match(SqlBaseParser.TO)
                self.state = 434
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.AddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 436
                self.match(SqlBaseParser.ALTER)
                self.state = 437
                self.match(SqlBaseParser.TABLE)
                self.state = 440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 438
                    self.match(SqlBaseParser.IF)
                    self.state = 439
                    self.match(SqlBaseParser.EXISTS)


                self.state = 442
                localctx.tableName = self.qualifiedName()
                self.state = 443
                self.match(SqlBaseParser.ADD)
                self.state = 444
                self.match(SqlBaseParser.COLUMN)
                self.state = 448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 445
                    self.match(SqlBaseParser.IF)
                    self.state = 446
                    self.match(SqlBaseParser.NOT)
                    self.state = 447
                    self.match(SqlBaseParser.EXISTS)


                self.state = 450
                localctx.column = self.columnDefinition()
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.RenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 452
                self.match(SqlBaseParser.ALTER)
                self.state = 453
                self.match(SqlBaseParser.TABLE)
                self.state = 456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 454
                    self.match(SqlBaseParser.IF)
                    self.state = 455
                    self.match(SqlBaseParser.EXISTS)


                self.state = 458
                localctx.tableName = self.qualifiedName()
                self.state = 459
                self.match(SqlBaseParser.RENAME)
                self.state = 460
                self.match(SqlBaseParser.COLUMN)
                self.state = 463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 461
                    self.match(SqlBaseParser.IF)
                    self.state = 462
                    self.match(SqlBaseParser.EXISTS)


                self.state = 465
                localctx.from_ = self.identifier()
                self.state = 466
                self.match(SqlBaseParser.TO)
                self.state = 467
                localctx.to = self.identifier()
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.DropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 469
                self.match(SqlBaseParser.ALTER)
                self.state = 470
                self.match(SqlBaseParser.TABLE)
                self.state = 473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 471
                    self.match(SqlBaseParser.IF)
                    self.state = 472
                    self.match(SqlBaseParser.EXISTS)


                self.state = 475
                localctx.tableName = self.qualifiedName()
                self.state = 476
                self.match(SqlBaseParser.DROP)
                self.state = 477
                self.match(SqlBaseParser.COLUMN)
                self.state = 480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 478
                    self.match(SqlBaseParser.IF)
                    self.state = 479
                    self.match(SqlBaseParser.EXISTS)


                self.state = 482
                localctx.column = self.qualifiedName()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.SetColumnTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 484
                self.match(SqlBaseParser.ALTER)
                self.state = 485
                self.match(SqlBaseParser.TABLE)
                self.state = 488
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 486
                    self.match(SqlBaseParser.IF)
                    self.state = 487
                    self.match(SqlBaseParser.EXISTS)


                self.state = 490
                localctx.tableName = self.qualifiedName()
                self.state = 491
                self.match(SqlBaseParser.ALTER)
                self.state = 492
                self.match(SqlBaseParser.COLUMN)
                self.state = 493
                localctx.columnName = self.identifier()
                self.state = 494
                self.match(SqlBaseParser.SET)
                self.state = 495
                self.match(SqlBaseParser.DATA)
                self.state = 496
                self.match(SqlBaseParser.TYPE)
                self.state = 497
                self.type_(0)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.SetTableAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 499
                self.match(SqlBaseParser.ALTER)
                self.state = 500
                self.match(SqlBaseParser.TABLE)
                self.state = 501
                localctx.tableName = self.qualifiedName()
                self.state = 502
                self.match(SqlBaseParser.SET)
                self.state = 503
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 504
                self.principal()
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 506
                self.match(SqlBaseParser.ALTER)
                self.state = 507
                self.match(SqlBaseParser.TABLE)
                self.state = 508
                localctx.tableName = self.qualifiedName()
                self.state = 509
                self.match(SqlBaseParser.SET)
                self.state = 510
                self.match(SqlBaseParser.PROPERTIES)
                self.state = 511
                self.propertyAssignments()
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.TableExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 513
                self.match(SqlBaseParser.ALTER)
                self.state = 514
                self.match(SqlBaseParser.TABLE)
                self.state = 515
                localctx.tableName = self.qualifiedName()
                self.state = 516
                self.match(SqlBaseParser.EXECUTE)
                self.state = 517
                localctx.procedureName = self.identifier()
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 518
                    self.match(SqlBaseParser.T__1)
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510999884752696763) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49821073025290241) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -37154972088942721) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 576192539814492023) != 0):
                        self.state = 519
                        self.callArgument()
                        self.state = 524
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==4:
                            self.state = 520
                            self.match(SqlBaseParser.T__3)
                            self.state = 521
                            self.callArgument()
                            self.state = 526
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 529
                    self.match(SqlBaseParser.T__2)


                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==282:
                    self.state = 532
                    self.match(SqlBaseParser.WHERE)
                    self.state = 533
                    localctx.where = self.booleanExpression(0)


                pass

            elif la_ == 27:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 536
                self.match(SqlBaseParser.ANALYZE)
                self.state = 537
                self.qualifiedName()
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 538
                    self.match(SqlBaseParser.WITH)
                    self.state = 539
                    self.properties()


                pass

            elif la_ == 28:
                localctx = SqlBaseParser.CreateMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 542
                self.match(SqlBaseParser.CREATE)
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180:
                    self.state = 543
                    self.match(SqlBaseParser.OR)
                    self.state = 544
                    self.match(SqlBaseParser.REPLACE)


                self.state = 547
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 548
                self.match(SqlBaseParser.VIEW)
                self.state = 552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 549
                    self.match(SqlBaseParser.IF)
                    self.state = 550
                    self.match(SqlBaseParser.NOT)
                    self.state = 551
                    self.match(SqlBaseParser.EXISTS)


                self.state = 554
                self.qualifiedName()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 555
                    self.match(SqlBaseParser.GRACE)
                    self.state = 556
                    self.match(SqlBaseParser.PERIOD)
                    self.state = 557
                    self.interval()


                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 560
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 561
                    self.string()


                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 564
                    self.match(SqlBaseParser.WITH)
                    self.state = 565
                    self.properties()


                self.state = 568
                self.match(SqlBaseParser.AS)
                self.state = 569
                self.query()
                pass

            elif la_ == 29:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 571
                self.match(SqlBaseParser.CREATE)
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180:
                    self.state = 572
                    self.match(SqlBaseParser.OR)
                    self.state = 573
                    self.match(SqlBaseParser.REPLACE)


                self.state = 576
                self.match(SqlBaseParser.VIEW)
                self.state = 577
                self.qualifiedName()
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 578
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 579
                    self.string()


                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==228:
                    self.state = 582
                    self.match(SqlBaseParser.SECURITY)
                    self.state = 583
                    _la = self._input.LA(1)
                    if not(_la==69 or _la==123):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 586
                self.match(SqlBaseParser.AS)
                self.state = 587
                self.query()
                pass

            elif la_ == 30:
                localctx = SqlBaseParser.RefreshMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 589
                self.match(SqlBaseParser.REFRESH)
                self.state = 590
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 591
                self.match(SqlBaseParser.VIEW)
                self.state = 592
                self.qualifiedName()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.DropMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 593
                self.match(SqlBaseParser.DROP)
                self.state = 594
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 595
                self.match(SqlBaseParser.VIEW)
                self.state = 598
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 596
                    self.match(SqlBaseParser.IF)
                    self.state = 597
                    self.match(SqlBaseParser.EXISTS)


                self.state = 600
                self.qualifiedName()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.RenameMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 601
                self.match(SqlBaseParser.ALTER)
                self.state = 602
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 603
                self.match(SqlBaseParser.VIEW)
                self.state = 606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 604
                    self.match(SqlBaseParser.IF)
                    self.state = 605
                    self.match(SqlBaseParser.EXISTS)


                self.state = 608
                localctx.from_ = self.qualifiedName()
                self.state = 609
                self.match(SqlBaseParser.RENAME)
                self.state = 610
                self.match(SqlBaseParser.TO)
                self.state = 611
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 33:
                localctx = SqlBaseParser.SetMaterializedViewPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 613
                self.match(SqlBaseParser.ALTER)
                self.state = 614
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 615
                self.match(SqlBaseParser.VIEW)
                self.state = 616
                self.qualifiedName()
                self.state = 617
                self.match(SqlBaseParser.SET)
                self.state = 618
                self.match(SqlBaseParser.PROPERTIES)
                self.state = 619
                self.propertyAssignments()
                pass

            elif la_ == 34:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 621
                self.match(SqlBaseParser.DROP)
                self.state = 622
                self.match(SqlBaseParser.VIEW)
                self.state = 625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 623
                    self.match(SqlBaseParser.IF)
                    self.state = 624
                    self.match(SqlBaseParser.EXISTS)


                self.state = 627
                self.qualifiedName()
                pass

            elif la_ == 35:
                localctx = SqlBaseParser.RenameViewContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 628
                self.match(SqlBaseParser.ALTER)
                self.state = 629
                self.match(SqlBaseParser.VIEW)
                self.state = 630
                localctx.from_ = self.qualifiedName()
                self.state = 631
                self.match(SqlBaseParser.RENAME)
                self.state = 632
                self.match(SqlBaseParser.TO)
                self.state = 633
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 36:
                localctx = SqlBaseParser.SetViewAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 635
                self.match(SqlBaseParser.ALTER)
                self.state = 636
                self.match(SqlBaseParser.VIEW)
                self.state = 637
                localctx.from_ = self.qualifiedName()
                self.state = 638
                self.match(SqlBaseParser.SET)
                self.state = 639
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 640
                self.principal()
                pass

            elif la_ == 37:
                localctx = SqlBaseParser.CallContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 642
                self.match(SqlBaseParser.CALL)
                self.state = 643
                self.qualifiedName()
                self.state = 644
                self.match(SqlBaseParser.T__1)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510999884752696763) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49821073025290241) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -37154972088942721) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 576192539814492023) != 0):
                    self.state = 645
                    self.callArgument()
                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 646
                        self.match(SqlBaseParser.T__3)
                        self.state = 647
                        self.callArgument()
                        self.state = 652
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 655
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.CreateRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 657
                self.match(SqlBaseParser.CREATE)
                self.state = 658
                self.match(SqlBaseParser.ROLE)
                self.state = 659
                localctx.name = self.identifier()
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 660
                    self.match(SqlBaseParser.WITH)
                    self.state = 661
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 662
                    self.grantor()


                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 665
                    self.match(SqlBaseParser.IN)
                    self.state = 666
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 39:
                localctx = SqlBaseParser.DropRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 669
                self.match(SqlBaseParser.DROP)
                self.state = 670
                self.match(SqlBaseParser.ROLE)
                self.state = 671
                localctx.name = self.identifier()
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 672
                    self.match(SqlBaseParser.IN)
                    self.state = 673
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 40:
                localctx = SqlBaseParser.GrantRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 676
                self.match(SqlBaseParser.GRANT)
                self.state = 677
                self.roles()
                self.state = 678
                self.match(SqlBaseParser.TO)
                self.state = 679
                self.principal()
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 680
                    self.match(SqlBaseParser.T__3)
                    self.state = 681
                    self.principal()
                    self.state = 686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 687
                    self.match(SqlBaseParser.WITH)
                    self.state = 688
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 689
                    self.match(SqlBaseParser.OPTION)


                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 692
                    self.match(SqlBaseParser.GRANTED)
                    self.state = 693
                    self.match(SqlBaseParser.BY)
                    self.state = 694
                    self.grantor()


                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 697
                    self.match(SqlBaseParser.IN)
                    self.state = 698
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 41:
                localctx = SqlBaseParser.RevokeRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 701
                self.match(SqlBaseParser.REVOKE)
                self.state = 705
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 702
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 703
                    self.match(SqlBaseParser.OPTION)
                    self.state = 704
                    self.match(SqlBaseParser.FOR)


                self.state = 707
                self.roles()
                self.state = 708
                self.match(SqlBaseParser.FROM)
                self.state = 709
                self.principal()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 710
                    self.match(SqlBaseParser.T__3)
                    self.state = 711
                    self.principal()
                    self.state = 716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 717
                    self.match(SqlBaseParser.GRANTED)
                    self.state = 718
                    self.match(SqlBaseParser.BY)
                    self.state = 719
                    self.grantor()


                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 722
                    self.match(SqlBaseParser.IN)
                    self.state = 723
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 42:
                localctx = SqlBaseParser.SetRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 726
                self.match(SqlBaseParser.SET)
                self.state = 727
                self.match(SqlBaseParser.ROLE)
                self.state = 731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 728
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 729
                    self.match(SqlBaseParser.NONE)
                    pass

                elif la_ == 3:
                    self.state = 730
                    localctx.role = self.identifier()
                    pass


                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 733
                    self.match(SqlBaseParser.IN)
                    self.state = 734
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 43:
                localctx = SqlBaseParser.GrantContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 737
                self.match(SqlBaseParser.GRANT)
                self.state = 748
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51, 70, 119, 230, 268]:
                    self.state = 738
                    self.privilege()
                    self.state = 743
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 739
                        self.match(SqlBaseParser.T__3)
                        self.state = 740
                        self.privilege()
                        self.state = 745
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [22]:
                    self.state = 746
                    self.match(SqlBaseParser.ALL)
                    self.state = 747
                    self.match(SqlBaseParser.PRIVILEGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 750
                self.match(SqlBaseParser.ON)
                self.state = 752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 751
                    _la = self._input.LA(1)
                    if not(_la==225 or _la==242):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 754
                self.qualifiedName()
                self.state = 755
                self.match(SqlBaseParser.TO)
                self.state = 756
                localctx.grantee = self.principal()
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 757
                    self.match(SqlBaseParser.WITH)
                    self.state = 758
                    self.match(SqlBaseParser.GRANT)
                    self.state = 759
                    self.match(SqlBaseParser.OPTION)


                pass

            elif la_ == 44:
                localctx = SqlBaseParser.DenyContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 762
                self.match(SqlBaseParser.DENY)
                self.state = 773
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51, 70, 119, 230, 268]:
                    self.state = 763
                    self.privilege()
                    self.state = 768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 764
                        self.match(SqlBaseParser.T__3)
                        self.state = 765
                        self.privilege()
                        self.state = 770
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [22]:
                    self.state = 771
                    self.match(SqlBaseParser.ALL)
                    self.state = 772
                    self.match(SqlBaseParser.PRIVILEGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 775
                self.match(SqlBaseParser.ON)
                self.state = 777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 776
                    _la = self._input.LA(1)
                    if not(_la==225 or _la==242):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 779
                self.qualifiedName()
                self.state = 780
                self.match(SqlBaseParser.TO)
                self.state = 781
                localctx.grantee = self.principal()
                pass

            elif la_ == 45:
                localctx = SqlBaseParser.RevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 783
                self.match(SqlBaseParser.REVOKE)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 784
                    self.match(SqlBaseParser.GRANT)
                    self.state = 785
                    self.match(SqlBaseParser.OPTION)
                    self.state = 786
                    self.match(SqlBaseParser.FOR)


                self.state = 799
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51, 70, 119, 230, 268]:
                    self.state = 789
                    self.privilege()
                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 790
                        self.match(SqlBaseParser.T__3)
                        self.state = 791
                        self.privilege()
                        self.state = 796
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [22]:
                    self.state = 797
                    self.match(SqlBaseParser.ALL)
                    self.state = 798
                    self.match(SqlBaseParser.PRIVILEGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 801
                self.match(SqlBaseParser.ON)
                self.state = 803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 802
                    _la = self._input.LA(1)
                    if not(_la==225 or _la==242):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 805
                self.qualifiedName()
                self.state = 806
                self.match(SqlBaseParser.FROM)
                self.state = 807
                localctx.grantee = self.principal()
                pass

            elif la_ == 46:
                localctx = SqlBaseParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 809
                self.match(SqlBaseParser.SHOW)
                self.state = 810
                self.match(SqlBaseParser.GRANTS)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==176:
                    self.state = 811
                    self.match(SqlBaseParser.ON)
                    self.state = 813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==242:
                        self.state = 812
                        self.match(SqlBaseParser.TABLE)


                    self.state = 815
                    self.qualifiedName()


                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 818
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 819
                    self.match(SqlBaseParser.T__1)
                    self.state = 820
                    self.explainOption()
                    self.state = 825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 821
                        self.match(SqlBaseParser.T__3)
                        self.state = 822
                        self.explainOption()
                        self.state = 827
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 828
                    self.match(SqlBaseParser.T__2)


                self.state = 832
                self.statement()
                pass

            elif la_ == 48:
                localctx = SqlBaseParser.ExplainAnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 833
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 834
                self.match(SqlBaseParser.ANALYZE)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 835
                    self.match(SqlBaseParser.VERBOSE)


                self.state = 838
                self.statement()
                pass

            elif la_ == 49:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 839
                self.match(SqlBaseParser.SHOW)
                self.state = 840
                self.match(SqlBaseParser.CREATE)
                self.state = 841
                self.match(SqlBaseParser.TABLE)
                self.state = 842
                self.qualifiedName()
                pass

            elif la_ == 50:
                localctx = SqlBaseParser.ShowCreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 843
                self.match(SqlBaseParser.SHOW)
                self.state = 844
                self.match(SqlBaseParser.CREATE)
                self.state = 845
                self.match(SqlBaseParser.SCHEMA)
                self.state = 846
                self.qualifiedName()
                pass

            elif la_ == 51:
                localctx = SqlBaseParser.ShowCreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 847
                self.match(SqlBaseParser.SHOW)
                self.state = 848
                self.match(SqlBaseParser.CREATE)
                self.state = 849
                self.match(SqlBaseParser.VIEW)
                self.state = 850
                self.qualifiedName()
                pass

            elif la_ == 52:
                localctx = SqlBaseParser.ShowCreateMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 851
                self.match(SqlBaseParser.SHOW)
                self.state = 852
                self.match(SqlBaseParser.CREATE)
                self.state = 853
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 854
                self.match(SqlBaseParser.VIEW)
                self.state = 855
                self.qualifiedName()
                pass

            elif la_ == 53:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 856
                self.match(SqlBaseParser.SHOW)
                self.state = 857
                self.match(SqlBaseParser.TABLES)
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99 or _la==114:
                    self.state = 858
                    _la = self._input.LA(1)
                    if not(_la==99 or _la==114):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 859
                    self.qualifiedName()


                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 862
                    self.match(SqlBaseParser.LIKE)
                    self.state = 863
                    localctx.pattern = self.string()
                    self.state = 866
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 864
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 865
                        localctx.escape = self.string()




                pass

            elif la_ == 54:
                localctx = SqlBaseParser.ShowSchemasContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 870
                self.match(SqlBaseParser.SHOW)
                self.state = 871
                self.match(SqlBaseParser.SCHEMAS)
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99 or _la==114:
                    self.state = 872
                    _la = self._input.LA(1)
                    if not(_la==99 or _la==114):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 873
                    self.identifier()


                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 876
                    self.match(SqlBaseParser.LIKE)
                    self.state = 877
                    localctx.pattern = self.string()
                    self.state = 880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 878
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 879
                        localctx.escape = self.string()




                pass

            elif la_ == 55:
                localctx = SqlBaseParser.ShowCatalogsContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 884
                self.match(SqlBaseParser.SHOW)
                self.state = 885
                self.match(SqlBaseParser.CATALOGS)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 886
                    self.match(SqlBaseParser.LIKE)
                    self.state = 887
                    localctx.pattern = self.string()
                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 888
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 889
                        localctx.escape = self.string()




                pass

            elif la_ == 56:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 894
                self.match(SqlBaseParser.SHOW)
                self.state = 895
                self.match(SqlBaseParser.COLUMNS)
                self.state = 896
                _la = self._input.LA(1)
                if not(_la==99 or _la==114):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510982292348548539) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49824921316839487) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 4574531046338445183) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 540432023632705399) != 0):
                    self.state = 897
                    self.qualifiedName()


                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 900
                    self.match(SqlBaseParser.LIKE)
                    self.state = 901
                    localctx.pattern = self.string()
                    self.state = 904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 902
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 903
                        localctx.escape = self.string()




                pass

            elif la_ == 57:
                localctx = SqlBaseParser.ShowStatsContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 908
                self.match(SqlBaseParser.SHOW)
                self.state = 909
                self.match(SqlBaseParser.STATS)
                self.state = 910
                self.match(SqlBaseParser.FOR)
                self.state = 911
                self.qualifiedName()
                pass

            elif la_ == 58:
                localctx = SqlBaseParser.ShowStatsForQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 912
                self.match(SqlBaseParser.SHOW)
                self.state = 913
                self.match(SqlBaseParser.STATS)
                self.state = 914
                self.match(SqlBaseParser.FOR)
                self.state = 915
                self.match(SqlBaseParser.T__1)
                self.state = 916
                self.query()
                self.state = 917
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 59:
                localctx = SqlBaseParser.ShowRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 919
                self.match(SqlBaseParser.SHOW)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 920
                    self.match(SqlBaseParser.CURRENT)


                self.state = 923
                self.match(SqlBaseParser.ROLES)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99 or _la==114:
                    self.state = 924
                    _la = self._input.LA(1)
                    if not(_la==99 or _la==114):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 925
                    self.identifier()


                pass

            elif la_ == 60:
                localctx = SqlBaseParser.ShowRoleGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 928
                self.match(SqlBaseParser.SHOW)
                self.state = 929
                self.match(SqlBaseParser.ROLE)
                self.state = 930
                self.match(SqlBaseParser.GRANTS)
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99 or _la==114:
                    self.state = 931
                    _la = self._input.LA(1)
                    if not(_la==99 or _la==114):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 932
                    self.identifier()


                pass

            elif la_ == 61:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 935
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 936
                self.qualifiedName()
                pass

            elif la_ == 62:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 937
                self.match(SqlBaseParser.DESC)
                self.state = 938
                self.qualifiedName()
                pass

            elif la_ == 63:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 939
                self.match(SqlBaseParser.SHOW)
                self.state = 940
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 941
                    self.match(SqlBaseParser.LIKE)
                    self.state = 942
                    localctx.pattern = self.string()
                    self.state = 945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 943
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 944
                        localctx.escape = self.string()




                pass

            elif la_ == 64:
                localctx = SqlBaseParser.ShowSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 949
                self.match(SqlBaseParser.SHOW)
                self.state = 950
                self.match(SqlBaseParser.SESSION)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 951
                    self.match(SqlBaseParser.LIKE)
                    self.state = 952
                    localctx.pattern = self.string()
                    self.state = 955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 953
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 954
                        localctx.escape = self.string()




                pass

            elif la_ == 65:
                localctx = SqlBaseParser.SetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 959
                self.match(SqlBaseParser.SET)
                self.state = 960
                self.match(SqlBaseParser.SESSION)
                self.state = 961
                self.qualifiedName()
                self.state = 962
                self.match(SqlBaseParser.EQ)
                self.state = 963
                self.expression()
                pass

            elif la_ == 66:
                localctx = SqlBaseParser.ResetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 965
                self.match(SqlBaseParser.RESET)
                self.state = 966
                self.match(SqlBaseParser.SESSION)
                self.state = 967
                self.qualifiedName()
                pass

            elif la_ == 67:
                localctx = SqlBaseParser.StartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 968
                self.match(SqlBaseParser.START)
                self.state = 969
                self.match(SqlBaseParser.TRANSACTION)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126 or _la==205:
                    self.state = 970
                    self.transactionMode()
                    self.state = 975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 971
                        self.match(SqlBaseParser.T__3)
                        self.state = 972
                        self.transactionMode()
                        self.state = 977
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 68:
                localctx = SqlBaseParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 980
                self.match(SqlBaseParser.COMMIT)
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 981
                    self.match(SqlBaseParser.WORK)


                pass

            elif la_ == 69:
                localctx = SqlBaseParser.RollbackContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 984
                self.match(SqlBaseParser.ROLLBACK)
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 985
                    self.match(SqlBaseParser.WORK)


                pass

            elif la_ == 70:
                localctx = SqlBaseParser.PrepareContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 988
                self.match(SqlBaseParser.PREPARE)
                self.state = 989
                self.identifier()
                self.state = 990
                self.match(SqlBaseParser.FROM)
                self.state = 991
                self.statement()
                pass

            elif la_ == 71:
                localctx = SqlBaseParser.DeallocateContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 993
                self.match(SqlBaseParser.DEALLOCATE)
                self.state = 994
                self.match(SqlBaseParser.PREPARE)
                self.state = 995
                self.identifier()
                pass

            elif la_ == 72:
                localctx = SqlBaseParser.ExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 996
                self.match(SqlBaseParser.EXECUTE)
                self.state = 997
                self.identifier()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271:
                    self.state = 998
                    self.match(SqlBaseParser.USING)
                    self.state = 999
                    self.expression()
                    self.state = 1004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1000
                        self.match(SqlBaseParser.T__3)
                        self.state = 1001
                        self.expression()
                        self.state = 1006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 73:
                localctx = SqlBaseParser.DescribeInputContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 1009
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 1010
                self.match(SqlBaseParser.INPUT)
                self.state = 1011
                self.identifier()
                pass

            elif la_ == 74:
                localctx = SqlBaseParser.DescribeOutputContext(self, localctx)
                self.enterOuterAlt(localctx, 74)
                self.state = 1012
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 1013
                self.match(SqlBaseParser.OUTPUT)
                self.state = 1014
                self.identifier()
                pass

            elif la_ == 75:
                localctx = SqlBaseParser.SetPathContext(self, localctx)
                self.enterOuterAlt(localctx, 75)
                self.state = 1015
                self.match(SqlBaseParser.SET)
                self.state = 1016
                self.match(SqlBaseParser.PATH)
                self.state = 1017
                self.pathSpecification()
                pass

            elif la_ == 76:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 76)
                self.state = 1018
                self.match(SqlBaseParser.SET)
                self.state = 1019
                self.match(SqlBaseParser.TIME)
                self.state = 1020
                self.match(SqlBaseParser.ZONE)
                self.state = 1023
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1021
                    self.match(SqlBaseParser.LOCAL)
                    pass

                elif la_ == 2:
                    self.state = 1022
                    self.expression()
                    pass


                pass

            elif la_ == 77:
                localctx = SqlBaseParser.UpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 77)
                self.state = 1025
                self.match(SqlBaseParser.UPDATE)
                self.state = 1026
                self.qualifiedName()
                self.state = 1027
                self.match(SqlBaseParser.SET)
                self.state = 1028
                self.updateAssignment()
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1029
                    self.match(SqlBaseParser.T__3)
                    self.state = 1030
                    self.updateAssignment()
                    self.state = 1035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==282:
                    self.state = 1036
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1037
                    localctx.where = self.booleanExpression(0)


                pass

            elif la_ == 78:
                localctx = SqlBaseParser.MergeContext(self, localctx)
                self.enterOuterAlt(localctx, 78)
                self.state = 1040
                self.match(SqlBaseParser.MERGE)
                self.state = 1041
                self.match(SqlBaseParser.INTO)
                self.state = 1042
                self.qualifiedName()
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181133918208) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510982292348548539) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49824921316839487) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 4574531046338445183) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 540432023632705399) != 0):
                    self.state = 1044
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1043
                        self.match(SqlBaseParser.AS)


                    self.state = 1046
                    self.identifier()


                self.state = 1049
                self.match(SqlBaseParser.USING)
                self.state = 1050
                self.relation(0)
                self.state = 1051
                self.match(SqlBaseParser.ON)
                self.state = 1052
                self.expression()
                self.state = 1054 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1053
                    self.mergeCase()
                    self.state = 1056 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==281):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def with_(self):
            return self.getTypedRuleContext(SqlBaseParser.WithContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==284:
                self.state = 1060
                self.with_()


            self.state = 1063
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def RECURSIVE(self):
            return self.getToken(SqlBaseParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith" ):
                listener.enterWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith" ):
                listener.exitWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith" ):
                return visitor.visitWith(self)
            else:
                return visitor.visitChildren(self)




    def with_(self):

        localctx = SqlBaseParser.WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_with)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(SqlBaseParser.WITH)
            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 1066
                self.match(SqlBaseParser.RECURSIVE)


            self.state = 1069
            self.namedQuery()
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1070
                self.match(SqlBaseParser.T__3)
                self.state = 1071
                self.namedQuery()
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)


        def likeClause(self):
            return self.getTypedRuleContext(SqlBaseParser.LikeClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElement" ):
                listener.enterTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElement" ):
                listener.exitTableElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElement" ):
                return visitor.visitTableElement(self)
            else:
                return visitor.visitChildren(self)




    def tableElement(self):

        localctx = SqlBaseParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_tableElement)
        try:
            self.state = 1079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 115, 116, 118, 121, 123, 124, 126, 128, 134, 135, 136, 137, 138, 139, 141, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 291, 311, 312, 313, 314]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.columnDefinition()
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self.likeClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = SqlBaseParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.identifier()
            self.state = 1082
            self.type_(0)
            self.state = 1085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==168:
                self.state = 1083
                self.match(SqlBaseParser.NOT)
                self.state = 1084
                self.match(SqlBaseParser.NULL)


            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 1087
                self.match(SqlBaseParser.COMMENT)
                self.state = 1088
                self.string()


            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==284:
                self.state = 1091
                self.match(SqlBaseParser.WITH)
                self.state = 1092
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optionType = None # Token

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def INCLUDING(self):
            return self.getToken(SqlBaseParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(SqlBaseParser.EXCLUDING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_likeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeClause" ):
                listener.enterLikeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeClause" ):
                listener.exitLikeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeClause" ):
                return visitor.visitLikeClause(self)
            else:
                return visitor.visitChildren(self)




    def likeClause(self):

        localctx = SqlBaseParser.LikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_likeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(SqlBaseParser.LIKE)
            self.state = 1096
            self.qualifiedName()
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86 or _la==115:
                self.state = 1097
                localctx.optionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==86 or _la==115):
                    localctx.optionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1098
                self.match(SqlBaseParser.PROPERTIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyAssignments(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyAssignmentsContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperties" ):
                listener.enterProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperties" ):
                listener.exitProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperties" ):
                return visitor.visitProperties(self)
            else:
                return visitor.visitChildren(self)




    def properties(self):

        localctx = SqlBaseParser.PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_properties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(SqlBaseParser.T__1)
            self.state = 1102
            self.propertyAssignments()
            self.state = 1103
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAssignmentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyAssignments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyAssignments" ):
                listener.enterPropertyAssignments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyAssignments" ):
                listener.exitPropertyAssignments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyAssignments" ):
                return visitor.visitPropertyAssignments(self)
            else:
                return visitor.visitChildren(self)




    def propertyAssignments(self):

        localctx = SqlBaseParser.PropertyAssignmentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_propertyAssignments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.property_()
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1106
                self.match(SqlBaseParser.T__3)
                self.state = 1107
                self.property_()
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def propertyValue(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyValueContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty" ):
                listener.enterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty" ):
                listener.exitProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty" ):
                return visitor.visitProperty(self)
            else:
                return visitor.visitChildren(self)




    def property_(self):

        localctx = SqlBaseParser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.identifier()
            self.state = 1114
            self.match(SqlBaseParser.EQ)
            self.state = 1115
            self.propertyValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefaultPropertyValueContext(PropertyValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PropertyValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultPropertyValue" ):
                listener.enterDefaultPropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultPropertyValue" ):
                listener.exitDefaultPropertyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultPropertyValue" ):
                return visitor.visitDefaultPropertyValue(self)
            else:
                return visitor.visitChildren(self)


    class NonDefaultPropertyValueContext(PropertyValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PropertyValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonDefaultPropertyValue" ):
                listener.enterNonDefaultPropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonDefaultPropertyValue" ):
                listener.exitNonDefaultPropertyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonDefaultPropertyValue" ):
                return visitor.visitNonDefaultPropertyValue(self)
            else:
                return visitor.visitChildren(self)



    def propertyValue(self):

        localctx = SqlBaseParser.PropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_propertyValue)
        try:
            self.state = 1119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DefaultPropertyValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1117
                self.match(SqlBaseParser.DEFAULT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.NonDefaultPropertyValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1118
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # RowCountContext
            self.limit = None # LimitRowCountContext
            self.fetchFirst = None # RowCountContext

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def rowCount(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowCountContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowCountContext,i)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def limitRowCount(self):
            return self.getTypedRuleContext(SqlBaseParser.LimitRowCountContext,0)


        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ROW)
            else:
                return self.getToken(SqlBaseParser.ROW, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ROWS)
            else:
                return self.getToken(SqlBaseParser.ROWS, i)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def TIES(self):
            return self.getToken(SqlBaseParser.TIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryNoWith" ):
                return visitor.visitQueryNoWith(self)
            else:
                return visitor.visitChildren(self)




    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.queryTerm(0)
            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==181:
                self.state = 1122
                self.match(SqlBaseParser.ORDER)
                self.state = 1123
                self.match(SqlBaseParser.BY)
                self.state = 1124
                self.sortItem()
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1125
                    self.match(SqlBaseParser.T__3)
                    self.state = 1126
                    self.sortItem()
                    self.state = 1131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==174:
                self.state = 1134
                self.match(SqlBaseParser.OFFSET)
                self.state = 1135
                localctx.offset = self.rowCount()
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==221 or _la==222:
                    self.state = 1136
                    _la = self._input.LA(1)
                    if not(_la==221 or _la==222):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




            self.state = 1154
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.state = 1141
                self.match(SqlBaseParser.LIMIT)
                self.state = 1142
                localctx.limit = self.limitRowCount()
                pass
            elif token in [92]:
                self.state = 1143
                self.match(SqlBaseParser.FETCH)
                self.state = 1144
                _la = self._input.LA(1)
                if not(_la==95 or _la==160):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==304 or _la==308:
                    self.state = 1145
                    localctx.fetchFirst = self.rowCount()


                self.state = 1148
                _la = self._input.LA(1)
                if not(_la==221 or _la==222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1152
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [178]:
                    self.state = 1149
                    self.match(SqlBaseParser.ONLY)
                    pass
                elif token in [284]:
                    self.state = 1150
                    self.match(SqlBaseParser.WITH)
                    self.state = 1151
                    self.match(SqlBaseParser.TIES)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [-1, 3, 284]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitRowCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def rowCount(self):
            return self.getTypedRuleContext(SqlBaseParser.RowCountContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_limitRowCount

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitRowCount" ):
                listener.enterLimitRowCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitRowCount" ):
                listener.exitLimitRowCount(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitRowCount" ):
                return visitor.visitLimitRowCount(self)
            else:
                return visitor.visitChildren(self)




    def limitRowCount(self):

        localctx = SqlBaseParser.LimitRowCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_limitRowCount)
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.match(SqlBaseParser.ALL)
                pass
            elif token in [304, 308]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1157
                self.rowCount()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowCount

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowCount" ):
                listener.enterRowCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowCount" ):
                listener.exitRowCount(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowCount" ):
                return visitor.visitRowCount(self)
            else:
                return visitor.visitChildren(self)




    def rowCount(self):

        localctx = SqlBaseParser.RowCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_rowCount)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            _la = self._input.LA(1)
            if not(_la==304 or _la==308):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1163
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1179
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1177
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1165
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1166
                        localctx.operator = self.match(SqlBaseParser.INTERSECT)
                        self.state = 1168
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==22 or _la==75:
                            self.state = 1167
                            self.setQuantifier()


                        self.state = 1170
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1171
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1172
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==85 or _la==263):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1174
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==22 or _la==75:
                            self.state = 1173
                            self.setQuantifier()


                        self.state = 1176
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 1181
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_queryPrimary)
        try:
            self.state = 1198
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [230]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1182
                self.querySpecification()
                pass
            elif token in [242]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1183
                self.match(SqlBaseParser.TABLE)
                self.state = 1184
                self.qualifiedName()
                pass
            elif token in [277]:
                localctx = SqlBaseParser.InlineTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1185
                self.match(SqlBaseParser.VALUES)
                self.state = 1186
                self.expression()
                self.state = 1191
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1187
                        self.match(SqlBaseParser.T__3)
                        self.state = 1188
                        self.expression() 
                    self.state = 1193
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

                pass
            elif token in [2]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1194
                self.match(SqlBaseParser.T__1)
                self.state = 1195
                self.queryNoWith()
                self.state = 1196
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrdering = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.expression()
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29 or _la==72:
                self.state = 1201
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==29 or _la==72):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==171:
                self.state = 1204
                self.match(SqlBaseParser.NULLS)
                self.state = 1205
                localctx.nullOrdering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==95 or _la==137):
                    localctx.nullOrdering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # BooleanExpressionContext
            self.having = None # BooleanExpressionContext

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SelectItemContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def groupBy(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupByContext,0)


        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def windowDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WindowDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WindowDefinitionContext,i)


        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.match(SqlBaseParser.SELECT)
            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1209
                self.setQuantifier()


            self.state = 1212
            self.selectItem()
            self.state = 1217
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1213
                    self.match(SqlBaseParser.T__3)
                    self.state = 1214
                    self.selectItem() 
                self.state = 1219
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

            self.state = 1229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1220
                self.match(SqlBaseParser.FROM)
                self.state = 1221
                self.relation(0)
                self.state = 1226
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1222
                        self.match(SqlBaseParser.T__3)
                        self.state = 1223
                        self.relation(0) 
                    self.state = 1228
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,142,self._ctx)



            self.state = 1233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1231
                self.match(SqlBaseParser.WHERE)
                self.state = 1232
                localctx.where = self.booleanExpression(0)


            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1235
                self.match(SqlBaseParser.GROUP)
                self.state = 1236
                self.match(SqlBaseParser.BY)
                self.state = 1237
                self.groupBy()


            self.state = 1242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1240
                self.match(SqlBaseParser.HAVING)
                self.state = 1241
                localctx.having = self.booleanExpression(0)


            self.state = 1253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1244
                self.match(SqlBaseParser.WINDOW)
                self.state = 1245
                self.windowDefinition()
                self.state = 1250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1246
                        self.match(SqlBaseParser.T__3)
                        self.state = 1247
                        self.windowDefinition() 
                    self.state = 1252
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,147,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingElementContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupBy" ):
                listener.enterGroupBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupBy" ):
                listener.exitGroupBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupBy" ):
                return visitor.visitGroupBy(self)
            else:
                return visitor.visitChildren(self)




    def groupBy(self):

        localctx = SqlBaseParser.GroupByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_groupBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1255
                self.setQuantifier()


            self.state = 1258
            self.groupingElement()
            self.state = 1263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1259
                    self.match(SqlBaseParser.T__3)
                    self.state = 1260
                    self.groupingElement() 
                self.state = 1265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MultipleGroupingSetsContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)
        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleGroupingSets" ):
                listener.enterMultipleGroupingSets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleGroupingSets" ):
                listener.exitMultipleGroupingSets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleGroupingSets" ):
                return visitor.visitMultipleGroupingSets(self)
            else:
                return visitor.visitChildren(self)


    class SingleGroupingSetContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groupingSet(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleGroupingSet" ):
                listener.enterSingleGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleGroupingSet" ):
                listener.exitSingleGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleGroupingSet" ):
                return visitor.visitSingleGroupingSet(self)
            else:
                return visitor.visitChildren(self)


    class CubeContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube" ):
                listener.enterCube(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube" ):
                listener.exitCube(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCube" ):
                return visitor.visitCube(self)
            else:
                return visitor.visitChildren(self)


    class RollupContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup" ):
                listener.enterRollup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup" ):
                listener.exitRollup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollup" ):
                return visitor.visitRollup(self)
            else:
                return visitor.visitChildren(self)



    def groupingElement(self):

        localctx = SqlBaseParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_groupingElement)
        self._la = 0 # Token type
        try:
            self.state = 1306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SingleGroupingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1266
                self.groupingSet()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RollupContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1267
                self.match(SqlBaseParser.ROLLUP)
                self.state = 1268
                self.match(SqlBaseParser.T__1)
                self.state = 1277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510999884752696763) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49821073025290241) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -37154972088942721) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 576192539814492023) != 0):
                    self.state = 1269
                    self.groupingSet()
                    self.state = 1274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1270
                        self.match(SqlBaseParser.T__3)
                        self.state = 1271
                        self.groupingSet()
                        self.state = 1276
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1279
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CubeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1280
                self.match(SqlBaseParser.CUBE)
                self.state = 1281
                self.match(SqlBaseParser.T__1)
                self.state = 1290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510999884752696763) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49821073025290241) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -37154972088942721) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 576192539814492023) != 0):
                    self.state = 1282
                    self.groupingSet()
                    self.state = 1287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1283
                        self.match(SqlBaseParser.T__3)
                        self.state = 1284
                        self.groupingSet()
                        self.state = 1289
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1292
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.MultipleGroupingSetsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1293
                self.match(SqlBaseParser.GROUPING)
                self.state = 1294
                self.match(SqlBaseParser.SETS)
                self.state = 1295
                self.match(SqlBaseParser.T__1)
                self.state = 1296
                self.groupingSet()
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1297
                    self.match(SqlBaseParser.T__3)
                    self.state = 1298
                    self.groupingSet()
                    self.state = 1303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1304
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 1321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1308
                self.match(SqlBaseParser.T__1)
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510999884752696763) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49821073025290241) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -37154972088942721) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 576192539814492023) != 0):
                    self.state = 1309
                    self.expression()
                    self.state = 1314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1310
                        self.match(SqlBaseParser.T__3)
                        self.state = 1311
                        self.expression()
                        self.state = 1316
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1319
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1320
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecificationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDefinition" ):
                listener.enterWindowDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDefinition" ):
                listener.exitWindowDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDefinition" ):
                return visitor.visitWindowDefinition(self)
            else:
                return visitor.visitChildren(self)




    def windowDefinition(self):

        localctx = SqlBaseParser.WindowDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_windowDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            localctx.name = self.identifier()
            self.state = 1324
            self.match(SqlBaseParser.AS)
            self.state = 1325
            self.match(SqlBaseParser.T__1)
            self.state = 1326
            self.windowSpecification()
            self.state = 1327
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.existingWindowName = None # IdentifierContext
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpecification" ):
                listener.enterWindowSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpecification" ):
                listener.exitWindowSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowSpecification" ):
                return visitor.visitWindowSpecification(self)
            else:
                return visitor.visitChildren(self)




    def windowSpecification(self):

        localctx = SqlBaseParser.WindowSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_windowSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1329
                localctx.existingWindowName = self.identifier()


            self.state = 1342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==187:
                self.state = 1332
                self.match(SqlBaseParser.PARTITION)
                self.state = 1333
                self.match(SqlBaseParser.BY)
                self.state = 1334
                localctx._expression = self.expression()
                localctx.partition.append(localctx._expression)
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1335
                    self.match(SqlBaseParser.T__3)
                    self.state = 1336
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==181:
                self.state = 1344
                self.match(SqlBaseParser.ORDER)
                self.state = 1345
                self.match(SqlBaseParser.BY)
                self.state = 1346
                self.sortItem()
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1347
                    self.match(SqlBaseParser.T__3)
                    self.state = 1348
                    self.sortItem()
                    self.state = 1353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109 or _la==155 or _la==204 or _la==222:
                self.state = 1356
                self.windowFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            localctx.name = self.identifier()
            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 1360
                self.columnAliases()


            self.state = 1363
            self.match(SqlBaseParser.AS)
            self.state = 1364
            self.match(SqlBaseParser.T__1)
            self.state = 1365
            self.query()
            self.state = 1366
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            _la = self._input.LA(1)
            if not(_la==22 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectAll" ):
                return visitor.visitSelectAll(self)
            else:
                return visitor.visitChildren(self)


    class SelectSingleContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSingle" ):
                listener.enterSelectSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSingle" ):
                listener.exitSelectSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSingle" ):
                return visitor.visitSelectSingle(self)
            else:
                return visitor.visitChildren(self)



    def selectItem(self):

        localctx = SqlBaseParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 1385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SelectSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1370
                self.expression()
                self.state = 1375
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1371
                        self.match(SqlBaseParser.AS)


                    self.state = 1374
                    self.identifier()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1377
                self.primaryExpression(0)
                self.state = 1378
                self.match(SqlBaseParser.T__0)
                self.state = 1379
                self.match(SqlBaseParser.ASTERISK)
                self.state = 1382
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 1380
                    self.match(SqlBaseParser.AS)
                    self.state = 1381
                    self.columnAliases()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1384
                self.match(SqlBaseParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RelationDefaultContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sampledRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationDefault" ):
                listener.enterRelationDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationDefault" ):
                listener.exitRelationDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationDefault" ):
                return visitor.visitRelationDefault(self)
            else:
                return visitor.visitChildren(self)


    class JoinRelationContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.left = None # RelationContext
            self.right = None # SampledRelationContext
            self.rightRelation = None # RelationContext
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)
        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)
        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)
        def sampledRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.RelationDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1388
            self.sampledRelation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1408
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.JoinRelationContext(self, SqlBaseParser.RelationContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1390
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1404
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [52]:
                        self.state = 1391
                        self.match(SqlBaseParser.CROSS)
                        self.state = 1392
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1393
                        localctx.right = self.sampledRelation()
                        pass
                    elif token in [100, 117, 127, 140, 216]:
                        self.state = 1394
                        self.joinType()
                        self.state = 1395
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1396
                        localctx.rightRelation = self.relation(0)
                        self.state = 1397
                        self.joinCriteria()
                        pass
                    elif token in [159]:
                        self.state = 1399
                        self.match(SqlBaseParser.NATURAL)
                        self.state = 1400
                        self.joinType()
                        self.state = 1401
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1402
                        localctx.right = self.sampledRelation()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1410
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117, 127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 1411
                    self.match(SqlBaseParser.INNER)


                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1414
                self.match(SqlBaseParser.LEFT)
                self.state = 1416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 1415
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1418
                self.match(SqlBaseParser.RIGHT)
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 1419
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1422
                self.match(SqlBaseParser.FULL)
                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 1423
                    self.match(SqlBaseParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [176]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1428
                self.match(SqlBaseParser.ON)
                self.state = 1429
                self.booleanExpression(0)
                pass
            elif token in [271]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1430
                self.match(SqlBaseParser.USING)
                self.state = 1431
                self.match(SqlBaseParser.T__1)
                self.state = 1432
                self.identifier()
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1433
                    self.match(SqlBaseParser.T__3)
                    self.state = 1434
                    self.identifier()
                    self.state = 1439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1440
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampledRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # ExpressionContext

        def patternRecognition(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternRecognitionContext,0)


        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def sampleType(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampledRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampledRelation" ):
                listener.enterSampledRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampledRelation" ):
                listener.exitSampledRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampledRelation" ):
                return visitor.visitSampledRelation(self)
            else:
                return visitor.visitChildren(self)




    def sampledRelation(self):

        localctx = SqlBaseParser.SampledRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_sampledRelation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.patternRecognition()
            self.state = 1451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1445
                self.match(SqlBaseParser.TABLESAMPLE)
                self.state = 1446
                self.sampleType()
                self.state = 1447
                self.match(SqlBaseParser.T__1)
                self.state = 1448
                localctx.percentage = self.expression()
                self.state = 1449
                self.match(SqlBaseParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleType" ):
                listener.enterSampleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleType" ):
                listener.exitSampleType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleType" ):
                return visitor.visitSampleType(self)
            else:
                return visitor.visitChildren(self)




    def sampleType(self):

        localctx = SqlBaseParser.SampleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_sampleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            _la = self._input.LA(1)
            if not(_la==32 or _la==241):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrimsSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_trimsSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimsSpecification" ):
                listener.enterTrimsSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimsSpecification" ):
                listener.exitTrimsSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrimsSpecification" ):
                return visitor.visitTrimsSpecification(self)
            else:
                return visitor.visitChildren(self)




    def trimsSpecification(self):

        localctx = SqlBaseParser.TrimsSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_trimsSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            _la = self._input.LA(1)
            if not(_la==34 or _la==139 or _la==252):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListAggOverflowBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def listaggCountIndication(self):
            return self.getTypedRuleContext(SqlBaseParser.ListaggCountIndicationContext,0)


        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_listAggOverflowBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAggOverflowBehavior" ):
                listener.enterListAggOverflowBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAggOverflowBehavior" ):
                listener.exitListAggOverflowBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListAggOverflowBehavior" ):
                return visitor.visitListAggOverflowBehavior(self)
            else:
                return visitor.visitChildren(self)




    def listAggOverflowBehavior(self):

        localctx = SqlBaseParser.ListAggOverflowBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_listAggOverflowBehavior)
        self._la = 0 # Token type
        try:
            self.state = 1463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                self.match(SqlBaseParser.ERROR)
                pass
            elif token in [256]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1458
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==305 or _la==306:
                    self.state = 1459
                    self.string()


                self.state = 1462
                self.listaggCountIndication()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListaggCountIndicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def COUNT(self):
            return self.getToken(SqlBaseParser.COUNT, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_listaggCountIndication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListaggCountIndication" ):
                listener.enterListaggCountIndication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListaggCountIndication" ):
                listener.exitListaggCountIndication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListaggCountIndication" ):
                return visitor.visitListaggCountIndication(self)
            else:
                return visitor.visitChildren(self)




    def listaggCountIndication(self):

        localctx = SqlBaseParser.ListaggCountIndicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_listaggCountIndication)
        try:
            self.state = 1469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [284]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1465
                self.match(SqlBaseParser.WITH)
                self.state = 1466
                self.match(SqlBaseParser.COUNT)
                pass
            elif token in [286]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.match(SqlBaseParser.WITHOUT)
                self.state = 1468
                self.match(SqlBaseParser.COUNT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternRecognitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)


        def MATCH_RECOGNIZE(self):
            return self.getToken(SqlBaseParser.MATCH_RECOGNIZE, 0)

        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def variableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.VariableDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.VariableDefinitionContext,i)


        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def measureDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MeasureDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MeasureDefinitionContext,i)


        def rowsPerMatch(self):
            return self.getTypedRuleContext(SqlBaseParser.RowsPerMatchContext,0)


        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def skipTo(self):
            return self.getTypedRuleContext(SqlBaseParser.SkipToContext,0)


        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def subsetDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubsetDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubsetDefinitionContext,i)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternRecognition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternRecognition" ):
                listener.enterPatternRecognition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternRecognition" ):
                listener.exitPatternRecognition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternRecognition" ):
                return visitor.visitPatternRecognition(self)
            else:
                return visitor.visitChildren(self)




    def patternRecognition(self):

        localctx = SqlBaseParser.PatternRecognitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_patternRecognition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self.aliasedRelation()
            self.state = 1554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.state = 1472
                self.match(SqlBaseParser.MATCH_RECOGNIZE)
                self.state = 1473
                self.match(SqlBaseParser.T__1)
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==187:
                    self.state = 1474
                    self.match(SqlBaseParser.PARTITION)
                    self.state = 1475
                    self.match(SqlBaseParser.BY)
                    self.state = 1476
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1477
                        self.match(SqlBaseParser.T__3)
                        self.state = 1478
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 1483
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==181:
                    self.state = 1486
                    self.match(SqlBaseParser.ORDER)
                    self.state = 1487
                    self.match(SqlBaseParser.BY)
                    self.state = 1488
                    self.sortItem()
                    self.state = 1493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1489
                        self.match(SqlBaseParser.T__3)
                        self.state = 1490
                        self.sortItem()
                        self.state = 1495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==155:
                    self.state = 1498
                    self.match(SqlBaseParser.MEASURES)
                    self.state = 1499
                    self.measureDefinition()
                    self.state = 1504
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1500
                        self.match(SqlBaseParser.T__3)
                        self.state = 1501
                        self.measureDefinition()
                        self.state = 1506
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22 or _la==177:
                    self.state = 1509
                    self.rowsPerMatch()


                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 1512
                    self.match(SqlBaseParser.AFTER)
                    self.state = 1513
                    self.match(SqlBaseParser.MATCH)
                    self.state = 1514
                    self.skipTo()


                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116 or _la==229:
                    self.state = 1517
                    _la = self._input.LA(1)
                    if not(_la==116 or _la==229):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1520
                self.match(SqlBaseParser.PATTERN)
                self.state = 1521
                self.match(SqlBaseParser.T__1)
                self.state = 1522
                self.rowPattern(0)
                self.state = 1523
                self.match(SqlBaseParser.T__2)
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==239:
                    self.state = 1524
                    self.match(SqlBaseParser.SUBSET)
                    self.state = 1525
                    self.subsetDefinition()
                    self.state = 1530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1526
                        self.match(SqlBaseParser.T__3)
                        self.state = 1527
                        self.subsetDefinition()
                        self.state = 1532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1535
                self.match(SqlBaseParser.DEFINE)
                self.state = 1536
                self.variableDefinition()
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1537
                    self.match(SqlBaseParser.T__3)
                    self.state = 1538
                    self.variableDefinition()
                    self.state = 1543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1544
                self.match(SqlBaseParser.T__2)
                self.state = 1552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1545
                        self.match(SqlBaseParser.AS)


                    self.state = 1548
                    self.identifier()
                    self.state = 1550
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                    if la_ == 1:
                        self.state = 1549
                        self.columnAliases()






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_measureDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureDefinition" ):
                listener.enterMeasureDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureDefinition" ):
                listener.exitMeasureDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureDefinition" ):
                return visitor.visitMeasureDefinition(self)
            else:
                return visitor.visitChildren(self)




    def measureDefinition(self):

        localctx = SqlBaseParser.MeasureDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_measureDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            self.expression()
            self.state = 1557
            self.match(SqlBaseParser.AS)
            self.state = 1558
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsPerMatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONE(self):
            return self.getToken(SqlBaseParser.ONE, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def PER(self):
            return self.getToken(SqlBaseParser.PER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def emptyMatchHandling(self):
            return self.getTypedRuleContext(SqlBaseParser.EmptyMatchHandlingContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowsPerMatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsPerMatch" ):
                listener.enterRowsPerMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsPerMatch" ):
                listener.exitRowsPerMatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowsPerMatch" ):
                return visitor.visitRowsPerMatch(self)
            else:
                return visitor.visitChildren(self)




    def rowsPerMatch(self):

        localctx = SqlBaseParser.RowsPerMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_rowsPerMatch)
        self._la = 0 # Token type
        try:
            self.state = 1571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1560
                self.match(SqlBaseParser.ONE)
                self.state = 1561
                self.match(SqlBaseParser.ROW)
                self.state = 1562
                self.match(SqlBaseParser.PER)
                self.state = 1563
                self.match(SqlBaseParser.MATCH)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1564
                self.match(SqlBaseParser.ALL)
                self.state = 1565
                self.match(SqlBaseParser.ROWS)
                self.state = 1566
                self.match(SqlBaseParser.PER)
                self.state = 1567
                self.match(SqlBaseParser.MATCH)
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==175 or _la==235 or _la==284:
                    self.state = 1568
                    self.emptyMatchHandling()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyMatchHandlingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def MATCHES(self):
            return self.getToken(SqlBaseParser.MATCHES, 0)

        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def UNMATCHED(self):
            return self.getToken(SqlBaseParser.UNMATCHED, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_emptyMatchHandling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyMatchHandling" ):
                listener.enterEmptyMatchHandling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyMatchHandling" ):
                listener.exitEmptyMatchHandling(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyMatchHandling" ):
                return visitor.visitEmptyMatchHandling(self)
            else:
                return visitor.visitChildren(self)




    def emptyMatchHandling(self):

        localctx = SqlBaseParser.EmptyMatchHandlingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_emptyMatchHandling)
        try:
            self.state = 1582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [235]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1573
                self.match(SqlBaseParser.SHOW)
                self.state = 1574
                self.match(SqlBaseParser.EMPTY)
                self.state = 1575
                self.match(SqlBaseParser.MATCHES)
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1576
                self.match(SqlBaseParser.OMIT)
                self.state = 1577
                self.match(SqlBaseParser.EMPTY)
                self.state = 1578
                self.match(SqlBaseParser.MATCHES)
                pass
            elif token in [284]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1579
                self.match(SqlBaseParser.WITH)
                self.state = 1580
                self.match(SqlBaseParser.UNMATCHED)
                self.state = 1581
                self.match(SqlBaseParser.ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkipToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def PAST(self):
            return self.getToken(SqlBaseParser.PAST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_skipTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkipTo" ):
                listener.enterSkipTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkipTo" ):
                listener.exitSkipTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkipTo" ):
                return visitor.visitSkipTo(self)
            else:
                return visitor.visitChildren(self)




    def skipTo(self):

        localctx = SqlBaseParser.SkipToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_skipTo)
        try:
            self.state = 1603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.match(SqlBaseParser.T__4)
                self.state = 1585
                self.match(SqlBaseParser.TO)
                self.state = 1586
                self.match(SqlBaseParser.NEXT)
                self.state = 1587
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1588
                self.match(SqlBaseParser.T__4)
                self.state = 1589
                self.match(SqlBaseParser.PAST)
                self.state = 1590
                self.match(SqlBaseParser.LAST)
                self.state = 1591
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1592
                self.match(SqlBaseParser.T__4)
                self.state = 1593
                self.match(SqlBaseParser.TO)
                self.state = 1594
                self.match(SqlBaseParser.FIRST)
                self.state = 1595
                self.identifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1596
                self.match(SqlBaseParser.T__4)
                self.state = 1597
                self.match(SqlBaseParser.TO)
                self.state = 1598
                self.match(SqlBaseParser.LAST)
                self.state = 1599
                self.identifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1600
                self.match(SqlBaseParser.T__4)
                self.state = 1601
                self.match(SqlBaseParser.TO)
                self.state = 1602
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.union = list() # of IdentifierContexts

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_subsetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubsetDefinition" ):
                listener.enterSubsetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubsetDefinition" ):
                listener.exitSubsetDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubsetDefinition" ):
                return visitor.visitSubsetDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subsetDefinition(self):

        localctx = SqlBaseParser.SubsetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_subsetDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            localctx.name = self.identifier()
            self.state = 1606
            self.match(SqlBaseParser.EQ)
            self.state = 1607
            self.match(SqlBaseParser.T__1)
            self.state = 1608
            localctx._identifier = self.identifier()
            localctx.union.append(localctx._identifier)
            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1609
                self.match(SqlBaseParser.T__3)
                self.state = 1610
                localctx._identifier = self.identifier()
                localctx.union.append(localctx._identifier)
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1616
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_variableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDefinition" ):
                listener.enterVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDefinition" ):
                listener.exitVariableDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDefinition" ):
                return visitor.visitVariableDefinition(self)
            else:
                return visitor.visitChildren(self)




    def variableDefinition(self):

        localctx = SqlBaseParser.VariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_variableDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.identifier()
            self.state = 1619
            self.match(SqlBaseParser.AS)
            self.state = 1620
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_aliasedRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)




    def aliasedRelation(self):

        localctx = SqlBaseParser.AliasedRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_aliasedRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            self.relationPrimary()
            self.state = 1630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 1623
                    self.match(SqlBaseParser.AS)


                self.state = 1626
                self.identifier()
                self.state = 1628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                if la_ == 1:
                    self.state = 1627
                    self.columnAliases()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAliases" ):
                listener.enterColumnAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAliases" ):
                listener.exitColumnAliases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnAliases" ):
                return visitor.visitColumnAliases(self)
            else:
                return visitor.visitChildren(self)




    def columnAliases(self):

        localctx = SqlBaseParser.ColumnAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_columnAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.match(SqlBaseParser.T__1)
            self.state = 1633
            self.identifier()
            self.state = 1638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1634
                self.match(SqlBaseParser.T__3)
                self.state = 1635
                self.identifier()
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1641
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryRelation" ):
                listener.enterSubqueryRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryRelation" ):
                listener.exitSubqueryRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryRelation" ):
                return visitor.visitSubqueryRelation(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedRelation" ):
                listener.enterParenthesizedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedRelation" ):
                listener.exitParenthesizedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedRelation" ):
                return visitor.visitParenthesizedRelation(self)
            else:
                return visitor.visitChildren(self)


    class UnnestContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNNEST(self):
            return self.getToken(SqlBaseParser.UNNEST, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ORDINALITY(self):
            return self.getToken(SqlBaseParser.ORDINALITY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest" ):
                listener.enterUnnest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest" ):
                listener.exitUnnest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnest" ):
                return visitor.visitUnnest(self)
            else:
                return visitor.visitChildren(self)


    class TableFunctionInvocationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableFunctionCall(self):
            return self.getTypedRuleContext(SqlBaseParser.TableFunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunctionInvocation" ):
                listener.enterTableFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunctionInvocation" ):
                listener.exitTableFunctionInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionInvocation" ):
                return visitor.visitTableFunctionInvocation(self)
            else:
                return visitor.visitChildren(self)


    class LateralContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateral" ):
                listener.enterLateral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateral" ):
                listener.exitLateral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateral" ):
                return visitor.visitLateral(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def queryPeriod(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPeriodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 1680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1643
                self.qualifiedName()
                self.state = 1645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1644
                    self.queryPeriod()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SubqueryRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1647
                self.match(SqlBaseParser.T__1)
                self.state = 1648
                self.query()
                self.state = 1649
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UnnestContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1651
                self.match(SqlBaseParser.UNNEST)
                self.state = 1652
                self.match(SqlBaseParser.T__1)
                self.state = 1653
                self.expression()
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1654
                    self.match(SqlBaseParser.T__3)
                    self.state = 1655
                    self.expression()
                    self.state = 1660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1661
                self.match(SqlBaseParser.T__2)
                self.state = 1664
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1662
                    self.match(SqlBaseParser.WITH)
                    self.state = 1663
                    self.match(SqlBaseParser.ORDINALITY)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.LateralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1666
                self.match(SqlBaseParser.LATERAL)
                self.state = 1667
                self.match(SqlBaseParser.T__1)
                self.state = 1668
                self.query()
                self.state = 1669
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableFunctionInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1671
                self.match(SqlBaseParser.TABLE)
                self.state = 1672
                self.match(SqlBaseParser.T__1)
                self.state = 1673
                self.tableFunctionCall()
                self.state = 1674
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.ParenthesizedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1676
                self.match(SqlBaseParser.T__1)
                self.state = 1677
                self.relation(0)
                self.state = 1678
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def tableFunctionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableFunctionArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableFunctionArgumentContext,i)


        def COPARTITION(self):
            return self.getToken(SqlBaseParser.COPARTITION, 0)

        def copartitionTables(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CopartitionTablesContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CopartitionTablesContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunctionCall" ):
                listener.enterTableFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunctionCall" ):
                listener.exitTableFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionCall" ):
                return visitor.visitTableFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionCall(self):

        localctx = SqlBaseParser.TableFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_tableFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.qualifiedName()
            self.state = 1683
            self.match(SqlBaseParser.T__1)
            self.state = 1692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1684
                self.tableFunctionArgument()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1685
                    self.match(SqlBaseParser.T__3)
                    self.state = 1686
                    self.tableFunctionArgument()
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1694
                self.match(SqlBaseParser.COPARTITION)
                self.state = 1695
                self.copartitionTables()
                self.state = 1700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1696
                    self.match(SqlBaseParser.T__3)
                    self.state = 1697
                    self.copartitionTables()
                    self.state = 1702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1705
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.TableArgumentContext,0)


        def descriptorArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.DescriptorArgumentContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableFunctionArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunctionArgument" ):
                listener.enterTableFunctionArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunctionArgument" ):
                listener.exitTableFunctionArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionArgument" ):
                return visitor.visitTableFunctionArgument(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionArgument(self):

        localctx = SqlBaseParser.TableFunctionArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_tableFunctionArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1707
                self.identifier()
                self.state = 1708
                self.match(SqlBaseParser.T__5)


            self.state = 1715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1712
                self.tableArgument()
                pass

            elif la_ == 2:
                self.state = 1713
                self.descriptorArgument()
                pass

            elif la_ == 3:
                self.state = 1714
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgumentRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.TableArgumentRelationContext,0)


        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def PRUNE(self):
            return self.getToken(SqlBaseParser.PRUNE, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def KEEP(self):
            return self.getToken(SqlBaseParser.KEEP, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgument" ):
                listener.enterTableArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgument" ):
                listener.exitTableArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgument" ):
                return visitor.visitTableArgument(self)
            else:
                return visitor.visitChildren(self)




    def tableArgument(self):

        localctx = SqlBaseParser.TableArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_tableArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self.tableArgumentRelation()
            self.state = 1735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==187:
                self.state = 1718
                self.match(SqlBaseParser.PARTITION)
                self.state = 1719
                self.match(SqlBaseParser.BY)
                self.state = 1733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1720
                    self.match(SqlBaseParser.T__1)
                    self.state = 1729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510999884752696763) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49821073025290241) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -37154972088942721) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 576192539814492023) != 0):
                        self.state = 1721
                        self.expression()
                        self.state = 1726
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==4:
                            self.state = 1722
                            self.match(SqlBaseParser.T__3)
                            self.state = 1723
                            self.expression()
                            self.state = 1728
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1731
                    self.match(SqlBaseParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 1732
                    self.expression()
                    pass




            self.state = 1743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [202]:
                self.state = 1737
                self.match(SqlBaseParser.PRUNE)
                self.state = 1738
                self.match(SqlBaseParser.WHEN)
                self.state = 1739
                self.match(SqlBaseParser.EMPTY)
                pass
            elif token in [134]:
                self.state = 1740
                self.match(SqlBaseParser.KEEP)
                self.state = 1741
                self.match(SqlBaseParser.WHEN)
                self.state = 1742
                self.match(SqlBaseParser.EMPTY)
                pass
            elif token in [3, 4, 50, 181]:
                pass
            else:
                pass
            self.state = 1761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==181:
                self.state = 1745
                self.match(SqlBaseParser.ORDER)
                self.state = 1746
                self.match(SqlBaseParser.BY)
                self.state = 1759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1747
                    self.match(SqlBaseParser.T__1)
                    self.state = 1748
                    self.sortItem()
                    self.state = 1753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1749
                        self.match(SqlBaseParser.T__3)
                        self.state = 1750
                        self.sortItem()
                        self.state = 1755
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1756
                    self.match(SqlBaseParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 1758
                    self.sortItem()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgumentRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableArgumentRelation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableArgumentQueryContext(TableArgumentRelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableArgumentRelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgumentQuery" ):
                listener.enterTableArgumentQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgumentQuery" ):
                listener.exitTableArgumentQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgumentQuery" ):
                return visitor.visitTableArgumentQuery(self)
            else:
                return visitor.visitChildren(self)


    class TableArgumentTableContext(TableArgumentRelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableArgumentRelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgumentTable" ):
                listener.enterTableArgumentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgumentTable" ):
                listener.exitTableArgumentTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgumentTable" ):
                return visitor.visitTableArgumentTable(self)
            else:
                return visitor.visitChildren(self)



    def tableArgumentRelation(self):

        localctx = SqlBaseParser.TableArgumentRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_tableArgumentRelation)
        self._la = 0 # Token type
        try:
            self.state = 1789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableArgumentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1763
                self.match(SqlBaseParser.TABLE)
                self.state = 1764
                self.match(SqlBaseParser.T__1)
                self.state = 1765
                self.qualifiedName()
                self.state = 1766
                self.match(SqlBaseParser.T__2)
                self.state = 1774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1767
                        self.match(SqlBaseParser.AS)


                    self.state = 1770
                    self.identifier()
                    self.state = 1772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==2:
                        self.state = 1771
                        self.columnAliases()




                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TableArgumentQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1776
                self.match(SqlBaseParser.TABLE)
                self.state = 1777
                self.match(SqlBaseParser.T__1)
                self.state = 1778
                self.query()
                self.state = 1779
                self.match(SqlBaseParser.T__2)
                self.state = 1787
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1780
                        self.match(SqlBaseParser.AS)


                    self.state = 1783
                    self.identifier()
                    self.state = 1785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==2:
                        self.state = 1784
                        self.columnAliases()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescriptorArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIPTOR(self):
            return self.getToken(SqlBaseParser.DESCRIPTOR, 0)

        def descriptorField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DescriptorFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DescriptorFieldContext,i)


        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_descriptorArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescriptorArgument" ):
                listener.enterDescriptorArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescriptorArgument" ):
                listener.exitDescriptorArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescriptorArgument" ):
                return visitor.visitDescriptorArgument(self)
            else:
                return visitor.visitChildren(self)




    def descriptorArgument(self):

        localctx = SqlBaseParser.DescriptorArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_descriptorArgument)
        self._la = 0 # Token type
        try:
            self.state = 1809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1791
                self.match(SqlBaseParser.DESCRIPTOR)
                self.state = 1792
                self.match(SqlBaseParser.T__1)
                self.state = 1793
                self.descriptorField()
                self.state = 1798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1794
                    self.match(SqlBaseParser.T__3)
                    self.state = 1795
                    self.descriptorField()
                    self.state = 1800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1801
                self.match(SqlBaseParser.T__2)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1803
                self.match(SqlBaseParser.CAST)
                self.state = 1804
                self.match(SqlBaseParser.T__1)
                self.state = 1805
                self.match(SqlBaseParser.NULL)
                self.state = 1806
                self.match(SqlBaseParser.AS)
                self.state = 1807
                self.match(SqlBaseParser.DESCRIPTOR)
                self.state = 1808
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescriptorFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_descriptorField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescriptorField" ):
                listener.enterDescriptorField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescriptorField" ):
                listener.exitDescriptorField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescriptorField" ):
                return visitor.visitDescriptorField(self)
            else:
                return visitor.visitChildren(self)




    def descriptorField(self):

        localctx = SqlBaseParser.DescriptorFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_descriptorField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.identifier()
            self.state = 1813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510982292348548539) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49824921316839487) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 4574531046338445183) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 540432023632705399) != 0):
                self.state = 1812
                self.type_(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopartitionTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_copartitionTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopartitionTables" ):
                listener.enterCopartitionTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopartitionTables" ):
                listener.exitCopartitionTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopartitionTables" ):
                return visitor.visitCopartitionTables(self)
            else:
                return visitor.visitChildren(self)




    def copartitionTables(self):

        localctx = SqlBaseParser.CopartitionTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_copartitionTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.match(SqlBaseParser.T__1)
            self.state = 1816
            self.qualifiedName()
            self.state = 1817
            self.match(SqlBaseParser.T__3)
            self.state = 1818
            self.qualifiedName()
            self.state = 1823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1819
                self.match(SqlBaseParser.T__3)
                self.state = 1820
                self.qualifiedName()
                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1826
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self._valueExpression = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class OrContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr" ):
                listener.enterOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr" ):
                listener.exitOr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr" ):
                return visitor.visitOr(self)
            else:
                return visitor.visitChildren(self)


    class AndContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd" ):
                listener.enterAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd" ):
                listener.exitAnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd" ):
                return visitor.visitAnd(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 115, 116, 118, 121, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 291, 298, 299, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314]:
                localctx = SqlBaseParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1831
                localctx._valueExpression = self.valueExpression(0)
                self.state = 1833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1832
                    self.predicate(localctx._valueExpression)


                pass
            elif token in [168]:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1835
                self.match(SqlBaseParser.NOT)
                self.state = 1836
                self.booleanExpression(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1845
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.AndContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1839
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1840
                        self.match(SqlBaseParser.AND)
                        self.state = 1841
                        self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.OrContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1842
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1843
                        self.match(SqlBaseParser.OR)
                        self.state = 1844
                        self.booleanExpression(2)
                        pass

             
                self.state = 1849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, value:ParserRuleContext=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None
            self.value = value


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.value = ctx.value



    class ComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class LikeContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.pattern = None # ValueExpressionContext
            self.escape = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike" ):
                listener.enterLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike" ):
                listener.exitLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike" ):
                return visitor.visitLike(self)
            else:
                return visitor.visitChildren(self)


    class InSubqueryContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSubquery" ):
                listener.enterInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSubquery" ):
                listener.exitInSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInSubquery" ):
                return visitor.visitInSubquery(self)
            else:
                return visitor.visitChildren(self)


    class DistinctFromContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctFrom" ):
                listener.enterDistinctFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctFrom" ):
                listener.exitDistinctFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctFrom" ):
                return visitor.visitDistinctFrom(self)
            else:
                return visitor.visitChildren(self)


    class InListContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInList" ):
                listener.enterInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInList" ):
                listener.exitInList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInList" ):
                return visitor.visitInList(self)
            else:
                return visitor.visitChildren(self)


    class NullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullPredicate" ):
                listener.enterNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullPredicate" ):
                listener.exitNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullPredicate" ):
                return visitor.visitNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BetweenContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween" ):
                return visitor.visitBetween(self)
            else:
                return visitor.visitChildren(self)


    class QuantifiedComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def comparisonQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonQuantifierContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedComparison" ):
                listener.enterQuantifiedComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedComparison" ):
                listener.exitQuantifiedComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifiedComparison" ):
                return visitor.visitQuantifiedComparison(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, value:ParserRuleContext):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state, value)
        self.enterRule(localctx, 114, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 1911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1850
                self.comparisonOperator()
                self.state = 1851
                localctx.right = self.valueExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.QuantifiedComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1853
                self.comparisonOperator()
                self.state = 1854
                self.comparisonQuantifier()
                self.state = 1855
                self.match(SqlBaseParser.T__1)
                self.state = 1856
                self.query()
                self.state = 1857
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==168:
                    self.state = 1859
                    self.match(SqlBaseParser.NOT)


                self.state = 1862
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1863
                localctx.lower = self.valueExpression(0)
                self.state = 1864
                self.match(SqlBaseParser.AND)
                self.state = 1865
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==168:
                    self.state = 1867
                    self.match(SqlBaseParser.NOT)


                self.state = 1870
                self.match(SqlBaseParser.IN)
                self.state = 1871
                self.match(SqlBaseParser.T__1)
                self.state = 1872
                self.expression()
                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1873
                    self.match(SqlBaseParser.T__3)
                    self.state = 1874
                    self.expression()
                    self.state = 1879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1880
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.InSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==168:
                    self.state = 1882
                    self.match(SqlBaseParser.NOT)


                self.state = 1885
                self.match(SqlBaseParser.IN)
                self.state = 1886
                self.match(SqlBaseParser.T__1)
                self.state = 1887
                self.query()
                self.state = 1888
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.LikeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==168:
                    self.state = 1890
                    self.match(SqlBaseParser.NOT)


                self.state = 1893
                self.match(SqlBaseParser.LIKE)
                self.state = 1894
                localctx.pattern = self.valueExpression(0)
                self.state = 1897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 1895
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 1896
                    localctx.escape = self.valueExpression(0)


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.NullPredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1899
                self.match(SqlBaseParser.IS)
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==168:
                    self.state = 1900
                    self.match(SqlBaseParser.NOT)


                self.state = 1903
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.DistinctFromContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1904
                self.match(SqlBaseParser.IS)
                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==168:
                    self.state = 1905
                    self.match(SqlBaseParser.NOT)


                self.state = 1908
                self.match(SqlBaseParser.DISTINCT)
                self.state = 1909
                self.match(SqlBaseParser.FROM)
                self.state = 1910
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ConcatenationContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def CONCAT(self):
            return self.getToken(SqlBaseParser.CONCAT, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)


    class AtTimeZoneContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)
        def timeZoneSpecifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TimeZoneSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtTimeZone" ):
                listener.enterAtTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtTimeZone" ):
                listener.exitAtTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtTimeZone" ):
                return visitor.visitAtTimeZone(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1914
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1915
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==298 or _la==299):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1916
                self.valueExpression(4)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1933
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1931
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1919
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1920
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & 7) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1921
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1922
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1923
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==298 or _la==299):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1924
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ConcatenationContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1925
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1926
                        self.match(SqlBaseParser.CONCAT)
                        self.state = 1927
                        localctx.right = self.valueExpression(2)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.AtTimeZoneContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1928
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1929
                        self.match(SqlBaseParser.AT)
                        self.state = 1930
                        self.timeZoneSpecifier()
                        pass

             
                self.state = 1935
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class JsonValueContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.emptyBehavior = None # JsonValueBehaviorContext
            self.errorBehavior = None # JsonValueBehaviorContext
            self.copyFrom(ctx)

        def JSON_VALUE(self):
            return self.getToken(SqlBaseParser.JSON_VALUE, 0)
        def jsonPathInvocation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonPathInvocationContext,0)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ON)
            else:
                return self.getToken(SqlBaseParser.ON, i)
        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)
        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)
        def jsonValueBehavior(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonValueBehaviorContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonValueBehaviorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonValue" ):
                return visitor.visitJsonValue(self)
            else:
                return visitor.visitChildren(self)


    class SpecialDateTimeFunctionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.precision = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)
        def LOCALTIME(self):
            return self.getToken(SqlBaseParser.LOCALTIME, 0)
        def LOCALTIMESTAMP(self):
            return self.getToken(SqlBaseParser.LOCALTIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTimeFunction" ):
                listener.enterSpecialDateTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTimeFunction" ):
                listener.exitSpecialDateTimeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialDateTimeFunction" ):
                return visitor.visitSpecialDateTimeFunction(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimChar = None # ValueExpressionContext
            self.trimSource = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def trimsSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.TrimsSpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrim" ):
                return visitor.visitTrim(self)
            else:
                return visitor.visitChildren(self)


    class ParameterContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)


    class NormalizeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NORMALIZE(self):
            return self.getToken(SqlBaseParser.NORMALIZE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def normalForm(self):
            return self.getTypedRuleContext(SqlBaseParser.NormalFormContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalize" ):
                return visitor.visitNormalize(self)
            else:
                return visitor.visitChildren(self)


    class JsonObjectContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_OBJECT(self):
            return self.getToken(SqlBaseParser.JSON_OBJECT, 0)
        def jsonObjectMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonObjectMemberContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonObjectMemberContext,i)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.NULL)
            else:
                return self.getToken(SqlBaseParser.NULL, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def ABSENT(self):
            return self.getToken(SqlBaseParser.ABSENT, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def UNIQUE(self):
            return self.getToken(SqlBaseParser.UNIQUE, 0)
        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def jsonRepresentation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonRepresentationContext,0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObject" ):
                listener.enterJsonObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObject" ):
                listener.exitJsonObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonObject" ):
                return visitor.visitJsonObject(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)


    class JsonArrayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_ARRAY(self):
            return self.getToken(SqlBaseParser.JSON_ARRAY, 0)
        def jsonValueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonValueExpressionContext,i)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.NULL)
            else:
                return self.getToken(SqlBaseParser.NULL, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def ABSENT(self):
            return self.getToken(SqlBaseParser.ABSENT, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def jsonRepresentation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonRepresentationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArray" ):
                listener.enterJsonArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArray" ):
                listener.exitJsonArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonArray" ):
                return visitor.visitJsonArray(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.operand = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class NullLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class JsonExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_EXISTS(self):
            return self.getToken(SqlBaseParser.JSON_EXISTS, 0)
        def jsonPathInvocation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonPathInvocationContext,0)

        def jsonExistsErrorBehavior(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonExistsErrorBehaviorContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExists" ):
                listener.enterJsonExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExists" ):
                listener.exitJsonExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonExists" ):
                return visitor.visitJsonExists(self)
            else:
                return visitor.visitChildren(self)


    class CurrentPathContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_PATH(self):
            return self.getToken(SqlBaseParser.CURRENT_PATH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentPath" ):
                listener.enterCurrentPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentPath" ):
                listener.exitCurrentPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentPath" ):
                return visitor.visitCurrentPath(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_LITERAL(self):
            return self.getToken(SqlBaseParser.BINARY_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLiteral" ):
                listener.enterBinaryLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLiteral" ):
                listener.exitBinaryLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLiteral" ):
                return visitor.visitBinaryLiteral(self)
            else:
                return visitor.visitChildren(self)


    class CurrentUserContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUser" ):
                listener.enterCurrentUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUser" ):
                listener.exitCurrentUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUser" ):
                return visitor.visitCurrentUser(self)
            else:
                return visitor.visitChildren(self)


    class JsonQueryContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.emptyBehavior = None # JsonQueryBehaviorContext
            self.errorBehavior = None # JsonQueryBehaviorContext
            self.copyFrom(ctx)

        def JSON_QUERY(self):
            return self.getToken(SqlBaseParser.JSON_QUERY, 0)
        def jsonPathInvocation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonPathInvocationContext,0)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def jsonQueryWrapperBehavior(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonQueryWrapperBehaviorContext,0)

        def WRAPPER(self):
            return self.getToken(SqlBaseParser.WRAPPER, 0)
        def QUOTES(self):
            return self.getToken(SqlBaseParser.QUOTES, 0)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ON)
            else:
                return self.getToken(SqlBaseParser.ON, i)
        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)
        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)
        def KEEP(self):
            return self.getToken(SqlBaseParser.KEEP, 0)
        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)
        def jsonQueryBehavior(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonQueryBehaviorContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonQueryBehaviorContext,i)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def jsonRepresentation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonRepresentationContext,0)

        def SCALAR(self):
            return self.getToken(SqlBaseParser.SCALAR, 0)
        def TEXT_STRING(self):
            return self.getToken(SqlBaseParser.TEXT_STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonQuery" ):
                listener.enterJsonQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonQuery" ):
                listener.exitJsonQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonQuery" ):
                return visitor.visitJsonQuery(self)
            else:
                return visitor.visitChildren(self)


    class MeasureContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def over(self):
            return self.getTypedRuleContext(SqlBaseParser.OverContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasure" ):
                listener.enterMeasure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasure" ):
                listener.exitMeasure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasure" ):
                return visitor.visitMeasure(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ArrayConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstructor" ):
                listener.enterArrayConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstructor" ):
                listener.exitArrayConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayConstructor" ):
                return visitor.visitArrayConstructor(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.label = None # IdentifierContext
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def processingMode(self):
            return self.getTypedRuleContext(SqlBaseParser.ProcessingModeContext,0)

        def filter_(self):
            return self.getTypedRuleContext(SqlBaseParser.FilterContext,0)

        def over(self):
            return self.getTypedRuleContext(SqlBaseParser.OverContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def nullTreatment(self):
            return self.getTypedRuleContext(SqlBaseParser.NullTreatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class CurrentSchemaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_SCHEMA(self):
            return self.getToken(SqlBaseParser.CURRENT_SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchema" ):
                listener.enterCurrentSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchema" ):
                listener.exitCurrentSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentSchema" ):
                return visitor.visitCurrentSchema(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class ListaggContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def LISTAGG(self):
            return self.getToken(SqlBaseParser.LISTAGG, 0)
        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)
        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def OVERFLOW(self):
            return self.getToken(SqlBaseParser.OVERFLOW, 0)
        def listAggOverflowBehavior(self):
            return self.getTypedRuleContext(SqlBaseParser.ListAggOverflowBehaviorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListagg" ):
                listener.enterListagg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListagg" ):
                listener.exitListagg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListagg" ):
                return visitor.visitListagg(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class CurrentCatalogContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_CATALOG(self):
            return self.getToken(SqlBaseParser.CURRENT_CATALOG, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentCatalog" ):
                listener.enterCurrentCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentCatalog" ):
                listener.exitCurrentCatalog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentCatalog" ):
                return visitor.visitCurrentCatalog(self)
            else:
                return visitor.visitChildren(self)


    class GroupingOperationContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingOperation" ):
                listener.enterGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingOperation" ):
                listener.exitGroupingOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingOperation" ):
                return visitor.visitGroupingOperation(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1937
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1938
                self.interval()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1939
                self.identifier()
                self.state = 1940
                self.string()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1942
                self.match(SqlBaseParser.DOUBLE)
                self.state = 1943
                self.match(SqlBaseParser.PRECISION)
                self.state = 1944
                self.string()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1945
                self.number()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1946
                self.booleanValue()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1947
                self.string()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.BinaryLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1948
                self.match(SqlBaseParser.BINARY_LITERAL)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.ParameterContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1949
                self.match(SqlBaseParser.QUESTION_MARK)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1950
                self.match(SqlBaseParser.POSITION)
                self.state = 1951
                self.match(SqlBaseParser.T__1)
                self.state = 1952
                self.valueExpression(0)
                self.state = 1953
                self.match(SqlBaseParser.IN)
                self.state = 1954
                self.valueExpression(0)
                self.state = 1955
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1957
                self.match(SqlBaseParser.T__1)
                self.state = 1958
                self.expression()
                self.state = 1961 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1959
                    self.match(SqlBaseParser.T__3)
                    self.state = 1960
                    self.expression()
                    self.state = 1963 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==4):
                        break

                self.state = 1965
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1967
                self.match(SqlBaseParser.ROW)
                self.state = 1968
                self.match(SqlBaseParser.T__1)
                self.state = 1969
                self.expression()
                self.state = 1974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1970
                    self.match(SqlBaseParser.T__3)
                    self.state = 1971
                    self.expression()
                    self.state = 1976
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1977
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.ListaggContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1979
                localctx.name = self.match(SqlBaseParser.LISTAGG)
                self.state = 1980
                self.match(SqlBaseParser.T__1)
                self.state = 1982
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1981
                    self.setQuantifier()


                self.state = 1984
                self.expression()
                self.state = 1987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 1985
                    self.match(SqlBaseParser.T__3)
                    self.state = 1986
                    self.string()


                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==176:
                    self.state = 1989
                    self.match(SqlBaseParser.ON)
                    self.state = 1990
                    self.match(SqlBaseParser.OVERFLOW)
                    self.state = 1991
                    self.listAggOverflowBehavior()


                self.state = 1994
                self.match(SqlBaseParser.T__2)

                self.state = 1995
                self.match(SqlBaseParser.WITHIN)
                self.state = 1996
                self.match(SqlBaseParser.GROUP)
                self.state = 1997
                self.match(SqlBaseParser.T__1)
                self.state = 1998
                self.match(SqlBaseParser.ORDER)
                self.state = 1999
                self.match(SqlBaseParser.BY)
                self.state = 2000
                self.sortItem()
                self.state = 2005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2001
                    self.match(SqlBaseParser.T__3)
                    self.state = 2002
                    self.sortItem()
                    self.state = 2007
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2008
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 2010
                    self.processingMode()


                self.state = 2013
                self.qualifiedName()
                self.state = 2014
                self.match(SqlBaseParser.T__1)
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510982292348548539) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49824921316839487) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 4574531046338445183) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 540432023632705399) != 0):
                    self.state = 2015
                    localctx.label = self.identifier()
                    self.state = 2016
                    self.match(SqlBaseParser.T__0)


                self.state = 2020
                self.match(SqlBaseParser.ASTERISK)
                self.state = 2021
                self.match(SqlBaseParser.T__2)
                self.state = 2023
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 2022
                    self.filter_()


                self.state = 2026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                if la_ == 1:
                    self.state = 2025
                    self.over()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2029
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 2028
                    self.processingMode()


                self.state = 2031
                self.qualifiedName()
                self.state = 2032
                self.match(SqlBaseParser.T__1)
                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510999884752698811) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49821073025290241) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -37154972088942721) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 576192539814492023) != 0):
                    self.state = 2034
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                    if la_ == 1:
                        self.state = 2033
                        self.setQuantifier()


                    self.state = 2036
                    self.expression()
                    self.state = 2041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2037
                        self.match(SqlBaseParser.T__3)
                        self.state = 2038
                        self.expression()
                        self.state = 2043
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==181:
                    self.state = 2046
                    self.match(SqlBaseParser.ORDER)
                    self.state = 2047
                    self.match(SqlBaseParser.BY)
                    self.state = 2048
                    self.sortItem()
                    self.state = 2053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2049
                        self.match(SqlBaseParser.T__3)
                        self.state = 2050
                        self.sortItem()
                        self.state = 2055
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2058
                self.match(SqlBaseParser.T__2)
                self.state = 2060
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 2059
                    self.filter_()


                self.state = 2066
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 2063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==113 or _la==212:
                        self.state = 2062
                        self.nullTreatment()


                    self.state = 2065
                    self.over()


                pass

            elif la_ == 16:
                localctx = SqlBaseParser.MeasureContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2068
                self.identifier()
                self.state = 2069
                self.over()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2071
                self.identifier()
                self.state = 2072
                self.match(SqlBaseParser.T__6)
                self.state = 2073
                self.expression()
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2075
                self.match(SqlBaseParser.T__1)
                self.state = 2084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510982292348548539) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49824921316839487) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 4574531046338445183) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 540432023632705399) != 0):
                    self.state = 2076
                    self.identifier()
                    self.state = 2081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2077
                        self.match(SqlBaseParser.T__3)
                        self.state = 2078
                        self.identifier()
                        self.state = 2083
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2086
                self.match(SqlBaseParser.T__2)
                self.state = 2087
                self.match(SqlBaseParser.T__6)
                self.state = 2088
                self.expression()
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2089
                self.match(SqlBaseParser.T__1)
                self.state = 2090
                self.query()
                self.state = 2091
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2093
                self.match(SqlBaseParser.EXISTS)
                self.state = 2094
                self.match(SqlBaseParser.T__1)
                self.state = 2095
                self.query()
                self.state = 2096
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2098
                self.match(SqlBaseParser.CASE)
                self.state = 2099
                localctx.operand = self.expression()
                self.state = 2101 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2100
                    self.whenClause()
                    self.state = 2103 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==281):
                        break

                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 2105
                    self.match(SqlBaseParser.ELSE)
                    self.state = 2106
                    localctx.elseExpression = self.expression()


                self.state = 2109
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2111
                self.match(SqlBaseParser.CASE)
                self.state = 2113 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2112
                    self.whenClause()
                    self.state = 2115 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==281):
                        break

                self.state = 2119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 2117
                    self.match(SqlBaseParser.ELSE)
                    self.state = 2118
                    localctx.elseExpression = self.expression()


                self.state = 2121
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2123
                self.match(SqlBaseParser.CAST)
                self.state = 2124
                self.match(SqlBaseParser.T__1)
                self.state = 2125
                self.expression()
                self.state = 2126
                self.match(SqlBaseParser.AS)
                self.state = 2127
                self.type_(0)
                self.state = 2128
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2130
                self.match(SqlBaseParser.TRY_CAST)
                self.state = 2131
                self.match(SqlBaseParser.T__1)
                self.state = 2132
                self.expression()
                self.state = 2133
                self.match(SqlBaseParser.AS)
                self.state = 2134
                self.type_(0)
                self.state = 2135
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.ArrayConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2137
                self.match(SqlBaseParser.ARRAY)
                self.state = 2138
                self.match(SqlBaseParser.T__7)
                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510999884752696763) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49821073025290241) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -37154972088942721) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 576192539814492023) != 0):
                    self.state = 2139
                    self.expression()
                    self.state = 2144
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2140
                        self.match(SqlBaseParser.T__3)
                        self.state = 2141
                        self.expression()
                        self.state = 2146
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2149
                self.match(SqlBaseParser.T__8)
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2150
                self.identifier()
                pass

            elif la_ == 27:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2151
                localctx.name = self.match(SqlBaseParser.CURRENT_DATE)
                pass

            elif la_ == 28:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2152
                localctx.name = self.match(SqlBaseParser.CURRENT_TIME)
                self.state = 2156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                if la_ == 1:
                    self.state = 2153
                    self.match(SqlBaseParser.T__1)
                    self.state = 2154
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2155
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 29:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2158
                localctx.name = self.match(SqlBaseParser.CURRENT_TIMESTAMP)
                self.state = 2162
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 2159
                    self.match(SqlBaseParser.T__1)
                    self.state = 2160
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2161
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 30:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2164
                localctx.name = self.match(SqlBaseParser.LOCALTIME)
                self.state = 2168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2165
                    self.match(SqlBaseParser.T__1)
                    self.state = 2166
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2167
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 31:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2170
                localctx.name = self.match(SqlBaseParser.LOCALTIMESTAMP)
                self.state = 2174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 2171
                    self.match(SqlBaseParser.T__1)
                    self.state = 2172
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2173
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 32:
                localctx = SqlBaseParser.CurrentUserContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2176
                localctx.name = self.match(SqlBaseParser.CURRENT_USER)
                pass

            elif la_ == 33:
                localctx = SqlBaseParser.CurrentCatalogContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2177
                localctx.name = self.match(SqlBaseParser.CURRENT_CATALOG)
                pass

            elif la_ == 34:
                localctx = SqlBaseParser.CurrentSchemaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2178
                localctx.name = self.match(SqlBaseParser.CURRENT_SCHEMA)
                pass

            elif la_ == 35:
                localctx = SqlBaseParser.CurrentPathContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2179
                localctx.name = self.match(SqlBaseParser.CURRENT_PATH)
                pass

            elif la_ == 36:
                localctx = SqlBaseParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2180
                self.match(SqlBaseParser.TRIM)
                self.state = 2181
                self.match(SqlBaseParser.T__1)
                self.state = 2189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                if la_ == 1:
                    self.state = 2183
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                    if la_ == 1:
                        self.state = 2182
                        self.trimsSpecification()


                    self.state = 2186
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510999884752696763) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49822172536918017) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -37154972088942721) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 576192539814492023) != 0):
                        self.state = 2185
                        localctx.trimChar = self.valueExpression(0)


                    self.state = 2188
                    self.match(SqlBaseParser.FROM)


                self.state = 2191
                localctx.trimSource = self.valueExpression(0)
                self.state = 2192
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 37:
                localctx = SqlBaseParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2194
                self.match(SqlBaseParser.TRIM)
                self.state = 2195
                self.match(SqlBaseParser.T__1)
                self.state = 2196
                localctx.trimSource = self.valueExpression(0)
                self.state = 2197
                self.match(SqlBaseParser.T__3)
                self.state = 2198
                localctx.trimChar = self.valueExpression(0)
                self.state = 2199
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2201
                self.match(SqlBaseParser.SUBSTRING)
                self.state = 2202
                self.match(SqlBaseParser.T__1)
                self.state = 2203
                self.valueExpression(0)
                self.state = 2204
                self.match(SqlBaseParser.FROM)
                self.state = 2205
                self.valueExpression(0)
                self.state = 2208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2206
                    self.match(SqlBaseParser.FOR)
                    self.state = 2207
                    self.valueExpression(0)


                self.state = 2210
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 39:
                localctx = SqlBaseParser.NormalizeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2212
                self.match(SqlBaseParser.NORMALIZE)
                self.state = 2213
                self.match(SqlBaseParser.T__1)
                self.state = 2214
                self.valueExpression(0)
                self.state = 2217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 2215
                    self.match(SqlBaseParser.T__3)
                    self.state = 2216
                    self.normalForm()


                self.state = 2219
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2221
                self.match(SqlBaseParser.EXTRACT)
                self.state = 2222
                self.match(SqlBaseParser.T__1)
                self.state = 2223
                self.identifier()
                self.state = 2224
                self.match(SqlBaseParser.FROM)
                self.state = 2225
                self.valueExpression(0)
                self.state = 2226
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 41:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2228
                self.match(SqlBaseParser.T__1)
                self.state = 2229
                self.expression()
                self.state = 2230
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.GroupingOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2232
                self.match(SqlBaseParser.GROUPING)
                self.state = 2233
                self.match(SqlBaseParser.T__1)
                self.state = 2242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510982292348548539) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49824921316839487) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 4574531046338445183) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 540432023632705399) != 0):
                    self.state = 2234
                    self.qualifiedName()
                    self.state = 2239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2235
                        self.match(SqlBaseParser.T__3)
                        self.state = 2236
                        self.qualifiedName()
                        self.state = 2241
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2244
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 43:
                localctx = SqlBaseParser.JsonExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2245
                self.match(SqlBaseParser.JSON_EXISTS)
                self.state = 2246
                self.match(SqlBaseParser.T__1)
                self.state = 2247
                self.jsonPathInvocation()
                self.state = 2252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83 or _la==91 or _la==255 or _la==265:
                    self.state = 2248
                    self.jsonExistsErrorBehavior()
                    self.state = 2249
                    self.match(SqlBaseParser.ON)
                    self.state = 2250
                    self.match(SqlBaseParser.ERROR)


                self.state = 2254
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 44:
                localctx = SqlBaseParser.JsonValueContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2256
                self.match(SqlBaseParser.JSON_VALUE)
                self.state = 2257
                self.match(SqlBaseParser.T__1)
                self.state = 2258
                self.jsonPathInvocation()
                self.state = 2261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 2259
                    self.match(SqlBaseParser.RETURNING)
                    self.state = 2260
                    self.type_(0)


                self.state = 2267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 2263
                    localctx.emptyBehavior = self.jsonValueBehavior()
                    self.state = 2264
                    self.match(SqlBaseParser.ON)
                    self.state = 2265
                    self.match(SqlBaseParser.EMPTY)


                self.state = 2273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67 or _la==83 or _la==169:
                    self.state = 2269
                    localctx.errorBehavior = self.jsonValueBehavior()
                    self.state = 2270
                    self.match(SqlBaseParser.ON)
                    self.state = 2271
                    self.match(SqlBaseParser.ERROR)


                self.state = 2275
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 45:
                localctx = SqlBaseParser.JsonQueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2277
                self.match(SqlBaseParser.JSON_QUERY)
                self.state = 2278
                self.match(SqlBaseParser.T__1)
                self.state = 2279
                self.jsonPathInvocation()
                self.state = 2286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 2280
                    self.match(SqlBaseParser.RETURNING)
                    self.state = 2281
                    self.type_(0)
                    self.state = 2284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 2282
                        self.match(SqlBaseParser.FORMAT)
                        self.state = 2283
                        self.jsonRepresentation()




                self.state = 2291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284 or _la==286:
                    self.state = 2288
                    self.jsonQueryWrapperBehavior()
                    self.state = 2289
                    self.match(SqlBaseParser.WRAPPER)


                self.state = 2300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134 or _la==175:
                    self.state = 2293
                    _la = self._input.LA(1)
                    if not(_la==134 or _la==175):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2294
                    self.match(SqlBaseParser.QUOTES)
                    self.state = 2298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==176:
                        self.state = 2295
                        self.match(SqlBaseParser.ON)
                        self.state = 2296
                        self.match(SqlBaseParser.SCALAR)
                        self.state = 2297
                        self.match(SqlBaseParser.TEXT_STRING)




                self.state = 2306
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 2302
                    localctx.emptyBehavior = self.jsonQueryBehavior()
                    self.state = 2303
                    self.match(SqlBaseParser.ON)
                    self.state = 2304
                    self.match(SqlBaseParser.EMPTY)


                self.state = 2312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==83 or _la==169:
                    self.state = 2308
                    localctx.errorBehavior = self.jsonQueryBehavior()
                    self.state = 2309
                    self.match(SqlBaseParser.ON)
                    self.state = 2310
                    self.match(SqlBaseParser.ERROR)


                self.state = 2314
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 46:
                localctx = SqlBaseParser.JsonObjectContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2316
                self.match(SqlBaseParser.JSON_OBJECT)
                self.state = 2317
                self.match(SqlBaseParser.T__1)
                self.state = 2346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 2318
                    self.jsonObjectMember()
                    self.state = 2323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2319
                        self.match(SqlBaseParser.T__3)
                        self.state = 2320
                        self.jsonObjectMember()
                        self.state = 2325
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2332
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [169]:
                        self.state = 2326
                        self.match(SqlBaseParser.NULL)
                        self.state = 2327
                        self.match(SqlBaseParser.ON)
                        self.state = 2328
                        self.match(SqlBaseParser.NULL)
                        pass
                    elif token in [18]:
                        self.state = 2329
                        self.match(SqlBaseParser.ABSENT)
                        self.state = 2330
                        self.match(SqlBaseParser.ON)
                        self.state = 2331
                        self.match(SqlBaseParser.NULL)
                        pass
                    elif token in [3, 214, 284, 286]:
                        pass
                    else:
                        pass
                    self.state = 2344
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [284]:
                        self.state = 2334
                        self.match(SqlBaseParser.WITH)
                        self.state = 2335
                        self.match(SqlBaseParser.UNIQUE)
                        self.state = 2337
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 2336
                            self.match(SqlBaseParser.KEYS)


                        pass
                    elif token in [286]:
                        self.state = 2339
                        self.match(SqlBaseParser.WITHOUT)
                        self.state = 2340
                        self.match(SqlBaseParser.UNIQUE)
                        self.state = 2342
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 2341
                            self.match(SqlBaseParser.KEYS)


                        pass
                    elif token in [3, 214]:
                        pass
                    else:
                        pass


                self.state = 2354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 2348
                    self.match(SqlBaseParser.RETURNING)
                    self.state = 2349
                    self.type_(0)
                    self.state = 2352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 2350
                        self.match(SqlBaseParser.FORMAT)
                        self.state = 2351
                        self.jsonRepresentation()




                self.state = 2356
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 47:
                localctx = SqlBaseParser.JsonArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2357
                self.match(SqlBaseParser.JSON_ARRAY)
                self.state = 2358
                self.match(SqlBaseParser.T__1)
                self.state = 2375
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                if la_ == 1:
                    self.state = 2359
                    self.jsonValueExpression()
                    self.state = 2364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2360
                        self.match(SqlBaseParser.T__3)
                        self.state = 2361
                        self.jsonValueExpression()
                        self.state = 2366
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2373
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [169]:
                        self.state = 2367
                        self.match(SqlBaseParser.NULL)
                        self.state = 2368
                        self.match(SqlBaseParser.ON)
                        self.state = 2369
                        self.match(SqlBaseParser.NULL)
                        pass
                    elif token in [18]:
                        self.state = 2370
                        self.match(SqlBaseParser.ABSENT)
                        self.state = 2371
                        self.match(SqlBaseParser.ON)
                        self.state = 2372
                        self.match(SqlBaseParser.NULL)
                        pass
                    elif token in [3, 214]:
                        pass
                    else:
                        pass


                self.state = 2383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 2377
                    self.match(SqlBaseParser.RETURNING)
                    self.state = 2378
                    self.type_(0)
                    self.state = 2381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 2379
                        self.match(SqlBaseParser.FORMAT)
                        self.state = 2380
                        self.jsonRepresentation()




                self.state = 2385
                self.match(SqlBaseParser.T__2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2398
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,318,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2396
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2388
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 2389
                        self.match(SqlBaseParser.T__7)
                        self.state = 2390
                        localctx.index = self.valueExpression(0)
                        self.state = 2391
                        self.match(SqlBaseParser.T__8)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2393
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 2394
                        self.match(SqlBaseParser.T__0)
                        self.state = 2395
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 2400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JsonPathInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # StringContext

        def jsonValueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonValueExpressionContext,0)


        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def PASSING(self):
            return self.getToken(SqlBaseParser.PASSING, 0)

        def jsonArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonArgumentContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonPathInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPathInvocation" ):
                listener.enterJsonPathInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPathInvocation" ):
                listener.exitJsonPathInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonPathInvocation" ):
                return visitor.visitJsonPathInvocation(self)
            else:
                return visitor.visitChildren(self)




    def jsonPathInvocation(self):

        localctx = SqlBaseParser.JsonPathInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_jsonPathInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self.jsonValueExpression()
            self.state = 2402
            self.match(SqlBaseParser.T__3)
            self.state = 2403
            localctx.path = self.string()
            self.state = 2413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 2404
                self.match(SqlBaseParser.PASSING)
                self.state = 2405
                self.jsonArgument()
                self.state = 2410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2406
                    self.match(SqlBaseParser.T__3)
                    self.state = 2407
                    self.jsonArgument()
                    self.state = 2412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def jsonRepresentation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonRepresentationContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonValueExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValueExpression" ):
                listener.enterJsonValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValueExpression" ):
                listener.exitJsonValueExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonValueExpression" ):
                return visitor.visitJsonValueExpression(self)
            else:
                return visitor.visitChildren(self)




    def jsonValueExpression(self):

        localctx = SqlBaseParser.JsonValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_jsonValueExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2415
            self.expression()
            self.state = 2418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 2416
                self.match(SqlBaseParser.FORMAT)
                self.state = 2417
                self.jsonRepresentation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonRepresentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON(self):
            return self.getToken(SqlBaseParser.JSON, 0)

        def ENCODING(self):
            return self.getToken(SqlBaseParser.ENCODING, 0)

        def UTF8(self):
            return self.getToken(SqlBaseParser.UTF8, 0)

        def UTF16(self):
            return self.getToken(SqlBaseParser.UTF16, 0)

        def UTF32(self):
            return self.getToken(SqlBaseParser.UTF32, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonRepresentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRepresentation" ):
                listener.enterJsonRepresentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRepresentation" ):
                listener.exitJsonRepresentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonRepresentation" ):
                return visitor.visitJsonRepresentation(self)
            else:
                return visitor.visitChildren(self)




    def jsonRepresentation(self):

        localctx = SqlBaseParser.JsonRepresentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_jsonRepresentation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2420
            self.match(SqlBaseParser.JSON)
            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 2421
                self.match(SqlBaseParser.ENCODING)
                self.state = 2422
                _la = self._input.LA(1)
                if not(((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonValueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonValueExpressionContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArgument" ):
                listener.enterJsonArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArgument" ):
                listener.exitJsonArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonArgument" ):
                return visitor.visitJsonArgument(self)
            else:
                return visitor.visitChildren(self)




    def jsonArgument(self):

        localctx = SqlBaseParser.JsonArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_jsonArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2425
            self.jsonValueExpression()
            self.state = 2426
            self.match(SqlBaseParser.AS)
            self.state = 2427
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonExistsErrorBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonExistsErrorBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExistsErrorBehavior" ):
                listener.enterJsonExistsErrorBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExistsErrorBehavior" ):
                listener.exitJsonExistsErrorBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonExistsErrorBehavior" ):
                return visitor.visitJsonExistsErrorBehavior(self)
            else:
                return visitor.visitChildren(self)




    def jsonExistsErrorBehavior(self):

        localctx = SqlBaseParser.JsonExistsErrorBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_jsonExistsErrorBehavior)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2429
            _la = self._input.LA(1)
            if not(_la==83 or _la==91 or _la==255 or _la==265):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonValueBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValueBehavior" ):
                listener.enterJsonValueBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValueBehavior" ):
                listener.exitJsonValueBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonValueBehavior" ):
                return visitor.visitJsonValueBehavior(self)
            else:
                return visitor.visitChildren(self)




    def jsonValueBehavior(self):

        localctx = SqlBaseParser.JsonValueBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_jsonValueBehavior)
        try:
            self.state = 2435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2431
                self.match(SqlBaseParser.ERROR)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2432
                self.match(SqlBaseParser.NULL)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2433
                self.match(SqlBaseParser.DEFAULT)
                self.state = 2434
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonQueryWrapperBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def CONDITIONAL(self):
            return self.getToken(SqlBaseParser.CONDITIONAL, 0)

        def UNCONDITIONAL(self):
            return self.getToken(SqlBaseParser.UNCONDITIONAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonQueryWrapperBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonQueryWrapperBehavior" ):
                listener.enterJsonQueryWrapperBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonQueryWrapperBehavior" ):
                listener.exitJsonQueryWrapperBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonQueryWrapperBehavior" ):
                return visitor.visitJsonQueryWrapperBehavior(self)
            else:
                return visitor.visitChildren(self)




    def jsonQueryWrapperBehavior(self):

        localctx = SqlBaseParser.JsonQueryWrapperBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_jsonQueryWrapperBehavior)
        self._la = 0 # Token type
        try:
            self.state = 2448
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [286]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2437
                self.match(SqlBaseParser.WITHOUT)
                self.state = 2439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 2438
                    self.match(SqlBaseParser.ARRAY)


                pass
            elif token in [284]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2441
                self.match(SqlBaseParser.WITH)
                self.state = 2443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47 or _la==262:
                    self.state = 2442
                    _la = self._input.LA(1)
                    if not(_la==47 or _la==262):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 2445
                    self.match(SqlBaseParser.ARRAY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonQueryBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def OBJECT(self):
            return self.getToken(SqlBaseParser.OBJECT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonQueryBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonQueryBehavior" ):
                listener.enterJsonQueryBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonQueryBehavior" ):
                listener.exitJsonQueryBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonQueryBehavior" ):
                return visitor.visitJsonQueryBehavior(self)
            else:
                return visitor.visitChildren(self)




    def jsonQueryBehavior(self):

        localctx = SqlBaseParser.JsonQueryBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_jsonQueryBehavior)
        try:
            self.state = 2456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2450
                self.match(SqlBaseParser.ERROR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2451
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2452
                self.match(SqlBaseParser.EMPTY)
                self.state = 2453
                self.match(SqlBaseParser.ARRAY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2454
                self.match(SqlBaseParser.EMPTY)
                self.state = 2455
                self.match(SqlBaseParser.OBJECT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjectMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def VALUE(self):
            return self.getToken(SqlBaseParser.VALUE, 0)

        def jsonValueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonValueExpressionContext,0)


        def KEY(self):
            return self.getToken(SqlBaseParser.KEY, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonObjectMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObjectMember" ):
                listener.enterJsonObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObjectMember" ):
                listener.exitJsonObjectMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonObjectMember" ):
                return visitor.visitJsonObjectMember(self)
            else:
                return visitor.visitChildren(self)




    def jsonObjectMember(self):

        localctx = SqlBaseParser.JsonObjectMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_jsonObjectMember)
        try:
            self.state = 2469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 2458
                    self.match(SqlBaseParser.KEY)


                self.state = 2461
                self.expression()
                self.state = 2462
                self.match(SqlBaseParser.VALUE)
                self.state = 2463
                self.jsonValueExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2465
                self.expression()
                self.state = 2466
                self.match(SqlBaseParser.T__9)
                self.state = 2467
                self.jsonValueExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcessingModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUNNING(self):
            return self.getToken(SqlBaseParser.RUNNING, 0)

        def FINAL(self):
            return self.getToken(SqlBaseParser.FINAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_processingMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessingMode" ):
                listener.enterProcessingMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessingMode" ):
                listener.exitProcessingMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessingMode" ):
                return visitor.visitProcessingMode(self)
            else:
                return visitor.visitChildren(self)




    def processingMode(self):

        localctx = SqlBaseParser.ProcessingModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_processingMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471
            _la = self._input.LA(1)
            if not(_la==94 or _la==223):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullTreatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nullTreatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullTreatment" ):
                listener.enterNullTreatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullTreatment" ):
                listener.exitNullTreatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullTreatment" ):
                return visitor.visitNullTreatment(self)
            else:
                return visitor.visitChildren(self)




    def nullTreatment(self):

        localctx = SqlBaseParser.NullTreatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_nullTreatment)
        try:
            self.state = 2477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2473
                self.match(SqlBaseParser.IGNORE)
                self.state = 2474
                self.match(SqlBaseParser.NULLS)
                pass
            elif token in [212]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2475
                self.match(SqlBaseParser.RESPECT)
                self.state = 2476
                self.match(SqlBaseParser.NULLS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnicodeStringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNICODE_STRING(self):
            return self.getToken(SqlBaseParser.UNICODE_STRING, 0)
        def UESCAPE(self):
            return self.getToken(SqlBaseParser.UESCAPE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicodeStringLiteral" ):
                listener.enterUnicodeStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicodeStringLiteral" ):
                listener.exitUnicodeStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnicodeStringLiteral" ):
                return visitor.visitUnicodeStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BasicStringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicStringLiteral" ):
                listener.enterBasicStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicStringLiteral" ):
                listener.exitBasicStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicStringLiteral" ):
                return visitor.visitBasicStringLiteral(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = SqlBaseParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_string)
        try:
            self.state = 2485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [305]:
                localctx = SqlBaseParser.BasicStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2479
                self.match(SqlBaseParser.STRING)
                pass
            elif token in [306]:
                localctx = SqlBaseParser.UnicodeStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2480
                self.match(SqlBaseParser.UNICODE_STRING)
                self.state = 2483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 2481
                    self.match(SqlBaseParser.UESCAPE)
                    self.state = 2482
                    self.match(SqlBaseParser.STRING)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeZoneSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_timeZoneSpecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TimeZoneIntervalContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneInterval" ):
                listener.enterTimeZoneInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneInterval" ):
                listener.exitTimeZoneInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeZoneInterval" ):
                return visitor.visitTimeZoneInterval(self)
            else:
                return visitor.visitChildren(self)


    class TimeZoneStringContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneString" ):
                listener.enterTimeZoneString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneString" ):
                listener.exitTimeZoneString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeZoneString" ):
                return visitor.visitTimeZoneString(self)
            else:
                return visitor.visitChildren(self)



    def timeZoneSpecifier(self):

        localctx = SqlBaseParser.TimeZoneSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_timeZoneSpecifier)
        try:
            self.state = 2493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TimeZoneIntervalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2487
                self.match(SqlBaseParser.TIME)
                self.state = 2488
                self.match(SqlBaseParser.ZONE)
                self.state = 2489
                self.interval()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TimeZoneStringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2490
                self.match(SqlBaseParser.TIME)
                self.state = 2491
                self.match(SqlBaseParser.ZONE)
                self.state = 2492
                self.string()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            _la = self._input.LA(1)
            if not(((((_la - 292)) & ~0x3f) == 0 and ((1 << (_la - 292)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonQuantifier" ):
                listener.enterComparisonQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonQuantifier" ):
                listener.exitComparisonQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonQuantifier" ):
                return visitor.visitComparisonQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def comparisonQuantifier(self):

        localctx = SqlBaseParser.ComparisonQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_comparisonQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2497
            _la = self._input.LA(1)
            if not(_la==22 or _la==26 or _la==236):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            _la = self._input.LA(1)
            if not(_la==91 or _la==255):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)


        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2501
            self.match(SqlBaseParser.INTERVAL)
            self.state = 2503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==298 or _la==299:
                self.state = 2502
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==298 or _la==299):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2505
            self.string()
            self.state = 2506
            localctx.from_ = self.intervalField()
            self.state = 2509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2507
                self.match(SqlBaseParser.TO)
                self.state = 2508
                localctx.to = self.intervalField()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalField" ):
                return visitor.visitIntervalField(self)
            else:
                return visitor.visitChildren(self)




    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_intervalField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2511
            _la = self._input.LA(1)
            if not(_la==65 or _la==111 or _la==157 or _la==158 or _la==227 or _la==290):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFD(self):
            return self.getToken(SqlBaseParser.NFD, 0)

        def NFC(self):
            return self.getToken(SqlBaseParser.NFC, 0)

        def NFKD(self):
            return self.getToken(SqlBaseParser.NFKD, 0)

        def NFKC(self):
            return self.getToken(SqlBaseParser.NFKC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_normalForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalForm" ):
                listener.enterNormalForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalForm" ):
                listener.exitNormalForm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalForm" ):
                return visitor.visitNormalForm(self)
            else:
                return visitor.visitChildren(self)




    def normalForm(self):

        localctx = SqlBaseParser.NormalFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_normalForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2513
            _la = self._input.LA(1)
            if not(((((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RowTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def rowField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFieldContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowType" ):
                listener.enterRowType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowType" ):
                listener.exitRowType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowType" ):
                return visitor.visitRowType(self)
            else:
                return visitor.visitChildren(self)


    class IntervalTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)
        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalType" ):
                return visitor.visitIntervalType(self)
            else:
                return visitor.visitChildren(self)


    class ArrayTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)


    class DoublePrecisionTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoublePrecisionType" ):
                listener.enterDoublePrecisionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoublePrecisionType" ):
                listener.exitDoublePrecisionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoublePrecisionType" ):
                return visitor.visitDoublePrecisionType(self)
            else:
                return visitor.visitChildren(self)


    class LegacyArrayTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyArrayType" ):
                listener.enterLegacyArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyArrayType" ):
                listener.exitLegacyArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyArrayType" ):
                return visitor.visitLegacyArrayType(self)
            else:
                return visitor.visitChildren(self)


    class GenericTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TypeParameterContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericType" ):
                listener.enterGenericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericType" ):
                listener.exitGenericType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericType" ):
                return visitor.visitGenericType(self)
            else:
                return visitor.visitChildren(self)


    class DateTimeTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.base = None # Token
            self.precision = None # TypeParameterContext
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)
        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)
        def TIME(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TIME)
            else:
                return self.getToken(SqlBaseParser.TIME, i)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def typeParameter(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeParameterContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeType" ):
                listener.enterDateTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeType" ):
                listener.exitDateTimeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimeType" ):
                return visitor.visitDateTimeType(self)
            else:
                return visitor.visitChildren(self)


    class LegacyMapTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.keyType = None # TypeContext
            self.valueType = None # TypeContext
            self.copyFrom(ctx)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TypeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyMapType" ):
                listener.enterLegacyMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyMapType" ):
                listener.exitLegacyMapType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyMapType" ):
                return visitor.visitLegacyMapType(self)
            else:
                return visitor.visitChildren(self)



    def type_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.TypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 158
        self.enterRecursionRule(localctx, 158, self.RULE_type, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2516
                self.match(SqlBaseParser.ROW)
                self.state = 2517
                self.match(SqlBaseParser.T__1)
                self.state = 2518
                self.rowField()
                self.state = 2523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2519
                    self.match(SqlBaseParser.T__3)
                    self.state = 2520
                    self.rowField()
                    self.state = 2525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2526
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2528
                self.match(SqlBaseParser.INTERVAL)
                self.state = 2529
                localctx.from_ = self.intervalField()
                self.state = 2532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 2530
                    self.match(SqlBaseParser.TO)
                    self.state = 2531
                    localctx.to = self.intervalField()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2534
                localctx.base = self.match(SqlBaseParser.TIMESTAMP)
                self.state = 2539
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                if la_ == 1:
                    self.state = 2535
                    self.match(SqlBaseParser.T__1)
                    self.state = 2536
                    localctx.precision = self.typeParameter()
                    self.state = 2537
                    self.match(SqlBaseParser.T__2)


                self.state = 2544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
                if la_ == 1:
                    self.state = 2541
                    self.match(SqlBaseParser.WITHOUT)
                    self.state = 2542
                    self.match(SqlBaseParser.TIME)
                    self.state = 2543
                    self.match(SqlBaseParser.ZONE)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2546
                localctx.base = self.match(SqlBaseParser.TIMESTAMP)
                self.state = 2551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2547
                    self.match(SqlBaseParser.T__1)
                    self.state = 2548
                    localctx.precision = self.typeParameter()
                    self.state = 2549
                    self.match(SqlBaseParser.T__2)


                self.state = 2553
                self.match(SqlBaseParser.WITH)
                self.state = 2554
                self.match(SqlBaseParser.TIME)
                self.state = 2555
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2556
                localctx.base = self.match(SqlBaseParser.TIME)
                self.state = 2561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
                if la_ == 1:
                    self.state = 2557
                    self.match(SqlBaseParser.T__1)
                    self.state = 2558
                    localctx.precision = self.typeParameter()
                    self.state = 2559
                    self.match(SqlBaseParser.T__2)


                self.state = 2566
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
                if la_ == 1:
                    self.state = 2563
                    self.match(SqlBaseParser.WITHOUT)
                    self.state = 2564
                    self.match(SqlBaseParser.TIME)
                    self.state = 2565
                    self.match(SqlBaseParser.ZONE)


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2568
                localctx.base = self.match(SqlBaseParser.TIME)
                self.state = 2573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2569
                    self.match(SqlBaseParser.T__1)
                    self.state = 2570
                    localctx.precision = self.typeParameter()
                    self.state = 2571
                    self.match(SqlBaseParser.T__2)


                self.state = 2575
                self.match(SqlBaseParser.WITH)
                self.state = 2576
                self.match(SqlBaseParser.TIME)
                self.state = 2577
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.DoublePrecisionTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2578
                self.match(SqlBaseParser.DOUBLE)
                self.state = 2579
                self.match(SqlBaseParser.PRECISION)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.LegacyArrayTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2580
                self.match(SqlBaseParser.ARRAY)
                self.state = 2581
                self.match(SqlBaseParser.LT)
                self.state = 2582
                self.type_(0)
                self.state = 2583
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.LegacyMapTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2585
                self.match(SqlBaseParser.MAP)
                self.state = 2586
                self.match(SqlBaseParser.LT)
                self.state = 2587
                localctx.keyType = self.type_(0)
                self.state = 2588
                self.match(SqlBaseParser.T__3)
                self.state = 2589
                localctx.valueType = self.type_(0)
                self.state = 2590
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.GenericTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2592
                self.identifier()
                self.state = 2604
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
                if la_ == 1:
                    self.state = 2593
                    self.match(SqlBaseParser.T__1)
                    self.state = 2594
                    self.typeParameter()
                    self.state = 2599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2595
                        self.match(SqlBaseParser.T__3)
                        self.state = 2596
                        self.typeParameter()
                        self.state = 2601
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2602
                    self.match(SqlBaseParser.T__2)


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,349,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.ArrayTypeContext(self, SqlBaseParser.TypeContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type)
                    self.state = 2608
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2609
                    self.match(SqlBaseParser.ARRAY)
                    self.state = 2613
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
                    if la_ == 1:
                        self.state = 2610
                        self.match(SqlBaseParser.T__7)
                        self.state = 2611
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 2612
                        self.match(SqlBaseParser.T__8)

             
                self.state = 2619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RowFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowField" ):
                listener.enterRowField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowField" ):
                listener.exitRowField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowField" ):
                return visitor.visitRowField(self)
            else:
                return visitor.visitChildren(self)




    def rowField(self):

        localctx = SqlBaseParser.RowFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_rowField)
        try:
            self.state = 2624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2620
                self.type_(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2621
                self.identifier()
                self.state = 2622
                self.type_(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = SqlBaseParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_typeParameter)
        try:
            self.state = 2628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [308]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2626
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass
            elif token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 115, 116, 118, 121, 123, 124, 126, 128, 134, 135, 136, 137, 138, 139, 141, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 291, 311, 312, 313, 314]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2627
                self.type_(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2630
            self.match(SqlBaseParser.WHEN)
            self.state = 2631
            localctx.condition = self.expression()
            self.state = 2632
            self.match(SqlBaseParser.THEN)
            self.state = 2633
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter" ):
                listener.enterFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter" ):
                listener.exitFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilter" ):
                return visitor.visitFilter(self)
            else:
                return visitor.visitChildren(self)




    def filter_(self):

        localctx = SqlBaseParser.FilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2635
            self.match(SqlBaseParser.FILTER)
            self.state = 2636
            self.match(SqlBaseParser.T__1)
            self.state = 2637
            self.match(SqlBaseParser.WHERE)
            self.state = 2638
            self.booleanExpression(0)
            self.state = 2639
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_mergeCase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MergeInsertContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self._identifier = None # IdentifierContext
            self.targets = list() # of IdentifierContexts
            self._expression = None # ExpressionContext
            self.values = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeInsert" ):
                listener.enterMergeInsert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeInsert" ):
                listener.exitMergeInsert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeInsert" ):
                return visitor.visitMergeInsert(self)
            else:
                return visitor.visitChildren(self)


    class MergeUpdateContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self._identifier = None # IdentifierContext
            self.targets = list() # of IdentifierContexts
            self._expression = None # ExpressionContext
            self.values = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EQ)
            else:
                return self.getToken(SqlBaseParser.EQ, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeUpdate" ):
                listener.enterMergeUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeUpdate" ):
                listener.exitMergeUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeUpdate" ):
                return visitor.visitMergeUpdate(self)
            else:
                return visitor.visitChildren(self)


    class MergeDeleteContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeDelete" ):
                listener.enterMergeDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeDelete" ):
                listener.exitMergeDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeDelete" ):
                return visitor.visitMergeDelete(self)
            else:
                return visitor.visitChildren(self)



    def mergeCase(self):

        localctx = SqlBaseParser.MergeCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_mergeCase)
        self._la = 0 # Token type
        try:
            self.state = 2705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.MergeUpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2641
                self.match(SqlBaseParser.WHEN)
                self.state = 2642
                self.match(SqlBaseParser.MATCHED)
                self.state = 2645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 2643
                    self.match(SqlBaseParser.AND)
                    self.state = 2644
                    localctx.condition = self.expression()


                self.state = 2647
                self.match(SqlBaseParser.THEN)
                self.state = 2648
                self.match(SqlBaseParser.UPDATE)
                self.state = 2649
                self.match(SqlBaseParser.SET)
                self.state = 2650
                localctx._identifier = self.identifier()
                localctx.targets.append(localctx._identifier)
                self.state = 2651
                self.match(SqlBaseParser.EQ)
                self.state = 2652
                localctx._expression = self.expression()
                localctx.values.append(localctx._expression)
                self.state = 2660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2653
                    self.match(SqlBaseParser.T__3)
                    self.state = 2654
                    localctx._identifier = self.identifier()
                    localctx.targets.append(localctx._identifier)
                    self.state = 2655
                    self.match(SqlBaseParser.EQ)
                    self.state = 2656
                    localctx._expression = self.expression()
                    localctx.values.append(localctx._expression)
                    self.state = 2662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.MergeDeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2663
                self.match(SqlBaseParser.WHEN)
                self.state = 2664
                self.match(SqlBaseParser.MATCHED)
                self.state = 2667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 2665
                    self.match(SqlBaseParser.AND)
                    self.state = 2666
                    localctx.condition = self.expression()


                self.state = 2669
                self.match(SqlBaseParser.THEN)
                self.state = 2670
                self.match(SqlBaseParser.DELETE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.MergeInsertContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2671
                self.match(SqlBaseParser.WHEN)
                self.state = 2672
                self.match(SqlBaseParser.NOT)
                self.state = 2673
                self.match(SqlBaseParser.MATCHED)
                self.state = 2676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 2674
                    self.match(SqlBaseParser.AND)
                    self.state = 2675
                    localctx.condition = self.expression()


                self.state = 2678
                self.match(SqlBaseParser.THEN)
                self.state = 2679
                self.match(SqlBaseParser.INSERT)
                self.state = 2691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2680
                    self.match(SqlBaseParser.T__1)
                    self.state = 2681
                    localctx._identifier = self.identifier()
                    localctx.targets.append(localctx._identifier)
                    self.state = 2686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2682
                        self.match(SqlBaseParser.T__3)
                        self.state = 2683
                        localctx._identifier = self.identifier()
                        localctx.targets.append(localctx._identifier)
                        self.state = 2688
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2689
                    self.match(SqlBaseParser.T__2)


                self.state = 2693
                self.match(SqlBaseParser.VALUES)
                self.state = 2694
                self.match(SqlBaseParser.T__1)
                self.state = 2695
                localctx._expression = self.expression()
                localctx.values.append(localctx._expression)
                self.state = 2700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2696
                    self.match(SqlBaseParser.T__3)
                    self.state = 2697
                    localctx._expression = self.expression()
                    localctx.values.append(localctx._expression)
                    self.state = 2702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2703
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.windowName = None # IdentifierContext

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def windowSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecificationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver" ):
                return visitor.visitOver(self)
            else:
                return visitor.visitChildren(self)




    def over(self):

        localctx = SqlBaseParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_over)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2707
            self.match(SqlBaseParser.OVER)
            self.state = 2713
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 115, 116, 118, 121, 123, 124, 126, 128, 134, 135, 136, 137, 138, 139, 141, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 291, 311, 312, 313, 314]:
                self.state = 2708
                localctx.windowName = self.identifier()
                pass
            elif token in [2]:
                self.state = 2709
                self.match(SqlBaseParser.T__1)
                self.state = 2710
                self.windowSpecification()
                self.state = 2711
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameExtent(self):
            return self.getTypedRuleContext(SqlBaseParser.FrameExtentContext,0)


        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def measureDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MeasureDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MeasureDefinitionContext,i)


        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def skipTo(self):
            return self.getTypedRuleContext(SqlBaseParser.SkipToContext,0)


        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def subsetDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubsetDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubsetDefinitionContext,i)


        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def variableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.VariableDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.VariableDefinitionContext,i)


        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_windowFrame)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 2715
                self.match(SqlBaseParser.MEASURES)
                self.state = 2716
                self.measureDefinition()
                self.state = 2721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2717
                    self.match(SqlBaseParser.T__3)
                    self.state = 2718
                    self.measureDefinition()
                    self.state = 2723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2726
            self.frameExtent()
            self.state = 2730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 2727
                self.match(SqlBaseParser.AFTER)
                self.state = 2728
                self.match(SqlBaseParser.MATCH)
                self.state = 2729
                self.skipTo()


            self.state = 2733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116 or _la==229:
                self.state = 2732
                _la = self._input.LA(1)
                if not(_la==116 or _la==229):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 2735
                self.match(SqlBaseParser.PATTERN)
                self.state = 2736
                self.match(SqlBaseParser.T__1)
                self.state = 2737
                self.rowPattern(0)
                self.state = 2738
                self.match(SqlBaseParser.T__2)


            self.state = 2751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==239:
                self.state = 2742
                self.match(SqlBaseParser.SUBSET)
                self.state = 2743
                self.subsetDefinition()
                self.state = 2748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2744
                    self.match(SqlBaseParser.T__3)
                    self.state = 2745
                    self.subsetDefinition()
                    self.state = 2750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 2753
                self.match(SqlBaseParser.DEFINE)
                self.state = 2754
                self.variableDefinition()
                self.state = 2759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2755
                    self.match(SqlBaseParser.T__3)
                    self.state = 2756
                    self.variableDefinition()
                    self.state = 2761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameExtentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def GROUPS(self):
            return self.getToken(SqlBaseParser.GROUPS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameExtent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameExtent" ):
                listener.enterFrameExtent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameExtent" ):
                listener.exitFrameExtent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameExtent" ):
                return visitor.visitFrameExtent(self)
            else:
                return visitor.visitChildren(self)




    def frameExtent(self):

        localctx = SqlBaseParser.FrameExtentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_frameExtent)
        try:
            self.state = 2788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2764
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2765
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2766
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2767
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2768
                localctx.frameType = self.match(SqlBaseParser.GROUPS)
                self.state = 2769
                localctx.start = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2770
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2771
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2772
                localctx.start = self.frameBound()
                self.state = 2773
                self.match(SqlBaseParser.AND)
                self.state = 2774
                localctx.end = self.frameBound()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2776
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2777
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2778
                localctx.start = self.frameBound()
                self.state = 2779
                self.match(SqlBaseParser.AND)
                self.state = 2780
                localctx.end = self.frameBound()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2782
                localctx.frameType = self.match(SqlBaseParser.GROUPS)
                self.state = 2783
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2784
                localctx.start = self.frameBound()
                self.state = 2785
                self.match(SqlBaseParser.AND)
                self.state = 2786
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BoundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundedFrame" ):
                listener.enterBoundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundedFrame" ):
                listener.exitBoundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundedFrame" ):
                return visitor.visitBoundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class UnboundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)
        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnboundedFrame" ):
                listener.enterUnboundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnboundedFrame" ):
                listener.exitUnboundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnboundedFrame" ):
                return visitor.visitUnboundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRowBoundContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRowBound" ):
                listener.enterCurrentRowBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRowBound" ):
                listener.exitCurrentRowBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRowBound" ):
                return visitor.visitCurrentRowBound(self)
            else:
                return visitor.visitChildren(self)



    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 2799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2790
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2791
                localctx.boundType = self.match(SqlBaseParser.PRECEDING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2792
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2793
                localctx.boundType = self.match(SqlBaseParser.FOLLOWING)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CurrentRowBoundContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2794
                self.match(SqlBaseParser.CURRENT)
                self.state = 2795
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.BoundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2796
                self.expression()
                self.state = 2797
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==96 or _la==197):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowPattern

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QuantifiedPrimaryContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def patternPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternPrimaryContext,0)

        def patternQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedPrimary" ):
                listener.enterQuantifiedPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedPrimary" ):
                listener.exitQuantifiedPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifiedPrimary" ):
                return visitor.visitQuantifiedPrimary(self)
            else:
                return visitor.visitChildren(self)


    class PatternConcatenationContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternConcatenation" ):
                listener.enterPatternConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternConcatenation" ):
                listener.exitPatternConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternConcatenation" ):
                return visitor.visitPatternConcatenation(self)
            else:
                return visitor.visitChildren(self)


    class PatternAlternationContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternAlternation" ):
                listener.enterPatternAlternation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternAlternation" ):
                listener.exitPatternAlternation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternAlternation" ):
                return visitor.visitPatternAlternation(self)
            else:
                return visitor.visitChildren(self)



    def rowPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RowPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_rowPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QuantifiedPrimaryContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2802
            self.patternPrimary()
            self.state = 2804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 2803
                self.patternQuantifier()


            self._ctx.stop = self._input.LT(-1)
            self.state = 2813
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,374,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2811
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.PatternConcatenationContext(self, SqlBaseParser.RowPatternContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rowPattern)
                        self.state = 2806
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2807
                        self.rowPattern(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.PatternAlternationContext(self, SqlBaseParser.RowPatternContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rowPattern)
                        self.state = 2808
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2809
                        self.match(SqlBaseParser.T__10)
                        self.state = 2810
                        self.rowPattern(2)
                        pass

             
                self.state = 2815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,374,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PatternPermutationContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERMUTE(self):
            return self.getToken(SqlBaseParser.PERMUTE, 0)
        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPermutation" ):
                listener.enterPatternPermutation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPermutation" ):
                listener.exitPatternPermutation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPermutation" ):
                return visitor.visitPatternPermutation(self)
            else:
                return visitor.visitChildren(self)


    class PartitionEndAnchorContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionEndAnchor" ):
                listener.enterPartitionEndAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionEndAnchor" ):
                listener.exitPartitionEndAnchor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionEndAnchor" ):
                return visitor.visitPartitionEndAnchor(self)
            else:
                return visitor.visitChildren(self)


    class PatternVariableContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternVariable" ):
                listener.enterPatternVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternVariable" ):
                listener.exitPatternVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternVariable" ):
                return visitor.visitPatternVariable(self)
            else:
                return visitor.visitChildren(self)


    class ExcludedPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcludedPattern" ):
                listener.enterExcludedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcludedPattern" ):
                listener.exitExcludedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcludedPattern" ):
                return visitor.visitExcludedPattern(self)
            else:
                return visitor.visitChildren(self)


    class PartitionStartAnchorContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionStartAnchor" ):
                listener.enterPartitionStartAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionStartAnchor" ):
                listener.exitPartitionStartAnchor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionStartAnchor" ):
                return visitor.visitPartitionStartAnchor(self)
            else:
                return visitor.visitChildren(self)


    class EmptyPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyPattern" ):
                listener.enterEmptyPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyPattern" ):
                listener.exitEmptyPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyPattern" ):
                return visitor.visitEmptyPattern(self)
            else:
                return visitor.visitChildren(self)


    class GroupedPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupedPattern" ):
                listener.enterGroupedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupedPattern" ):
                listener.exitGroupedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupedPattern" ):
                return visitor.visitGroupedPattern(self)
            else:
                return visitor.visitChildren(self)



    def patternPrimary(self):

        localctx = SqlBaseParser.PatternPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_patternPrimary)
        self._la = 0 # Token type
        try:
            self.state = 2841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PatternVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2816
                self.identifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.EmptyPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2817
                self.match(SqlBaseParser.T__1)
                self.state = 2818
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.PatternPermutationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2819
                self.match(SqlBaseParser.PERMUTE)
                self.state = 2820
                self.match(SqlBaseParser.T__1)
                self.state = 2821
                self.rowPattern(0)
                self.state = 2826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2822
                    self.match(SqlBaseParser.T__3)
                    self.state = 2823
                    self.rowPattern(0)
                    self.state = 2828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2829
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.GroupedPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2831
                self.match(SqlBaseParser.T__1)
                self.state = 2832
                self.rowPattern(0)
                self.state = 2833
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.PartitionStartAnchorContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2835
                self.match(SqlBaseParser.T__11)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.PartitionEndAnchorContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2836
                self.match(SqlBaseParser.T__12)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.ExcludedPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2837
                self.match(SqlBaseParser.T__13)
                self.state = 2838
                self.rowPattern(0)
                self.state = 2839
                self.match(SqlBaseParser.T__14)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternQuantifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ZeroOrMoreQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroOrMoreQuantifier" ):
                listener.enterZeroOrMoreQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroOrMoreQuantifier" ):
                listener.exitZeroOrMoreQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZeroOrMoreQuantifier" ):
                return visitor.visitZeroOrMoreQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class OneOrMoreQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneOrMoreQuantifier" ):
                listener.enterOneOrMoreQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneOrMoreQuantifier" ):
                listener.exitOneOrMoreQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneOrMoreQuantifier" ):
                return visitor.visitOneOrMoreQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class ZeroOrOneQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def QUESTION_MARK(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.QUESTION_MARK)
            else:
                return self.getToken(SqlBaseParser.QUESTION_MARK, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroOrOneQuantifier" ):
                listener.enterZeroOrOneQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroOrOneQuantifier" ):
                listener.exitZeroOrOneQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZeroOrOneQuantifier" ):
                return visitor.visitZeroOrOneQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class RangeQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.exactly = None # Token
            self.reluctant = None # Token
            self.atLeast = None # Token
            self.atMost = None # Token
            self.copyFrom(ctx)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeQuantifier" ):
                listener.enterRangeQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeQuantifier" ):
                listener.exitRangeQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeQuantifier" ):
                return visitor.visitRangeQuantifier(self)
            else:
                return visitor.visitChildren(self)



    def patternQuantifier(self):

        localctx = SqlBaseParser.PatternQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_patternQuantifier)
        self._la = 0 # Token type
        try:
            self.state = 2873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ZeroOrMoreQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2843
                self.match(SqlBaseParser.ASTERISK)
                self.state = 2845
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
                if la_ == 1:
                    self.state = 2844
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.OneOrMoreQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2847
                self.match(SqlBaseParser.PLUS)
                self.state = 2849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
                if la_ == 1:
                    self.state = 2848
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ZeroOrOneQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2851
                self.match(SqlBaseParser.QUESTION_MARK)
                self.state = 2853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
                if la_ == 1:
                    self.state = 2852
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.RangeQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2855
                self.match(SqlBaseParser.T__15)
                self.state = 2856
                localctx.exactly = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2857
                self.match(SqlBaseParser.T__16)
                self.state = 2859
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 2858
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.RangeQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2861
                self.match(SqlBaseParser.T__15)
                self.state = 2863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==308:
                    self.state = 2862
                    localctx.atLeast = self.match(SqlBaseParser.INTEGER_VALUE)


                self.state = 2865
                self.match(SqlBaseParser.T__3)
                self.state = 2867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==308:
                    self.state = 2866
                    localctx.atMost = self.match(SqlBaseParser.INTEGER_VALUE)


                self.state = 2869
                self.match(SqlBaseParser.T__16)
                self.state = 2871
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
                if la_ == 1:
                    self.state = 2870
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_updateAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateAssignment" ):
                listener.enterUpdateAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateAssignment" ):
                listener.exitUpdateAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateAssignment" ):
                return visitor.visitUpdateAssignment(self)
            else:
                return visitor.visitChildren(self)




    def updateAssignment(self):

        localctx = SqlBaseParser.UpdateAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_updateAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2875
            self.identifier()
            self.state = 2876
            self.match(SqlBaseParser.EQ)
            self.state = 2877
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_explainOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainFormatContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)
        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)
        def JSON(self):
            return self.getToken(SqlBaseParser.JSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainFormat" ):
                listener.enterExplainFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainFormat" ):
                listener.exitExplainFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainFormat" ):
                return visitor.visitExplainFormat(self)
            else:
                return visitor.visitChildren(self)


    class ExplainTypeContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)
        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)
        def VALIDATE(self):
            return self.getToken(SqlBaseParser.VALIDATE, 0)
        def IO(self):
            return self.getToken(SqlBaseParser.IO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainType" ):
                listener.enterExplainType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainType" ):
                listener.exitExplainType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainType" ):
                return visitor.visitExplainType(self)
            else:
                return visitor.visitChildren(self)



    def explainOption(self):

        localctx = SqlBaseParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.state = 2883
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98]:
                localctx = SqlBaseParser.ExplainFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2879
                self.match(SqlBaseParser.FORMAT)
                self.state = 2880
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==106 or _la==128 or _la==245):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [258]:
                localctx = SqlBaseParser.ExplainTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2881
                self.match(SqlBaseParser.TYPE)
                self.state = 2882
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==76 or _la==124 or _la==148 or _la==275):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transactionMode

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TransactionAccessModeContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransactionModeContext
            super().__init__(parser)
            self.accessMode = None # Token
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)
        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionAccessMode" ):
                return visitor.visitTransactionAccessMode(self)
            else:
                return visitor.visitChildren(self)


    class IsolationLevelContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransactionModeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)
        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)
        def levelOfIsolation(self):
            return self.getTypedRuleContext(SqlBaseParser.LevelOfIsolationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsolationLevel" ):
                return visitor.visitIsolationLevel(self)
            else:
                return visitor.visitChildren(self)



    def transactionMode(self):

        localctx = SqlBaseParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_transactionMode)
        self._la = 0 # Token type
        try:
            self.state = 2890
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126]:
                localctx = SqlBaseParser.IsolationLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2885
                self.match(SqlBaseParser.ISOLATION)
                self.state = 2886
                self.match(SqlBaseParser.LEVEL)
                self.state = 2887
                self.levelOfIsolation()
                pass
            elif token in [205]:
                localctx = SqlBaseParser.TransactionAccessModeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2888
                self.match(SqlBaseParser.READ)
                self.state = 2889
                localctx.accessMode = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==178 or _la==289):
                    localctx.accessMode = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelOfIsolationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_levelOfIsolation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ReadUncommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadUncommitted" ):
                listener.enterReadUncommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadUncommitted" ):
                listener.exitReadUncommitted(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadUncommitted" ):
                return visitor.visitReadUncommitted(self)
            else:
                return visitor.visitChildren(self)


    class SerializableContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializable" ):
                listener.enterSerializable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializable" ):
                listener.exitSerializable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSerializable" ):
                return visitor.visitSerializable(self)
            else:
                return visitor.visitChildren(self)


    class ReadCommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadCommitted" ):
                listener.enterReadCommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadCommitted" ):
                listener.exitReadCommitted(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadCommitted" ):
                return visitor.visitReadCommitted(self)
            else:
                return visitor.visitChildren(self)


    class RepeatableReadContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)
        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatableRead" ):
                listener.enterRepeatableRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatableRead" ):
                listener.exitRepeatableRead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatableRead" ):
                return visitor.visitRepeatableRead(self)
            else:
                return visitor.visitChildren(self)



    def levelOfIsolation(self):

        localctx = SqlBaseParser.LevelOfIsolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_levelOfIsolation)
        try:
            self.state = 2899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ReadUncommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2892
                self.match(SqlBaseParser.READ)
                self.state = 2893
                self.match(SqlBaseParser.UNCOMMITTED)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ReadCommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2894
                self.match(SqlBaseParser.READ)
                self.state = 2895
                self.match(SqlBaseParser.COMMITTED)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.RepeatableReadContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2896
                self.match(SqlBaseParser.REPEATABLE)
                self.state = 2897
                self.match(SqlBaseParser.READ)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SerializableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2898
                self.match(SqlBaseParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_callArgument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionalArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalArgument" ):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalArgument" ):
                listener.exitPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalArgument" ):
                return visitor.visitPositionalArgument(self)
            else:
                return visitor.visitChildren(self)


    class NamedArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgument" ):
                return visitor.visitNamedArgument(self)
            else:
                return visitor.visitChildren(self)



    def callArgument(self):

        localctx = SqlBaseParser.CallArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_callArgument)
        try:
            self.state = 2906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PositionalArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2901
                self.expression()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.NamedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2902
                self.identifier()
                self.state = 2903
                self.match(SqlBaseParser.T__5)
                self.state = 2904
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pathElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QualifiedArgumentContext(PathElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PathElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedArgument" ):
                listener.enterQualifiedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedArgument" ):
                listener.exitQualifiedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedArgument" ):
                return visitor.visitQualifiedArgument(self)
            else:
                return visitor.visitChildren(self)


    class UnqualifiedArgumentContext(PathElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PathElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedArgument" ):
                listener.enterUnqualifiedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedArgument" ):
                listener.exitUnqualifiedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedArgument" ):
                return visitor.visitUnqualifiedArgument(self)
            else:
                return visitor.visitChildren(self)



    def pathElement(self):

        localctx = SqlBaseParser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_pathElement)
        try:
            self.state = 2913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.QualifiedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2908
                self.identifier()
                self.state = 2909
                self.match(SqlBaseParser.T__0)
                self.state = 2910
                self.identifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UnqualifiedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2912
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PathElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PathElementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pathSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSpecification" ):
                listener.enterPathSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSpecification" ):
                listener.exitPathSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathSpecification" ):
                return visitor.visitPathSpecification(self)
            else:
                return visitor.visitChildren(self)




    def pathSpecification(self):

        localctx = SqlBaseParser.PathSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_pathSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2915
            self.pathElement()
            self.state = 2920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2916
                self.match(SqlBaseParser.T__3)
                self.state = 2917
                self.pathElement()
                self.state = 2922
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilege" ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = SqlBaseParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2923
            _la = self._input.LA(1)
            if not(_la==51 or _la==70 or _la==119 or _la==230 or _la==268):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2925
            self.identifier()
            self.state = 2930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,391,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2926
                    self.match(SqlBaseParser.T__0)
                    self.state = 2927
                    self.identifier() 
                self.state = 2932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryPeriodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.end = None # ValueExpressionContext

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def rangeType(self):
            return self.getTypedRuleContext(SqlBaseParser.RangeTypeContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPeriod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPeriod" ):
                listener.enterQueryPeriod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPeriod" ):
                listener.exitQueryPeriod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPeriod" ):
                return visitor.visitQueryPeriod(self)
            else:
                return visitor.visitChildren(self)




    def queryPeriod(self):

        localctx = SqlBaseParser.QueryPeriodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_queryPeriod)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self.match(SqlBaseParser.FOR)
            self.state = 2934
            self.rangeType()
            self.state = 2935
            self.match(SqlBaseParser.AS)
            self.state = 2936
            self.match(SqlBaseParser.OF)
            self.state = 2937
            localctx.end = self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_rangeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeType" ):
                listener.enterRangeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeType" ):
                listener.exitRangeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeType" ):
                return visitor.visitRangeType(self)
            else:
                return visitor.visitChildren(self)




    def rangeType(self):

        localctx = SqlBaseParser.RangeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_rangeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2939
            _la = self._input.LA(1)
            if not(_la==250 or _la==279):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_grantor

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CurrentUserGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUserGrantor" ):
                listener.enterCurrentUserGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUserGrantor" ):
                listener.exitCurrentUserGrantor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUserGrantor" ):
                return visitor.visitCurrentUserGrantor(self)
            else:
                return visitor.visitChildren(self)


    class SpecifiedPrincipalContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifiedPrincipal" ):
                listener.enterSpecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifiedPrincipal" ):
                listener.exitSpecifiedPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecifiedPrincipal" ):
                return visitor.visitSpecifiedPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRoleGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_ROLE(self):
            return self.getToken(SqlBaseParser.CURRENT_ROLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRoleGrantor" ):
                listener.enterCurrentRoleGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRoleGrantor" ):
                listener.exitCurrentRoleGrantor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRoleGrantor" ):
                return visitor.visitCurrentRoleGrantor(self)
            else:
                return visitor.visitChildren(self)



    def grantor(self):

        localctx = SqlBaseParser.GrantorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_grantor)
        try:
            self.state = 2944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 115, 116, 118, 121, 123, 124, 126, 128, 134, 135, 136, 137, 138, 139, 141, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 291, 311, 312, 313, 314]:
                localctx = SqlBaseParser.SpecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2941
                self.principal()
                pass
            elif token in [62]:
                localctx = SqlBaseParser.CurrentUserGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2942
                self.match(SqlBaseParser.CURRENT_USER)
                pass
            elif token in [58]:
                localctx = SqlBaseParser.CurrentRoleGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2943
                self.match(SqlBaseParser.CURRENT_ROLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_principal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnspecifiedPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnspecifiedPrincipal" ):
                listener.enterUnspecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnspecifiedPrincipal" ):
                listener.exitUnspecifiedPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnspecifiedPrincipal" ):
                return visitor.visitUnspecifiedPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class UserPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPrincipal" ):
                listener.enterUserPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPrincipal" ):
                listener.exitUserPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserPrincipal" ):
                return visitor.visitUserPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class RolePrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRolePrincipal" ):
                listener.enterRolePrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRolePrincipal" ):
                listener.exitRolePrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRolePrincipal" ):
                return visitor.visitRolePrincipal(self)
            else:
                return visitor.visitChildren(self)



    def principal(self):

        localctx = SqlBaseParser.PrincipalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_principal)
        try:
            self.state = 2951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnspecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2946
                self.identifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UserPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2947
                self.match(SqlBaseParser.USER)
                self.state = 2948
                self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.RolePrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2949
                self.match(SqlBaseParser.ROLE)
                self.state = 2950
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoles" ):
                listener.enterRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoles" ):
                listener.exitRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoles" ):
                return visitor.visitRoles(self)
            else:
                return visitor.visitChildren(self)




    def roles(self):

        localctx = SqlBaseParser.RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2953
            self.identifier()
            self.state = 2958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2954
                self.match(SqlBaseParser.T__3)
                self.state = 2955
                self.identifier()
                self.state = 2960
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BackQuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackQuotedIdentifier" ):
                return visitor.visitBackQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class QuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class DigitIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIGIT_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigitIdentifier" ):
                listener.enterDigitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigitIdentifier" ):
                listener.exitDigitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDigitIdentifier" ):
                return visitor.visitDigitIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_identifier)
        try:
            self.state = 2966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [311]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2961
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [313]:
                localctx = SqlBaseParser.QuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2962
                self.match(SqlBaseParser.QUOTED_IDENTIFIER)
                pass
            elif token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 115, 116, 118, 121, 123, 124, 126, 128, 134, 135, 136, 137, 138, 139, 141, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 291]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2963
                self.nonReserved()
                pass
            elif token in [314]:
                localctx = SqlBaseParser.BackQuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2964
                self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
                pass
            elif token in [312]:
                localctx = SqlBaseParser.DigitIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2965
                self.match(SqlBaseParser.DIGIT_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_VALUE(self):
            return self.getToken(SqlBaseParser.DOUBLE_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 2980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==299:
                    self.state = 2968
                    self.match(SqlBaseParser.MINUS)


                self.state = 2971
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==299:
                    self.state = 2972
                    self.match(SqlBaseParser.MINUS)


                self.state = 2975
                self.match(SqlBaseParser.DOUBLE_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==299:
                    self.state = 2976
                    self.match(SqlBaseParser.MINUS)


                self.state = 2979
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSENT(self):
            return self.getToken(SqlBaseParser.ABSENT, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def CALL(self):
            return self.getToken(SqlBaseParser.CALL, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def CONDITIONAL(self):
            return self.getToken(SqlBaseParser.CONDITIONAL, 0)

        def COPARTITION(self):
            return self.getToken(SqlBaseParser.COPARTITION, 0)

        def COUNT(self):
            return self.getToken(SqlBaseParser.COUNT, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def DEFINER(self):
            return self.getToken(SqlBaseParser.DEFINER, 0)

        def DENY(self):
            return self.getToken(SqlBaseParser.DENY, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIPTOR(self):
            return self.getToken(SqlBaseParser.DESCRIPTOR, 0)

        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def ENCODING(self):
            return self.getToken(SqlBaseParser.ENCODING, 0)

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def EXCLUDING(self):
            return self.getToken(SqlBaseParser.EXCLUDING, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def FINAL(self):
            return self.getToken(SqlBaseParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GRACE(self):
            return self.getToken(SqlBaseParser.GRACE, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)

        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)

        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)

        def GROUPS(self):
            return self.getToken(SqlBaseParser.GROUPS, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def INCLUDING(self):
            return self.getToken(SqlBaseParser.INCLUDING, 0)

        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def INPUT(self):
            return self.getToken(SqlBaseParser.INPUT, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def INVOKER(self):
            return self.getToken(SqlBaseParser.INVOKER, 0)

        def IO(self):
            return self.getToken(SqlBaseParser.IO, 0)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)

        def JSON(self):
            return self.getToken(SqlBaseParser.JSON, 0)

        def KEEP(self):
            return self.getToken(SqlBaseParser.KEEP, 0)

        def KEY(self):
            return self.getToken(SqlBaseParser.KEY, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MATCHES(self):
            return self.getToken(SqlBaseParser.MATCHES, 0)

        def MATCH_RECOGNIZE(self):
            return self.getToken(SqlBaseParser.MATCH_RECOGNIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)

        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def NFC(self):
            return self.getToken(SqlBaseParser.NFC, 0)

        def NFD(self):
            return self.getToken(SqlBaseParser.NFD, 0)

        def NFKC(self):
            return self.getToken(SqlBaseParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(SqlBaseParser.NFKD, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NONE(self):
            return self.getToken(SqlBaseParser.NONE, 0)

        def NULLIF(self):
            return self.getToken(SqlBaseParser.NULLIF, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OBJECT(self):
            return self.getToken(SqlBaseParser.OBJECT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)

        def ONE(self):
            return self.getToken(SqlBaseParser.ONE, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def ORDINALITY(self):
            return self.getToken(SqlBaseParser.ORDINALITY, 0)

        def OUTPUT(self):
            return self.getToken(SqlBaseParser.OUTPUT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERFLOW(self):
            return self.getToken(SqlBaseParser.OVERFLOW, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PASSING(self):
            return self.getToken(SqlBaseParser.PASSING, 0)

        def PAST(self):
            return self.getToken(SqlBaseParser.PAST, 0)

        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)

        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def PER(self):
            return self.getToken(SqlBaseParser.PER, 0)

        def PERIOD(self):
            return self.getToken(SqlBaseParser.PERIOD, 0)

        def PERMUTE(self):
            return self.getToken(SqlBaseParser.PERMUTE, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def PRUNE(self):
            return self.getToken(SqlBaseParser.PRUNE, 0)

        def QUOTES(self):
            return self.getToken(SqlBaseParser.QUOTES, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def RUNNING(self):
            return self.getToken(SqlBaseParser.RUNNING, 0)

        def SCALAR(self):
            return self.getToken(SqlBaseParser.SCALAR, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECURITY(self):
            return self.getToken(SqlBaseParser.SECURITY, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)

        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)

        def TEXT_STRING(self):
            return self.getToken(SqlBaseParser.TEXT_STRING, 0)

        def TIES(self):
            return self.getToken(SqlBaseParser.TIES, 0)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def UNCONDITIONAL(self):
            return self.getToken(SqlBaseParser.UNCONDITIONAL, 0)

        def UNIQUE(self):
            return self.getToken(SqlBaseParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def UNMATCHED(self):
            return self.getToken(SqlBaseParser.UNMATCHED, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def UTF16(self):
            return self.getToken(SqlBaseParser.UTF16, 0)

        def UTF32(self):
            return self.getToken(SqlBaseParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(SqlBaseParser.UTF8, 0)

        def VALIDATE(self):
            return self.getToken(SqlBaseParser.VALIDATE, 0)

        def VALUE(self):
            return self.getToken(SqlBaseParser.VALUE, 0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(SqlBaseParser.WRAPPER, 0)

        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2982
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 6510982292348548539) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -49824921316839487) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 4574531046338445183) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 68348245879) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[18] = self.queryTerm_sempred
        self._predicates[30] = self.relation_sempred
        self._predicates[56] = self.booleanExpression_sempred
        self._predicates[58] = self.valueExpression_sempred
        self._predicates[59] = self.primaryExpression_sempred
        self._predicates[79] = self.type_sempred
        self._predicates[89] = self.rowPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 22)
         

    def type_sempred(self, localctx:TypeContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def rowPattern_sempred(self, localctx:RowPatternContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         




