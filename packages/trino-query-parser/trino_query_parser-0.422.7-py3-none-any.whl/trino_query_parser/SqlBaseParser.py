# Generated from src/trino_query_parser/SqlBase.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,323,3182,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,1,0,1,0,1,
        0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,257,8,5,1,5,1,5,1,5,1,
        5,1,5,3,5,264,8,5,1,5,1,5,3,5,268,8,5,1,5,1,5,3,5,272,8,5,1,5,1,
        5,1,5,1,5,3,5,278,8,5,1,5,1,5,3,5,282,8,5,1,5,1,5,1,5,1,5,1,5,3,
        5,289,8,5,1,5,1,5,1,5,3,5,294,8,5,1,5,1,5,3,5,298,8,5,1,5,1,5,1,
        5,1,5,3,5,304,8,5,1,5,1,5,3,5,308,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,327,8,5,1,5,1,5,1,
        5,1,5,3,5,333,8,5,1,5,1,5,3,5,337,8,5,1,5,1,5,3,5,341,8,5,1,5,1,
        5,3,5,345,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,353,8,5,1,5,1,5,3,5,357,
        8,5,1,5,3,5,360,8,5,1,5,1,5,1,5,3,5,365,8,5,1,5,1,5,1,5,1,5,3,5,
        371,8,5,1,5,1,5,1,5,1,5,1,5,5,5,378,8,5,10,5,12,5,381,9,5,1,5,1,
        5,1,5,3,5,386,8,5,1,5,1,5,3,5,390,8,5,1,5,1,5,1,5,1,5,3,5,396,8,
        5,1,5,1,5,1,5,1,5,1,5,3,5,403,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,
        5,412,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,424,8,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,433,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,3,5,442,8,5,1,5,1,5,1,5,1,5,3,5,448,8,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,3,5,459,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,467,8,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,475,8,5,1,5,1,5,1,5,1,5,1,5,3,5,482,8,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,492,8,5,1,5,1,5,1,5,1,5,1,
        5,3,5,499,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,507,8,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,541,8,5,10,
        5,12,5,544,9,5,3,5,546,8,5,1,5,3,5,549,8,5,1,5,1,5,3,5,553,8,5,1,
        5,1,5,1,5,1,5,3,5,559,8,5,1,5,1,5,1,5,3,5,564,8,5,1,5,1,5,1,5,1,
        5,1,5,3,5,571,8,5,1,5,1,5,1,5,1,5,3,5,577,8,5,1,5,1,5,3,5,581,8,
        5,1,5,1,5,3,5,585,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,593,8,5,1,5,1,
        5,1,5,1,5,3,5,599,8,5,1,5,1,5,3,5,603,8,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,617,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,
        5,625,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,3,5,644,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,667,8,5,10,5,12,
        5,670,9,5,3,5,672,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,682,8,
        5,1,5,1,5,3,5,686,8,5,1,5,1,5,1,5,1,5,1,5,3,5,693,8,5,1,5,1,5,1,
        5,1,5,1,5,1,5,5,5,701,8,5,10,5,12,5,704,9,5,1,5,1,5,1,5,3,5,709,
        8,5,1,5,1,5,1,5,3,5,714,8,5,1,5,1,5,3,5,718,8,5,1,5,1,5,1,5,1,5,
        3,5,724,8,5,1,5,1,5,1,5,1,5,1,5,5,5,731,8,5,10,5,12,5,734,9,5,1,
        5,1,5,1,5,3,5,739,8,5,1,5,1,5,3,5,743,8,5,1,5,1,5,1,5,1,5,1,5,3,
        5,750,8,5,1,5,1,5,3,5,754,8,5,1,5,1,5,1,5,1,5,5,5,760,8,5,10,5,12,
        5,763,9,5,1,5,1,5,3,5,767,8,5,1,5,1,5,3,5,771,8,5,1,5,1,5,1,5,1,
        5,1,5,1,5,3,5,779,8,5,1,5,1,5,1,5,1,5,5,5,785,8,5,10,5,12,5,788,
        9,5,1,5,1,5,3,5,792,8,5,1,5,1,5,3,5,796,8,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,3,5,806,8,5,1,5,1,5,1,5,5,5,811,8,5,10,5,12,5,814,9,
        5,1,5,1,5,3,5,818,8,5,1,5,1,5,3,5,822,8,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,3,5,832,8,5,1,5,3,5,835,8,5,1,5,1,5,1,5,1,5,1,5,5,5,842,
        8,5,10,5,12,5,845,9,5,1,5,1,5,3,5,849,8,5,1,5,1,5,1,5,1,5,3,5,855,
        8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,879,8,5,1,5,1,5,1,5,1,5,3,5,885,
        8,5,3,5,887,8,5,1,5,1,5,1,5,1,5,3,5,893,8,5,1,5,1,5,1,5,1,5,3,5,
        899,8,5,3,5,901,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,909,8,5,3,5,911,
        8,5,1,5,1,5,1,5,1,5,3,5,917,8,5,1,5,1,5,1,5,1,5,3,5,923,8,5,3,5,
        925,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,
        940,8,5,1,5,1,5,1,5,3,5,945,8,5,1,5,1,5,1,5,1,5,1,5,3,5,952,8,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,964,8,5,3,5,966,8,5,
        1,5,1,5,1,5,1,5,1,5,1,5,3,5,974,8,5,3,5,976,8,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,992,8,5,10,5,12,5,995,
        9,5,3,5,997,8,5,1,5,1,5,3,5,1001,8,5,1,5,1,5,3,5,1005,8,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,1021,8,5,10,
        5,12,5,1024,9,5,3,5,1026,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,1035,
        8,5,10,5,12,5,1038,9,5,3,5,1040,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1056,8,5,1,5,1,5,1,5,1,5,1,5,1,5,
        5,5,1064,8,5,10,5,12,5,1067,9,5,1,5,1,5,3,5,1071,8,5,1,5,1,5,1,5,
        1,5,3,5,1077,8,5,1,5,3,5,1080,8,5,1,5,1,5,1,5,1,5,1,5,4,5,1087,8,
        5,11,5,12,5,1088,3,5,1091,8,5,1,6,3,6,1094,8,6,1,6,1,6,1,7,1,7,3,
        7,1100,8,7,1,7,1,7,1,7,5,7,1105,8,7,10,7,12,7,1108,9,7,1,8,1,8,3,
        8,1112,8,8,1,9,1,9,1,9,1,9,3,9,1118,8,9,1,9,1,9,3,9,1122,8,9,1,9,
        1,9,3,9,1126,8,9,1,10,1,10,1,10,1,10,3,10,1132,8,10,1,11,1,11,1,
        11,1,11,1,12,1,12,1,12,5,12,1141,8,12,10,12,12,12,1144,9,12,1,13,
        1,13,1,13,1,13,1,14,1,14,3,14,1152,8,14,1,15,1,15,1,15,1,15,1,15,
        1,15,5,15,1160,8,15,10,15,12,15,1163,9,15,3,15,1165,8,15,1,15,1,
        15,1,15,3,15,1170,8,15,3,15,1172,8,15,1,15,1,15,1,15,1,15,1,15,3,
        15,1179,8,15,1,15,1,15,1,15,1,15,3,15,1185,8,15,3,15,1187,8,15,1,
        16,1,16,3,16,1191,8,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,3,
        18,1201,8,18,1,18,1,18,1,18,1,18,3,18,1207,8,18,1,18,5,18,1210,8,
        18,10,18,12,18,1213,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,
        1222,8,19,10,19,12,19,1225,9,19,1,19,1,19,1,19,1,19,3,19,1231,8,
        19,1,20,1,20,3,20,1235,8,20,1,20,1,20,3,20,1239,8,20,1,21,1,21,3,
        21,1243,8,21,1,21,1,21,1,21,5,21,1248,8,21,10,21,12,21,1251,9,21,
        1,21,1,21,1,21,1,21,5,21,1257,8,21,10,21,12,21,1260,9,21,3,21,1262,
        8,21,1,21,1,21,3,21,1266,8,21,1,21,1,21,1,21,3,21,1271,8,21,1,21,
        1,21,3,21,1275,8,21,1,21,1,21,1,21,1,21,5,21,1281,8,21,10,21,12,
        21,1284,9,21,3,21,1286,8,21,1,22,3,22,1289,8,22,1,22,1,22,1,22,5,
        22,1294,8,22,10,22,12,22,1297,9,22,1,23,1,23,1,23,1,23,1,23,1,23,
        5,23,1305,8,23,10,23,12,23,1308,9,23,3,23,1310,8,23,1,23,1,23,1,
        23,1,23,1,23,1,23,5,23,1318,8,23,10,23,12,23,1321,9,23,3,23,1323,
        8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,1332,8,23,10,23,12,
        23,1335,9,23,1,23,1,23,3,23,1339,8,23,1,24,1,24,1,24,1,24,5,24,1345,
        8,24,10,24,12,24,1348,9,24,3,24,1350,8,24,1,24,1,24,3,24,1354,8,
        24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,3,26,1363,8,26,1,26,1,26,1,
        26,1,26,1,26,5,26,1370,8,26,10,26,12,26,1373,9,26,3,26,1375,8,26,
        1,26,1,26,1,26,1,26,1,26,5,26,1382,8,26,10,26,12,26,1385,9,26,3,
        26,1387,8,26,1,26,3,26,1390,8,26,1,27,1,27,3,27,1394,8,27,1,27,1,
        27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,3,29,1405,8,29,1,29,3,29,1408,
        8,29,1,29,1,29,1,29,1,29,1,29,3,29,1415,8,29,1,29,3,29,1418,8,29,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,3,30,1437,8,30,5,30,1439,8,30,10,30,12,30,1442,
        9,30,1,31,3,31,1445,8,31,1,31,1,31,3,31,1449,8,31,1,31,1,31,3,31,
        1453,8,31,1,31,1,31,3,31,1457,8,31,3,31,1459,8,31,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,5,32,1468,8,32,10,32,12,32,1471,9,32,1,32,1,
        32,3,32,1475,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,1484,8,
        33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,3,36,1493,8,36,1,36,3,36,1496,
        8,36,1,37,1,37,1,37,1,37,3,37,1502,8,37,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,5,38,1512,8,38,10,38,12,38,1515,9,38,3,38,1517,8,
        38,1,38,1,38,1,38,1,38,1,38,5,38,1524,8,38,10,38,12,38,1527,9,38,
        3,38,1529,8,38,1,38,1,38,1,38,1,38,5,38,1535,8,38,10,38,12,38,1538,
        9,38,3,38,1540,8,38,1,38,3,38,1543,8,38,1,38,1,38,1,38,3,38,1548,
        8,38,1,38,3,38,1551,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        5,38,1561,8,38,10,38,12,38,1564,9,38,3,38,1566,8,38,1,38,1,38,1,
        38,1,38,5,38,1572,8,38,10,38,12,38,1575,9,38,1,38,1,38,3,38,1579,
        8,38,1,38,1,38,3,38,1583,8,38,3,38,1585,8,38,3,38,1587,8,38,1,39,
        1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
        1602,8,40,3,40,1604,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,3,41,1615,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1636,8,42,
        1,43,1,43,1,43,1,43,1,43,1,43,5,43,1644,8,43,10,43,12,43,1647,9,
        43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,3,45,1657,8,45,1,45,1,
        45,3,45,1661,8,45,3,45,1663,8,45,1,46,1,46,1,46,1,46,5,46,1669,8,
        46,10,46,12,46,1672,9,46,1,46,1,46,1,47,1,47,3,47,1678,8,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,1689,8,47,10,47,12,
        47,1692,9,47,1,47,1,47,1,47,3,47,1697,8,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,5,47,1721,8,47,10,47,12,47,1724,9,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1738,
        8,47,1,47,1,47,1,47,3,47,1743,8,47,1,47,1,47,3,47,1747,8,47,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1757,8,48,1,48,1,48,1,48,
        1,48,3,48,1763,8,48,1,48,1,48,1,48,1,48,3,48,1769,8,48,1,48,1,48,
        1,48,1,48,1,48,1,48,3,48,1777,8,48,1,48,1,48,1,48,3,48,1782,8,48,
        1,48,1,48,1,48,1,48,1,48,3,48,1789,8,48,3,48,1791,8,48,1,48,1,48,
        1,48,1,48,3,48,1797,8,48,1,48,1,48,1,48,1,48,3,48,1803,8,48,1,48,
        1,48,3,48,1807,8,48,1,48,1,48,1,48,3,48,1812,8,48,1,48,1,48,1,48,
        1,48,1,48,5,48,1819,8,48,10,48,12,48,1822,9,48,1,48,1,48,3,48,1826,
        8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,1838,
        8,49,10,49,12,49,1841,9,49,1,49,1,49,1,49,1,49,1,49,5,49,1848,8,
        49,10,49,12,49,1851,9,49,3,49,1853,8,49,1,50,1,50,1,51,1,51,1,51,
        1,51,1,51,3,51,1862,8,51,1,52,1,52,1,52,3,52,1867,8,52,1,52,1,52,
        1,52,3,52,1872,8,52,3,52,1874,8,52,1,53,1,53,1,53,1,53,1,53,5,53,
        1881,8,53,10,53,12,53,1884,9,53,3,53,1886,8,53,1,53,1,53,1,53,1,
        53,5,53,1892,8,53,10,53,12,53,1895,9,53,3,53,1897,8,53,1,53,1,53,
        1,54,1,54,1,54,3,54,1904,8,54,1,54,1,54,1,54,3,54,1909,8,54,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,5,55,1918,8,55,10,55,12,55,1921,9,
        55,3,55,1923,8,55,1,55,1,55,3,55,1927,8,55,3,55,1929,8,55,1,55,1,
        55,1,55,1,55,1,55,1,55,3,55,1937,8,55,1,55,1,55,1,55,1,55,1,55,1,
        55,5,55,1945,8,55,10,55,12,55,1948,9,55,1,55,1,55,1,55,3,55,1953,
        8,55,3,55,1955,8,55,1,56,1,56,1,56,1,56,1,56,3,56,1962,8,56,1,56,
        1,56,3,56,1966,8,56,3,56,1968,8,56,1,56,1,56,1,56,1,56,1,56,3,56,
        1975,8,56,1,56,1,56,3,56,1979,8,56,3,56,1981,8,56,3,56,1983,8,56,
        1,57,1,57,1,57,1,57,1,57,5,57,1990,8,57,10,57,12,57,1993,9,57,1,
        57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,2003,8,57,1,58,1,58,3,
        58,2007,8,58,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2015,8,59,10,59,
        12,59,2018,9,59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,3,61,2027,8,61,
        1,61,1,61,3,61,2031,8,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,2039,
        8,61,10,61,12,61,2042,9,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,3,62,2054,8,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,2062,
        8,62,1,62,1,62,1,62,1,62,1,62,5,62,2069,8,62,10,62,12,62,2072,9,
        62,1,62,1,62,1,62,3,62,2077,8,62,1,62,1,62,1,62,1,62,1,62,1,62,3,
        62,2085,8,62,1,62,1,62,1,62,1,62,3,62,2091,8,62,1,62,1,62,3,62,2095,
        8,62,1,62,1,62,1,62,3,62,2100,8,62,1,62,1,62,1,62,3,62,2105,8,62,
        1,63,1,63,1,63,1,63,3,63,2111,8,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,5,63,2125,8,63,10,63,12,63,2128,9,
        63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,4,
        64,2155,8,64,11,64,12,64,2156,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        5,64,2166,8,64,10,64,12,64,2169,9,64,1,64,1,64,1,64,1,64,1,64,3,
        64,2176,8,64,1,64,1,64,1,64,3,64,2181,8,64,1,64,1,64,1,64,3,64,2186,
        8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2197,8,64,
        10,64,12,64,2200,9,64,1,64,1,64,1,64,3,64,2205,8,64,1,64,1,64,1,
        64,1,64,1,64,3,64,2212,8,64,1,64,1,64,1,64,3,64,2217,8,64,1,64,3,
        64,2220,8,64,1,64,3,64,2223,8,64,1,64,1,64,1,64,3,64,2228,8,64,1,
        64,1,64,1,64,5,64,2233,8,64,10,64,12,64,2236,9,64,3,64,2238,8,64,
        1,64,1,64,1,64,1,64,1,64,5,64,2245,8,64,10,64,12,64,2248,9,64,3,
        64,2250,8,64,1,64,1,64,3,64,2254,8,64,1,64,3,64,2257,8,64,1,64,3,
        64,2260,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,5,64,2273,8,64,10,64,12,64,2276,9,64,3,64,2278,8,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        4,64,2295,8,64,11,64,12,64,2296,1,64,1,64,3,64,2301,8,64,1,64,1,
        64,1,64,1,64,4,64,2307,8,64,11,64,12,64,2308,1,64,1,64,3,64,2313,
        8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2336,8,64,10,64,
        12,64,2339,9,64,3,64,2341,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        3,64,2350,8,64,1,64,1,64,1,64,1,64,3,64,2356,8,64,1,64,1,64,1,64,
        1,64,3,64,2362,8,64,1,64,1,64,1,64,1,64,3,64,2368,8,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,3,64,2377,8,64,1,64,3,64,2380,8,64,1,64,
        3,64,2383,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2402,8,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,3,64,2411,8,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,
        2431,8,64,10,64,12,64,2434,9,64,3,64,2436,8,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,3,64,2446,8,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,3,64,2455,8,64,1,64,1,64,1,64,1,64,3,64,2461,8,64,1,64,1,
        64,1,64,1,64,3,64,2467,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,3,64,2478,8,64,3,64,2480,8,64,1,64,1,64,1,64,3,64,2485,8,
        64,1,64,1,64,1,64,1,64,1,64,3,64,2492,8,64,3,64,2494,8,64,1,64,1,
        64,1,64,1,64,3,64,2500,8,64,1,64,1,64,1,64,1,64,3,64,2506,8,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2515,8,64,10,64,12,64,2518,
        9,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2526,8,64,1,64,1,64,1,64,
        3,64,2531,8,64,1,64,1,64,1,64,3,64,2536,8,64,3,64,2538,8,64,3,64,
        2540,8,64,1,64,1,64,1,64,1,64,3,64,2546,8,64,3,64,2548,8,64,1,64,
        1,64,1,64,1,64,1,64,1,64,5,64,2556,8,64,10,64,12,64,2559,9,64,1,
        64,1,64,1,64,1,64,1,64,1,64,3,64,2567,8,64,3,64,2569,8,64,1,64,1,
        64,1,64,1,64,3,64,2575,8,64,3,64,2577,8,64,1,64,3,64,2580,8,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2590,8,64,10,64,12,64,
        2593,9,64,1,65,1,65,1,65,1,65,1,65,3,65,2600,8,65,1,65,1,65,1,65,
        1,65,5,65,2606,8,65,10,65,12,65,2609,9,65,3,65,2611,8,65,1,66,1,
        66,1,66,3,66,2616,8,66,1,67,1,67,1,67,3,67,2621,8,67,1,68,1,68,1,
        68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,3,70,2633,8,70,1,71,1,71,3,
        71,2637,8,71,1,71,1,71,3,71,2641,8,71,1,71,3,71,2644,8,71,3,71,2646,
        8,71,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2654,8,72,1,73,3,73,2657,
        8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2667,8,73,1,74,
        1,74,1,75,1,75,1,75,1,75,3,75,2675,8,75,1,76,1,76,1,76,1,76,3,76,
        2681,8,76,3,76,2683,8,76,1,77,1,77,1,77,1,77,1,77,1,77,3,77,2691,
        8,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,3,81,2701,8,81,1,81,
        1,81,1,81,1,81,3,81,2707,8,81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,
        1,84,1,84,1,84,5,84,2719,8,84,10,84,12,84,2722,9,84,1,84,1,84,1,
        84,1,84,1,84,1,84,3,84,2730,8,84,1,84,1,84,1,84,1,84,1,84,3,84,2737,
        8,84,1,84,1,84,1,84,3,84,2742,8,84,1,84,1,84,1,84,1,84,1,84,3,84,
        2749,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,2759,8,84,
        1,84,1,84,1,84,3,84,2764,8,84,1,84,1,84,1,84,1,84,1,84,3,84,2771,
        8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,5,84,2795,8,84,
        10,84,12,84,2798,9,84,1,84,1,84,3,84,2802,8,84,3,84,2804,8,84,1,
        84,1,84,1,84,1,84,1,84,3,84,2811,8,84,5,84,2813,8,84,10,84,12,84,
        2816,9,84,1,85,1,85,1,85,1,85,3,85,2822,8,85,1,86,1,86,3,86,2826,
        8,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,89,
        1,89,1,89,1,89,3,89,2843,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,5,89,2856,8,89,10,89,12,89,2859,9,89,1,89,1,
        89,1,89,1,89,3,89,2865,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,
        89,2874,8,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,2882,8,89,10,89,
        12,89,2885,9,89,1,89,1,89,3,89,2889,8,89,1,89,1,89,1,89,1,89,1,89,
        5,89,2896,8,89,10,89,12,89,2899,9,89,1,89,1,89,3,89,2903,8,89,1,
        90,1,90,1,90,1,90,1,90,1,90,3,90,2911,8,90,1,91,1,91,1,91,1,91,5,
        91,2917,8,91,10,91,12,91,2920,9,91,3,91,2922,8,91,1,91,1,91,1,91,
        1,91,3,91,2928,8,91,1,91,3,91,2931,8,91,1,91,1,91,1,91,1,91,1,91,
        3,91,2938,8,91,1,91,1,91,1,91,1,91,5,91,2944,8,91,10,91,12,91,2947,
        9,91,3,91,2949,8,91,1,91,1,91,1,91,1,91,5,91,2955,8,91,10,91,12,
        91,2958,9,91,3,91,2960,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,3,92,2986,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,
        93,1,93,1,93,3,93,2997,8,93,1,94,1,94,1,94,3,94,3002,8,94,1,94,1,
        94,1,94,1,94,1,94,5,94,3009,8,94,10,94,12,94,3012,9,94,1,95,1,95,
        1,95,1,95,1,95,1,95,1,95,1,95,5,95,3022,8,95,10,95,12,95,3025,9,
        95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,
        95,3039,8,95,1,96,1,96,3,96,3043,8,96,1,96,1,96,3,96,3047,8,96,1,
        96,1,96,3,96,3051,8,96,1,96,1,96,1,96,1,96,3,96,3057,8,96,1,96,1,
        96,3,96,3061,8,96,1,96,1,96,3,96,3065,8,96,1,96,1,96,3,96,3069,8,
        96,3,96,3071,8,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,3,98,3081,
        8,98,1,99,1,99,1,99,1,99,1,99,3,99,3088,8,99,1,100,1,100,1,100,1,
        100,1,100,1,100,1,100,3,100,3097,8,100,1,101,1,101,1,101,1,101,1,
        101,3,101,3104,8,101,1,102,1,102,1,102,1,102,1,102,3,102,3111,8,
        102,1,103,1,103,1,103,5,103,3116,8,103,10,103,12,103,3119,9,103,
        1,104,1,104,1,105,1,105,1,105,5,105,3126,8,105,10,105,12,105,3129,
        9,105,1,106,1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,108,1,108,
        1,108,3,108,3142,8,108,1,109,1,109,1,109,1,109,1,109,3,109,3149,
        8,109,1,110,1,110,1,110,5,110,3154,8,110,10,110,12,110,3157,9,110,
        1,111,1,111,1,111,1,111,1,111,3,111,3164,8,111,1,112,3,112,3167,
        8,112,1,112,1,112,3,112,3171,8,112,1,112,1,112,3,112,3175,8,112,
        1,112,3,112,3178,8,112,1,113,1,113,1,113,0,7,36,60,122,126,128,168,
        188,114,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,0,37,2,0,37,37,217,217,2,0,69,69,124,124,2,0,
        229,229,246,246,2,0,99,99,115,115,2,0,86,86,116,116,1,0,225,226,
        2,0,95,95,163,163,2,0,308,308,312,312,2,0,85,85,267,267,2,0,29,29,
        72,72,2,0,95,95,139,139,2,0,22,22,75,75,2,0,32,32,245,245,3,0,34,
        34,141,141,256,256,2,0,117,117,233,233,2,0,80,80,83,83,2,0,136,136,
        178,178,2,0,118,118,186,186,2,0,52,52,267,267,1,0,302,303,1,0,304,
        306,1,0,276,278,4,0,83,83,91,91,259,259,269,269,2,0,47,47,266,266,
        2,0,94,94,227,227,1,0,296,301,3,0,22,22,26,26,240,240,2,0,91,91,
        259,259,5,0,65,65,111,111,159,160,231,231,294,294,1,0,164,167,2,
        0,96,96,201,201,3,0,106,106,129,129,249,249,4,0,76,76,125,125,150,
        150,279,279,2,0,181,181,293,293,5,0,51,51,70,70,120,120,234,234,
        272,272,2,0,254,254,283,283,54,0,18,22,24,24,26,27,29,32,34,34,36,
        37,40,47,49,50,54,54,63,65,67,69,71,72,74,74,76,77,80,81,83,83,86,
        86,89,89,92,96,98,98,101,106,109,109,111,114,116,117,119,119,122,
        122,124,125,127,127,129,129,136,141,143,143,145,145,147,147,150,
        160,162,169,173,178,180,182,185,185,187,202,204,209,211,219,221,
        223,225,233,235,245,247,250,252,257,260,262,264,266,268,270,272,
        274,276,280,282,284,287,287,289,295,3688,0,228,1,0,0,0,2,231,1,0,
        0,0,4,234,1,0,0,0,6,237,1,0,0,0,8,240,1,0,0,0,10,1090,1,0,0,0,12,
        1093,1,0,0,0,14,1097,1,0,0,0,16,1111,1,0,0,0,18,1113,1,0,0,0,20,
        1127,1,0,0,0,22,1133,1,0,0,0,24,1137,1,0,0,0,26,1145,1,0,0,0,28,
        1151,1,0,0,0,30,1153,1,0,0,0,32,1190,1,0,0,0,34,1192,1,0,0,0,36,
        1194,1,0,0,0,38,1230,1,0,0,0,40,1232,1,0,0,0,42,1240,1,0,0,0,44,
        1288,1,0,0,0,46,1338,1,0,0,0,48,1353,1,0,0,0,50,1355,1,0,0,0,52,
        1362,1,0,0,0,54,1391,1,0,0,0,56,1400,1,0,0,0,58,1417,1,0,0,0,60,
        1419,1,0,0,0,62,1458,1,0,0,0,64,1474,1,0,0,0,66,1476,1,0,0,0,68,
        1485,1,0,0,0,70,1487,1,0,0,0,72,1495,1,0,0,0,74,1501,1,0,0,0,76,
        1503,1,0,0,0,78,1588,1,0,0,0,80,1603,1,0,0,0,82,1614,1,0,0,0,84,
        1635,1,0,0,0,86,1637,1,0,0,0,88,1650,1,0,0,0,90,1654,1,0,0,0,92,
        1664,1,0,0,0,94,1746,1,0,0,0,96,1825,1,0,0,0,98,1852,1,0,0,0,100,
        1854,1,0,0,0,102,1861,1,0,0,0,104,1873,1,0,0,0,106,1875,1,0,0,0,
        108,1903,1,0,0,0,110,1910,1,0,0,0,112,1982,1,0,0,0,114,2002,1,0,
        0,0,116,2004,1,0,0,0,118,2008,1,0,0,0,120,2021,1,0,0,0,122,2030,
        1,0,0,0,124,2104,1,0,0,0,126,2110,1,0,0,0,128,2579,1,0,0,0,130,2594,
        1,0,0,0,132,2612,1,0,0,0,134,2617,1,0,0,0,136,2622,1,0,0,0,138,2626,
        1,0,0,0,140,2632,1,0,0,0,142,2645,1,0,0,0,144,2653,1,0,0,0,146,2666,
        1,0,0,0,148,2668,1,0,0,0,150,2674,1,0,0,0,152,2682,1,0,0,0,154,2690,
        1,0,0,0,156,2692,1,0,0,0,158,2694,1,0,0,0,160,2696,1,0,0,0,162,2698,
        1,0,0,0,164,2708,1,0,0,0,166,2710,1,0,0,0,168,2803,1,0,0,0,170,2821,
        1,0,0,0,172,2825,1,0,0,0,174,2827,1,0,0,0,176,2832,1,0,0,0,178,2902,
        1,0,0,0,180,2904,1,0,0,0,182,2921,1,0,0,0,184,2985,1,0,0,0,186,2996,
        1,0,0,0,188,2998,1,0,0,0,190,3038,1,0,0,0,192,3070,1,0,0,0,194,3072,
        1,0,0,0,196,3080,1,0,0,0,198,3087,1,0,0,0,200,3096,1,0,0,0,202,3103,
        1,0,0,0,204,3110,1,0,0,0,206,3112,1,0,0,0,208,3120,1,0,0,0,210,3122,
        1,0,0,0,212,3130,1,0,0,0,214,3136,1,0,0,0,216,3141,1,0,0,0,218,3148,
        1,0,0,0,220,3150,1,0,0,0,222,3163,1,0,0,0,224,3177,1,0,0,0,226,3179,
        1,0,0,0,228,229,3,10,5,0,229,230,5,0,0,1,230,1,1,0,0,0,231,232,3,
        120,60,0,232,233,5,0,0,1,233,3,1,0,0,0,234,235,3,206,103,0,235,236,
        5,0,0,1,236,5,1,0,0,0,237,238,3,168,84,0,238,239,5,0,0,1,239,7,1,
        0,0,0,240,241,3,188,94,0,241,242,5,0,0,1,242,9,1,0,0,0,243,1091,
        3,12,6,0,244,245,5,273,0,0,245,1091,3,222,111,0,246,247,5,273,0,
        0,247,248,3,222,111,0,248,249,5,1,0,0,249,250,3,222,111,0,250,1091,
        1,0,0,0,251,252,5,51,0,0,252,256,5,40,0,0,253,254,5,112,0,0,254,
        255,5,171,0,0,255,257,5,88,0,0,256,253,1,0,0,0,256,257,1,0,0,0,257,
        258,1,0,0,0,258,259,3,222,111,0,259,260,5,275,0,0,260,263,3,222,
        111,0,261,262,5,44,0,0,262,264,3,152,76,0,263,261,1,0,0,0,263,264,
        1,0,0,0,264,267,1,0,0,0,265,266,5,31,0,0,266,268,3,218,109,0,267,
        265,1,0,0,0,267,268,1,0,0,0,268,271,1,0,0,0,269,270,5,288,0,0,270,
        272,3,22,11,0,271,269,1,0,0,0,271,272,1,0,0,0,272,1091,1,0,0,0,273,
        274,5,78,0,0,274,277,5,40,0,0,275,276,5,112,0,0,276,278,5,88,0,0,
        277,275,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,281,3,222,111,
        0,280,282,7,0,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,1091,1,0,0,
        0,283,284,5,51,0,0,284,288,5,229,0,0,285,286,5,112,0,0,286,287,5,
        171,0,0,287,289,5,88,0,0,288,285,1,0,0,0,288,289,1,0,0,0,289,290,
        1,0,0,0,290,293,3,210,105,0,291,292,5,31,0,0,292,294,3,218,109,0,
        293,291,1,0,0,0,293,294,1,0,0,0,294,297,1,0,0,0,295,296,5,288,0,
        0,296,298,3,22,11,0,297,295,1,0,0,0,297,298,1,0,0,0,298,1091,1,0,
        0,0,299,300,5,78,0,0,300,303,5,229,0,0,301,302,5,112,0,0,302,304,
        5,88,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,307,
        3,210,105,0,306,308,7,0,0,0,307,306,1,0,0,0,307,308,1,0,0,0,308,
        1091,1,0,0,0,309,310,5,23,0,0,310,311,5,229,0,0,311,312,3,210,105,
        0,312,313,5,212,0,0,313,314,5,255,0,0,314,315,3,222,111,0,315,1091,
        1,0,0,0,316,317,5,23,0,0,317,318,5,229,0,0,318,319,3,210,105,0,319,
        320,5,237,0,0,320,321,5,31,0,0,321,322,3,218,109,0,322,1091,1,0,
        0,0,323,326,5,51,0,0,324,325,5,183,0,0,325,327,5,214,0,0,326,324,
        1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,332,5,246,0,0,329,330,
        5,112,0,0,330,331,5,171,0,0,331,333,5,88,0,0,332,329,1,0,0,0,332,
        333,1,0,0,0,333,334,1,0,0,0,334,336,3,210,105,0,335,337,3,92,46,
        0,336,335,1,0,0,0,336,337,1,0,0,0,337,340,1,0,0,0,338,339,5,44,0,
        0,339,341,3,152,76,0,340,338,1,0,0,0,340,341,1,0,0,0,341,344,1,0,
        0,0,342,343,5,288,0,0,343,345,3,22,11,0,344,342,1,0,0,0,344,345,
        1,0,0,0,345,346,1,0,0,0,346,352,5,28,0,0,347,353,3,12,6,0,348,349,
        5,2,0,0,349,350,3,12,6,0,350,351,5,3,0,0,351,353,1,0,0,0,352,347,
        1,0,0,0,352,348,1,0,0,0,353,359,1,0,0,0,354,356,5,288,0,0,355,357,
        5,168,0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,360,
        5,63,0,0,359,354,1,0,0,0,359,360,1,0,0,0,360,1091,1,0,0,0,361,364,
        5,51,0,0,362,363,5,183,0,0,363,365,5,214,0,0,364,362,1,0,0,0,364,
        365,1,0,0,0,365,366,1,0,0,0,366,370,5,246,0,0,367,368,5,112,0,0,
        368,369,5,171,0,0,369,371,5,88,0,0,370,367,1,0,0,0,370,371,1,0,0,
        0,371,372,1,0,0,0,372,373,3,210,105,0,373,374,5,2,0,0,374,379,3,
        16,8,0,375,376,5,4,0,0,376,378,3,16,8,0,377,375,1,0,0,0,378,381,
        1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,382,1,0,0,0,381,379,
        1,0,0,0,382,385,5,3,0,0,383,384,5,44,0,0,384,386,3,152,76,0,385,
        383,1,0,0,0,385,386,1,0,0,0,386,389,1,0,0,0,387,388,5,288,0,0,388,
        390,3,22,11,0,389,387,1,0,0,0,389,390,1,0,0,0,390,1091,1,0,0,0,391,
        392,5,78,0,0,392,395,5,246,0,0,393,394,5,112,0,0,394,396,5,88,0,
        0,395,393,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,1091,3,210,
        105,0,398,399,5,120,0,0,399,400,5,123,0,0,400,402,3,210,105,0,401,
        403,3,92,46,0,402,401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,
        405,3,12,6,0,405,1091,1,0,0,0,406,407,5,70,0,0,407,408,5,99,0,0,
        408,411,3,210,105,0,409,410,5,286,0,0,410,412,3,122,61,0,411,409,
        1,0,0,0,411,412,1,0,0,0,412,1091,1,0,0,0,413,414,5,260,0,0,414,415,
        5,246,0,0,415,1091,3,210,105,0,416,417,5,44,0,0,417,418,5,179,0,
        0,418,419,5,246,0,0,419,420,3,210,105,0,420,423,5,126,0,0,421,424,
        3,152,76,0,422,424,5,172,0,0,423,421,1,0,0,0,423,422,1,0,0,0,424,
        1091,1,0,0,0,425,426,5,44,0,0,426,427,5,179,0,0,427,428,5,284,0,
        0,428,429,3,210,105,0,429,432,5,126,0,0,430,433,3,152,76,0,431,433,
        5,172,0,0,432,430,1,0,0,0,432,431,1,0,0,0,433,1091,1,0,0,0,434,435,
        5,44,0,0,435,436,5,179,0,0,436,437,5,42,0,0,437,438,3,210,105,0,
        438,441,5,126,0,0,439,442,3,152,76,0,440,442,5,172,0,0,441,439,1,
        0,0,0,441,440,1,0,0,0,442,1091,1,0,0,0,443,444,5,23,0,0,444,447,
        5,246,0,0,445,446,5,112,0,0,446,448,5,88,0,0,447,445,1,0,0,0,447,
        448,1,0,0,0,448,449,1,0,0,0,449,450,3,210,105,0,450,451,5,212,0,
        0,451,452,5,255,0,0,452,453,3,210,105,0,453,1091,1,0,0,0,454,455,
        5,23,0,0,455,458,5,246,0,0,456,457,5,112,0,0,457,459,5,88,0,0,458,
        456,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,461,3,210,105,0,
        461,462,5,19,0,0,462,466,5,42,0,0,463,464,5,112,0,0,464,465,5,171,
        0,0,465,467,5,88,0,0,466,463,1,0,0,0,466,467,1,0,0,0,467,468,1,0,
        0,0,468,469,3,18,9,0,469,1091,1,0,0,0,470,471,5,23,0,0,471,474,5,
        246,0,0,472,473,5,112,0,0,473,475,5,88,0,0,474,472,1,0,0,0,474,475,
        1,0,0,0,475,476,1,0,0,0,476,477,3,210,105,0,477,478,5,212,0,0,478,
        481,5,42,0,0,479,480,5,112,0,0,480,482,5,88,0,0,481,479,1,0,0,0,
        481,482,1,0,0,0,482,483,1,0,0,0,483,484,3,222,111,0,484,485,5,255,
        0,0,485,486,3,222,111,0,486,1091,1,0,0,0,487,488,5,23,0,0,488,491,
        5,246,0,0,489,490,5,112,0,0,490,492,5,88,0,0,491,489,1,0,0,0,491,
        492,1,0,0,0,492,493,1,0,0,0,493,494,3,210,105,0,494,495,5,78,0,0,
        495,498,5,42,0,0,496,497,5,112,0,0,497,499,5,88,0,0,498,496,1,0,
        0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,501,3,210,105,0,501,1091,
        1,0,0,0,502,503,5,23,0,0,503,506,5,246,0,0,504,505,5,112,0,0,505,
        507,5,88,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,
        509,3,210,105,0,509,510,5,23,0,0,510,511,5,42,0,0,511,512,3,222,
        111,0,512,513,5,237,0,0,513,514,5,63,0,0,514,515,5,262,0,0,515,516,
        3,168,84,0,516,1091,1,0,0,0,517,518,5,23,0,0,518,519,5,246,0,0,519,
        520,3,210,105,0,520,521,5,237,0,0,521,522,5,31,0,0,522,523,3,218,
        109,0,523,1091,1,0,0,0,524,525,5,23,0,0,525,526,5,246,0,0,526,527,
        3,210,105,0,527,528,5,237,0,0,528,529,5,205,0,0,529,530,3,24,12,
        0,530,1091,1,0,0,0,531,532,5,23,0,0,532,533,5,246,0,0,533,534,3,
        210,105,0,534,535,5,87,0,0,535,548,3,222,111,0,536,545,5,2,0,0,537,
        542,3,202,101,0,538,539,5,4,0,0,539,541,3,202,101,0,540,538,1,0,
        0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,546,1,0,
        0,0,544,542,1,0,0,0,545,537,1,0,0,0,545,546,1,0,0,0,546,547,1,0,
        0,0,547,549,5,3,0,0,548,536,1,0,0,0,548,549,1,0,0,0,549,552,1,0,
        0,0,550,551,5,286,0,0,551,553,3,122,61,0,552,550,1,0,0,0,552,553,
        1,0,0,0,553,1091,1,0,0,0,554,555,5,24,0,0,555,558,3,210,105,0,556,
        557,5,288,0,0,557,559,3,22,11,0,558,556,1,0,0,0,558,559,1,0,0,0,
        559,1091,1,0,0,0,560,563,5,51,0,0,561,562,5,183,0,0,562,564,5,214,
        0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,566,5,156,
        0,0,566,570,5,284,0,0,567,568,5,112,0,0,568,569,5,171,0,0,569,571,
        5,88,0,0,570,567,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,576,
        3,210,105,0,573,574,5,102,0,0,574,575,5,197,0,0,575,577,3,162,81,
        0,576,573,1,0,0,0,576,577,1,0,0,0,577,580,1,0,0,0,578,579,5,44,0,
        0,579,581,3,152,76,0,580,578,1,0,0,0,580,581,1,0,0,0,581,584,1,0,
        0,0,582,583,5,288,0,0,583,585,3,22,11,0,584,582,1,0,0,0,584,585,
        1,0,0,0,585,586,1,0,0,0,586,587,5,28,0,0,587,588,3,12,6,0,588,1091,
        1,0,0,0,589,592,5,51,0,0,590,591,5,183,0,0,591,593,5,214,0,0,592,
        590,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,595,5,284,0,0,595,
        598,3,210,105,0,596,597,5,44,0,0,597,599,3,152,76,0,598,596,1,0,
        0,0,598,599,1,0,0,0,599,602,1,0,0,0,600,601,5,232,0,0,601,603,7,
        1,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,605,5,
        28,0,0,605,606,3,12,6,0,606,1091,1,0,0,0,607,608,5,211,0,0,608,609,
        5,156,0,0,609,610,5,284,0,0,610,1091,3,210,105,0,611,612,5,78,0,
        0,612,613,5,156,0,0,613,616,5,284,0,0,614,615,5,112,0,0,615,617,
        5,88,0,0,616,614,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,1091,
        3,210,105,0,619,620,5,23,0,0,620,621,5,156,0,0,621,624,5,284,0,0,
        622,623,5,112,0,0,623,625,5,88,0,0,624,622,1,0,0,0,624,625,1,0,0,
        0,625,626,1,0,0,0,626,627,3,210,105,0,627,628,5,212,0,0,628,629,
        5,255,0,0,629,630,3,210,105,0,630,1091,1,0,0,0,631,632,5,23,0,0,
        632,633,5,156,0,0,633,634,5,284,0,0,634,635,3,210,105,0,635,636,
        5,237,0,0,636,637,5,205,0,0,637,638,3,24,12,0,638,1091,1,0,0,0,639,
        640,5,78,0,0,640,643,5,284,0,0,641,642,5,112,0,0,642,644,5,88,0,
        0,643,641,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,1091,3,210,
        105,0,646,647,5,23,0,0,647,648,5,284,0,0,648,649,3,210,105,0,649,
        650,5,212,0,0,650,651,5,255,0,0,651,652,3,210,105,0,652,1091,1,0,
        0,0,653,654,5,23,0,0,654,655,5,284,0,0,655,656,3,210,105,0,656,657,
        5,237,0,0,657,658,5,31,0,0,658,659,3,218,109,0,659,1091,1,0,0,0,
        660,661,5,36,0,0,661,662,3,210,105,0,662,671,5,2,0,0,663,668,3,202,
        101,0,664,665,5,4,0,0,665,667,3,202,101,0,666,664,1,0,0,0,667,670,
        1,0,0,0,668,666,1,0,0,0,668,669,1,0,0,0,669,672,1,0,0,0,670,668,
        1,0,0,0,671,663,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,674,
        5,3,0,0,674,1091,1,0,0,0,675,676,5,51,0,0,676,677,5,221,0,0,677,
        681,3,222,111,0,678,679,5,288,0,0,679,680,5,20,0,0,680,682,3,216,
        108,0,681,678,1,0,0,0,681,682,1,0,0,0,682,685,1,0,0,0,683,684,5,
        115,0,0,684,686,3,222,111,0,685,683,1,0,0,0,685,686,1,0,0,0,686,
        1091,1,0,0,0,687,688,5,78,0,0,688,689,5,221,0,0,689,692,3,222,111,
        0,690,691,5,115,0,0,691,693,3,222,111,0,692,690,1,0,0,0,692,693,
        1,0,0,0,693,1091,1,0,0,0,694,695,5,103,0,0,695,696,3,220,110,0,696,
        697,5,255,0,0,697,702,3,218,109,0,698,699,5,4,0,0,699,701,3,218,
        109,0,700,698,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,
        0,0,0,703,708,1,0,0,0,704,702,1,0,0,0,705,706,5,288,0,0,706,707,
        5,20,0,0,707,709,5,182,0,0,708,705,1,0,0,0,708,709,1,0,0,0,709,713,
        1,0,0,0,710,711,5,104,0,0,711,712,5,35,0,0,712,714,3,216,108,0,713,
        710,1,0,0,0,713,714,1,0,0,0,714,717,1,0,0,0,715,716,5,115,0,0,716,
        718,3,222,111,0,717,715,1,0,0,0,717,718,1,0,0,0,718,1091,1,0,0,0,
        719,723,5,219,0,0,720,721,5,20,0,0,721,722,5,182,0,0,722,724,5,97,
        0,0,723,720,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,726,3,220,
        110,0,726,727,5,99,0,0,727,732,3,218,109,0,728,729,5,4,0,0,729,731,
        3,218,109,0,730,728,1,0,0,0,731,734,1,0,0,0,732,730,1,0,0,0,732,
        733,1,0,0,0,733,738,1,0,0,0,734,732,1,0,0,0,735,736,5,104,0,0,736,
        737,5,35,0,0,737,739,3,216,108,0,738,735,1,0,0,0,738,739,1,0,0,0,
        739,742,1,0,0,0,740,741,5,115,0,0,741,743,3,222,111,0,742,740,1,
        0,0,0,742,743,1,0,0,0,743,1091,1,0,0,0,744,745,5,237,0,0,745,749,
        5,221,0,0,746,750,5,22,0,0,747,750,5,169,0,0,748,750,3,222,111,0,
        749,746,1,0,0,0,749,747,1,0,0,0,749,748,1,0,0,0,750,753,1,0,0,0,
        751,752,5,115,0,0,752,754,3,222,111,0,753,751,1,0,0,0,753,754,1,
        0,0,0,754,1091,1,0,0,0,755,766,5,103,0,0,756,761,3,208,104,0,757,
        758,5,4,0,0,758,760,3,208,104,0,759,757,1,0,0,0,760,763,1,0,0,0,
        761,759,1,0,0,0,761,762,1,0,0,0,762,767,1,0,0,0,763,761,1,0,0,0,
        764,765,5,22,0,0,765,767,5,204,0,0,766,756,1,0,0,0,766,764,1,0,0,
        0,767,768,1,0,0,0,768,770,5,179,0,0,769,771,7,2,0,0,770,769,1,0,
        0,0,770,771,1,0,0,0,771,772,1,0,0,0,772,773,3,210,105,0,773,774,
        5,255,0,0,774,778,3,218,109,0,775,776,5,288,0,0,776,777,5,103,0,
        0,777,779,5,182,0,0,778,775,1,0,0,0,778,779,1,0,0,0,779,1091,1,0,
        0,0,780,791,5,71,0,0,781,786,3,208,104,0,782,783,5,4,0,0,783,785,
        3,208,104,0,784,782,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,
        787,1,0,0,0,787,792,1,0,0,0,788,786,1,0,0,0,789,790,5,22,0,0,790,
        792,5,204,0,0,791,781,1,0,0,0,791,789,1,0,0,0,792,793,1,0,0,0,793,
        795,5,179,0,0,794,796,7,2,0,0,795,794,1,0,0,0,795,796,1,0,0,0,796,
        797,1,0,0,0,797,798,3,210,105,0,798,799,5,255,0,0,799,800,3,218,
        109,0,800,1091,1,0,0,0,801,805,5,219,0,0,802,803,5,103,0,0,803,804,
        5,182,0,0,804,806,5,97,0,0,805,802,1,0,0,0,805,806,1,0,0,0,806,817,
        1,0,0,0,807,812,3,208,104,0,808,809,5,4,0,0,809,811,3,208,104,0,
        810,808,1,0,0,0,811,814,1,0,0,0,812,810,1,0,0,0,812,813,1,0,0,0,
        813,818,1,0,0,0,814,812,1,0,0,0,815,816,5,22,0,0,816,818,5,204,0,
        0,817,807,1,0,0,0,817,815,1,0,0,0,818,819,1,0,0,0,819,821,5,179,
        0,0,820,822,7,2,0,0,821,820,1,0,0,0,821,822,1,0,0,0,822,823,1,0,
        0,0,823,824,3,210,105,0,824,825,5,99,0,0,825,826,3,218,109,0,826,
        1091,1,0,0,0,827,828,5,239,0,0,828,834,5,105,0,0,829,831,5,179,0,
        0,830,832,5,246,0,0,831,830,1,0,0,0,831,832,1,0,0,0,832,833,1,0,
        0,0,833,835,3,210,105,0,834,829,1,0,0,0,834,835,1,0,0,0,835,1091,
        1,0,0,0,836,848,5,89,0,0,837,838,5,2,0,0,838,843,3,196,98,0,839,
        840,5,4,0,0,840,842,3,196,98,0,841,839,1,0,0,0,842,845,1,0,0,0,843,
        841,1,0,0,0,843,844,1,0,0,0,844,846,1,0,0,0,845,843,1,0,0,0,846,
        847,5,3,0,0,847,849,1,0,0,0,848,837,1,0,0,0,848,849,1,0,0,0,849,
        850,1,0,0,0,850,1091,3,10,5,0,851,852,5,89,0,0,852,854,5,24,0,0,
        853,855,5,282,0,0,854,853,1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,
        0,856,1091,3,10,5,0,857,858,5,239,0,0,858,859,5,51,0,0,859,860,5,
        246,0,0,860,1091,3,210,105,0,861,862,5,239,0,0,862,863,5,51,0,0,
        863,864,5,229,0,0,864,1091,3,210,105,0,865,866,5,239,0,0,866,867,
        5,51,0,0,867,868,5,284,0,0,868,1091,3,210,105,0,869,870,5,239,0,
        0,870,871,5,51,0,0,871,872,5,156,0,0,872,873,5,284,0,0,873,1091,
        3,210,105,0,874,875,5,239,0,0,875,878,5,247,0,0,876,877,7,3,0,0,
        877,879,3,210,105,0,878,876,1,0,0,0,878,879,1,0,0,0,879,886,1,0,
        0,0,880,881,5,144,0,0,881,884,3,152,76,0,882,883,5,84,0,0,883,885,
        3,152,76,0,884,882,1,0,0,0,884,885,1,0,0,0,885,887,1,0,0,0,886,880,
        1,0,0,0,886,887,1,0,0,0,887,1091,1,0,0,0,888,889,5,239,0,0,889,892,
        5,230,0,0,890,891,7,3,0,0,891,893,3,222,111,0,892,890,1,0,0,0,892,
        893,1,0,0,0,893,900,1,0,0,0,894,895,5,144,0,0,895,898,3,152,76,0,
        896,897,5,84,0,0,897,899,3,152,76,0,898,896,1,0,0,0,898,899,1,0,
        0,0,899,901,1,0,0,0,900,894,1,0,0,0,900,901,1,0,0,0,901,1091,1,0,
        0,0,902,903,5,239,0,0,903,910,5,41,0,0,904,905,5,144,0,0,905,908,
        3,152,76,0,906,907,5,84,0,0,907,909,3,152,76,0,908,906,1,0,0,0,908,
        909,1,0,0,0,909,911,1,0,0,0,910,904,1,0,0,0,910,911,1,0,0,0,911,
        1091,1,0,0,0,912,913,5,239,0,0,913,914,5,43,0,0,914,916,7,3,0,0,
        915,917,3,210,105,0,916,915,1,0,0,0,916,917,1,0,0,0,917,924,1,0,
        0,0,918,919,5,144,0,0,919,922,3,152,76,0,920,921,5,84,0,0,921,923,
        3,152,76,0,922,920,1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,918,
        1,0,0,0,924,925,1,0,0,0,925,1091,1,0,0,0,926,927,5,239,0,0,927,928,
        5,242,0,0,928,929,5,97,0,0,929,1091,3,210,105,0,930,931,5,239,0,
        0,931,932,5,242,0,0,932,933,5,97,0,0,933,934,5,2,0,0,934,935,3,12,
        6,0,935,936,5,3,0,0,936,1091,1,0,0,0,937,939,5,239,0,0,938,940,5,
        54,0,0,939,938,1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,941,944,5,
        222,0,0,942,943,7,3,0,0,943,945,3,222,111,0,944,942,1,0,0,0,944,
        945,1,0,0,0,945,1091,1,0,0,0,946,947,5,239,0,0,947,948,5,221,0,0,
        948,951,5,105,0,0,949,950,7,3,0,0,950,952,3,222,111,0,951,949,1,
        0,0,0,951,952,1,0,0,0,952,1091,1,0,0,0,953,954,5,73,0,0,954,1091,
        3,210,105,0,955,956,5,72,0,0,956,1091,3,210,105,0,957,958,5,239,
        0,0,958,965,5,101,0,0,959,960,5,144,0,0,960,963,3,152,76,0,961,962,
        5,84,0,0,962,964,3,152,76,0,963,961,1,0,0,0,963,964,1,0,0,0,964,
        966,1,0,0,0,965,959,1,0,0,0,965,966,1,0,0,0,966,1091,1,0,0,0,967,
        968,5,239,0,0,968,975,5,236,0,0,969,970,5,144,0,0,970,973,3,152,
        76,0,971,972,5,84,0,0,972,974,3,152,76,0,973,971,1,0,0,0,973,974,
        1,0,0,0,974,976,1,0,0,0,975,969,1,0,0,0,975,976,1,0,0,0,976,1091,
        1,0,0,0,977,978,5,237,0,0,978,979,5,236,0,0,979,980,3,210,105,0,
        980,981,5,296,0,0,981,982,3,120,60,0,982,1091,1,0,0,0,983,984,5,
        215,0,0,984,985,5,236,0,0,985,1091,3,210,105,0,986,987,5,241,0,0,
        987,996,5,257,0,0,988,993,3,198,99,0,989,990,5,4,0,0,990,992,3,198,
        99,0,991,989,1,0,0,0,992,995,1,0,0,0,993,991,1,0,0,0,993,994,1,0,
        0,0,994,997,1,0,0,0,995,993,1,0,0,0,996,988,1,0,0,0,996,997,1,0,
        0,0,997,1091,1,0,0,0,998,1000,5,45,0,0,999,1001,5,291,0,0,1000,999,
        1,0,0,0,1000,1001,1,0,0,0,1001,1091,1,0,0,0,1002,1004,5,223,0,0,
        1003,1005,5,291,0,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1091,
        1,0,0,0,1006,1007,5,203,0,0,1007,1008,3,222,111,0,1008,1009,5,99,
        0,0,1009,1010,3,10,5,0,1010,1091,1,0,0,0,1011,1012,5,66,0,0,1012,
        1013,5,203,0,0,1013,1091,3,222,111,0,1014,1015,5,87,0,0,1015,1025,
        3,222,111,0,1016,1017,5,275,0,0,1017,1022,3,120,60,0,1018,1019,5,
        4,0,0,1019,1021,3,120,60,0,1020,1018,1,0,0,0,1021,1024,1,0,0,0,1022,
        1020,1,0,0,0,1022,1023,1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,
        0,1025,1016,1,0,0,0,1025,1026,1,0,0,0,1026,1091,1,0,0,0,1027,1028,
        5,87,0,0,1028,1029,5,114,0,0,1029,1039,3,152,76,0,1030,1031,5,275,
        0,0,1031,1036,3,120,60,0,1032,1033,5,4,0,0,1033,1035,3,120,60,0,
        1034,1032,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,1036,1037,
        1,0,0,0,1037,1040,1,0,0,0,1038,1036,1,0,0,0,1039,1030,1,0,0,0,1039,
        1040,1,0,0,0,1040,1091,1,0,0,0,1041,1042,5,73,0,0,1042,1043,5,119,
        0,0,1043,1091,3,222,111,0,1044,1045,5,73,0,0,1045,1046,5,187,0,0,
        1046,1091,3,222,111,0,1047,1048,5,237,0,0,1048,1049,5,194,0,0,1049,
        1091,3,206,103,0,1050,1051,5,237,0,0,1051,1052,5,253,0,0,1052,1055,
        5,295,0,0,1053,1056,5,147,0,0,1054,1056,3,120,60,0,1055,1053,1,0,
        0,0,1055,1054,1,0,0,0,1056,1091,1,0,0,0,1057,1058,5,272,0,0,1058,
        1059,3,210,105,0,1059,1060,5,237,0,0,1060,1065,3,194,97,0,1061,1062,
        5,4,0,0,1062,1064,3,194,97,0,1063,1061,1,0,0,0,1064,1067,1,0,0,0,
        1065,1063,1,0,0,0,1065,1066,1,0,0,0,1066,1070,1,0,0,0,1067,1065,
        1,0,0,0,1068,1069,5,286,0,0,1069,1071,3,122,61,0,1070,1068,1,0,0,
        0,1070,1071,1,0,0,0,1071,1091,1,0,0,0,1072,1073,5,158,0,0,1073,1074,
        5,123,0,0,1074,1079,3,210,105,0,1075,1077,5,28,0,0,1076,1075,1,0,
        0,0,1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,1080,3,222,111,0,1079,
        1076,1,0,0,0,1079,1080,1,0,0,0,1080,1081,1,0,0,0,1081,1082,5,275,
        0,0,1082,1083,3,60,30,0,1083,1084,5,179,0,0,1084,1086,3,120,60,0,
        1085,1087,3,178,89,0,1086,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1086,
        1,0,0,0,1088,1089,1,0,0,0,1089,1091,1,0,0,0,1090,243,1,0,0,0,1090,
        244,1,0,0,0,1090,246,1,0,0,0,1090,251,1,0,0,0,1090,273,1,0,0,0,1090,
        283,1,0,0,0,1090,299,1,0,0,0,1090,309,1,0,0,0,1090,316,1,0,0,0,1090,
        323,1,0,0,0,1090,361,1,0,0,0,1090,391,1,0,0,0,1090,398,1,0,0,0,1090,
        406,1,0,0,0,1090,413,1,0,0,0,1090,416,1,0,0,0,1090,425,1,0,0,0,1090,
        434,1,0,0,0,1090,443,1,0,0,0,1090,454,1,0,0,0,1090,470,1,0,0,0,1090,
        487,1,0,0,0,1090,502,1,0,0,0,1090,517,1,0,0,0,1090,524,1,0,0,0,1090,
        531,1,0,0,0,1090,554,1,0,0,0,1090,560,1,0,0,0,1090,589,1,0,0,0,1090,
        607,1,0,0,0,1090,611,1,0,0,0,1090,619,1,0,0,0,1090,631,1,0,0,0,1090,
        639,1,0,0,0,1090,646,1,0,0,0,1090,653,1,0,0,0,1090,660,1,0,0,0,1090,
        675,1,0,0,0,1090,687,1,0,0,0,1090,694,1,0,0,0,1090,719,1,0,0,0,1090,
        744,1,0,0,0,1090,755,1,0,0,0,1090,780,1,0,0,0,1090,801,1,0,0,0,1090,
        827,1,0,0,0,1090,836,1,0,0,0,1090,851,1,0,0,0,1090,857,1,0,0,0,1090,
        861,1,0,0,0,1090,865,1,0,0,0,1090,869,1,0,0,0,1090,874,1,0,0,0,1090,
        888,1,0,0,0,1090,902,1,0,0,0,1090,912,1,0,0,0,1090,926,1,0,0,0,1090,
        930,1,0,0,0,1090,937,1,0,0,0,1090,946,1,0,0,0,1090,953,1,0,0,0,1090,
        955,1,0,0,0,1090,957,1,0,0,0,1090,967,1,0,0,0,1090,977,1,0,0,0,1090,
        983,1,0,0,0,1090,986,1,0,0,0,1090,998,1,0,0,0,1090,1002,1,0,0,0,
        1090,1006,1,0,0,0,1090,1011,1,0,0,0,1090,1014,1,0,0,0,1090,1027,
        1,0,0,0,1090,1041,1,0,0,0,1090,1044,1,0,0,0,1090,1047,1,0,0,0,1090,
        1050,1,0,0,0,1090,1057,1,0,0,0,1090,1072,1,0,0,0,1091,11,1,0,0,0,
        1092,1094,3,14,7,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,
        1,0,0,0,1095,1096,3,30,15,0,1096,13,1,0,0,0,1097,1099,5,288,0,0,
        1098,1100,5,210,0,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,1101,
        1,0,0,0,1101,1106,3,54,27,0,1102,1103,5,4,0,0,1103,1105,3,54,27,
        0,1104,1102,1,0,0,0,1105,1108,1,0,0,0,1106,1104,1,0,0,0,1106,1107,
        1,0,0,0,1107,15,1,0,0,0,1108,1106,1,0,0,0,1109,1112,3,18,9,0,1110,
        1112,3,20,10,0,1111,1109,1,0,0,0,1111,1110,1,0,0,0,1112,17,1,0,0,
        0,1113,1114,3,210,105,0,1114,1117,3,168,84,0,1115,1116,5,171,0,0,
        1116,1118,5,172,0,0,1117,1115,1,0,0,0,1117,1118,1,0,0,0,1118,1121,
        1,0,0,0,1119,1120,5,44,0,0,1120,1122,3,152,76,0,1121,1119,1,0,0,
        0,1121,1122,1,0,0,0,1122,1125,1,0,0,0,1123,1124,5,288,0,0,1124,1126,
        3,22,11,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,19,1,0,0,0,1127,
        1128,5,144,0,0,1128,1131,3,210,105,0,1129,1130,7,4,0,0,1130,1132,
        5,205,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,21,1,0,0,0,1133,
        1134,5,2,0,0,1134,1135,3,24,12,0,1135,1136,5,3,0,0,1136,23,1,0,0,
        0,1137,1142,3,26,13,0,1138,1139,5,4,0,0,1139,1141,3,26,13,0,1140,
        1138,1,0,0,0,1141,1144,1,0,0,0,1142,1140,1,0,0,0,1142,1143,1,0,0,
        0,1143,25,1,0,0,0,1144,1142,1,0,0,0,1145,1146,3,222,111,0,1146,1147,
        5,296,0,0,1147,1148,3,28,14,0,1148,27,1,0,0,0,1149,1152,5,67,0,0,
        1150,1152,3,120,60,0,1151,1149,1,0,0,0,1151,1150,1,0,0,0,1152,29,
        1,0,0,0,1153,1164,3,36,18,0,1154,1155,5,184,0,0,1155,1156,5,35,0,
        0,1156,1161,3,40,20,0,1157,1158,5,4,0,0,1158,1160,3,40,20,0,1159,
        1157,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,1161,1162,1,0,0,
        0,1162,1165,1,0,0,0,1163,1161,1,0,0,0,1164,1154,1,0,0,0,1164,1165,
        1,0,0,0,1165,1171,1,0,0,0,1166,1167,5,177,0,0,1167,1169,3,34,17,
        0,1168,1170,7,5,0,0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,1172,
        1,0,0,0,1171,1166,1,0,0,0,1171,1172,1,0,0,0,1172,1186,1,0,0,0,1173,
        1174,5,145,0,0,1174,1187,3,32,16,0,1175,1176,5,92,0,0,1176,1178,
        7,6,0,0,1177,1179,3,34,17,0,1178,1177,1,0,0,0,1178,1179,1,0,0,0,
        1179,1180,1,0,0,0,1180,1184,7,5,0,0,1181,1185,5,181,0,0,1182,1183,
        5,288,0,0,1183,1185,5,252,0,0,1184,1181,1,0,0,0,1184,1182,1,0,0,
        0,1185,1187,1,0,0,0,1186,1173,1,0,0,0,1186,1175,1,0,0,0,1186,1187,
        1,0,0,0,1187,31,1,0,0,0,1188,1191,5,22,0,0,1189,1191,3,34,17,0,1190,
        1188,1,0,0,0,1190,1189,1,0,0,0,1191,33,1,0,0,0,1192,1193,7,7,0,0,
        1193,35,1,0,0,0,1194,1195,6,18,-1,0,1195,1196,3,38,19,0,1196,1211,
        1,0,0,0,1197,1198,10,2,0,0,1198,1200,5,121,0,0,1199,1201,3,56,28,
        0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,1202,1,0,0,0,1202,1210,
        3,36,18,3,1203,1204,10,1,0,0,1204,1206,7,8,0,0,1205,1207,3,56,28,
        0,1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1210,
        3,36,18,2,1209,1197,1,0,0,0,1209,1203,1,0,0,0,1210,1213,1,0,0,0,
        1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,37,1,0,0,0,1213,1211,1,
        0,0,0,1214,1231,3,42,21,0,1215,1216,5,246,0,0,1216,1231,3,210,105,
        0,1217,1218,5,281,0,0,1218,1223,3,120,60,0,1219,1220,5,4,0,0,1220,
        1222,3,120,60,0,1221,1219,1,0,0,0,1222,1225,1,0,0,0,1223,1221,1,
        0,0,0,1223,1224,1,0,0,0,1224,1231,1,0,0,0,1225,1223,1,0,0,0,1226,
        1227,5,2,0,0,1227,1228,3,30,15,0,1228,1229,5,3,0,0,1229,1231,1,0,
        0,0,1230,1214,1,0,0,0,1230,1215,1,0,0,0,1230,1217,1,0,0,0,1230,1226,
        1,0,0,0,1231,39,1,0,0,0,1232,1234,3,120,60,0,1233,1235,7,9,0,0,1234,
        1233,1,0,0,0,1234,1235,1,0,0,0,1235,1238,1,0,0,0,1236,1237,5,174,
        0,0,1237,1239,7,10,0,0,1238,1236,1,0,0,0,1238,1239,1,0,0,0,1239,
        41,1,0,0,0,1240,1242,5,234,0,0,1241,1243,3,56,28,0,1242,1241,1,0,
        0,0,1242,1243,1,0,0,0,1243,1244,1,0,0,0,1244,1249,3,58,29,0,1245,
        1246,5,4,0,0,1246,1248,3,58,29,0,1247,1245,1,0,0,0,1248,1251,1,0,
        0,0,1249,1247,1,0,0,0,1249,1250,1,0,0,0,1250,1261,1,0,0,0,1251,1249,
        1,0,0,0,1252,1253,5,99,0,0,1253,1258,3,60,30,0,1254,1255,5,4,0,0,
        1255,1257,3,60,30,0,1256,1254,1,0,0,0,1257,1260,1,0,0,0,1258,1256,
        1,0,0,0,1258,1259,1,0,0,0,1259,1262,1,0,0,0,1260,1258,1,0,0,0,1261,
        1252,1,0,0,0,1261,1262,1,0,0,0,1262,1265,1,0,0,0,1263,1264,5,286,
        0,0,1264,1266,3,122,61,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,
        1270,1,0,0,0,1267,1268,5,107,0,0,1268,1269,5,35,0,0,1269,1271,3,
        44,22,0,1270,1267,1,0,0,0,1270,1271,1,0,0,0,1271,1274,1,0,0,0,1272,
        1273,5,110,0,0,1273,1275,3,122,61,0,1274,1272,1,0,0,0,1274,1275,
        1,0,0,0,1275,1285,1,0,0,0,1276,1277,5,287,0,0,1277,1282,3,50,25,
        0,1278,1279,5,4,0,0,1279,1281,3,50,25,0,1280,1278,1,0,0,0,1281,1284,
        1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,1286,1,0,0,0,1284,
        1282,1,0,0,0,1285,1276,1,0,0,0,1285,1286,1,0,0,0,1286,43,1,0,0,0,
        1287,1289,3,56,28,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,
        1,0,0,0,1290,1295,3,46,23,0,1291,1292,5,4,0,0,1292,1294,3,46,23,
        0,1293,1291,1,0,0,0,1294,1297,1,0,0,0,1295,1293,1,0,0,0,1295,1296,
        1,0,0,0,1296,45,1,0,0,0,1297,1295,1,0,0,0,1298,1339,3,48,24,0,1299,
        1300,5,224,0,0,1300,1309,5,2,0,0,1301,1306,3,48,24,0,1302,1303,5,
        4,0,0,1303,1305,3,48,24,0,1304,1302,1,0,0,0,1305,1308,1,0,0,0,1306,
        1304,1,0,0,0,1306,1307,1,0,0,0,1307,1310,1,0,0,0,1308,1306,1,0,0,
        0,1309,1301,1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,0,0,0,1311,1339,
        5,3,0,0,1312,1313,5,53,0,0,1313,1322,5,2,0,0,1314,1319,3,48,24,0,
        1315,1316,5,4,0,0,1316,1318,3,48,24,0,1317,1315,1,0,0,0,1318,1321,
        1,0,0,0,1319,1317,1,0,0,0,1319,1320,1,0,0,0,1320,1323,1,0,0,0,1321,
        1319,1,0,0,0,1322,1314,1,0,0,0,1322,1323,1,0,0,0,1323,1324,1,0,0,
        0,1324,1339,5,3,0,0,1325,1326,5,108,0,0,1326,1327,5,238,0,0,1327,
        1328,5,2,0,0,1328,1333,3,48,24,0,1329,1330,5,4,0,0,1330,1332,3,48,
        24,0,1331,1329,1,0,0,0,1332,1335,1,0,0,0,1333,1331,1,0,0,0,1333,
        1334,1,0,0,0,1334,1336,1,0,0,0,1335,1333,1,0,0,0,1336,1337,5,3,0,
        0,1337,1339,1,0,0,0,1338,1298,1,0,0,0,1338,1299,1,0,0,0,1338,1312,
        1,0,0,0,1338,1325,1,0,0,0,1339,47,1,0,0,0,1340,1349,5,2,0,0,1341,
        1346,3,120,60,0,1342,1343,5,4,0,0,1343,1345,3,120,60,0,1344,1342,
        1,0,0,0,1345,1348,1,0,0,0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,
        1350,1,0,0,0,1348,1346,1,0,0,0,1349,1341,1,0,0,0,1349,1350,1,0,0,
        0,1350,1351,1,0,0,0,1351,1354,5,3,0,0,1352,1354,3,120,60,0,1353,
        1340,1,0,0,0,1353,1352,1,0,0,0,1354,49,1,0,0,0,1355,1356,3,222,111,
        0,1356,1357,5,28,0,0,1357,1358,5,2,0,0,1358,1359,3,52,26,0,1359,
        1360,5,3,0,0,1360,51,1,0,0,0,1361,1363,3,222,111,0,1362,1361,1,0,
        0,0,1362,1363,1,0,0,0,1363,1374,1,0,0,0,1364,1365,5,190,0,0,1365,
        1366,5,35,0,0,1366,1371,3,120,60,0,1367,1368,5,4,0,0,1368,1370,3,
        120,60,0,1369,1367,1,0,0,0,1370,1373,1,0,0,0,1371,1369,1,0,0,0,1371,
        1372,1,0,0,0,1372,1375,1,0,0,0,1373,1371,1,0,0,0,1374,1364,1,0,0,
        0,1374,1375,1,0,0,0,1375,1386,1,0,0,0,1376,1377,5,184,0,0,1377,1378,
        5,35,0,0,1378,1383,3,40,20,0,1379,1380,5,4,0,0,1380,1382,3,40,20,
        0,1381,1379,1,0,0,0,1382,1385,1,0,0,0,1383,1381,1,0,0,0,1383,1384,
        1,0,0,0,1384,1387,1,0,0,0,1385,1383,1,0,0,0,1386,1376,1,0,0,0,1386,
        1387,1,0,0,0,1387,1389,1,0,0,0,1388,1390,3,182,91,0,1389,1388,1,
        0,0,0,1389,1390,1,0,0,0,1390,53,1,0,0,0,1391,1393,3,222,111,0,1392,
        1394,3,92,46,0,1393,1392,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,
        0,0,1395,1396,5,28,0,0,1396,1397,5,2,0,0,1397,1398,3,12,6,0,1398,
        1399,5,3,0,0,1399,55,1,0,0,0,1400,1401,7,11,0,0,1401,57,1,0,0,0,
        1402,1407,3,120,60,0,1403,1405,5,28,0,0,1404,1403,1,0,0,0,1404,1405,
        1,0,0,0,1405,1406,1,0,0,0,1406,1408,3,222,111,0,1407,1404,1,0,0,
        0,1407,1408,1,0,0,0,1408,1418,1,0,0,0,1409,1410,3,128,64,0,1410,
        1411,5,1,0,0,1411,1414,5,304,0,0,1412,1413,5,28,0,0,1413,1415,3,
        92,46,0,1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,1418,1,0,0,0,1416,
        1418,5,304,0,0,1417,1402,1,0,0,0,1417,1409,1,0,0,0,1417,1416,1,0,
        0,0,1418,59,1,0,0,0,1419,1420,6,30,-1,0,1420,1421,3,66,33,0,1421,
        1440,1,0,0,0,1422,1436,10,2,0,0,1423,1424,5,52,0,0,1424,1425,5,128,
        0,0,1425,1437,3,66,33,0,1426,1427,3,62,31,0,1427,1428,5,128,0,0,
        1428,1429,3,60,30,0,1429,1430,3,64,32,0,1430,1437,1,0,0,0,1431,1432,
        5,161,0,0,1432,1433,3,62,31,0,1433,1434,5,128,0,0,1434,1435,3,66,
        33,0,1435,1437,1,0,0,0,1436,1423,1,0,0,0,1436,1426,1,0,0,0,1436,
        1431,1,0,0,0,1437,1439,1,0,0,0,1438,1422,1,0,0,0,1439,1442,1,0,0,
        0,1440,1438,1,0,0,0,1440,1441,1,0,0,0,1441,61,1,0,0,0,1442,1440,
        1,0,0,0,1443,1445,5,118,0,0,1444,1443,1,0,0,0,1444,1445,1,0,0,0,
        1445,1459,1,0,0,0,1446,1448,5,142,0,0,1447,1449,5,186,0,0,1448,1447,
        1,0,0,0,1448,1449,1,0,0,0,1449,1459,1,0,0,0,1450,1452,5,220,0,0,
        1451,1453,5,186,0,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1459,
        1,0,0,0,1454,1456,5,100,0,0,1455,1457,5,186,0,0,1456,1455,1,0,0,
        0,1456,1457,1,0,0,0,1457,1459,1,0,0,0,1458,1444,1,0,0,0,1458,1446,
        1,0,0,0,1458,1450,1,0,0,0,1458,1454,1,0,0,0,1459,63,1,0,0,0,1460,
        1461,5,179,0,0,1461,1475,3,122,61,0,1462,1463,5,275,0,0,1463,1464,
        5,2,0,0,1464,1469,3,222,111,0,1465,1466,5,4,0,0,1466,1468,3,222,
        111,0,1467,1465,1,0,0,0,1468,1471,1,0,0,0,1469,1467,1,0,0,0,1469,
        1470,1,0,0,0,1470,1472,1,0,0,0,1471,1469,1,0,0,0,1472,1473,5,3,0,
        0,1473,1475,1,0,0,0,1474,1460,1,0,0,0,1474,1462,1,0,0,0,1475,65,
        1,0,0,0,1476,1483,3,76,38,0,1477,1478,5,248,0,0,1478,1479,3,68,34,
        0,1479,1480,5,2,0,0,1480,1481,3,120,60,0,1481,1482,5,3,0,0,1482,
        1484,1,0,0,0,1483,1477,1,0,0,0,1483,1484,1,0,0,0,1484,67,1,0,0,0,
        1485,1486,7,12,0,0,1486,69,1,0,0,0,1487,1488,7,13,0,0,1488,71,1,
        0,0,0,1489,1496,5,83,0,0,1490,1492,5,260,0,0,1491,1493,3,152,76,
        0,1492,1491,1,0,0,0,1492,1493,1,0,0,0,1493,1494,1,0,0,0,1494,1496,
        3,74,37,0,1495,1489,1,0,0,0,1495,1490,1,0,0,0,1496,73,1,0,0,0,1497,
        1498,5,288,0,0,1498,1502,5,49,0,0,1499,1500,5,290,0,0,1500,1502,
        5,49,0,0,1501,1497,1,0,0,0,1501,1499,1,0,0,0,1502,75,1,0,0,0,1503,
        1586,3,90,45,0,1504,1505,5,155,0,0,1505,1516,5,2,0,0,1506,1507,5,
        190,0,0,1507,1508,5,35,0,0,1508,1513,3,120,60,0,1509,1510,5,4,0,
        0,1510,1512,3,120,60,0,1511,1509,1,0,0,0,1512,1515,1,0,0,0,1513,
        1511,1,0,0,0,1513,1514,1,0,0,0,1514,1517,1,0,0,0,1515,1513,1,0,0,
        0,1516,1506,1,0,0,0,1516,1517,1,0,0,0,1517,1528,1,0,0,0,1518,1519,
        5,184,0,0,1519,1520,5,35,0,0,1520,1525,3,40,20,0,1521,1522,5,4,0,
        0,1522,1524,3,40,20,0,1523,1521,1,0,0,0,1524,1527,1,0,0,0,1525,1523,
        1,0,0,0,1525,1526,1,0,0,0,1526,1529,1,0,0,0,1527,1525,1,0,0,0,1528,
        1518,1,0,0,0,1528,1529,1,0,0,0,1529,1539,1,0,0,0,1530,1531,5,157,
        0,0,1531,1536,3,78,39,0,1532,1533,5,4,0,0,1533,1535,3,78,39,0,1534,
        1532,1,0,0,0,1535,1538,1,0,0,0,1536,1534,1,0,0,0,1536,1537,1,0,0,
        0,1537,1540,1,0,0,0,1538,1536,1,0,0,0,1539,1530,1,0,0,0,1539,1540,
        1,0,0,0,1540,1542,1,0,0,0,1541,1543,3,80,40,0,1542,1541,1,0,0,0,
        1542,1543,1,0,0,0,1543,1547,1,0,0,0,1544,1545,5,21,0,0,1545,1546,
        5,152,0,0,1546,1548,3,84,42,0,1547,1544,1,0,0,0,1547,1548,1,0,0,
        0,1548,1550,1,0,0,0,1549,1551,7,14,0,0,1550,1549,1,0,0,0,1550,1551,
        1,0,0,0,1551,1552,1,0,0,0,1552,1553,5,195,0,0,1553,1554,5,2,0,0,
        1554,1555,3,188,94,0,1555,1565,5,3,0,0,1556,1557,5,243,0,0,1557,
        1562,3,86,43,0,1558,1559,5,4,0,0,1559,1561,3,86,43,0,1560,1558,1,
        0,0,0,1561,1564,1,0,0,0,1562,1560,1,0,0,0,1562,1563,1,0,0,0,1563,
        1566,1,0,0,0,1564,1562,1,0,0,0,1565,1556,1,0,0,0,1565,1566,1,0,0,
        0,1566,1567,1,0,0,0,1567,1568,5,68,0,0,1568,1573,3,88,44,0,1569,
        1570,5,4,0,0,1570,1572,3,88,44,0,1571,1569,1,0,0,0,1572,1575,1,0,
        0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,0,1574,1576,1,0,0,0,1575,1573,
        1,0,0,0,1576,1584,5,3,0,0,1577,1579,5,28,0,0,1578,1577,1,0,0,0,1578,
        1579,1,0,0,0,1579,1580,1,0,0,0,1580,1582,3,222,111,0,1581,1583,3,
        92,46,0,1582,1581,1,0,0,0,1582,1583,1,0,0,0,1583,1585,1,0,0,0,1584,
        1578,1,0,0,0,1584,1585,1,0,0,0,1585,1587,1,0,0,0,1586,1504,1,0,0,
        0,1586,1587,1,0,0,0,1587,77,1,0,0,0,1588,1589,3,120,60,0,1589,1590,
        5,28,0,0,1590,1591,3,222,111,0,1591,79,1,0,0,0,1592,1593,5,180,0,
        0,1593,1594,5,225,0,0,1594,1595,5,196,0,0,1595,1604,5,152,0,0,1596,
        1597,5,22,0,0,1597,1598,5,226,0,0,1598,1599,5,196,0,0,1599,1601,
        5,152,0,0,1600,1602,3,82,41,0,1601,1600,1,0,0,0,1601,1602,1,0,0,
        0,1602,1604,1,0,0,0,1603,1592,1,0,0,0,1603,1596,1,0,0,0,1604,81,
        1,0,0,0,1605,1606,5,239,0,0,1606,1607,5,80,0,0,1607,1615,5,154,0,
        0,1608,1609,5,178,0,0,1609,1610,5,80,0,0,1610,1615,5,154,0,0,1611,
        1612,5,288,0,0,1612,1613,5,270,0,0,1613,1615,5,226,0,0,1614,1605,
        1,0,0,0,1614,1608,1,0,0,0,1614,1611,1,0,0,0,1615,83,1,0,0,0,1616,
        1617,5,5,0,0,1617,1618,5,255,0,0,1618,1619,5,163,0,0,1619,1636,5,
        225,0,0,1620,1621,5,5,0,0,1621,1622,5,193,0,0,1622,1623,5,139,0,
        0,1623,1636,5,225,0,0,1624,1625,5,5,0,0,1625,1626,5,255,0,0,1626,
        1627,5,95,0,0,1627,1636,3,222,111,0,1628,1629,5,5,0,0,1629,1630,
        5,255,0,0,1630,1631,5,139,0,0,1631,1636,3,222,111,0,1632,1633,5,
        5,0,0,1633,1634,5,255,0,0,1634,1636,3,222,111,0,1635,1616,1,0,0,
        0,1635,1620,1,0,0,0,1635,1624,1,0,0,0,1635,1628,1,0,0,0,1635,1632,
        1,0,0,0,1636,85,1,0,0,0,1637,1638,3,222,111,0,1638,1639,5,296,0,
        0,1639,1640,5,2,0,0,1640,1645,3,222,111,0,1641,1642,5,4,0,0,1642,
        1644,3,222,111,0,1643,1641,1,0,0,0,1644,1647,1,0,0,0,1645,1643,1,
        0,0,0,1645,1646,1,0,0,0,1646,1648,1,0,0,0,1647,1645,1,0,0,0,1648,
        1649,5,3,0,0,1649,87,1,0,0,0,1650,1651,3,222,111,0,1651,1652,5,28,
        0,0,1652,1653,3,120,60,0,1653,89,1,0,0,0,1654,1662,3,94,47,0,1655,
        1657,5,28,0,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1658,1,0,
        0,0,1658,1660,3,222,111,0,1659,1661,3,92,46,0,1660,1659,1,0,0,0,
        1660,1661,1,0,0,0,1661,1663,1,0,0,0,1662,1656,1,0,0,0,1662,1663,
        1,0,0,0,1663,91,1,0,0,0,1664,1665,5,2,0,0,1665,1670,3,222,111,0,
        1666,1667,5,4,0,0,1667,1669,3,222,111,0,1668,1666,1,0,0,0,1669,1672,
        1,0,0,0,1670,1668,1,0,0,0,1670,1671,1,0,0,0,1671,1673,1,0,0,0,1672,
        1670,1,0,0,0,1673,1674,5,3,0,0,1674,93,1,0,0,0,1675,1677,3,210,105,
        0,1676,1678,3,212,106,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,
        1747,1,0,0,0,1679,1680,5,2,0,0,1680,1681,3,12,6,0,1681,1682,5,3,
        0,0,1682,1747,1,0,0,0,1683,1684,5,271,0,0,1684,1685,5,2,0,0,1685,
        1690,3,120,60,0,1686,1687,5,4,0,0,1687,1689,3,120,60,0,1688,1686,
        1,0,0,0,1689,1692,1,0,0,0,1690,1688,1,0,0,0,1690,1691,1,0,0,0,1691,
        1693,1,0,0,0,1692,1690,1,0,0,0,1693,1696,5,3,0,0,1694,1695,5,288,
        0,0,1695,1697,5,185,0,0,1696,1694,1,0,0,0,1696,1697,1,0,0,0,1697,
        1747,1,0,0,0,1698,1699,5,140,0,0,1699,1700,5,2,0,0,1700,1701,3,12,
        6,0,1701,1702,5,3,0,0,1702,1747,1,0,0,0,1703,1704,5,246,0,0,1704,
        1705,5,2,0,0,1705,1706,3,106,53,0,1706,1707,5,3,0,0,1707,1747,1,
        0,0,0,1708,1709,5,2,0,0,1709,1710,3,60,30,0,1710,1711,5,3,0,0,1711,
        1747,1,0,0,0,1712,1713,5,134,0,0,1713,1714,5,2,0,0,1714,1715,3,130,
        65,0,1715,1716,5,43,0,0,1716,1717,5,2,0,0,1717,1722,3,96,48,0,1718,
        1719,5,4,0,0,1719,1721,3,96,48,0,1720,1718,1,0,0,0,1721,1724,1,0,
        0,0,1722,1720,1,0,0,0,1722,1723,1,0,0,0,1723,1725,1,0,0,0,1724,1722,
        1,0,0,0,1725,1737,5,3,0,0,1726,1727,5,199,0,0,1727,1728,5,2,0,0,
        1728,1729,3,98,49,0,1729,1730,5,3,0,0,1730,1738,1,0,0,0,1731,1732,
        5,199,0,0,1732,1733,5,67,0,0,1733,1734,5,2,0,0,1734,1735,3,104,52,
        0,1735,1736,5,3,0,0,1736,1738,1,0,0,0,1737,1726,1,0,0,0,1737,1731,
        1,0,0,0,1737,1738,1,0,0,0,1738,1742,1,0,0,0,1739,1740,7,15,0,0,1740,
        1741,5,179,0,0,1741,1743,5,83,0,0,1742,1739,1,0,0,0,1742,1743,1,
        0,0,0,1743,1744,1,0,0,0,1744,1745,5,3,0,0,1745,1747,1,0,0,0,1746,
        1675,1,0,0,0,1746,1679,1,0,0,0,1746,1683,1,0,0,0,1746,1698,1,0,0,
        0,1746,1703,1,0,0,0,1746,1708,1,0,0,0,1746,1712,1,0,0,0,1747,95,
        1,0,0,0,1748,1749,3,222,111,0,1749,1750,5,97,0,0,1750,1751,5,185,
        0,0,1751,1826,1,0,0,0,1752,1753,3,222,111,0,1753,1756,3,168,84,0,
        1754,1755,5,194,0,0,1755,1757,3,152,76,0,1756,1754,1,0,0,0,1756,
        1757,1,0,0,0,1757,1762,1,0,0,0,1758,1759,3,140,70,0,1759,1760,5,
        179,0,0,1760,1761,5,80,0,0,1761,1763,1,0,0,0,1762,1758,1,0,0,0,1762,
        1763,1,0,0,0,1763,1768,1,0,0,0,1764,1765,3,140,70,0,1765,1766,5,
        179,0,0,1766,1767,5,83,0,0,1767,1769,1,0,0,0,1768,1764,1,0,0,0,1768,
        1769,1,0,0,0,1769,1826,1,0,0,0,1770,1771,3,222,111,0,1771,1772,3,
        168,84,0,1772,1773,5,98,0,0,1773,1776,3,134,67,0,1774,1775,5,194,
        0,0,1775,1777,3,152,76,0,1776,1774,1,0,0,0,1776,1777,1,0,0,0,1777,
        1781,1,0,0,0,1778,1779,3,142,71,0,1779,1780,5,292,0,0,1780,1782,
        1,0,0,0,1781,1778,1,0,0,0,1781,1782,1,0,0,0,1782,1790,1,0,0,0,1783,
        1784,7,16,0,0,1784,1788,5,207,0,0,1785,1786,5,179,0,0,1786,1787,
        5,228,0,0,1787,1789,5,250,0,0,1788,1785,1,0,0,0,1788,1789,1,0,0,
        0,1789,1791,1,0,0,0,1790,1783,1,0,0,0,1790,1791,1,0,0,0,1791,1796,
        1,0,0,0,1792,1793,3,144,72,0,1793,1794,5,179,0,0,1794,1795,5,80,
        0,0,1795,1797,1,0,0,0,1796,1792,1,0,0,0,1796,1797,1,0,0,0,1797,1802,
        1,0,0,0,1798,1799,3,144,72,0,1799,1800,5,179,0,0,1800,1801,5,83,
        0,0,1801,1803,1,0,0,0,1802,1798,1,0,0,0,1802,1803,1,0,0,0,1803,1826,
        1,0,0,0,1804,1806,5,162,0,0,1805,1807,5,194,0,0,1806,1805,1,0,0,
        0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,1808,1811,3,152,76,0,1809,
        1810,5,28,0,0,1810,1812,3,222,111,0,1811,1809,1,0,0,0,1811,1812,
        1,0,0,0,1812,1813,1,0,0,0,1813,1814,5,43,0,0,1814,1815,5,2,0,0,1815,
        1820,3,96,48,0,1816,1817,5,4,0,0,1817,1819,3,96,48,0,1818,1816,1,
        0,0,0,1819,1822,1,0,0,0,1820,1818,1,0,0,0,1820,1821,1,0,0,0,1821,
        1823,1,0,0,0,1822,1820,1,0,0,0,1823,1824,5,3,0,0,1824,1826,1,0,0,
        0,1825,1748,1,0,0,0,1825,1752,1,0,0,0,1825,1770,1,0,0,0,1825,1804,
        1,0,0,0,1826,97,1,0,0,0,1827,1853,3,100,50,0,1828,1829,3,100,50,
        0,1829,1830,7,17,0,0,1830,1831,3,102,51,0,1831,1853,1,0,0,0,1832,
        1833,3,102,51,0,1833,1834,5,267,0,0,1834,1839,3,102,51,0,1835,1836,
        5,267,0,0,1836,1838,3,102,51,0,1837,1835,1,0,0,0,1838,1841,1,0,0,
        0,1839,1837,1,0,0,0,1839,1840,1,0,0,0,1840,1853,1,0,0,0,1841,1839,
        1,0,0,0,1842,1843,3,102,51,0,1843,1844,5,52,0,0,1844,1849,3,102,
        51,0,1845,1846,5,52,0,0,1846,1848,3,102,51,0,1847,1845,1,0,0,0,1848,
        1851,1,0,0,0,1849,1847,1,0,0,0,1849,1850,1,0,0,0,1850,1853,1,0,0,
        0,1851,1849,1,0,0,0,1852,1827,1,0,0,0,1852,1828,1,0,0,0,1852,1832,
        1,0,0,0,1852,1842,1,0,0,0,1853,99,1,0,0,0,1854,1855,3,222,111,0,
        1855,101,1,0,0,0,1856,1862,3,100,50,0,1857,1858,5,2,0,0,1858,1859,
        3,98,49,0,1859,1860,5,3,0,0,1860,1862,1,0,0,0,1861,1856,1,0,0,0,
        1861,1857,1,0,0,0,1862,103,1,0,0,0,1863,1866,7,17,0,0,1864,1865,
        5,4,0,0,1865,1867,7,18,0,0,1866,1864,1,0,0,0,1866,1867,1,0,0,0,1867,
        1874,1,0,0,0,1868,1871,7,18,0,0,1869,1870,5,4,0,0,1870,1872,7,17,
        0,0,1871,1869,1,0,0,0,1871,1872,1,0,0,0,1872,1874,1,0,0,0,1873,1863,
        1,0,0,0,1873,1868,1,0,0,0,1874,105,1,0,0,0,1875,1876,3,210,105,0,
        1876,1885,5,2,0,0,1877,1882,3,108,54,0,1878,1879,5,4,0,0,1879,1881,
        3,108,54,0,1880,1878,1,0,0,0,1881,1884,1,0,0,0,1882,1880,1,0,0,0,
        1882,1883,1,0,0,0,1883,1886,1,0,0,0,1884,1882,1,0,0,0,1885,1877,
        1,0,0,0,1885,1886,1,0,0,0,1886,1896,1,0,0,0,1887,1888,5,50,0,0,1888,
        1893,3,118,59,0,1889,1890,5,4,0,0,1890,1892,3,118,59,0,1891,1889,
        1,0,0,0,1892,1895,1,0,0,0,1893,1891,1,0,0,0,1893,1894,1,0,0,0,1894,
        1897,1,0,0,0,1895,1893,1,0,0,0,1896,1887,1,0,0,0,1896,1897,1,0,0,
        0,1897,1898,1,0,0,0,1898,1899,5,3,0,0,1899,107,1,0,0,0,1900,1901,
        3,222,111,0,1901,1902,5,6,0,0,1902,1904,1,0,0,0,1903,1900,1,0,0,
        0,1903,1904,1,0,0,0,1904,1908,1,0,0,0,1905,1909,3,110,55,0,1906,
        1909,3,114,57,0,1907,1909,3,120,60,0,1908,1905,1,0,0,0,1908,1906,
        1,0,0,0,1908,1907,1,0,0,0,1909,109,1,0,0,0,1910,1928,3,112,56,0,
        1911,1912,5,190,0,0,1912,1926,5,35,0,0,1913,1922,5,2,0,0,1914,1919,
        3,120,60,0,1915,1916,5,4,0,0,1916,1918,3,120,60,0,1917,1915,1,0,
        0,0,1918,1921,1,0,0,0,1919,1917,1,0,0,0,1919,1920,1,0,0,0,1920,1923,
        1,0,0,0,1921,1919,1,0,0,0,1922,1914,1,0,0,0,1922,1923,1,0,0,0,1923,
        1924,1,0,0,0,1924,1927,5,3,0,0,1925,1927,3,120,60,0,1926,1913,1,
        0,0,0,1926,1925,1,0,0,0,1927,1929,1,0,0,0,1928,1911,1,0,0,0,1928,
        1929,1,0,0,0,1929,1936,1,0,0,0,1930,1931,5,206,0,0,1931,1932,5,285,
        0,0,1932,1937,5,80,0,0,1933,1934,5,136,0,0,1934,1935,5,285,0,0,1935,
        1937,5,80,0,0,1936,1930,1,0,0,0,1936,1933,1,0,0,0,1936,1937,1,0,
        0,0,1937,1954,1,0,0,0,1938,1939,5,184,0,0,1939,1952,5,35,0,0,1940,
        1941,5,2,0,0,1941,1946,3,40,20,0,1942,1943,5,4,0,0,1943,1945,3,40,
        20,0,1944,1942,1,0,0,0,1945,1948,1,0,0,0,1946,1944,1,0,0,0,1946,
        1947,1,0,0,0,1947,1949,1,0,0,0,1948,1946,1,0,0,0,1949,1950,5,3,0,
        0,1950,1953,1,0,0,0,1951,1953,3,40,20,0,1952,1940,1,0,0,0,1952,1951,
        1,0,0,0,1953,1955,1,0,0,0,1954,1938,1,0,0,0,1954,1955,1,0,0,0,1955,
        111,1,0,0,0,1956,1957,5,246,0,0,1957,1958,5,2,0,0,1958,1959,3,210,
        105,0,1959,1967,5,3,0,0,1960,1962,5,28,0,0,1961,1960,1,0,0,0,1961,
        1962,1,0,0,0,1962,1963,1,0,0,0,1963,1965,3,222,111,0,1964,1966,3,
        92,46,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1968,1,0,0,0,1967,
        1961,1,0,0,0,1967,1968,1,0,0,0,1968,1983,1,0,0,0,1969,1970,5,246,
        0,0,1970,1971,5,2,0,0,1971,1972,3,12,6,0,1972,1980,5,3,0,0,1973,
        1975,5,28,0,0,1974,1973,1,0,0,0,1974,1975,1,0,0,0,1975,1976,1,0,
        0,0,1976,1978,3,222,111,0,1977,1979,3,92,46,0,1978,1977,1,0,0,0,
        1978,1979,1,0,0,0,1979,1981,1,0,0,0,1980,1974,1,0,0,0,1980,1981,
        1,0,0,0,1981,1983,1,0,0,0,1982,1956,1,0,0,0,1982,1969,1,0,0,0,1983,
        113,1,0,0,0,1984,1985,5,74,0,0,1985,1986,5,2,0,0,1986,1991,3,116,
        58,0,1987,1988,5,4,0,0,1988,1990,3,116,58,0,1989,1987,1,0,0,0,1990,
        1993,1,0,0,0,1991,1989,1,0,0,0,1991,1992,1,0,0,0,1992,1994,1,0,0,
        0,1993,1991,1,0,0,0,1994,1995,5,3,0,0,1995,2003,1,0,0,0,1996,1997,
        5,39,0,0,1997,1998,5,2,0,0,1998,1999,5,172,0,0,1999,2000,5,28,0,
        0,2000,2001,5,74,0,0,2001,2003,5,3,0,0,2002,1984,1,0,0,0,2002,1996,
        1,0,0,0,2003,115,1,0,0,0,2004,2006,3,222,111,0,2005,2007,3,168,84,
        0,2006,2005,1,0,0,0,2006,2007,1,0,0,0,2007,117,1,0,0,0,2008,2009,
        5,2,0,0,2009,2010,3,210,105,0,2010,2011,5,4,0,0,2011,2016,3,210,
        105,0,2012,2013,5,4,0,0,2013,2015,3,210,105,0,2014,2012,1,0,0,0,
        2015,2018,1,0,0,0,2016,2014,1,0,0,0,2016,2017,1,0,0,0,2017,2019,
        1,0,0,0,2018,2016,1,0,0,0,2019,2020,5,3,0,0,2020,119,1,0,0,0,2021,
        2022,3,122,61,0,2022,121,1,0,0,0,2023,2024,6,61,-1,0,2024,2026,3,
        126,63,0,2025,2027,3,124,62,0,2026,2025,1,0,0,0,2026,2027,1,0,0,
        0,2027,2031,1,0,0,0,2028,2029,5,171,0,0,2029,2031,3,122,61,3,2030,
        2023,1,0,0,0,2030,2028,1,0,0,0,2031,2040,1,0,0,0,2032,2033,10,2,
        0,0,2033,2034,5,25,0,0,2034,2039,3,122,61,3,2035,2036,10,1,0,0,2036,
        2037,5,183,0,0,2037,2039,3,122,61,2,2038,2032,1,0,0,0,2038,2035,
        1,0,0,0,2039,2042,1,0,0,0,2040,2038,1,0,0,0,2040,2041,1,0,0,0,2041,
        123,1,0,0,0,2042,2040,1,0,0,0,2043,2044,3,156,78,0,2044,2045,3,126,
        63,0,2045,2105,1,0,0,0,2046,2047,3,156,78,0,2047,2048,3,158,79,0,
        2048,2049,5,2,0,0,2049,2050,3,12,6,0,2050,2051,5,3,0,0,2051,2105,
        1,0,0,0,2052,2054,5,171,0,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,
        2054,2055,1,0,0,0,2055,2056,5,33,0,0,2056,2057,3,126,63,0,2057,2058,
        5,25,0,0,2058,2059,3,126,63,0,2059,2105,1,0,0,0,2060,2062,5,171,
        0,0,2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,2064,
        5,115,0,0,2064,2065,5,2,0,0,2065,2070,3,120,60,0,2066,2067,5,4,0,
        0,2067,2069,3,120,60,0,2068,2066,1,0,0,0,2069,2072,1,0,0,0,2070,
        2068,1,0,0,0,2070,2071,1,0,0,0,2071,2073,1,0,0,0,2072,2070,1,0,0,
        0,2073,2074,5,3,0,0,2074,2105,1,0,0,0,2075,2077,5,171,0,0,2076,2075,
        1,0,0,0,2076,2077,1,0,0,0,2077,2078,1,0,0,0,2078,2079,5,115,0,0,
        2079,2080,5,2,0,0,2080,2081,3,12,6,0,2081,2082,5,3,0,0,2082,2105,
        1,0,0,0,2083,2085,5,171,0,0,2084,2083,1,0,0,0,2084,2085,1,0,0,0,
        2085,2086,1,0,0,0,2086,2087,5,144,0,0,2087,2090,3,126,63,0,2088,
        2089,5,84,0,0,2089,2091,3,126,63,0,2090,2088,1,0,0,0,2090,2091,1,
        0,0,0,2091,2105,1,0,0,0,2092,2094,5,126,0,0,2093,2095,5,171,0,0,
        2094,2093,1,0,0,0,2094,2095,1,0,0,0,2095,2096,1,0,0,0,2096,2105,
        5,172,0,0,2097,2099,5,126,0,0,2098,2100,5,171,0,0,2099,2098,1,0,
        0,0,2099,2100,1,0,0,0,2100,2101,1,0,0,0,2101,2102,5,75,0,0,2102,
        2103,5,99,0,0,2103,2105,3,126,63,0,2104,2043,1,0,0,0,2104,2046,1,
        0,0,0,2104,2053,1,0,0,0,2104,2061,1,0,0,0,2104,2076,1,0,0,0,2104,
        2084,1,0,0,0,2104,2092,1,0,0,0,2104,2097,1,0,0,0,2105,125,1,0,0,
        0,2106,2107,6,63,-1,0,2107,2111,3,128,64,0,2108,2109,7,19,0,0,2109,
        2111,3,126,63,4,2110,2106,1,0,0,0,2110,2108,1,0,0,0,2111,2126,1,
        0,0,0,2112,2113,10,3,0,0,2113,2114,7,20,0,0,2114,2125,3,126,63,4,
        2115,2116,10,2,0,0,2116,2117,7,19,0,0,2117,2125,3,126,63,3,2118,
        2119,10,1,0,0,2119,2120,5,307,0,0,2120,2125,3,126,63,2,2121,2122,
        10,5,0,0,2122,2123,5,30,0,0,2123,2125,3,154,77,0,2124,2112,1,0,0,
        0,2124,2115,1,0,0,0,2124,2118,1,0,0,0,2124,2121,1,0,0,0,2125,2128,
        1,0,0,0,2126,2124,1,0,0,0,2126,2127,1,0,0,0,2127,127,1,0,0,0,2128,
        2126,1,0,0,0,2129,2130,6,64,-1,0,2130,2580,5,172,0,0,2131,2580,3,
        162,81,0,2132,2133,3,222,111,0,2133,2134,3,152,76,0,2134,2580,1,
        0,0,0,2135,2136,5,77,0,0,2136,2137,5,202,0,0,2137,2580,3,152,76,
        0,2138,2580,3,224,112,0,2139,2580,3,160,80,0,2140,2580,3,152,76,
        0,2141,2580,5,311,0,0,2142,2580,5,308,0,0,2143,2144,5,200,0,0,2144,
        2145,5,2,0,0,2145,2146,3,126,63,0,2146,2147,5,115,0,0,2147,2148,
        3,126,63,0,2148,2149,5,3,0,0,2149,2580,1,0,0,0,2150,2151,5,2,0,0,
        2151,2154,3,120,60,0,2152,2153,5,4,0,0,2153,2155,3,120,60,0,2154,
        2152,1,0,0,0,2155,2156,1,0,0,0,2156,2154,1,0,0,0,2156,2157,1,0,0,
        0,2157,2158,1,0,0,0,2158,2159,5,3,0,0,2159,2580,1,0,0,0,2160,2161,
        5,225,0,0,2161,2162,5,2,0,0,2162,2167,3,120,60,0,2163,2164,5,4,0,
        0,2164,2166,3,120,60,0,2165,2163,1,0,0,0,2166,2169,1,0,0,0,2167,
        2165,1,0,0,0,2167,2168,1,0,0,0,2168,2170,1,0,0,0,2169,2167,1,0,0,
        0,2170,2171,5,3,0,0,2171,2580,1,0,0,0,2172,2173,5,146,0,0,2173,2175,
        5,2,0,0,2174,2176,3,56,28,0,2175,2174,1,0,0,0,2175,2176,1,0,0,0,
        2176,2177,1,0,0,0,2177,2180,3,120,60,0,2178,2179,5,4,0,0,2179,2181,
        3,152,76,0,2180,2178,1,0,0,0,2180,2181,1,0,0,0,2181,2185,1,0,0,0,
        2182,2183,5,179,0,0,2183,2184,5,189,0,0,2184,2186,3,72,36,0,2185,
        2182,1,0,0,0,2185,2186,1,0,0,0,2186,2187,1,0,0,0,2187,2188,5,3,0,
        0,2188,2189,5,289,0,0,2189,2190,5,107,0,0,2190,2191,5,2,0,0,2191,
        2192,5,184,0,0,2192,2193,5,35,0,0,2193,2198,3,40,20,0,2194,2195,
        5,4,0,0,2195,2197,3,40,20,0,2196,2194,1,0,0,0,2197,2200,1,0,0,0,
        2198,2196,1,0,0,0,2198,2199,1,0,0,0,2199,2201,1,0,0,0,2200,2198,
        1,0,0,0,2201,2202,5,3,0,0,2202,2580,1,0,0,0,2203,2205,3,148,74,0,
        2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,2206,1,0,0,0,2206,2207,
        3,210,105,0,2207,2211,5,2,0,0,2208,2209,3,222,111,0,2209,2210,5,
        1,0,0,2210,2212,1,0,0,0,2211,2208,1,0,0,0,2211,2212,1,0,0,0,2212,
        2213,1,0,0,0,2213,2214,5,304,0,0,2214,2216,5,3,0,0,2215,2217,3,176,
        88,0,2216,2215,1,0,0,0,2216,2217,1,0,0,0,2217,2219,1,0,0,0,2218,
        2220,3,180,90,0,2219,2218,1,0,0,0,2219,2220,1,0,0,0,2220,2580,1,
        0,0,0,2221,2223,3,148,74,0,2222,2221,1,0,0,0,2222,2223,1,0,0,0,2223,
        2224,1,0,0,0,2224,2225,3,210,105,0,2225,2237,5,2,0,0,2226,2228,3,
        56,28,0,2227,2226,1,0,0,0,2227,2228,1,0,0,0,2228,2229,1,0,0,0,2229,
        2234,3,120,60,0,2230,2231,5,4,0,0,2231,2233,3,120,60,0,2232,2230,
        1,0,0,0,2233,2236,1,0,0,0,2234,2232,1,0,0,0,2234,2235,1,0,0,0,2235,
        2238,1,0,0,0,2236,2234,1,0,0,0,2237,2227,1,0,0,0,2237,2238,1,0,0,
        0,2238,2249,1,0,0,0,2239,2240,5,184,0,0,2240,2241,5,35,0,0,2241,
        2246,3,40,20,0,2242,2243,5,4,0,0,2243,2245,3,40,20,0,2244,2242,1,
        0,0,0,2245,2248,1,0,0,0,2246,2244,1,0,0,0,2246,2247,1,0,0,0,2247,
        2250,1,0,0,0,2248,2246,1,0,0,0,2249,2239,1,0,0,0,2249,2250,1,0,0,
        0,2250,2251,1,0,0,0,2251,2253,5,3,0,0,2252,2254,3,176,88,0,2253,
        2252,1,0,0,0,2253,2254,1,0,0,0,2254,2259,1,0,0,0,2255,2257,3,150,
        75,0,2256,2255,1,0,0,0,2256,2257,1,0,0,0,2257,2258,1,0,0,0,2258,
        2260,3,180,90,0,2259,2256,1,0,0,0,2259,2260,1,0,0,0,2260,2580,1,
        0,0,0,2261,2262,3,222,111,0,2262,2263,3,180,90,0,2263,2580,1,0,0,
        0,2264,2265,3,222,111,0,2265,2266,5,7,0,0,2266,2267,3,120,60,0,2267,
        2580,1,0,0,0,2268,2277,5,2,0,0,2269,2274,3,222,111,0,2270,2271,5,
        4,0,0,2271,2273,3,222,111,0,2272,2270,1,0,0,0,2273,2276,1,0,0,0,
        2274,2272,1,0,0,0,2274,2275,1,0,0,0,2275,2278,1,0,0,0,2276,2274,
        1,0,0,0,2277,2269,1,0,0,0,2277,2278,1,0,0,0,2278,2279,1,0,0,0,2279,
        2280,5,3,0,0,2280,2281,5,7,0,0,2281,2580,3,120,60,0,2282,2283,5,
        2,0,0,2283,2284,3,12,6,0,2284,2285,5,3,0,0,2285,2580,1,0,0,0,2286,
        2287,5,88,0,0,2287,2288,5,2,0,0,2288,2289,3,12,6,0,2289,2290,5,3,
        0,0,2290,2580,1,0,0,0,2291,2292,5,38,0,0,2292,2294,3,120,60,0,2293,
        2295,3,174,87,0,2294,2293,1,0,0,0,2295,2296,1,0,0,0,2296,2294,1,
        0,0,0,2296,2297,1,0,0,0,2297,2300,1,0,0,0,2298,2299,5,79,0,0,2299,
        2301,3,120,60,0,2300,2298,1,0,0,0,2300,2301,1,0,0,0,2301,2302,1,
        0,0,0,2302,2303,5,82,0,0,2303,2580,1,0,0,0,2304,2306,5,38,0,0,2305,
        2307,3,174,87,0,2306,2305,1,0,0,0,2307,2308,1,0,0,0,2308,2306,1,
        0,0,0,2308,2309,1,0,0,0,2309,2312,1,0,0,0,2310,2311,5,79,0,0,2311,
        2313,3,120,60,0,2312,2310,1,0,0,0,2312,2313,1,0,0,0,2313,2314,1,
        0,0,0,2314,2315,5,82,0,0,2315,2580,1,0,0,0,2316,2317,5,39,0,0,2317,
        2318,5,2,0,0,2318,2319,3,120,60,0,2319,2320,5,28,0,0,2320,2321,3,
        168,84,0,2321,2322,5,3,0,0,2322,2580,1,0,0,0,2323,2324,5,261,0,0,
        2324,2325,5,2,0,0,2325,2326,3,120,60,0,2326,2327,5,28,0,0,2327,2328,
        3,168,84,0,2328,2329,5,3,0,0,2329,2580,1,0,0,0,2330,2331,5,27,0,
        0,2331,2340,5,8,0,0,2332,2337,3,120,60,0,2333,2334,5,4,0,0,2334,
        2336,3,120,60,0,2335,2333,1,0,0,0,2336,2339,1,0,0,0,2337,2335,1,
        0,0,0,2337,2338,1,0,0,0,2338,2341,1,0,0,0,2339,2337,1,0,0,0,2340,
        2332,1,0,0,0,2340,2341,1,0,0,0,2341,2342,1,0,0,0,2342,2580,5,9,0,
        0,2343,2580,3,222,111,0,2344,2580,5,56,0,0,2345,2349,5,60,0,0,2346,
        2347,5,2,0,0,2347,2348,5,312,0,0,2348,2350,5,3,0,0,2349,2346,1,0,
        0,0,2349,2350,1,0,0,0,2350,2580,1,0,0,0,2351,2355,5,61,0,0,2352,
        2353,5,2,0,0,2353,2354,5,312,0,0,2354,2356,5,3,0,0,2355,2352,1,0,
        0,0,2355,2356,1,0,0,0,2356,2580,1,0,0,0,2357,2361,5,148,0,0,2358,
        2359,5,2,0,0,2359,2360,5,312,0,0,2360,2362,5,3,0,0,2361,2358,1,0,
        0,0,2361,2362,1,0,0,0,2362,2580,1,0,0,0,2363,2367,5,149,0,0,2364,
        2365,5,2,0,0,2365,2366,5,312,0,0,2366,2368,5,3,0,0,2367,2364,1,0,
        0,0,2367,2368,1,0,0,0,2368,2580,1,0,0,0,2369,2580,5,62,0,0,2370,
        2580,5,55,0,0,2371,2580,5,59,0,0,2372,2580,5,57,0,0,2373,2374,5,
        258,0,0,2374,2382,5,2,0,0,2375,2377,3,70,35,0,2376,2375,1,0,0,0,
        2376,2377,1,0,0,0,2377,2379,1,0,0,0,2378,2380,3,126,63,0,2379,2378,
        1,0,0,0,2379,2380,1,0,0,0,2380,2381,1,0,0,0,2381,2383,5,99,0,0,2382,
        2376,1,0,0,0,2382,2383,1,0,0,0,2383,2384,1,0,0,0,2384,2385,3,126,
        63,0,2385,2386,5,3,0,0,2386,2580,1,0,0,0,2387,2388,5,258,0,0,2388,
        2389,5,2,0,0,2389,2390,3,126,63,0,2390,2391,5,4,0,0,2391,2392,3,
        126,63,0,2392,2393,5,3,0,0,2393,2580,1,0,0,0,2394,2395,5,244,0,0,
        2395,2396,5,2,0,0,2396,2397,3,126,63,0,2397,2398,5,99,0,0,2398,2401,
        3,126,63,0,2399,2400,5,97,0,0,2400,2402,3,126,63,0,2401,2399,1,0,
        0,0,2401,2402,1,0,0,0,2402,2403,1,0,0,0,2403,2404,5,3,0,0,2404,2580,
        1,0,0,0,2405,2406,5,170,0,0,2406,2407,5,2,0,0,2407,2410,3,126,63,
        0,2408,2409,5,4,0,0,2409,2411,3,166,83,0,2410,2408,1,0,0,0,2410,
        2411,1,0,0,0,2411,2412,1,0,0,0,2412,2413,5,3,0,0,2413,2580,1,0,0,
        0,2414,2415,5,90,0,0,2415,2416,5,2,0,0,2416,2417,3,222,111,0,2417,
        2418,5,99,0,0,2418,2419,3,126,63,0,2419,2420,5,3,0,0,2420,2580,1,
        0,0,0,2421,2422,5,2,0,0,2422,2423,3,120,60,0,2423,2424,5,3,0,0,2424,
        2580,1,0,0,0,2425,2426,5,108,0,0,2426,2435,5,2,0,0,2427,2432,3,210,
        105,0,2428,2429,5,4,0,0,2429,2431,3,210,105,0,2430,2428,1,0,0,0,
        2431,2434,1,0,0,0,2432,2430,1,0,0,0,2432,2433,1,0,0,0,2433,2436,
        1,0,0,0,2434,2432,1,0,0,0,2435,2427,1,0,0,0,2435,2436,1,0,0,0,2436,
        2437,1,0,0,0,2437,2580,5,3,0,0,2438,2439,5,131,0,0,2439,2440,5,2,
        0,0,2440,2445,3,130,65,0,2441,2442,3,138,69,0,2442,2443,5,179,0,
        0,2443,2444,5,83,0,0,2444,2446,1,0,0,0,2445,2441,1,0,0,0,2445,2446,
        1,0,0,0,2446,2447,1,0,0,0,2447,2448,5,3,0,0,2448,2580,1,0,0,0,2449,
        2450,5,135,0,0,2450,2451,5,2,0,0,2451,2454,3,130,65,0,2452,2453,
        5,218,0,0,2453,2455,3,168,84,0,2454,2452,1,0,0,0,2454,2455,1,0,0,
        0,2455,2460,1,0,0,0,2456,2457,3,140,70,0,2457,2458,5,179,0,0,2458,
        2459,5,80,0,0,2459,2461,1,0,0,0,2460,2456,1,0,0,0,2460,2461,1,0,
        0,0,2461,2466,1,0,0,0,2462,2463,3,140,70,0,2463,2464,5,179,0,0,2464,
        2465,5,83,0,0,2465,2467,1,0,0,0,2466,2462,1,0,0,0,2466,2467,1,0,
        0,0,2467,2468,1,0,0,0,2468,2469,5,3,0,0,2469,2580,1,0,0,0,2470,2471,
        5,133,0,0,2471,2472,5,2,0,0,2472,2479,3,130,65,0,2473,2474,5,218,
        0,0,2474,2477,3,168,84,0,2475,2476,5,98,0,0,2476,2478,3,134,67,0,
        2477,2475,1,0,0,0,2477,2478,1,0,0,0,2478,2480,1,0,0,0,2479,2473,
        1,0,0,0,2479,2480,1,0,0,0,2480,2484,1,0,0,0,2481,2482,3,142,71,0,
        2482,2483,5,292,0,0,2483,2485,1,0,0,0,2484,2481,1,0,0,0,2484,2485,
        1,0,0,0,2485,2493,1,0,0,0,2486,2487,7,16,0,0,2487,2491,5,207,0,0,
        2488,2489,5,179,0,0,2489,2490,5,228,0,0,2490,2492,5,250,0,0,2491,
        2488,1,0,0,0,2491,2492,1,0,0,0,2492,2494,1,0,0,0,2493,2486,1,0,0,
        0,2493,2494,1,0,0,0,2494,2499,1,0,0,0,2495,2496,3,144,72,0,2496,
        2497,5,179,0,0,2497,2498,5,80,0,0,2498,2500,1,0,0,0,2499,2495,1,
        0,0,0,2499,2500,1,0,0,0,2500,2505,1,0,0,0,2501,2502,3,144,72,0,2502,
        2503,5,179,0,0,2503,2504,5,83,0,0,2504,2506,1,0,0,0,2505,2501,1,
        0,0,0,2505,2506,1,0,0,0,2506,2507,1,0,0,0,2507,2508,5,3,0,0,2508,
        2580,1,0,0,0,2509,2510,5,132,0,0,2510,2539,5,2,0,0,2511,2516,3,146,
        73,0,2512,2513,5,4,0,0,2513,2515,3,146,73,0,2514,2512,1,0,0,0,2515,
        2518,1,0,0,0,2516,2514,1,0,0,0,2516,2517,1,0,0,0,2517,2525,1,0,0,
        0,2518,2516,1,0,0,0,2519,2520,5,172,0,0,2520,2521,5,179,0,0,2521,
        2526,5,172,0,0,2522,2523,5,18,0,0,2523,2524,5,179,0,0,2524,2526,
        5,172,0,0,2525,2519,1,0,0,0,2525,2522,1,0,0,0,2525,2526,1,0,0,0,
        2526,2537,1,0,0,0,2527,2528,5,288,0,0,2528,2530,5,268,0,0,2529,2531,
        5,138,0,0,2530,2529,1,0,0,0,2530,2531,1,0,0,0,2531,2538,1,0,0,0,
        2532,2533,5,290,0,0,2533,2535,5,268,0,0,2534,2536,5,138,0,0,2535,
        2534,1,0,0,0,2535,2536,1,0,0,0,2536,2538,1,0,0,0,2537,2527,1,0,0,
        0,2537,2532,1,0,0,0,2537,2538,1,0,0,0,2538,2540,1,0,0,0,2539,2511,
        1,0,0,0,2539,2540,1,0,0,0,2540,2547,1,0,0,0,2541,2542,5,218,0,0,
        2542,2545,3,168,84,0,2543,2544,5,98,0,0,2544,2546,3,134,67,0,2545,
        2543,1,0,0,0,2545,2546,1,0,0,0,2546,2548,1,0,0,0,2547,2541,1,0,0,
        0,2547,2548,1,0,0,0,2548,2549,1,0,0,0,2549,2580,5,3,0,0,2550,2551,
        5,130,0,0,2551,2568,5,2,0,0,2552,2557,3,132,66,0,2553,2554,5,4,0,
        0,2554,2556,3,132,66,0,2555,2553,1,0,0,0,2556,2559,1,0,0,0,2557,
        2555,1,0,0,0,2557,2558,1,0,0,0,2558,2566,1,0,0,0,2559,2557,1,0,0,
        0,2560,2561,5,172,0,0,2561,2562,5,179,0,0,2562,2567,5,172,0,0,2563,
        2564,5,18,0,0,2564,2565,5,179,0,0,2565,2567,5,172,0,0,2566,2560,
        1,0,0,0,2566,2563,1,0,0,0,2566,2567,1,0,0,0,2567,2569,1,0,0,0,2568,
        2552,1,0,0,0,2568,2569,1,0,0,0,2569,2576,1,0,0,0,2570,2571,5,218,
        0,0,2571,2574,3,168,84,0,2572,2573,5,98,0,0,2573,2575,3,134,67,0,
        2574,2572,1,0,0,0,2574,2575,1,0,0,0,2575,2577,1,0,0,0,2576,2570,
        1,0,0,0,2576,2577,1,0,0,0,2577,2578,1,0,0,0,2578,2580,5,3,0,0,2579,
        2129,1,0,0,0,2579,2131,1,0,0,0,2579,2132,1,0,0,0,2579,2135,1,0,0,
        0,2579,2138,1,0,0,0,2579,2139,1,0,0,0,2579,2140,1,0,0,0,2579,2141,
        1,0,0,0,2579,2142,1,0,0,0,2579,2143,1,0,0,0,2579,2150,1,0,0,0,2579,
        2160,1,0,0,0,2579,2172,1,0,0,0,2579,2204,1,0,0,0,2579,2222,1,0,0,
        0,2579,2261,1,0,0,0,2579,2264,1,0,0,0,2579,2268,1,0,0,0,2579,2282,
        1,0,0,0,2579,2286,1,0,0,0,2579,2291,1,0,0,0,2579,2304,1,0,0,0,2579,
        2316,1,0,0,0,2579,2323,1,0,0,0,2579,2330,1,0,0,0,2579,2343,1,0,0,
        0,2579,2344,1,0,0,0,2579,2345,1,0,0,0,2579,2351,1,0,0,0,2579,2357,
        1,0,0,0,2579,2363,1,0,0,0,2579,2369,1,0,0,0,2579,2370,1,0,0,0,2579,
        2371,1,0,0,0,2579,2372,1,0,0,0,2579,2373,1,0,0,0,2579,2387,1,0,0,
        0,2579,2394,1,0,0,0,2579,2405,1,0,0,0,2579,2414,1,0,0,0,2579,2421,
        1,0,0,0,2579,2425,1,0,0,0,2579,2438,1,0,0,0,2579,2449,1,0,0,0,2579,
        2470,1,0,0,0,2579,2509,1,0,0,0,2579,2550,1,0,0,0,2580,2591,1,0,0,
        0,2581,2582,10,24,0,0,2582,2583,5,8,0,0,2583,2584,3,126,63,0,2584,
        2585,5,9,0,0,2585,2590,1,0,0,0,2586,2587,10,22,0,0,2587,2588,5,1,
        0,0,2588,2590,3,222,111,0,2589,2581,1,0,0,0,2589,2586,1,0,0,0,2590,
        2593,1,0,0,0,2591,2589,1,0,0,0,2591,2592,1,0,0,0,2592,129,1,0,0,
        0,2593,2591,1,0,0,0,2594,2595,3,132,66,0,2595,2596,5,4,0,0,2596,
        2599,3,152,76,0,2597,2598,5,28,0,0,2598,2600,3,222,111,0,2599,2597,
        1,0,0,0,2599,2600,1,0,0,0,2600,2610,1,0,0,0,2601,2602,5,192,0,0,
        2602,2607,3,136,68,0,2603,2604,5,4,0,0,2604,2606,3,136,68,0,2605,
        2603,1,0,0,0,2606,2609,1,0,0,0,2607,2605,1,0,0,0,2607,2608,1,0,0,
        0,2608,2611,1,0,0,0,2609,2607,1,0,0,0,2610,2601,1,0,0,0,2610,2611,
        1,0,0,0,2611,131,1,0,0,0,2612,2615,3,120,60,0,2613,2614,5,98,0,0,
        2614,2616,3,134,67,0,2615,2613,1,0,0,0,2615,2616,1,0,0,0,2616,133,
        1,0,0,0,2617,2620,5,129,0,0,2618,2619,5,81,0,0,2619,2621,7,21,0,
        0,2620,2618,1,0,0,0,2620,2621,1,0,0,0,2621,135,1,0,0,0,2622,2623,
        3,132,66,0,2623,2624,5,28,0,0,2624,2625,3,222,111,0,2625,137,1,0,
        0,0,2626,2627,7,22,0,0,2627,139,1,0,0,0,2628,2633,5,83,0,0,2629,
        2633,5,172,0,0,2630,2631,5,67,0,0,2631,2633,3,120,60,0,2632,2628,
        1,0,0,0,2632,2629,1,0,0,0,2632,2630,1,0,0,0,2633,141,1,0,0,0,2634,
        2636,5,290,0,0,2635,2637,5,27,0,0,2636,2635,1,0,0,0,2636,2637,1,
        0,0,0,2637,2646,1,0,0,0,2638,2640,5,288,0,0,2639,2641,7,23,0,0,2640,
        2639,1,0,0,0,2640,2641,1,0,0,0,2641,2643,1,0,0,0,2642,2644,5,27,
        0,0,2643,2642,1,0,0,0,2643,2644,1,0,0,0,2644,2646,1,0,0,0,2645,2634,
        1,0,0,0,2645,2638,1,0,0,0,2646,143,1,0,0,0,2647,2654,5,83,0,0,2648,
        2654,5,172,0,0,2649,2650,5,80,0,0,2650,2654,5,27,0,0,2651,2652,5,
        80,0,0,2652,2654,5,175,0,0,2653,2647,1,0,0,0,2653,2648,1,0,0,0,2653,
        2649,1,0,0,0,2653,2651,1,0,0,0,2654,145,1,0,0,0,2655,2657,5,137,
        0,0,2656,2655,1,0,0,0,2656,2657,1,0,0,0,2657,2658,1,0,0,0,2658,2659,
        3,120,60,0,2659,2660,5,280,0,0,2660,2661,3,132,66,0,2661,2667,1,
        0,0,0,2662,2663,3,120,60,0,2663,2664,5,10,0,0,2664,2665,3,132,66,
        0,2665,2667,1,0,0,0,2666,2656,1,0,0,0,2666,2662,1,0,0,0,2667,147,
        1,0,0,0,2668,2669,7,24,0,0,2669,149,1,0,0,0,2670,2671,5,113,0,0,
        2671,2675,5,174,0,0,2672,2673,5,216,0,0,2673,2675,5,174,0,0,2674,
        2670,1,0,0,0,2674,2672,1,0,0,0,2675,151,1,0,0,0,2676,2683,5,309,
        0,0,2677,2680,5,310,0,0,2678,2679,5,263,0,0,2679,2681,5,309,0,0,
        2680,2678,1,0,0,0,2680,2681,1,0,0,0,2681,2683,1,0,0,0,2682,2676,
        1,0,0,0,2682,2677,1,0,0,0,2683,153,1,0,0,0,2684,2685,5,253,0,0,2685,
        2686,5,295,0,0,2686,2691,3,162,81,0,2687,2688,5,253,0,0,2688,2689,
        5,295,0,0,2689,2691,3,152,76,0,2690,2684,1,0,0,0,2690,2687,1,0,0,
        0,2691,155,1,0,0,0,2692,2693,7,25,0,0,2693,157,1,0,0,0,2694,2695,
        7,26,0,0,2695,159,1,0,0,0,2696,2697,7,27,0,0,2697,161,1,0,0,0,2698,
        2700,5,122,0,0,2699,2701,7,19,0,0,2700,2699,1,0,0,0,2700,2701,1,
        0,0,0,2701,2702,1,0,0,0,2702,2703,3,152,76,0,2703,2706,3,164,82,
        0,2704,2705,5,255,0,0,2705,2707,3,164,82,0,2706,2704,1,0,0,0,2706,
        2707,1,0,0,0,2707,163,1,0,0,0,2708,2709,7,28,0,0,2709,165,1,0,0,
        0,2710,2711,7,29,0,0,2711,167,1,0,0,0,2712,2713,6,84,-1,0,2713,2714,
        5,225,0,0,2714,2715,5,2,0,0,2715,2720,3,170,85,0,2716,2717,5,4,0,
        0,2717,2719,3,170,85,0,2718,2716,1,0,0,0,2719,2722,1,0,0,0,2720,
        2718,1,0,0,0,2720,2721,1,0,0,0,2721,2723,1,0,0,0,2722,2720,1,0,0,
        0,2723,2724,5,3,0,0,2724,2804,1,0,0,0,2725,2726,5,122,0,0,2726,2729,
        3,164,82,0,2727,2728,5,255,0,0,2728,2730,3,164,82,0,2729,2727,1,
        0,0,0,2729,2730,1,0,0,0,2730,2804,1,0,0,0,2731,2736,5,254,0,0,2732,
        2733,5,2,0,0,2733,2734,3,172,86,0,2734,2735,5,3,0,0,2735,2737,1,
        0,0,0,2736,2732,1,0,0,0,2736,2737,1,0,0,0,2737,2741,1,0,0,0,2738,
        2739,5,290,0,0,2739,2740,5,253,0,0,2740,2742,5,295,0,0,2741,2738,
        1,0,0,0,2741,2742,1,0,0,0,2742,2804,1,0,0,0,2743,2748,5,254,0,0,
        2744,2745,5,2,0,0,2745,2746,3,172,86,0,2746,2747,5,3,0,0,2747,2749,
        1,0,0,0,2748,2744,1,0,0,0,2748,2749,1,0,0,0,2749,2750,1,0,0,0,2750,
        2751,5,288,0,0,2751,2752,5,253,0,0,2752,2804,5,295,0,0,2753,2758,
        5,253,0,0,2754,2755,5,2,0,0,2755,2756,3,172,86,0,2756,2757,5,3,0,
        0,2757,2759,1,0,0,0,2758,2754,1,0,0,0,2758,2759,1,0,0,0,2759,2763,
        1,0,0,0,2760,2761,5,290,0,0,2761,2762,5,253,0,0,2762,2764,5,295,
        0,0,2763,2760,1,0,0,0,2763,2764,1,0,0,0,2764,2804,1,0,0,0,2765,2770,
        5,253,0,0,2766,2767,5,2,0,0,2767,2768,3,172,86,0,2768,2769,5,3,0,
        0,2769,2771,1,0,0,0,2770,2766,1,0,0,0,2770,2771,1,0,0,0,2771,2772,
        1,0,0,0,2772,2773,5,288,0,0,2773,2774,5,253,0,0,2774,2804,5,295,
        0,0,2775,2776,5,77,0,0,2776,2804,5,202,0,0,2777,2778,5,27,0,0,2778,
        2779,5,298,0,0,2779,2780,3,168,84,0,2780,2781,5,300,0,0,2781,2804,
        1,0,0,0,2782,2783,5,151,0,0,2783,2784,5,298,0,0,2784,2785,3,168,
        84,0,2785,2786,5,4,0,0,2786,2787,3,168,84,0,2787,2788,5,300,0,0,
        2788,2804,1,0,0,0,2789,2801,3,222,111,0,2790,2791,5,2,0,0,2791,2796,
        3,172,86,0,2792,2793,5,4,0,0,2793,2795,3,172,86,0,2794,2792,1,0,
        0,0,2795,2798,1,0,0,0,2796,2794,1,0,0,0,2796,2797,1,0,0,0,2797,2799,
        1,0,0,0,2798,2796,1,0,0,0,2799,2800,5,3,0,0,2800,2802,1,0,0,0,2801,
        2790,1,0,0,0,2801,2802,1,0,0,0,2802,2804,1,0,0,0,2803,2712,1,0,0,
        0,2803,2725,1,0,0,0,2803,2731,1,0,0,0,2803,2743,1,0,0,0,2803,2753,
        1,0,0,0,2803,2765,1,0,0,0,2803,2775,1,0,0,0,2803,2777,1,0,0,0,2803,
        2782,1,0,0,0,2803,2789,1,0,0,0,2804,2814,1,0,0,0,2805,2806,10,2,
        0,0,2806,2810,5,27,0,0,2807,2808,5,8,0,0,2808,2809,5,312,0,0,2809,
        2811,5,9,0,0,2810,2807,1,0,0,0,2810,2811,1,0,0,0,2811,2813,1,0,0,
        0,2812,2805,1,0,0,0,2813,2816,1,0,0,0,2814,2812,1,0,0,0,2814,2815,
        1,0,0,0,2815,169,1,0,0,0,2816,2814,1,0,0,0,2817,2822,3,168,84,0,
        2818,2819,3,222,111,0,2819,2820,3,168,84,0,2820,2822,1,0,0,0,2821,
        2817,1,0,0,0,2821,2818,1,0,0,0,2822,171,1,0,0,0,2823,2826,5,312,
        0,0,2824,2826,3,168,84,0,2825,2823,1,0,0,0,2825,2824,1,0,0,0,2826,
        173,1,0,0,0,2827,2828,5,285,0,0,2828,2829,3,120,60,0,2829,2830,5,
        251,0,0,2830,2831,3,120,60,0,2831,175,1,0,0,0,2832,2833,5,93,0,0,
        2833,2834,5,2,0,0,2834,2835,5,286,0,0,2835,2836,3,122,61,0,2836,
        2837,5,3,0,0,2837,177,1,0,0,0,2838,2839,5,285,0,0,2839,2842,5,153,
        0,0,2840,2841,5,25,0,0,2841,2843,3,120,60,0,2842,2840,1,0,0,0,2842,
        2843,1,0,0,0,2843,2844,1,0,0,0,2844,2845,5,251,0,0,2845,2846,5,272,
        0,0,2846,2847,5,237,0,0,2847,2848,3,222,111,0,2848,2849,5,296,0,
        0,2849,2857,3,120,60,0,2850,2851,5,4,0,0,2851,2852,3,222,111,0,2852,
        2853,5,296,0,0,2853,2854,3,120,60,0,2854,2856,1,0,0,0,2855,2850,
        1,0,0,0,2856,2859,1,0,0,0,2857,2855,1,0,0,0,2857,2858,1,0,0,0,2858,
        2903,1,0,0,0,2859,2857,1,0,0,0,2860,2861,5,285,0,0,2861,2864,5,153,
        0,0,2862,2863,5,25,0,0,2863,2865,3,120,60,0,2864,2862,1,0,0,0,2864,
        2865,1,0,0,0,2865,2866,1,0,0,0,2866,2867,5,251,0,0,2867,2903,5,70,
        0,0,2868,2869,5,285,0,0,2869,2870,5,171,0,0,2870,2873,5,153,0,0,
        2871,2872,5,25,0,0,2872,2874,3,120,60,0,2873,2871,1,0,0,0,2873,2874,
        1,0,0,0,2874,2875,1,0,0,0,2875,2876,5,251,0,0,2876,2888,5,120,0,
        0,2877,2878,5,2,0,0,2878,2883,3,222,111,0,2879,2880,5,4,0,0,2880,
        2882,3,222,111,0,2881,2879,1,0,0,0,2882,2885,1,0,0,0,2883,2881,1,
        0,0,0,2883,2884,1,0,0,0,2884,2886,1,0,0,0,2885,2883,1,0,0,0,2886,
        2887,5,3,0,0,2887,2889,1,0,0,0,2888,2877,1,0,0,0,2888,2889,1,0,0,
        0,2889,2890,1,0,0,0,2890,2891,5,281,0,0,2891,2892,5,2,0,0,2892,2897,
        3,120,60,0,2893,2894,5,4,0,0,2894,2896,3,120,60,0,2895,2893,1,0,
        0,0,2896,2899,1,0,0,0,2897,2895,1,0,0,0,2897,2898,1,0,0,0,2898,2900,
        1,0,0,0,2899,2897,1,0,0,0,2900,2901,5,3,0,0,2901,2903,1,0,0,0,2902,
        2838,1,0,0,0,2902,2860,1,0,0,0,2902,2868,1,0,0,0,2903,179,1,0,0,
        0,2904,2910,5,188,0,0,2905,2911,3,222,111,0,2906,2907,5,2,0,0,2907,
        2908,3,52,26,0,2908,2909,5,3,0,0,2909,2911,1,0,0,0,2910,2905,1,0,
        0,0,2910,2906,1,0,0,0,2911,181,1,0,0,0,2912,2913,5,157,0,0,2913,
        2918,3,78,39,0,2914,2915,5,4,0,0,2915,2917,3,78,39,0,2916,2914,1,
        0,0,0,2917,2920,1,0,0,0,2918,2916,1,0,0,0,2918,2919,1,0,0,0,2919,
        2922,1,0,0,0,2920,2918,1,0,0,0,2921,2912,1,0,0,0,2921,2922,1,0,0,
        0,2922,2923,1,0,0,0,2923,2927,3,184,92,0,2924,2925,5,21,0,0,2925,
        2926,5,152,0,0,2926,2928,3,84,42,0,2927,2924,1,0,0,0,2927,2928,1,
        0,0,0,2928,2930,1,0,0,0,2929,2931,7,14,0,0,2930,2929,1,0,0,0,2930,
        2931,1,0,0,0,2931,2937,1,0,0,0,2932,2933,5,195,0,0,2933,2934,5,2,
        0,0,2934,2935,3,188,94,0,2935,2936,5,3,0,0,2936,2938,1,0,0,0,2937,
        2932,1,0,0,0,2937,2938,1,0,0,0,2938,2948,1,0,0,0,2939,2940,5,243,
        0,0,2940,2945,3,86,43,0,2941,2942,5,4,0,0,2942,2944,3,86,43,0,2943,
        2941,1,0,0,0,2944,2947,1,0,0,0,2945,2943,1,0,0,0,2945,2946,1,0,0,
        0,2946,2949,1,0,0,0,2947,2945,1,0,0,0,2948,2939,1,0,0,0,2948,2949,
        1,0,0,0,2949,2959,1,0,0,0,2950,2951,5,68,0,0,2951,2956,3,88,44,0,
        2952,2953,5,4,0,0,2953,2955,3,88,44,0,2954,2952,1,0,0,0,2955,2958,
        1,0,0,0,2956,2954,1,0,0,0,2956,2957,1,0,0,0,2957,2960,1,0,0,0,2958,
        2956,1,0,0,0,2959,2950,1,0,0,0,2959,2960,1,0,0,0,2960,183,1,0,0,
        0,2961,2962,5,208,0,0,2962,2986,3,186,93,0,2963,2964,5,226,0,0,2964,
        2986,3,186,93,0,2965,2966,5,109,0,0,2966,2986,3,186,93,0,2967,2968,
        5,208,0,0,2968,2969,5,33,0,0,2969,2970,3,186,93,0,2970,2971,5,25,
        0,0,2971,2972,3,186,93,0,2972,2986,1,0,0,0,2973,2974,5,226,0,0,2974,
        2975,5,33,0,0,2975,2976,3,186,93,0,2976,2977,5,25,0,0,2977,2978,
        3,186,93,0,2978,2986,1,0,0,0,2979,2980,5,109,0,0,2980,2981,5,33,
        0,0,2981,2982,3,186,93,0,2982,2983,5,25,0,0,2983,2984,3,186,93,0,
        2984,2986,1,0,0,0,2985,2961,1,0,0,0,2985,2963,1,0,0,0,2985,2965,
        1,0,0,0,2985,2967,1,0,0,0,2985,2973,1,0,0,0,2985,2979,1,0,0,0,2986,
        185,1,0,0,0,2987,2988,5,264,0,0,2988,2997,5,201,0,0,2989,2990,5,
        264,0,0,2990,2997,5,96,0,0,2991,2992,5,54,0,0,2992,2997,5,225,0,
        0,2993,2994,3,120,60,0,2994,2995,7,30,0,0,2995,2997,1,0,0,0,2996,
        2987,1,0,0,0,2996,2989,1,0,0,0,2996,2991,1,0,0,0,2996,2993,1,0,0,
        0,2997,187,1,0,0,0,2998,2999,6,94,-1,0,2999,3001,3,190,95,0,3000,
        3002,3,192,96,0,3001,3000,1,0,0,0,3001,3002,1,0,0,0,3002,3010,1,
        0,0,0,3003,3004,10,2,0,0,3004,3009,3,188,94,3,3005,3006,10,1,0,0,
        3006,3007,5,11,0,0,3007,3009,3,188,94,2,3008,3003,1,0,0,0,3008,3005,
        1,0,0,0,3009,3012,1,0,0,0,3010,3008,1,0,0,0,3010,3011,1,0,0,0,3011,
        189,1,0,0,0,3012,3010,1,0,0,0,3013,3039,3,222,111,0,3014,3015,5,
        2,0,0,3015,3039,5,3,0,0,3016,3017,5,198,0,0,3017,3018,5,2,0,0,3018,
        3023,3,188,94,0,3019,3020,5,4,0,0,3020,3022,3,188,94,0,3021,3019,
        1,0,0,0,3022,3025,1,0,0,0,3023,3021,1,0,0,0,3023,3024,1,0,0,0,3024,
        3026,1,0,0,0,3025,3023,1,0,0,0,3026,3027,5,3,0,0,3027,3039,1,0,0,
        0,3028,3029,5,2,0,0,3029,3030,3,188,94,0,3030,3031,5,3,0,0,3031,
        3039,1,0,0,0,3032,3039,5,12,0,0,3033,3039,5,13,0,0,3034,3035,5,14,
        0,0,3035,3036,3,188,94,0,3036,3037,5,15,0,0,3037,3039,1,0,0,0,3038,
        3013,1,0,0,0,3038,3014,1,0,0,0,3038,3016,1,0,0,0,3038,3028,1,0,0,
        0,3038,3032,1,0,0,0,3038,3033,1,0,0,0,3038,3034,1,0,0,0,3039,191,
        1,0,0,0,3040,3042,5,304,0,0,3041,3043,5,308,0,0,3042,3041,1,0,0,
        0,3042,3043,1,0,0,0,3043,3071,1,0,0,0,3044,3046,5,302,0,0,3045,3047,
        5,308,0,0,3046,3045,1,0,0,0,3046,3047,1,0,0,0,3047,3071,1,0,0,0,
        3048,3050,5,308,0,0,3049,3051,5,308,0,0,3050,3049,1,0,0,0,3050,3051,
        1,0,0,0,3051,3071,1,0,0,0,3052,3053,5,16,0,0,3053,3054,5,312,0,0,
        3054,3056,5,17,0,0,3055,3057,5,308,0,0,3056,3055,1,0,0,0,3056,3057,
        1,0,0,0,3057,3071,1,0,0,0,3058,3060,5,16,0,0,3059,3061,5,312,0,0,
        3060,3059,1,0,0,0,3060,3061,1,0,0,0,3061,3062,1,0,0,0,3062,3064,
        5,4,0,0,3063,3065,5,312,0,0,3064,3063,1,0,0,0,3064,3065,1,0,0,0,
        3065,3066,1,0,0,0,3066,3068,5,17,0,0,3067,3069,5,308,0,0,3068,3067,
        1,0,0,0,3068,3069,1,0,0,0,3069,3071,1,0,0,0,3070,3040,1,0,0,0,3070,
        3044,1,0,0,0,3070,3048,1,0,0,0,3070,3052,1,0,0,0,3070,3058,1,0,0,
        0,3071,193,1,0,0,0,3072,3073,3,222,111,0,3073,3074,5,296,0,0,3074,
        3075,3,120,60,0,3075,195,1,0,0,0,3076,3077,5,98,0,0,3077,3081,7,
        31,0,0,3078,3079,5,262,0,0,3079,3081,7,32,0,0,3080,3076,1,0,0,0,
        3080,3078,1,0,0,0,3081,197,1,0,0,0,3082,3083,5,127,0,0,3083,3084,
        5,143,0,0,3084,3088,3,200,100,0,3085,3086,5,209,0,0,3086,3088,7,
        33,0,0,3087,3082,1,0,0,0,3087,3085,1,0,0,0,3088,199,1,0,0,0,3089,
        3090,5,209,0,0,3090,3097,5,265,0,0,3091,3092,5,209,0,0,3092,3097,
        5,46,0,0,3093,3094,5,213,0,0,3094,3097,5,209,0,0,3095,3097,5,235,
        0,0,3096,3089,1,0,0,0,3096,3091,1,0,0,0,3096,3093,1,0,0,0,3096,3095,
        1,0,0,0,3097,201,1,0,0,0,3098,3104,3,120,60,0,3099,3100,3,222,111,
        0,3100,3101,5,6,0,0,3101,3102,3,120,60,0,3102,3104,1,0,0,0,3103,
        3098,1,0,0,0,3103,3099,1,0,0,0,3104,203,1,0,0,0,3105,3106,3,222,
        111,0,3106,3107,5,1,0,0,3107,3108,3,222,111,0,3108,3111,1,0,0,0,
        3109,3111,3,222,111,0,3110,3105,1,0,0,0,3110,3109,1,0,0,0,3111,205,
        1,0,0,0,3112,3117,3,204,102,0,3113,3114,5,4,0,0,3114,3116,3,204,
        102,0,3115,3113,1,0,0,0,3116,3119,1,0,0,0,3117,3115,1,0,0,0,3117,
        3118,1,0,0,0,3118,207,1,0,0,0,3119,3117,1,0,0,0,3120,3121,7,34,0,
        0,3121,209,1,0,0,0,3122,3127,3,222,111,0,3123,3124,5,1,0,0,3124,
        3126,3,222,111,0,3125,3123,1,0,0,0,3126,3129,1,0,0,0,3127,3125,1,
        0,0,0,3127,3128,1,0,0,0,3128,211,1,0,0,0,3129,3127,1,0,0,0,3130,
        3131,5,97,0,0,3131,3132,3,214,107,0,3132,3133,5,28,0,0,3133,3134,
        5,176,0,0,3134,3135,3,126,63,0,3135,213,1,0,0,0,3136,3137,7,35,0,
        0,3137,215,1,0,0,0,3138,3142,3,218,109,0,3139,3142,5,62,0,0,3140,
        3142,5,58,0,0,3141,3138,1,0,0,0,3141,3139,1,0,0,0,3141,3140,1,0,
        0,0,3142,217,1,0,0,0,3143,3149,3,222,111,0,3144,3145,5,274,0,0,3145,
        3149,3,222,111,0,3146,3147,5,221,0,0,3147,3149,3,222,111,0,3148,
        3143,1,0,0,0,3148,3144,1,0,0,0,3148,3146,1,0,0,0,3149,219,1,0,0,
        0,3150,3155,3,222,111,0,3151,3152,5,4,0,0,3152,3154,3,222,111,0,
        3153,3151,1,0,0,0,3154,3157,1,0,0,0,3155,3153,1,0,0,0,3155,3156,
        1,0,0,0,3156,221,1,0,0,0,3157,3155,1,0,0,0,3158,3164,5,315,0,0,3159,
        3164,5,317,0,0,3160,3164,3,226,113,0,3161,3164,5,318,0,0,3162,3164,
        5,316,0,0,3163,3158,1,0,0,0,3163,3159,1,0,0,0,3163,3160,1,0,0,0,
        3163,3161,1,0,0,0,3163,3162,1,0,0,0,3164,223,1,0,0,0,3165,3167,5,
        303,0,0,3166,3165,1,0,0,0,3166,3167,1,0,0,0,3167,3168,1,0,0,0,3168,
        3178,5,313,0,0,3169,3171,5,303,0,0,3170,3169,1,0,0,0,3170,3171,1,
        0,0,0,3171,3172,1,0,0,0,3172,3178,5,314,0,0,3173,3175,5,303,0,0,
        3174,3173,1,0,0,0,3174,3175,1,0,0,0,3175,3176,1,0,0,0,3176,3178,
        5,312,0,0,3177,3166,1,0,0,0,3177,3170,1,0,0,0,3177,3174,1,0,0,0,
        3178,225,1,0,0,0,3179,3180,7,36,0,0,3180,227,1,0,0,0,428,256,263,
        267,271,277,281,288,293,297,303,307,326,332,336,340,344,352,356,
        359,364,370,379,385,389,395,402,411,423,432,441,447,458,466,474,
        481,491,498,506,542,545,548,552,558,563,570,576,580,584,592,598,
        602,616,624,643,668,671,681,685,692,702,708,713,717,723,732,738,
        742,749,753,761,766,770,778,786,791,795,805,812,817,821,831,834,
        843,848,854,878,884,886,892,898,900,908,910,916,922,924,939,944,
        951,963,965,973,975,993,996,1000,1004,1022,1025,1036,1039,1055,1065,
        1070,1076,1079,1088,1090,1093,1099,1106,1111,1117,1121,1125,1131,
        1142,1151,1161,1164,1169,1171,1178,1184,1186,1190,1200,1206,1209,
        1211,1223,1230,1234,1238,1242,1249,1258,1261,1265,1270,1274,1282,
        1285,1288,1295,1306,1309,1319,1322,1333,1338,1346,1349,1353,1362,
        1371,1374,1383,1386,1389,1393,1404,1407,1414,1417,1436,1440,1444,
        1448,1452,1456,1458,1469,1474,1483,1492,1495,1501,1513,1516,1525,
        1528,1536,1539,1542,1547,1550,1562,1565,1573,1578,1582,1584,1586,
        1601,1603,1614,1635,1645,1656,1660,1662,1670,1677,1690,1696,1722,
        1737,1742,1746,1756,1762,1768,1776,1781,1788,1790,1796,1802,1806,
        1811,1820,1825,1839,1849,1852,1861,1866,1871,1873,1882,1885,1893,
        1896,1903,1908,1919,1922,1926,1928,1936,1946,1952,1954,1961,1965,
        1967,1974,1978,1980,1982,1991,2002,2006,2016,2026,2030,2038,2040,
        2053,2061,2070,2076,2084,2090,2094,2099,2104,2110,2124,2126,2156,
        2167,2175,2180,2185,2198,2204,2211,2216,2219,2222,2227,2234,2237,
        2246,2249,2253,2256,2259,2274,2277,2296,2300,2308,2312,2337,2340,
        2349,2355,2361,2367,2376,2379,2382,2401,2410,2432,2435,2445,2454,
        2460,2466,2477,2479,2484,2491,2493,2499,2505,2516,2525,2530,2535,
        2537,2539,2545,2547,2557,2566,2568,2574,2576,2579,2589,2591,2599,
        2607,2610,2615,2620,2632,2636,2640,2643,2645,2653,2656,2666,2674,
        2680,2682,2690,2700,2706,2720,2729,2736,2741,2748,2758,2763,2770,
        2796,2801,2803,2810,2814,2821,2825,2842,2857,2864,2873,2883,2888,
        2897,2902,2910,2918,2921,2927,2930,2937,2945,2948,2956,2959,2985,
        2996,3001,3008,3010,3023,3038,3042,3046,3050,3056,3060,3064,3068,
        3070,3080,3087,3096,3103,3110,3117,3127,3141,3148,3155,3163,3166,
        3170,3174,3177
    ]

class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'('", "')'", "','", "'SKIP'", 
                     "'=>'", "'->'", "'['", "']'", "':'", "'|'", "'^'", 
                     "'$'", "'{-'", "'-}'", "'{'", "'}'", "'ABSENT'", "'ADD'", 
                     "'ADMIN'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", 
                     "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", 
                     "'AUTHORIZATION'", "'BERNOULLI'", "'BETWEEN'", "'BOTH'", 
                     "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
                     "'CATALOG'", "'CATALOGS'", "'COLUMN'", "'COLUMNS'", 
                     "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'CONDITIONAL'", 
                     "'CONSTRAINT'", "'COUNT'", "'COPARTITION'", "'CREATE'", 
                     "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_CATALOG'", 
                     "'CURRENT_DATE'", "'CURRENT_PATH'", "'CURRENT_ROLE'", 
                     "'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_USER'", "'DATA'", "'DATE'", "'DAY'", "'DEALLOCATE'", 
                     "'DEFAULT'", "'DEFINE'", "'DEFINER'", "'DELETE'", "'DENY'", 
                     "'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", "'DISTINCT'", 
                     "'DISTRIBUTED'", "'DOUBLE'", "'DROP'", "'ELSE'", "'EMPTY'", 
                     "'ENCODING'", "'END'", "'ERROR'", "'ESCAPE'", "'EXCEPT'", 
                     "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", 
                     "'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FINAL'", 
                     "'FIRST'", "'FOLLOWING'", "'FOR'", "'FORMAT'", "'FROM'", 
                     "'FULL'", "'FUNCTIONS'", "'GRACE'", "'GRANT'", "'GRANTED'", 
                     "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", "'GROUPING'", 
                     "'GROUPS'", "'HAVING'", "'HOUR'", "'IF'", "'IGNORE'", 
                     "'IMMEDIATE'", "'IN'", "'INCLUDING'", "'INITIAL'", 
                     "'INNER'", "'INPUT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'INVOKER'", "'IO'", "'IS'", "'ISOLATION'", 
                     "'JOIN'", "'JSON'", "'JSON_ARRAY'", "'JSON_EXISTS'", 
                     "'JSON_OBJECT'", "'JSON_QUERY'", "'JSON_TABLE'", "'JSON_VALUE'", 
                     "'KEEP'", "'KEY'", "'KEYS'", "'LAST'", "'LATERAL'", 
                     "'LEADING'", "'LEFT'", "'LEVEL'", "'LIKE'", "'LIMIT'", 
                     "'LISTAGG'", "'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
                     "'LOGICAL'", "'MAP'", "'MATCH'", "'MATCHED'", "'MATCHES'", 
                     "'MATCH_RECOGNIZE'", "'MATERIALIZED'", "'MEASURES'", 
                     "'MERGE'", "'MINUTE'", "'MONTH'", "'NATURAL'", "'NESTED'", 
                     "'NEXT'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", 
                     "'NONE'", "'NORMALIZE'", "'NOT'", "'NULL'", "'NULLIF'", 
                     "'NULLS'", "'OBJECT'", "'OF'", "'OFFSET'", "'OMIT'", 
                     "'ON'", "'ONE'", "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", 
                     "'ORDINALITY'", "'OUTER'", "'OUTPUT'", "'OVER'", "'OVERFLOW'", 
                     "'PARTITION'", "'PARTITIONS'", "'PASSING'", "'PAST'", 
                     "'PATH'", "'PATTERN'", "'PER'", "'PERIOD'", "'PERMUTE'", 
                     "'PLAN'", "'POSITION'", "'PRECEDING'", "'PRECISION'", 
                     "'PREPARE'", "'PRIVILEGES'", "'PROPERTIES'", "'PRUNE'", 
                     "'QUOTES'", "'RANGE'", "'READ'", "'RECURSIVE'", "'REFRESH'", 
                     "'RENAME'", "'REPEATABLE'", "'REPLACE'", "'RESET'", 
                     "'RESPECT'", "'RESTRICT'", "'RETURNING'", "'REVOKE'", 
                     "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", 
                     "'ROW'", "'ROWS'", "'RUNNING'", "'SCALAR'", "'SCHEMA'", 
                     "'SCHEMAS'", "'SECOND'", "'SECURITY'", "'SEEK'", "'SELECT'", 
                     "'SERIALIZABLE'", "'SESSION'", "'SET'", "'SETS'", "'SHOW'", 
                     "'SOME'", "'START'", "'STATS'", "'SUBSET'", "'SUBSTRING'", 
                     "'SYSTEM'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", 
                     "'TEXT'", "'STRING'", "'THEN'", "'TIES'", "'TIME'", 
                     "'TIMESTAMP'", "'TO'", "'TRAILING'", "'TRANSACTION'", 
                     "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", 
                     "'UESCAPE'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNCONDITIONAL'", 
                     "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNMATCHED'", 
                     "'UNNEST'", "'UPDATE'", "'USE'", "'USER'", "'USING'", 
                     "'UTF16'", "'UTF32'", "'UTF8'", "'VALIDATE'", "'VALUE'", 
                     "'VALUES'", "'VERBOSE'", "'VERSION'", "'VIEW'", "'WHEN'", 
                     "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'WITHOUT'", 
                     "'WORK'", "'WRAPPER'", "'WRITE'", "'YEAR'", "'ZONE'", 
                     "'='", "<INVALID>", "'<'", "'<='", "'>'", "'>='", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'||'", "'?'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "ABSENT", "ADD", "ADMIN", 
                      "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANY", 
                      "ARRAY", "AS", "ASC", "AT", "AUTHORIZATION", "BERNOULLI", 
                      "BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", 
                      "CAST", "CATALOG", "CATALOGS", "COLUMN", "COLUMNS", 
                      "COMMENT", "COMMIT", "COMMITTED", "CONDITIONAL", "CONSTRAINT", 
                      "COUNT", "COPARTITION", "CREATE", "CROSS", "CUBE", 
                      "CURRENT", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_PATH", 
                      "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATE", 
                      "DAY", "DEALLOCATE", "DEFAULT", "DEFINE", "DEFINER", 
                      "DELETE", "DENY", "DESC", "DESCRIBE", "DESCRIPTOR", 
                      "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "ELSE", 
                      "EMPTY", "ENCODING", "END", "ERROR", "ESCAPE", "EXCEPT", 
                      "EXCLUDING", "EXECUTE", "EXISTS", "EXPLAIN", "EXTRACT", 
                      "FALSE", "FETCH", "FILTER", "FINAL", "FIRST", "FOLLOWING", 
                      "FOR", "FORMAT", "FROM", "FULL", "FUNCTIONS", "GRACE", 
                      "GRANT", "GRANTED", "GRANTS", "GRAPHVIZ", "GROUP", 
                      "GROUPING", "GROUPS", "HAVING", "HOUR", "IF", "IGNORE", 
                      "IMMEDIATE", "IN", "INCLUDING", "INITIAL", "INNER", 
                      "INPUT", "INSERT", "INTERSECT", "INTERVAL", "INTO", 
                      "INVOKER", "IO", "IS", "ISOLATION", "JOIN", "JSON", 
                      "JSON_ARRAY", "JSON_EXISTS", "JSON_OBJECT", "JSON_QUERY", 
                      "JSON_TABLE", "JSON_VALUE", "KEEP", "KEY", "KEYS", 
                      "LAST", "LATERAL", "LEADING", "LEFT", "LEVEL", "LIKE", 
                      "LIMIT", "LISTAGG", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", 
                      "LOGICAL", "MAP", "MATCH", "MATCHED", "MATCHES", "MATCH_RECOGNIZE", 
                      "MATERIALIZED", "MEASURES", "MERGE", "MINUTE", "MONTH", 
                      "NATURAL", "NESTED", "NEXT", "NFC", "NFD", "NFKC", 
                      "NFKD", "NO", "NONE", "NORMALIZE", "NOT", "NULL", 
                      "NULLIF", "NULLS", "OBJECT", "OF", "OFFSET", "OMIT", 
                      "ON", "ONE", "ONLY", "OPTION", "OR", "ORDER", "ORDINALITY", 
                      "OUTER", "OUTPUT", "OVER", "OVERFLOW", "PARTITION", 
                      "PARTITIONS", "PASSING", "PAST", "PATH", "PATTERN", 
                      "PER", "PERIOD", "PERMUTE", "PLAN", "POSITION", "PRECEDING", 
                      "PRECISION", "PREPARE", "PRIVILEGES", "PROPERTIES", 
                      "PRUNE", "QUOTES", "RANGE", "READ", "RECURSIVE", "REFRESH", 
                      "RENAME", "REPEATABLE", "REPLACE", "RESET", "RESPECT", 
                      "RESTRICT", "RETURNING", "REVOKE", "RIGHT", "ROLE", 
                      "ROLES", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RUNNING", 
                      "SCALAR", "SCHEMA", "SCHEMAS", "SECOND", "SECURITY", 
                      "SEEK", "SELECT", "SERIALIZABLE", "SESSION", "SET", 
                      "SETS", "SHOW", "SOME", "START", "STATS", "SUBSET", 
                      "SUBSTRING", "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", 
                      "TEXT", "TEXT_STRING", "THEN", "TIES", "TIME", "TIMESTAMP", 
                      "TO", "TRAILING", "TRANSACTION", "TRIM", "TRUE", "TRUNCATE", 
                      "TRY_CAST", "TYPE", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", 
                      "UNCONDITIONAL", "UNION", "UNIQUE", "UNKNOWN", "UNMATCHED", 
                      "UNNEST", "UPDATE", "USE", "USER", "USING", "UTF16", 
                      "UTF32", "UTF8", "VALIDATE", "VALUE", "VALUES", "VERBOSE", 
                      "VERSION", "VIEW", "WHEN", "WHERE", "WINDOW", "WITH", 
                      "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE", "YEAR", 
                      "ZONE", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", 
                      "MINUS", "ASTERISK", "SLASH", "PERCENT", "CONCAT", 
                      "QUESTION_MARK", "STRING", "UNICODE_STRING", "BINARY_LITERAL", 
                      "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_VALUE", 
                      "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", 
                      "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", 
                      "WS", "UNRECOGNIZED", "DELIMITER" ]

    RULE_singleStatement = 0
    RULE_standaloneExpression = 1
    RULE_standalonePathSpecification = 2
    RULE_standaloneType = 3
    RULE_standaloneRowPattern = 4
    RULE_statement = 5
    RULE_query = 6
    RULE_with = 7
    RULE_tableElement = 8
    RULE_columnDefinition = 9
    RULE_likeClause = 10
    RULE_properties = 11
    RULE_propertyAssignments = 12
    RULE_property = 13
    RULE_propertyValue = 14
    RULE_queryNoWith = 15
    RULE_limitRowCount = 16
    RULE_rowCount = 17
    RULE_queryTerm = 18
    RULE_queryPrimary = 19
    RULE_sortItem = 20
    RULE_querySpecification = 21
    RULE_groupBy = 22
    RULE_groupingElement = 23
    RULE_groupingSet = 24
    RULE_windowDefinition = 25
    RULE_windowSpecification = 26
    RULE_namedQuery = 27
    RULE_setQuantifier = 28
    RULE_selectItem = 29
    RULE_relation = 30
    RULE_joinType = 31
    RULE_joinCriteria = 32
    RULE_sampledRelation = 33
    RULE_sampleType = 34
    RULE_trimsSpecification = 35
    RULE_listAggOverflowBehavior = 36
    RULE_listaggCountIndication = 37
    RULE_patternRecognition = 38
    RULE_measureDefinition = 39
    RULE_rowsPerMatch = 40
    RULE_emptyMatchHandling = 41
    RULE_skipTo = 42
    RULE_subsetDefinition = 43
    RULE_variableDefinition = 44
    RULE_aliasedRelation = 45
    RULE_columnAliases = 46
    RULE_relationPrimary = 47
    RULE_jsonTableColumn = 48
    RULE_jsonTableSpecificPlan = 49
    RULE_jsonTablePathName = 50
    RULE_planPrimary = 51
    RULE_jsonTableDefaultPlan = 52
    RULE_tableFunctionCall = 53
    RULE_tableFunctionArgument = 54
    RULE_tableArgument = 55
    RULE_tableArgumentRelation = 56
    RULE_descriptorArgument = 57
    RULE_descriptorField = 58
    RULE_copartitionTables = 59
    RULE_expression = 60
    RULE_booleanExpression = 61
    RULE_predicate = 62
    RULE_valueExpression = 63
    RULE_primaryExpression = 64
    RULE_jsonPathInvocation = 65
    RULE_jsonValueExpression = 66
    RULE_jsonRepresentation = 67
    RULE_jsonArgument = 68
    RULE_jsonExistsErrorBehavior = 69
    RULE_jsonValueBehavior = 70
    RULE_jsonQueryWrapperBehavior = 71
    RULE_jsonQueryBehavior = 72
    RULE_jsonObjectMember = 73
    RULE_processingMode = 74
    RULE_nullTreatment = 75
    RULE_string = 76
    RULE_timeZoneSpecifier = 77
    RULE_comparisonOperator = 78
    RULE_comparisonQuantifier = 79
    RULE_booleanValue = 80
    RULE_interval = 81
    RULE_intervalField = 82
    RULE_normalForm = 83
    RULE_type = 84
    RULE_rowField = 85
    RULE_typeParameter = 86
    RULE_whenClause = 87
    RULE_filter = 88
    RULE_mergeCase = 89
    RULE_over = 90
    RULE_windowFrame = 91
    RULE_frameExtent = 92
    RULE_frameBound = 93
    RULE_rowPattern = 94
    RULE_patternPrimary = 95
    RULE_patternQuantifier = 96
    RULE_updateAssignment = 97
    RULE_explainOption = 98
    RULE_transactionMode = 99
    RULE_levelOfIsolation = 100
    RULE_callArgument = 101
    RULE_pathElement = 102
    RULE_pathSpecification = 103
    RULE_privilege = 104
    RULE_qualifiedName = 105
    RULE_queryPeriod = 106
    RULE_rangeType = 107
    RULE_grantor = 108
    RULE_principal = 109
    RULE_roles = 110
    RULE_identifier = 111
    RULE_number = 112
    RULE_nonReserved = 113

    ruleNames =  [ "singleStatement", "standaloneExpression", "standalonePathSpecification", 
                   "standaloneType", "standaloneRowPattern", "statement", 
                   "query", "with", "tableElement", "columnDefinition", 
                   "likeClause", "properties", "propertyAssignments", "property", 
                   "propertyValue", "queryNoWith", "limitRowCount", "rowCount", 
                   "queryTerm", "queryPrimary", "sortItem", "querySpecification", 
                   "groupBy", "groupingElement", "groupingSet", "windowDefinition", 
                   "windowSpecification", "namedQuery", "setQuantifier", 
                   "selectItem", "relation", "joinType", "joinCriteria", 
                   "sampledRelation", "sampleType", "trimsSpecification", 
                   "listAggOverflowBehavior", "listaggCountIndication", 
                   "patternRecognition", "measureDefinition", "rowsPerMatch", 
                   "emptyMatchHandling", "skipTo", "subsetDefinition", "variableDefinition", 
                   "aliasedRelation", "columnAliases", "relationPrimary", 
                   "jsonTableColumn", "jsonTableSpecificPlan", "jsonTablePathName", 
                   "planPrimary", "jsonTableDefaultPlan", "tableFunctionCall", 
                   "tableFunctionArgument", "tableArgument", "tableArgumentRelation", 
                   "descriptorArgument", "descriptorField", "copartitionTables", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "jsonPathInvocation", "jsonValueExpression", 
                   "jsonRepresentation", "jsonArgument", "jsonExistsErrorBehavior", 
                   "jsonValueBehavior", "jsonQueryWrapperBehavior", "jsonQueryBehavior", 
                   "jsonObjectMember", "processingMode", "nullTreatment", 
                   "string", "timeZoneSpecifier", "comparisonOperator", 
                   "comparisonQuantifier", "booleanValue", "interval", "intervalField", 
                   "normalForm", "type", "rowField", "typeParameter", "whenClause", 
                   "filter", "mergeCase", "over", "windowFrame", "frameExtent", 
                   "frameBound", "rowPattern", "patternPrimary", "patternQuantifier", 
                   "updateAssignment", "explainOption", "transactionMode", 
                   "levelOfIsolation", "callArgument", "pathElement", "pathSpecification", 
                   "privilege", "qualifiedName", "queryPeriod", "rangeType", 
                   "grantor", "principal", "roles", "identifier", "number", 
                   "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    ABSENT=18
    ADD=19
    ADMIN=20
    AFTER=21
    ALL=22
    ALTER=23
    ANALYZE=24
    AND=25
    ANY=26
    ARRAY=27
    AS=28
    ASC=29
    AT=30
    AUTHORIZATION=31
    BERNOULLI=32
    BETWEEN=33
    BOTH=34
    BY=35
    CALL=36
    CASCADE=37
    CASE=38
    CAST=39
    CATALOG=40
    CATALOGS=41
    COLUMN=42
    COLUMNS=43
    COMMENT=44
    COMMIT=45
    COMMITTED=46
    CONDITIONAL=47
    CONSTRAINT=48
    COUNT=49
    COPARTITION=50
    CREATE=51
    CROSS=52
    CUBE=53
    CURRENT=54
    CURRENT_CATALOG=55
    CURRENT_DATE=56
    CURRENT_PATH=57
    CURRENT_ROLE=58
    CURRENT_SCHEMA=59
    CURRENT_TIME=60
    CURRENT_TIMESTAMP=61
    CURRENT_USER=62
    DATA=63
    DATE=64
    DAY=65
    DEALLOCATE=66
    DEFAULT=67
    DEFINE=68
    DEFINER=69
    DELETE=70
    DENY=71
    DESC=72
    DESCRIBE=73
    DESCRIPTOR=74
    DISTINCT=75
    DISTRIBUTED=76
    DOUBLE=77
    DROP=78
    ELSE=79
    EMPTY=80
    ENCODING=81
    END=82
    ERROR=83
    ESCAPE=84
    EXCEPT=85
    EXCLUDING=86
    EXECUTE=87
    EXISTS=88
    EXPLAIN=89
    EXTRACT=90
    FALSE=91
    FETCH=92
    FILTER=93
    FINAL=94
    FIRST=95
    FOLLOWING=96
    FOR=97
    FORMAT=98
    FROM=99
    FULL=100
    FUNCTIONS=101
    GRACE=102
    GRANT=103
    GRANTED=104
    GRANTS=105
    GRAPHVIZ=106
    GROUP=107
    GROUPING=108
    GROUPS=109
    HAVING=110
    HOUR=111
    IF=112
    IGNORE=113
    IMMEDIATE=114
    IN=115
    INCLUDING=116
    INITIAL=117
    INNER=118
    INPUT=119
    INSERT=120
    INTERSECT=121
    INTERVAL=122
    INTO=123
    INVOKER=124
    IO=125
    IS=126
    ISOLATION=127
    JOIN=128
    JSON=129
    JSON_ARRAY=130
    JSON_EXISTS=131
    JSON_OBJECT=132
    JSON_QUERY=133
    JSON_TABLE=134
    JSON_VALUE=135
    KEEP=136
    KEY=137
    KEYS=138
    LAST=139
    LATERAL=140
    LEADING=141
    LEFT=142
    LEVEL=143
    LIKE=144
    LIMIT=145
    LISTAGG=146
    LOCAL=147
    LOCALTIME=148
    LOCALTIMESTAMP=149
    LOGICAL=150
    MAP=151
    MATCH=152
    MATCHED=153
    MATCHES=154
    MATCH_RECOGNIZE=155
    MATERIALIZED=156
    MEASURES=157
    MERGE=158
    MINUTE=159
    MONTH=160
    NATURAL=161
    NESTED=162
    NEXT=163
    NFC=164
    NFD=165
    NFKC=166
    NFKD=167
    NO=168
    NONE=169
    NORMALIZE=170
    NOT=171
    NULL=172
    NULLIF=173
    NULLS=174
    OBJECT=175
    OF=176
    OFFSET=177
    OMIT=178
    ON=179
    ONE=180
    ONLY=181
    OPTION=182
    OR=183
    ORDER=184
    ORDINALITY=185
    OUTER=186
    OUTPUT=187
    OVER=188
    OVERFLOW=189
    PARTITION=190
    PARTITIONS=191
    PASSING=192
    PAST=193
    PATH=194
    PATTERN=195
    PER=196
    PERIOD=197
    PERMUTE=198
    PLAN=199
    POSITION=200
    PRECEDING=201
    PRECISION=202
    PREPARE=203
    PRIVILEGES=204
    PROPERTIES=205
    PRUNE=206
    QUOTES=207
    RANGE=208
    READ=209
    RECURSIVE=210
    REFRESH=211
    RENAME=212
    REPEATABLE=213
    REPLACE=214
    RESET=215
    RESPECT=216
    RESTRICT=217
    RETURNING=218
    REVOKE=219
    RIGHT=220
    ROLE=221
    ROLES=222
    ROLLBACK=223
    ROLLUP=224
    ROW=225
    ROWS=226
    RUNNING=227
    SCALAR=228
    SCHEMA=229
    SCHEMAS=230
    SECOND=231
    SECURITY=232
    SEEK=233
    SELECT=234
    SERIALIZABLE=235
    SESSION=236
    SET=237
    SETS=238
    SHOW=239
    SOME=240
    START=241
    STATS=242
    SUBSET=243
    SUBSTRING=244
    SYSTEM=245
    TABLE=246
    TABLES=247
    TABLESAMPLE=248
    TEXT=249
    TEXT_STRING=250
    THEN=251
    TIES=252
    TIME=253
    TIMESTAMP=254
    TO=255
    TRAILING=256
    TRANSACTION=257
    TRIM=258
    TRUE=259
    TRUNCATE=260
    TRY_CAST=261
    TYPE=262
    UESCAPE=263
    UNBOUNDED=264
    UNCOMMITTED=265
    UNCONDITIONAL=266
    UNION=267
    UNIQUE=268
    UNKNOWN=269
    UNMATCHED=270
    UNNEST=271
    UPDATE=272
    USE=273
    USER=274
    USING=275
    UTF16=276
    UTF32=277
    UTF8=278
    VALIDATE=279
    VALUE=280
    VALUES=281
    VERBOSE=282
    VERSION=283
    VIEW=284
    WHEN=285
    WHERE=286
    WINDOW=287
    WITH=288
    WITHIN=289
    WITHOUT=290
    WORK=291
    WRAPPER=292
    WRITE=293
    YEAR=294
    ZONE=295
    EQ=296
    NEQ=297
    LT=298
    LTE=299
    GT=300
    GTE=301
    PLUS=302
    MINUS=303
    ASTERISK=304
    SLASH=305
    PERCENT=306
    CONCAT=307
    QUESTION_MARK=308
    STRING=309
    UNICODE_STRING=310
    BINARY_LITERAL=311
    INTEGER_VALUE=312
    DECIMAL_VALUE=313
    DOUBLE_VALUE=314
    IDENTIFIER=315
    DIGIT_IDENTIFIER=316
    QUOTED_IDENTIFIER=317
    BACKQUOTED_IDENTIFIER=318
    SIMPLE_COMMENT=319
    BRACKETED_COMMENT=320
    WS=321
    UNRECOGNIZED=322
    DELIMITER=323

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.statement()
            self.state = 229
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneExpression" ):
                listener.enterStandaloneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneExpression" ):
                listener.exitStandaloneExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneExpression" ):
                return visitor.visitStandaloneExpression(self)
            else:
                return visitor.visitChildren(self)




    def standaloneExpression(self):

        localctx = SqlBaseParser.StandaloneExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_standaloneExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.expression()
            self.state = 232
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandalonePathSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.PathSpecificationContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standalonePathSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandalonePathSpecification" ):
                listener.enterStandalonePathSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandalonePathSpecification" ):
                listener.exitStandalonePathSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandalonePathSpecification" ):
                return visitor.visitStandalonePathSpecification(self)
            else:
                return visitor.visitChildren(self)




    def standalonePathSpecification(self):

        localctx = SqlBaseParser.StandalonePathSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_standalonePathSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.pathSpecification()
            self.state = 235
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneType" ):
                listener.enterStandaloneType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneType" ):
                listener.exitStandaloneType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneType" ):
                return visitor.visitStandaloneType(self)
            else:
                return visitor.visitChildren(self)




    def standaloneType(self):

        localctx = SqlBaseParser.StandaloneTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_standaloneType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.type_(0)
            self.state = 238
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneRowPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_standaloneRowPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneRowPattern" ):
                listener.enterStandaloneRowPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneRowPattern" ):
                listener.exitStandaloneRowPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneRowPattern" ):
                return visitor.visitStandaloneRowPattern(self)
            else:
                return visitor.visitChildren(self)




    def standaloneRowPattern(self):

        localctx = SqlBaseParser.StandaloneRowPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_standaloneRowPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.rowPattern(0)
            self.state = 241
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExplainOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class PrepareContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepare" ):
                listener.enterPrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepare" ):
                listener.exitPrepare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrepare" ):
                return visitor.visitPrepare(self)
            else:
                return visitor.visitChildren(self)


    class DropMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropMaterializedView" ):
                listener.enterDropMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropMaterializedView" ):
                listener.exitDropMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropMaterializedView" ):
                return visitor.visitDropMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class SetMaterializedViewPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)
        def propertyAssignments(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyAssignmentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetMaterializedViewProperties" ):
                listener.enterSetMaterializedViewProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetMaterializedViewProperties" ):
                listener.exitSetMaterializedViewProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetMaterializedViewProperties" ):
                return visitor.visitSetMaterializedViewProperties(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.schema = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DeallocateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEALLOCATE(self):
            return self.getToken(SqlBaseParser.DEALLOCATE, 0)
        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate" ):
                listener.enterDeallocate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate" ):
                listener.exitDeallocate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocate" ):
                return visitor.visitDeallocate(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class CommitContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit" ):
                return visitor.visitCommit(self)
            else:
                return visitor.visitChildren(self)


    class CreateRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRole" ):
                return visitor.visitCreateRole(self)
            else:
                return visitor.visitChildren(self)


    class DropColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumn" ):
                listener.enterDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumn" ):
                listener.exitDropColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropColumn" ):
                return visitor.visitDropColumn(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class SetViewAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetViewAuthorization" ):
                listener.enterSetViewAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetViewAuthorization" ):
                listener.exitSetViewAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetViewAuthorization" ):
                return visitor.visitSetViewAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class ShowCatalogsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogs" ):
                listener.enterShowCatalogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogs" ):
                listener.exitShowCatalogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCatalogs" ):
                return visitor.visitShowCatalogs(self)
            else:
                return visitor.visitChildren(self)


    class ShowRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)
        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoles" ):
                listener.enterShowRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoles" ):
                listener.exitShowRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoles" ):
                return visitor.visitShowRoles(self)
            else:
                return visitor.visitChildren(self)


    class MergeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def mergeCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MergeCaseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MergeCaseContext,i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge" ):
                listener.enterMerge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge" ):
                listener.exitMerge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge" ):
                return visitor.visitMerge(self)
            else:
                return visitor.visitChildren(self)


    class RenameColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.from_ = None # IdentifierContext
            self.to = None # IdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameColumn" ):
                listener.enterRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameColumn" ):
                listener.exitRenameColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameColumn" ):
                return visitor.visitRenameColumn(self)
            else:
                return visitor.visitChildren(self)


    class CommentColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumn" ):
                listener.enterCommentColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumn" ):
                listener.exitCommentColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentColumn" ):
                return visitor.visitCommentColumn(self)
            else:
                return visitor.visitChildren(self)


    class RevokeRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def roles(self):
            return self.getTypedRuleContext(SqlBaseParser.RolesContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,i)

        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRoles" ):
                listener.enterRevokeRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRoles" ):
                listener.exitRevokeRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeRoles" ):
                return visitor.visitRevokeRoles(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowRoleGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoleGrants" ):
                listener.enterShowRoleGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoleGrants" ):
                listener.exitShowRoleGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoleGrants" ):
                return visitor.visitShowRoleGrants(self)
            else:
                return visitor.visitChildren(self)


    class AddColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # ColumnDefinitionContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IF)
            else:
                return self.getToken(SqlBaseParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EXISTS)
            else:
                return self.getToken(SqlBaseParser.EXISTS, i)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumn" ):
                listener.enterAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumn" ):
                listener.exitAddColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddColumn" ):
                return visitor.visitAddColumn(self)
            else:
                return visitor.visitChildren(self)


    class DenyContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def DENY(self):
            return self.getToken(SqlBaseParser.DENY, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeny" ):
                listener.enterDeny(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeny" ):
                listener.exitDeny(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeny" ):
                return visitor.visitDeny(self)
            else:
                return visitor.visitChildren(self)


    class ResetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSession" ):
                listener.enterResetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSession" ):
                listener.exitResetSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetSession" ):
                return visitor.visitResetSession(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertInto" ):
                listener.enterInsertInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertInto" ):
                listener.exitInsertInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertInto" ):
                return visitor.visitInsertInto(self)
            else:
                return visitor.visitChildren(self)


    class ShowSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSession" ):
                listener.enterShowSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSession" ):
                listener.exitShowSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSession" ):
                return visitor.visitShowSession(self)
            else:
                return visitor.visitChildren(self)


    class CreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSchema" ):
                listener.enterCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSchema" ):
                listener.exitCreateSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateSchema" ):
                return visitor.visitCreateSchema(self)
            else:
                return visitor.visitChildren(self)


    class ExplainAnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainAnalyze" ):
                listener.enterExplainAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainAnalyze" ):
                listener.exitExplainAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainAnalyze" ):
                return visitor.visitExplainAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class ExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute" ):
                return visitor.visitExecute(self)
            else:
                return visitor.visitChildren(self)


    class RenameSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameSchema" ):
                listener.enterRenameSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameSchema" ):
                listener.exitRenameSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameSchema" ):
                return visitor.visitRenameSchema(self)
            else:
                return visitor.visitChildren(self)


    class DropRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropRole" ):
                return visitor.visitDropRole(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class SetRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.role = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def NONE(self):
            return self.getToken(SqlBaseParser.NONE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetRole" ):
                return visitor.visitSetRole(self)
            else:
                return visitor.visitChildren(self)


    class DropCatalogContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropCatalog" ):
                listener.enterDropCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropCatalog" ):
                listener.exitDropCatalog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropCatalog" ):
                return visitor.visitDropCatalog(self)
            else:
                return visitor.visitChildren(self)


    class ShowGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGrants" ):
                return visitor.visitShowGrants(self)
            else:
                return visitor.visitChildren(self)


    class DropSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSchema" ):
                listener.enterDropSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSchema" ):
                listener.exitDropSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropSchema" ):
                return visitor.visitDropSchema(self)
            else:
                return visitor.visitChildren(self)


    class SetTableAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableAuthorization" ):
                listener.enterSetTableAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableAuthorization" ):
                listener.exitSetTableAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableAuthorization" ):
                return visitor.visitSetTableAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateView" ):
                listener.enterShowCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateView" ):
                listener.exitShowCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateView" ):
                return visitor.visitShowCreateView(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableElementContext,i)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class StartTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartTransaction" ):
                return visitor.visitStartTransaction(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableAsSelectContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.WITH)
            else:
                return self.getToken(SqlBaseParser.WITH, i)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableAsSelect" ):
                listener.enterCreateTableAsSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableAsSelect" ):
                listener.exitCreateTableAsSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableAsSelect" ):
                return visitor.visitCreateTableAsSelect(self)
            else:
                return visitor.visitChildren(self)


    class CommentViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentView" ):
                listener.enterCommentView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentView" ):
                listener.exitCommentView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentView" ):
                return visitor.visitCommentView(self)
            else:
                return visitor.visitChildren(self)


    class ShowStatsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStats" ):
                listener.enterShowStats(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStats" ):
                listener.exitShowStats(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStats" ):
                return visitor.visitShowStats(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateSchema" ):
                listener.enterShowCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateSchema" ):
                listener.exitShowCreateSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateSchema" ):
                return visitor.visitShowCreateSchema(self)
            else:
                return visitor.visitChildren(self)


    class RevokeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke" ):
                listener.enterRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke" ):
                listener.exitRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevoke" ):
                return visitor.visitRevoke(self)
            else:
                return visitor.visitChildren(self)


    class UpdateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def updateAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UpdateAssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UpdateAssignmentContext,i)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate" ):
                listener.enterUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate" ):
                listener.exitUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate" ):
                return visitor.visitUpdate(self)
            else:
                return visitor.visitChildren(self)


    class TableExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.procedureName = None # IdentifierContext
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CallArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableExecute" ):
                listener.enterTableExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableExecute" ):
                listener.exitTableExecute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExecute" ):
                return visitor.visitTableExecute(self)
            else:
                return visitor.visitChildren(self)


    class DeleteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete" ):
                listener.enterDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete" ):
                listener.exitDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete" ):
                return visitor.visitDelete(self)
            else:
                return visitor.visitChildren(self)


    class DescribeInputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def INPUT(self):
            return self.getToken(SqlBaseParser.INPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeInput" ):
                listener.enterDescribeInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeInput" ):
                listener.exitDescribeInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeInput" ):
                return visitor.visitDescribeInput(self)
            else:
                return visitor.visitChildren(self)


    class ShowStatsForQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatsForQuery" ):
                listener.enterShowStatsForQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatsForQuery" ):
                listener.exitShowStatsForQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStatsForQuery" ):
                return visitor.visitShowStatsForQuery(self)
            else:
                return visitor.visitChildren(self)


    class SetColumnTypeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.columnName = None # IdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ALTER)
            else:
                return self.getToken(SqlBaseParser.ALTER, i)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetColumnType" ):
                listener.enterSetColumnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetColumnType" ):
                listener.exitSetColumnType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetColumnType" ):
                return visitor.visitSetColumnType(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetTimeZoneContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTimeZone" ):
                listener.enterSetTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTimeZone" ):
                listener.exitSetTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTimeZone" ):
                return visitor.visitSetTimeZone(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def GRACE(self):
            return self.getToken(SqlBaseParser.GRACE, 0)
        def PERIOD(self):
            return self.getToken(SqlBaseParser.PERIOD, 0)
        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedView" ):
                listener.enterCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedView" ):
                listener.exitCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateMaterializedView" ):
                return visitor.visitCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class SetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSession" ):
                listener.enterSetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSession" ):
                listener.exitSetSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSession" ):
                return visitor.visitSetSession(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def SECURITY(self):
            return self.getToken(SqlBaseParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(SqlBaseParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(SqlBaseParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class RenameMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameMaterializedView" ):
                listener.enterRenameMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameMaterializedView" ):
                listener.exitRenameMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameMaterializedView" ):
                return visitor.visitRenameMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class ShowSchemasContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemas" ):
                listener.enterShowSchemas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemas" ):
                listener.exitShowSchemas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSchemas" ):
                return visitor.visitShowSchemas(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class SetSchemaAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSchemaAuthorization" ):
                listener.enterSetSchemaAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSchemaAuthorization" ):
                listener.exitSetSchemaAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSchemaAuthorization" ):
                return visitor.visitSetSchemaAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class RollbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback" ):
                listener.enterRollback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback" ):
                listener.exitRollback(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback" ):
                return visitor.visitRollback(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class ExecuteImmediateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(SqlBaseParser.EXECUTE, 0)
        def IMMEDIATE(self):
            return self.getToken(SqlBaseParser.IMMEDIATE, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteImmediate" ):
                listener.enterExecuteImmediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteImmediate" ):
                listener.exitExecuteImmediate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteImmediate" ):
                return visitor.visitExecuteImmediate(self)
            else:
                return visitor.visitChildren(self)


    class RenameViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameView" ):
                listener.enterRenameView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameView" ):
                listener.exitRenameView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameView" ):
                return visitor.visitRenameView(self)
            else:
                return visitor.visitChildren(self)


    class SetPathContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)
        def pathSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.PathSpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPath" ):
                listener.enterSetPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPath" ):
                listener.exitSetPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetPath" ):
                return visitor.visitSetPath(self)
            else:
                return visitor.visitChildren(self)


    class GrantRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def roles(self):
            return self.getTypedRuleContext(SqlBaseParser.RolesContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def grantor(self):
            return self.getTypedRuleContext(SqlBaseParser.GrantorContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRoles" ):
                listener.enterGrantRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRoles" ):
                listener.exitGrantRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantRoles" ):
                return visitor.visitGrantRoles(self)
            else:
                return visitor.visitChildren(self)


    class CallContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CALL(self):
            return self.getToken(SqlBaseParser.CALL, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CallArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall" ):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)


    class RefreshMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshMaterializedView" ):
                listener.enterRefreshMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshMaterializedView" ):
                listener.exitRefreshMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshMaterializedView" ):
                return visitor.visitRefreshMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateMaterializedViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateMaterializedView" ):
                listener.enterShowCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateMaterializedView" ):
                listener.exitShowCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateMaterializedView" ):
                return visitor.visitShowCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)


    class CreateCatalogContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.catalog = None # IdentifierContext
            self.connectorName = None # IdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateCatalog" ):
                listener.enterCreateCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateCatalog" ):
                listener.exitCreateCatalog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateCatalog" ):
                return visitor.visitCreateCatalog(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeOutputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def OUTPUT(self):
            return self.getToken(SqlBaseParser.OUTPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeOutput" ):
                listener.enterDescribeOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeOutput" ):
                listener.exitDescribeOutput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeOutput" ):
                return visitor.visitDescribeOutput(self)
            else:
                return visitor.visitChildren(self)


    class GrantContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.GRANT)
            else:
                return self.getToken(SqlBaseParser.GRANT, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)
        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant" ):
                listener.enterGrant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant" ):
                listener.exitGrant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant" ):
                return visitor.visitGrant(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)
        def propertyAssignments(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyAssignmentsContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.match(SqlBaseParser.USE)
                self.state = 245
                localctx.schema = self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 246
                self.match(SqlBaseParser.USE)
                self.state = 247
                localctx.catalog = self.identifier()
                self.state = 248
                self.match(SqlBaseParser.T__0)
                self.state = 249
                localctx.schema = self.identifier()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CreateCatalogContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 251
                self.match(SqlBaseParser.CREATE)
                self.state = 252
                self.match(SqlBaseParser.CATALOG)
                self.state = 256
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 253
                    self.match(SqlBaseParser.IF)
                    self.state = 254
                    self.match(SqlBaseParser.NOT)
                    self.state = 255
                    self.match(SqlBaseParser.EXISTS)


                self.state = 258
                localctx.catalog = self.identifier()
                self.state = 259
                self.match(SqlBaseParser.USING)
                self.state = 260
                localctx.connectorName = self.identifier()
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 261
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 262
                    self.string()


                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 265
                    self.match(SqlBaseParser.AUTHORIZATION)
                    self.state = 266
                    self.principal()


                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 269
                    self.match(SqlBaseParser.WITH)
                    self.state = 270
                    self.properties()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropCatalogContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 273
                self.match(SqlBaseParser.DROP)
                self.state = 274
                self.match(SqlBaseParser.CATALOG)
                self.state = 277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 275
                    self.match(SqlBaseParser.IF)
                    self.state = 276
                    self.match(SqlBaseParser.EXISTS)


                self.state = 279
                localctx.catalog = self.identifier()
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37 or _la==217:
                    self.state = 280
                    _la = self._input.LA(1)
                    if not(_la==37 or _la==217):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 283
                self.match(SqlBaseParser.CREATE)
                self.state = 284
                self.match(SqlBaseParser.SCHEMA)
                self.state = 288
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 285
                    self.match(SqlBaseParser.IF)
                    self.state = 286
                    self.match(SqlBaseParser.NOT)
                    self.state = 287
                    self.match(SqlBaseParser.EXISTS)


                self.state = 290
                self.qualifiedName()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 291
                    self.match(SqlBaseParser.AUTHORIZATION)
                    self.state = 292
                    self.principal()


                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 295
                    self.match(SqlBaseParser.WITH)
                    self.state = 296
                    self.properties()


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.DropSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 299
                self.match(SqlBaseParser.DROP)
                self.state = 300
                self.match(SqlBaseParser.SCHEMA)
                self.state = 303
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 301
                    self.match(SqlBaseParser.IF)
                    self.state = 302
                    self.match(SqlBaseParser.EXISTS)


                self.state = 305
                self.qualifiedName()
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37 or _la==217:
                    self.state = 306
                    _la = self._input.LA(1)
                    if not(_la==37 or _la==217):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.RenameSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 309
                self.match(SqlBaseParser.ALTER)
                self.state = 310
                self.match(SqlBaseParser.SCHEMA)
                self.state = 311
                self.qualifiedName()
                self.state = 312
                self.match(SqlBaseParser.RENAME)
                self.state = 313
                self.match(SqlBaseParser.TO)
                self.state = 314
                self.identifier()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.SetSchemaAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 316
                self.match(SqlBaseParser.ALTER)
                self.state = 317
                self.match(SqlBaseParser.SCHEMA)
                self.state = 318
                self.qualifiedName()
                self.state = 319
                self.match(SqlBaseParser.SET)
                self.state = 320
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 321
                self.principal()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.CreateTableAsSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 323
                self.match(SqlBaseParser.CREATE)
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 324
                    self.match(SqlBaseParser.OR)
                    self.state = 325
                    self.match(SqlBaseParser.REPLACE)


                self.state = 328
                self.match(SqlBaseParser.TABLE)
                self.state = 332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 329
                    self.match(SqlBaseParser.IF)
                    self.state = 330
                    self.match(SqlBaseParser.NOT)
                    self.state = 331
                    self.match(SqlBaseParser.EXISTS)


                self.state = 334
                self.qualifiedName()
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 335
                    self.columnAliases()


                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 338
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 339
                    self.string()


                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 342
                    self.match(SqlBaseParser.WITH)
                    self.state = 343
                    self.properties()


                self.state = 346
                self.match(SqlBaseParser.AS)
                self.state = 352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 347
                    self.query()
                    pass

                elif la_ == 2:
                    self.state = 348
                    self.match(SqlBaseParser.T__1)
                    self.state = 349
                    self.query()
                    self.state = 350
                    self.match(SqlBaseParser.T__2)
                    pass


                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 354
                    self.match(SqlBaseParser.WITH)
                    self.state = 356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==168:
                        self.state = 355
                        self.match(SqlBaseParser.NO)


                    self.state = 358
                    self.match(SqlBaseParser.DATA)


                pass

            elif la_ == 11:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 361
                self.match(SqlBaseParser.CREATE)
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 362
                    self.match(SqlBaseParser.OR)
                    self.state = 363
                    self.match(SqlBaseParser.REPLACE)


                self.state = 366
                self.match(SqlBaseParser.TABLE)
                self.state = 370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 367
                    self.match(SqlBaseParser.IF)
                    self.state = 368
                    self.match(SqlBaseParser.NOT)
                    self.state = 369
                    self.match(SqlBaseParser.EXISTS)


                self.state = 372
                self.qualifiedName()
                self.state = 373
                self.match(SqlBaseParser.T__1)
                self.state = 374
                self.tableElement()
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 375
                    self.match(SqlBaseParser.T__3)
                    self.state = 376
                    self.tableElement()
                    self.state = 381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 382
                self.match(SqlBaseParser.T__2)
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 383
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 384
                    self.string()


                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 387
                    self.match(SqlBaseParser.WITH)
                    self.state = 388
                    self.properties()


                pass

            elif la_ == 12:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 391
                self.match(SqlBaseParser.DROP)
                self.state = 392
                self.match(SqlBaseParser.TABLE)
                self.state = 395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 393
                    self.match(SqlBaseParser.IF)
                    self.state = 394
                    self.match(SqlBaseParser.EXISTS)


                self.state = 397
                self.qualifiedName()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.InsertIntoContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 398
                self.match(SqlBaseParser.INSERT)
                self.state = 399
                self.match(SqlBaseParser.INTO)
                self.state = 400
                self.qualifiedName()
                self.state = 402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 401
                    self.columnAliases()


                self.state = 404
                self.query()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.DeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 406
                self.match(SqlBaseParser.DELETE)
                self.state = 407
                self.match(SqlBaseParser.FROM)
                self.state = 408
                self.qualifiedName()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286:
                    self.state = 409
                    self.match(SqlBaseParser.WHERE)
                    self.state = 410
                    self.booleanExpression(0)


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 413
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 414
                self.match(SqlBaseParser.TABLE)
                self.state = 415
                self.qualifiedName()
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 416
                self.match(SqlBaseParser.COMMENT)
                self.state = 417
                self.match(SqlBaseParser.ON)
                self.state = 418
                self.match(SqlBaseParser.TABLE)
                self.state = 419
                self.qualifiedName()
                self.state = 420
                self.match(SqlBaseParser.IS)
                self.state = 423
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [309, 310]:
                    self.state = 421
                    self.string()
                    pass
                elif token in [172]:
                    self.state = 422
                    self.match(SqlBaseParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 17:
                localctx = SqlBaseParser.CommentViewContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 425
                self.match(SqlBaseParser.COMMENT)
                self.state = 426
                self.match(SqlBaseParser.ON)
                self.state = 427
                self.match(SqlBaseParser.VIEW)
                self.state = 428
                self.qualifiedName()
                self.state = 429
                self.match(SqlBaseParser.IS)
                self.state = 432
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [309, 310]:
                    self.state = 430
                    self.string()
                    pass
                elif token in [172]:
                    self.state = 431
                    self.match(SqlBaseParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                localctx = SqlBaseParser.CommentColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 434
                self.match(SqlBaseParser.COMMENT)
                self.state = 435
                self.match(SqlBaseParser.ON)
                self.state = 436
                self.match(SqlBaseParser.COLUMN)
                self.state = 437
                self.qualifiedName()
                self.state = 438
                self.match(SqlBaseParser.IS)
                self.state = 441
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [309, 310]:
                    self.state = 439
                    self.string()
                    pass
                elif token in [172]:
                    self.state = 440
                    self.match(SqlBaseParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 443
                self.match(SqlBaseParser.ALTER)
                self.state = 444
                self.match(SqlBaseParser.TABLE)
                self.state = 447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 445
                    self.match(SqlBaseParser.IF)
                    self.state = 446
                    self.match(SqlBaseParser.EXISTS)


                self.state = 449
                localctx.from_ = self.qualifiedName()
                self.state = 450
                self.match(SqlBaseParser.RENAME)
                self.state = 451
                self.match(SqlBaseParser.TO)
                self.state = 452
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.AddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 454
                self.match(SqlBaseParser.ALTER)
                self.state = 455
                self.match(SqlBaseParser.TABLE)
                self.state = 458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 456
                    self.match(SqlBaseParser.IF)
                    self.state = 457
                    self.match(SqlBaseParser.EXISTS)


                self.state = 460
                localctx.tableName = self.qualifiedName()
                self.state = 461
                self.match(SqlBaseParser.ADD)
                self.state = 462
                self.match(SqlBaseParser.COLUMN)
                self.state = 466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 463
                    self.match(SqlBaseParser.IF)
                    self.state = 464
                    self.match(SqlBaseParser.NOT)
                    self.state = 465
                    self.match(SqlBaseParser.EXISTS)


                self.state = 468
                localctx.column = self.columnDefinition()
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.RenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 470
                self.match(SqlBaseParser.ALTER)
                self.state = 471
                self.match(SqlBaseParser.TABLE)
                self.state = 474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 472
                    self.match(SqlBaseParser.IF)
                    self.state = 473
                    self.match(SqlBaseParser.EXISTS)


                self.state = 476
                localctx.tableName = self.qualifiedName()
                self.state = 477
                self.match(SqlBaseParser.RENAME)
                self.state = 478
                self.match(SqlBaseParser.COLUMN)
                self.state = 481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 479
                    self.match(SqlBaseParser.IF)
                    self.state = 480
                    self.match(SqlBaseParser.EXISTS)


                self.state = 483
                localctx.from_ = self.identifier()
                self.state = 484
                self.match(SqlBaseParser.TO)
                self.state = 485
                localctx.to = self.identifier()
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.DropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 487
                self.match(SqlBaseParser.ALTER)
                self.state = 488
                self.match(SqlBaseParser.TABLE)
                self.state = 491
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 489
                    self.match(SqlBaseParser.IF)
                    self.state = 490
                    self.match(SqlBaseParser.EXISTS)


                self.state = 493
                localctx.tableName = self.qualifiedName()
                self.state = 494
                self.match(SqlBaseParser.DROP)
                self.state = 495
                self.match(SqlBaseParser.COLUMN)
                self.state = 498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 496
                    self.match(SqlBaseParser.IF)
                    self.state = 497
                    self.match(SqlBaseParser.EXISTS)


                self.state = 500
                localctx.column = self.qualifiedName()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.SetColumnTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 502
                self.match(SqlBaseParser.ALTER)
                self.state = 503
                self.match(SqlBaseParser.TABLE)
                self.state = 506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 504
                    self.match(SqlBaseParser.IF)
                    self.state = 505
                    self.match(SqlBaseParser.EXISTS)


                self.state = 508
                localctx.tableName = self.qualifiedName()
                self.state = 509
                self.match(SqlBaseParser.ALTER)
                self.state = 510
                self.match(SqlBaseParser.COLUMN)
                self.state = 511
                localctx.columnName = self.identifier()
                self.state = 512
                self.match(SqlBaseParser.SET)
                self.state = 513
                self.match(SqlBaseParser.DATA)
                self.state = 514
                self.match(SqlBaseParser.TYPE)
                self.state = 515
                self.type_(0)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.SetTableAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 517
                self.match(SqlBaseParser.ALTER)
                self.state = 518
                self.match(SqlBaseParser.TABLE)
                self.state = 519
                localctx.tableName = self.qualifiedName()
                self.state = 520
                self.match(SqlBaseParser.SET)
                self.state = 521
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 522
                self.principal()
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 524
                self.match(SqlBaseParser.ALTER)
                self.state = 525
                self.match(SqlBaseParser.TABLE)
                self.state = 526
                localctx.tableName = self.qualifiedName()
                self.state = 527
                self.match(SqlBaseParser.SET)
                self.state = 528
                self.match(SqlBaseParser.PROPERTIES)
                self.state = 529
                self.propertyAssignments()
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.TableExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 531
                self.match(SqlBaseParser.ALTER)
                self.state = 532
                self.match(SqlBaseParser.TABLE)
                self.state = 533
                localctx.tableName = self.qualifiedName()
                self.state = 534
                self.match(SqlBaseParser.EXECUTE)
                self.state = 535
                localctx.procedureName = self.identifier()
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 536
                    self.match(SqlBaseParser.T__1)
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424665027685960261) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199284287806152737) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4609540318515936191) != 0):
                        self.state = 537
                        self.callArgument()
                        self.state = 542
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==4:
                            self.state = 538
                            self.match(SqlBaseParser.T__3)
                            self.state = 539
                            self.callArgument()
                            self.state = 544
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 547
                    self.match(SqlBaseParser.T__2)


                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286:
                    self.state = 550
                    self.match(SqlBaseParser.WHERE)
                    self.state = 551
                    localctx.where = self.booleanExpression(0)


                pass

            elif la_ == 27:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 554
                self.match(SqlBaseParser.ANALYZE)
                self.state = 555
                self.qualifiedName()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 556
                    self.match(SqlBaseParser.WITH)
                    self.state = 557
                    self.properties()


                pass

            elif la_ == 28:
                localctx = SqlBaseParser.CreateMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 560
                self.match(SqlBaseParser.CREATE)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 561
                    self.match(SqlBaseParser.OR)
                    self.state = 562
                    self.match(SqlBaseParser.REPLACE)


                self.state = 565
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 566
                self.match(SqlBaseParser.VIEW)
                self.state = 570
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 567
                    self.match(SqlBaseParser.IF)
                    self.state = 568
                    self.match(SqlBaseParser.NOT)
                    self.state = 569
                    self.match(SqlBaseParser.EXISTS)


                self.state = 572
                self.qualifiedName()
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 573
                    self.match(SqlBaseParser.GRACE)
                    self.state = 574
                    self.match(SqlBaseParser.PERIOD)
                    self.state = 575
                    self.interval()


                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 578
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 579
                    self.string()


                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 582
                    self.match(SqlBaseParser.WITH)
                    self.state = 583
                    self.properties()


                self.state = 586
                self.match(SqlBaseParser.AS)
                self.state = 587
                self.query()
                pass

            elif la_ == 29:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 589
                self.match(SqlBaseParser.CREATE)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 590
                    self.match(SqlBaseParser.OR)
                    self.state = 591
                    self.match(SqlBaseParser.REPLACE)


                self.state = 594
                self.match(SqlBaseParser.VIEW)
                self.state = 595
                self.qualifiedName()
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 596
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 597
                    self.string()


                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232:
                    self.state = 600
                    self.match(SqlBaseParser.SECURITY)
                    self.state = 601
                    _la = self._input.LA(1)
                    if not(_la==69 or _la==124):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 604
                self.match(SqlBaseParser.AS)
                self.state = 605
                self.query()
                pass

            elif la_ == 30:
                localctx = SqlBaseParser.RefreshMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 607
                self.match(SqlBaseParser.REFRESH)
                self.state = 608
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 609
                self.match(SqlBaseParser.VIEW)
                self.state = 610
                self.qualifiedName()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.DropMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 611
                self.match(SqlBaseParser.DROP)
                self.state = 612
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 613
                self.match(SqlBaseParser.VIEW)
                self.state = 616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 614
                    self.match(SqlBaseParser.IF)
                    self.state = 615
                    self.match(SqlBaseParser.EXISTS)


                self.state = 618
                self.qualifiedName()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.RenameMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 619
                self.match(SqlBaseParser.ALTER)
                self.state = 620
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 621
                self.match(SqlBaseParser.VIEW)
                self.state = 624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 622
                    self.match(SqlBaseParser.IF)
                    self.state = 623
                    self.match(SqlBaseParser.EXISTS)


                self.state = 626
                localctx.from_ = self.qualifiedName()
                self.state = 627
                self.match(SqlBaseParser.RENAME)
                self.state = 628
                self.match(SqlBaseParser.TO)
                self.state = 629
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 33:
                localctx = SqlBaseParser.SetMaterializedViewPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 631
                self.match(SqlBaseParser.ALTER)
                self.state = 632
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 633
                self.match(SqlBaseParser.VIEW)
                self.state = 634
                self.qualifiedName()
                self.state = 635
                self.match(SqlBaseParser.SET)
                self.state = 636
                self.match(SqlBaseParser.PROPERTIES)
                self.state = 637
                self.propertyAssignments()
                pass

            elif la_ == 34:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 639
                self.match(SqlBaseParser.DROP)
                self.state = 640
                self.match(SqlBaseParser.VIEW)
                self.state = 643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 641
                    self.match(SqlBaseParser.IF)
                    self.state = 642
                    self.match(SqlBaseParser.EXISTS)


                self.state = 645
                self.qualifiedName()
                pass

            elif la_ == 35:
                localctx = SqlBaseParser.RenameViewContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 646
                self.match(SqlBaseParser.ALTER)
                self.state = 647
                self.match(SqlBaseParser.VIEW)
                self.state = 648
                localctx.from_ = self.qualifiedName()
                self.state = 649
                self.match(SqlBaseParser.RENAME)
                self.state = 650
                self.match(SqlBaseParser.TO)
                self.state = 651
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 36:
                localctx = SqlBaseParser.SetViewAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 653
                self.match(SqlBaseParser.ALTER)
                self.state = 654
                self.match(SqlBaseParser.VIEW)
                self.state = 655
                localctx.from_ = self.qualifiedName()
                self.state = 656
                self.match(SqlBaseParser.SET)
                self.state = 657
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 658
                self.principal()
                pass

            elif la_ == 37:
                localctx = SqlBaseParser.CallContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 660
                self.match(SqlBaseParser.CALL)
                self.state = 661
                self.qualifiedName()
                self.state = 662
                self.match(SqlBaseParser.T__1)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424665027685960261) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199284287806152737) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4609540318515936191) != 0):
                    self.state = 663
                    self.callArgument()
                    self.state = 668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 664
                        self.match(SqlBaseParser.T__3)
                        self.state = 665
                        self.callArgument()
                        self.state = 670
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 673
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.CreateRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 675
                self.match(SqlBaseParser.CREATE)
                self.state = 676
                self.match(SqlBaseParser.ROLE)
                self.state = 677
                localctx.name = self.identifier()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 678
                    self.match(SqlBaseParser.WITH)
                    self.state = 679
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 680
                    self.grantor()


                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 683
                    self.match(SqlBaseParser.IN)
                    self.state = 684
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 39:
                localctx = SqlBaseParser.DropRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 687
                self.match(SqlBaseParser.DROP)
                self.state = 688
                self.match(SqlBaseParser.ROLE)
                self.state = 689
                localctx.name = self.identifier()
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 690
                    self.match(SqlBaseParser.IN)
                    self.state = 691
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 40:
                localctx = SqlBaseParser.GrantRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 694
                self.match(SqlBaseParser.GRANT)
                self.state = 695
                self.roles()
                self.state = 696
                self.match(SqlBaseParser.TO)
                self.state = 697
                self.principal()
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 698
                    self.match(SqlBaseParser.T__3)
                    self.state = 699
                    self.principal()
                    self.state = 704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 705
                    self.match(SqlBaseParser.WITH)
                    self.state = 706
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 707
                    self.match(SqlBaseParser.OPTION)


                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 710
                    self.match(SqlBaseParser.GRANTED)
                    self.state = 711
                    self.match(SqlBaseParser.BY)
                    self.state = 712
                    self.grantor()


                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 715
                    self.match(SqlBaseParser.IN)
                    self.state = 716
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 41:
                localctx = SqlBaseParser.RevokeRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 719
                self.match(SqlBaseParser.REVOKE)
                self.state = 723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 720
                    self.match(SqlBaseParser.ADMIN)
                    self.state = 721
                    self.match(SqlBaseParser.OPTION)
                    self.state = 722
                    self.match(SqlBaseParser.FOR)


                self.state = 725
                self.roles()
                self.state = 726
                self.match(SqlBaseParser.FROM)
                self.state = 727
                self.principal()
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 728
                    self.match(SqlBaseParser.T__3)
                    self.state = 729
                    self.principal()
                    self.state = 734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 735
                    self.match(SqlBaseParser.GRANTED)
                    self.state = 736
                    self.match(SqlBaseParser.BY)
                    self.state = 737
                    self.grantor()


                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 740
                    self.match(SqlBaseParser.IN)
                    self.state = 741
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 42:
                localctx = SqlBaseParser.SetRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 744
                self.match(SqlBaseParser.SET)
                self.state = 745
                self.match(SqlBaseParser.ROLE)
                self.state = 749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 746
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 747
                    self.match(SqlBaseParser.NONE)
                    pass

                elif la_ == 3:
                    self.state = 748
                    localctx.role = self.identifier()
                    pass


                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 751
                    self.match(SqlBaseParser.IN)
                    self.state = 752
                    localctx.catalog = self.identifier()


                pass

            elif la_ == 43:
                localctx = SqlBaseParser.GrantContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 755
                self.match(SqlBaseParser.GRANT)
                self.state = 766
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51, 70, 120, 234, 272]:
                    self.state = 756
                    self.privilege()
                    self.state = 761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 757
                        self.match(SqlBaseParser.T__3)
                        self.state = 758
                        self.privilege()
                        self.state = 763
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [22]:
                    self.state = 764
                    self.match(SqlBaseParser.ALL)
                    self.state = 765
                    self.match(SqlBaseParser.PRIVILEGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 768
                self.match(SqlBaseParser.ON)
                self.state = 770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 769
                    _la = self._input.LA(1)
                    if not(_la==229 or _la==246):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 772
                self.qualifiedName()
                self.state = 773
                self.match(SqlBaseParser.TO)
                self.state = 774
                localctx.grantee = self.principal()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 775
                    self.match(SqlBaseParser.WITH)
                    self.state = 776
                    self.match(SqlBaseParser.GRANT)
                    self.state = 777
                    self.match(SqlBaseParser.OPTION)


                pass

            elif la_ == 44:
                localctx = SqlBaseParser.DenyContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 780
                self.match(SqlBaseParser.DENY)
                self.state = 791
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51, 70, 120, 234, 272]:
                    self.state = 781
                    self.privilege()
                    self.state = 786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 782
                        self.match(SqlBaseParser.T__3)
                        self.state = 783
                        self.privilege()
                        self.state = 788
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [22]:
                    self.state = 789
                    self.match(SqlBaseParser.ALL)
                    self.state = 790
                    self.match(SqlBaseParser.PRIVILEGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 793
                self.match(SqlBaseParser.ON)
                self.state = 795
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 794
                    _la = self._input.LA(1)
                    if not(_la==229 or _la==246):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 797
                self.qualifiedName()
                self.state = 798
                self.match(SqlBaseParser.TO)
                self.state = 799
                localctx.grantee = self.principal()
                pass

            elif la_ == 45:
                localctx = SqlBaseParser.RevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 801
                self.match(SqlBaseParser.REVOKE)
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 802
                    self.match(SqlBaseParser.GRANT)
                    self.state = 803
                    self.match(SqlBaseParser.OPTION)
                    self.state = 804
                    self.match(SqlBaseParser.FOR)


                self.state = 817
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51, 70, 120, 234, 272]:
                    self.state = 807
                    self.privilege()
                    self.state = 812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 808
                        self.match(SqlBaseParser.T__3)
                        self.state = 809
                        self.privilege()
                        self.state = 814
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [22]:
                    self.state = 815
                    self.match(SqlBaseParser.ALL)
                    self.state = 816
                    self.match(SqlBaseParser.PRIVILEGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 819
                self.match(SqlBaseParser.ON)
                self.state = 821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 820
                    _la = self._input.LA(1)
                    if not(_la==229 or _la==246):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 823
                self.qualifiedName()
                self.state = 824
                self.match(SqlBaseParser.FROM)
                self.state = 825
                localctx.grantee = self.principal()
                pass

            elif la_ == 46:
                localctx = SqlBaseParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 827
                self.match(SqlBaseParser.SHOW)
                self.state = 828
                self.match(SqlBaseParser.GRANTS)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 829
                    self.match(SqlBaseParser.ON)
                    self.state = 831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==246:
                        self.state = 830
                        self.match(SqlBaseParser.TABLE)


                    self.state = 833
                    self.qualifiedName()


                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 836
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 848
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 837
                    self.match(SqlBaseParser.T__1)
                    self.state = 838
                    self.explainOption()
                    self.state = 843
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 839
                        self.match(SqlBaseParser.T__3)
                        self.state = 840
                        self.explainOption()
                        self.state = 845
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 846
                    self.match(SqlBaseParser.T__2)


                self.state = 850
                self.statement()
                pass

            elif la_ == 48:
                localctx = SqlBaseParser.ExplainAnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 851
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 852
                self.match(SqlBaseParser.ANALYZE)
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==282:
                    self.state = 853
                    self.match(SqlBaseParser.VERBOSE)


                self.state = 856
                self.statement()
                pass

            elif la_ == 49:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 857
                self.match(SqlBaseParser.SHOW)
                self.state = 858
                self.match(SqlBaseParser.CREATE)
                self.state = 859
                self.match(SqlBaseParser.TABLE)
                self.state = 860
                self.qualifiedName()
                pass

            elif la_ == 50:
                localctx = SqlBaseParser.ShowCreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 861
                self.match(SqlBaseParser.SHOW)
                self.state = 862
                self.match(SqlBaseParser.CREATE)
                self.state = 863
                self.match(SqlBaseParser.SCHEMA)
                self.state = 864
                self.qualifiedName()
                pass

            elif la_ == 51:
                localctx = SqlBaseParser.ShowCreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 865
                self.match(SqlBaseParser.SHOW)
                self.state = 866
                self.match(SqlBaseParser.CREATE)
                self.state = 867
                self.match(SqlBaseParser.VIEW)
                self.state = 868
                self.qualifiedName()
                pass

            elif la_ == 52:
                localctx = SqlBaseParser.ShowCreateMaterializedViewContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 869
                self.match(SqlBaseParser.SHOW)
                self.state = 870
                self.match(SqlBaseParser.CREATE)
                self.state = 871
                self.match(SqlBaseParser.MATERIALIZED)
                self.state = 872
                self.match(SqlBaseParser.VIEW)
                self.state = 873
                self.qualifiedName()
                pass

            elif la_ == 53:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 874
                self.match(SqlBaseParser.SHOW)
                self.state = 875
                self.match(SqlBaseParser.TABLES)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99 or _la==115:
                    self.state = 876
                    _la = self._input.LA(1)
                    if not(_la==99 or _la==115):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 877
                    self.qualifiedName()


                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==144:
                    self.state = 880
                    self.match(SqlBaseParser.LIKE)
                    self.state = 881
                    localctx.pattern = self.string()
                    self.state = 884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 882
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 883
                        localctx.escape = self.string()




                pass

            elif la_ == 54:
                localctx = SqlBaseParser.ShowSchemasContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 888
                self.match(SqlBaseParser.SHOW)
                self.state = 889
                self.match(SqlBaseParser.SCHEMAS)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99 or _la==115:
                    self.state = 890
                    _la = self._input.LA(1)
                    if not(_la==99 or _la==115):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 891
                    self.identifier()


                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==144:
                    self.state = 894
                    self.match(SqlBaseParser.LIKE)
                    self.state = 895
                    localctx.pattern = self.string()
                    self.state = 898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 896
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 897
                        localctx.escape = self.string()




                pass

            elif la_ == 55:
                localctx = SqlBaseParser.ShowCatalogsContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 902
                self.match(SqlBaseParser.SHOW)
                self.state = 903
                self.match(SqlBaseParser.CATALOGS)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==144:
                    self.state = 904
                    self.match(SqlBaseParser.LIKE)
                    self.state = 905
                    localctx.pattern = self.string()
                    self.state = 908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 906
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 907
                        localctx.escape = self.string()




                pass

            elif la_ == 56:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 912
                self.match(SqlBaseParser.SHOW)
                self.state = 913
                self.match(SqlBaseParser.COLUMNS)
                self.state = 914
                _la = self._input.LA(1)
                if not(_la==99 or _la==115):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424682620090108485) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199299680970645631) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4323456189061643193) != 0):
                    self.state = 915
                    self.qualifiedName()


                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==144:
                    self.state = 918
                    self.match(SqlBaseParser.LIKE)
                    self.state = 919
                    localctx.pattern = self.string()
                    self.state = 922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 920
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 921
                        localctx.escape = self.string()




                pass

            elif la_ == 57:
                localctx = SqlBaseParser.ShowStatsContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 926
                self.match(SqlBaseParser.SHOW)
                self.state = 927
                self.match(SqlBaseParser.STATS)
                self.state = 928
                self.match(SqlBaseParser.FOR)
                self.state = 929
                self.qualifiedName()
                pass

            elif la_ == 58:
                localctx = SqlBaseParser.ShowStatsForQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 930
                self.match(SqlBaseParser.SHOW)
                self.state = 931
                self.match(SqlBaseParser.STATS)
                self.state = 932
                self.match(SqlBaseParser.FOR)
                self.state = 933
                self.match(SqlBaseParser.T__1)
                self.state = 934
                self.query()
                self.state = 935
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 59:
                localctx = SqlBaseParser.ShowRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 937
                self.match(SqlBaseParser.SHOW)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 938
                    self.match(SqlBaseParser.CURRENT)


                self.state = 941
                self.match(SqlBaseParser.ROLES)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99 or _la==115:
                    self.state = 942
                    _la = self._input.LA(1)
                    if not(_la==99 or _la==115):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 943
                    self.identifier()


                pass

            elif la_ == 60:
                localctx = SqlBaseParser.ShowRoleGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 946
                self.match(SqlBaseParser.SHOW)
                self.state = 947
                self.match(SqlBaseParser.ROLE)
                self.state = 948
                self.match(SqlBaseParser.GRANTS)
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99 or _la==115:
                    self.state = 949
                    _la = self._input.LA(1)
                    if not(_la==99 or _la==115):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 950
                    self.identifier()


                pass

            elif la_ == 61:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 953
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 954
                self.qualifiedName()
                pass

            elif la_ == 62:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 955
                self.match(SqlBaseParser.DESC)
                self.state = 956
                self.qualifiedName()
                pass

            elif la_ == 63:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 957
                self.match(SqlBaseParser.SHOW)
                self.state = 958
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==144:
                    self.state = 959
                    self.match(SqlBaseParser.LIKE)
                    self.state = 960
                    localctx.pattern = self.string()
                    self.state = 963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 961
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 962
                        localctx.escape = self.string()




                pass

            elif la_ == 64:
                localctx = SqlBaseParser.ShowSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 967
                self.match(SqlBaseParser.SHOW)
                self.state = 968
                self.match(SqlBaseParser.SESSION)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==144:
                    self.state = 969
                    self.match(SqlBaseParser.LIKE)
                    self.state = 970
                    localctx.pattern = self.string()
                    self.state = 973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==84:
                        self.state = 971
                        self.match(SqlBaseParser.ESCAPE)
                        self.state = 972
                        localctx.escape = self.string()




                pass

            elif la_ == 65:
                localctx = SqlBaseParser.SetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 977
                self.match(SqlBaseParser.SET)
                self.state = 978
                self.match(SqlBaseParser.SESSION)
                self.state = 979
                self.qualifiedName()
                self.state = 980
                self.match(SqlBaseParser.EQ)
                self.state = 981
                self.expression()
                pass

            elif la_ == 66:
                localctx = SqlBaseParser.ResetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 983
                self.match(SqlBaseParser.RESET)
                self.state = 984
                self.match(SqlBaseParser.SESSION)
                self.state = 985
                self.qualifiedName()
                pass

            elif la_ == 67:
                localctx = SqlBaseParser.StartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 986
                self.match(SqlBaseParser.START)
                self.state = 987
                self.match(SqlBaseParser.TRANSACTION)
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127 or _la==209:
                    self.state = 988
                    self.transactionMode()
                    self.state = 993
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 989
                        self.match(SqlBaseParser.T__3)
                        self.state = 990
                        self.transactionMode()
                        self.state = 995
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 68:
                localctx = SqlBaseParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 998
                self.match(SqlBaseParser.COMMIT)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 999
                    self.match(SqlBaseParser.WORK)


                pass

            elif la_ == 69:
                localctx = SqlBaseParser.RollbackContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 1002
                self.match(SqlBaseParser.ROLLBACK)
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 1003
                    self.match(SqlBaseParser.WORK)


                pass

            elif la_ == 70:
                localctx = SqlBaseParser.PrepareContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 1006
                self.match(SqlBaseParser.PREPARE)
                self.state = 1007
                self.identifier()
                self.state = 1008
                self.match(SqlBaseParser.FROM)
                self.state = 1009
                self.statement()
                pass

            elif la_ == 71:
                localctx = SqlBaseParser.DeallocateContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 1011
                self.match(SqlBaseParser.DEALLOCATE)
                self.state = 1012
                self.match(SqlBaseParser.PREPARE)
                self.state = 1013
                self.identifier()
                pass

            elif la_ == 72:
                localctx = SqlBaseParser.ExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 1014
                self.match(SqlBaseParser.EXECUTE)
                self.state = 1015
                self.identifier()
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275:
                    self.state = 1016
                    self.match(SqlBaseParser.USING)
                    self.state = 1017
                    self.expression()
                    self.state = 1022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1018
                        self.match(SqlBaseParser.T__3)
                        self.state = 1019
                        self.expression()
                        self.state = 1024
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 73:
                localctx = SqlBaseParser.ExecuteImmediateContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 1027
                self.match(SqlBaseParser.EXECUTE)
                self.state = 1028
                self.match(SqlBaseParser.IMMEDIATE)
                self.state = 1029
                self.string()
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==275:
                    self.state = 1030
                    self.match(SqlBaseParser.USING)
                    self.state = 1031
                    self.expression()
                    self.state = 1036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1032
                        self.match(SqlBaseParser.T__3)
                        self.state = 1033
                        self.expression()
                        self.state = 1038
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 74:
                localctx = SqlBaseParser.DescribeInputContext(self, localctx)
                self.enterOuterAlt(localctx, 74)
                self.state = 1041
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 1042
                self.match(SqlBaseParser.INPUT)
                self.state = 1043
                self.identifier()
                pass

            elif la_ == 75:
                localctx = SqlBaseParser.DescribeOutputContext(self, localctx)
                self.enterOuterAlt(localctx, 75)
                self.state = 1044
                self.match(SqlBaseParser.DESCRIBE)
                self.state = 1045
                self.match(SqlBaseParser.OUTPUT)
                self.state = 1046
                self.identifier()
                pass

            elif la_ == 76:
                localctx = SqlBaseParser.SetPathContext(self, localctx)
                self.enterOuterAlt(localctx, 76)
                self.state = 1047
                self.match(SqlBaseParser.SET)
                self.state = 1048
                self.match(SqlBaseParser.PATH)
                self.state = 1049
                self.pathSpecification()
                pass

            elif la_ == 77:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 77)
                self.state = 1050
                self.match(SqlBaseParser.SET)
                self.state = 1051
                self.match(SqlBaseParser.TIME)
                self.state = 1052
                self.match(SqlBaseParser.ZONE)
                self.state = 1055
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1053
                    self.match(SqlBaseParser.LOCAL)
                    pass

                elif la_ == 2:
                    self.state = 1054
                    self.expression()
                    pass


                pass

            elif la_ == 78:
                localctx = SqlBaseParser.UpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 78)
                self.state = 1057
                self.match(SqlBaseParser.UPDATE)
                self.state = 1058
                self.qualifiedName()
                self.state = 1059
                self.match(SqlBaseParser.SET)
                self.state = 1060
                self.updateAssignment()
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1061
                    self.match(SqlBaseParser.T__3)
                    self.state = 1062
                    self.updateAssignment()
                    self.state = 1067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286:
                    self.state = 1068
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1069
                    localctx.where = self.booleanExpression(0)


                pass

            elif la_ == 79:
                localctx = SqlBaseParser.MergeContext(self, localctx)
                self.enterOuterAlt(localctx, 79)
                self.state = 1072
                self.match(SqlBaseParser.MERGE)
                self.state = 1073
                self.match(SqlBaseParser.INTO)
                self.state = 1074
                self.qualifiedName()
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181133918208) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424682620090108485) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199299680970645631) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4323456189061643193) != 0):
                    self.state = 1076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1075
                        self.match(SqlBaseParser.AS)


                    self.state = 1078
                    self.identifier()


                self.state = 1081
                self.match(SqlBaseParser.USING)
                self.state = 1082
                self.relation(0)
                self.state = 1083
                self.match(SqlBaseParser.ON)
                self.state = 1084
                self.expression()
                self.state = 1086 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1085
                    self.mergeCase()
                    self.state = 1088 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==285):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def with_(self):
            return self.getTypedRuleContext(SqlBaseParser.WithContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==288:
                self.state = 1092
                self.with_()


            self.state = 1095
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def RECURSIVE(self):
            return self.getToken(SqlBaseParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith" ):
                listener.enterWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith" ):
                listener.exitWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith" ):
                return visitor.visitWith(self)
            else:
                return visitor.visitChildren(self)




    def with_(self):

        localctx = SqlBaseParser.WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_with)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.match(SqlBaseParser.WITH)
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==210:
                self.state = 1098
                self.match(SqlBaseParser.RECURSIVE)


            self.state = 1101
            self.namedQuery()
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1102
                self.match(SqlBaseParser.T__3)
                self.state = 1103
                self.namedQuery()
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)


        def likeClause(self):
            return self.getTypedRuleContext(SqlBaseParser.LikeClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElement" ):
                listener.enterTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElement" ):
                listener.exitTableElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElement" ):
                return visitor.visitTableElement(self)
            else:
                return visitor.visitChildren(self)




    def tableElement(self):

        localctx = SqlBaseParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_tableElement)
        try:
            self.state = 1111
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 122, 124, 125, 127, 129, 136, 137, 138, 139, 140, 141, 143, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 287, 289, 290, 291, 292, 293, 294, 295, 315, 316, 317, 318]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1109
                self.columnDefinition()
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1110
                self.likeClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def properties(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertiesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = SqlBaseParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.qualifiedName()
            self.state = 1114
            self.type_(0)
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==171:
                self.state = 1115
                self.match(SqlBaseParser.NOT)
                self.state = 1116
                self.match(SqlBaseParser.NULL)


            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 1119
                self.match(SqlBaseParser.COMMENT)
                self.state = 1120
                self.string()


            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==288:
                self.state = 1123
                self.match(SqlBaseParser.WITH)
                self.state = 1124
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optionType = None # Token

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def INCLUDING(self):
            return self.getToken(SqlBaseParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(SqlBaseParser.EXCLUDING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_likeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeClause" ):
                listener.enterLikeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeClause" ):
                listener.exitLikeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeClause" ):
                return visitor.visitLikeClause(self)
            else:
                return visitor.visitChildren(self)




    def likeClause(self):

        localctx = SqlBaseParser.LikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_likeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.match(SqlBaseParser.LIKE)
            self.state = 1128
            self.qualifiedName()
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86 or _la==116:
                self.state = 1129
                localctx.optionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==86 or _la==116):
                    localctx.optionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1130
                self.match(SqlBaseParser.PROPERTIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyAssignments(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyAssignmentsContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperties" ):
                listener.enterProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperties" ):
                listener.exitProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperties" ):
                return visitor.visitProperties(self)
            else:
                return visitor.visitChildren(self)




    def properties(self):

        localctx = SqlBaseParser.PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_properties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(SqlBaseParser.T__1)
            self.state = 1134
            self.propertyAssignments()
            self.state = 1135
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAssignmentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def property_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PropertyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyAssignments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyAssignments" ):
                listener.enterPropertyAssignments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyAssignments" ):
                listener.exitPropertyAssignments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyAssignments" ):
                return visitor.visitPropertyAssignments(self)
            else:
                return visitor.visitChildren(self)




    def propertyAssignments(self):

        localctx = SqlBaseParser.PropertyAssignmentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_propertyAssignments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.property_()
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1138
                self.match(SqlBaseParser.T__3)
                self.state = 1139
                self.property_()
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def propertyValue(self):
            return self.getTypedRuleContext(SqlBaseParser.PropertyValueContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperty" ):
                listener.enterProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperty" ):
                listener.exitProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperty" ):
                return visitor.visitProperty(self)
            else:
                return visitor.visitChildren(self)




    def property_(self):

        localctx = SqlBaseParser.PropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.identifier()
            self.state = 1146
            self.match(SqlBaseParser.EQ)
            self.state = 1147
            self.propertyValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_propertyValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefaultPropertyValueContext(PropertyValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PropertyValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultPropertyValue" ):
                listener.enterDefaultPropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultPropertyValue" ):
                listener.exitDefaultPropertyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultPropertyValue" ):
                return visitor.visitDefaultPropertyValue(self)
            else:
                return visitor.visitChildren(self)


    class NonDefaultPropertyValueContext(PropertyValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PropertyValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonDefaultPropertyValue" ):
                listener.enterNonDefaultPropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonDefaultPropertyValue" ):
                listener.exitNonDefaultPropertyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonDefaultPropertyValue" ):
                return visitor.visitNonDefaultPropertyValue(self)
            else:
                return visitor.visitChildren(self)



    def propertyValue(self):

        localctx = SqlBaseParser.PropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_propertyValue)
        try:
            self.state = 1151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DefaultPropertyValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                self.match(SqlBaseParser.DEFAULT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.NonDefaultPropertyValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1150
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # RowCountContext
            self.limit = None # LimitRowCountContext
            self.fetchFirst = None # RowCountContext

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def rowCount(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowCountContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowCountContext,i)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def limitRowCount(self):
            return self.getTypedRuleContext(SqlBaseParser.LimitRowCountContext,0)


        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ROW)
            else:
                return self.getToken(SqlBaseParser.ROW, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ROWS)
            else:
                return self.getToken(SqlBaseParser.ROWS, i)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def TIES(self):
            return self.getToken(SqlBaseParser.TIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryNoWith" ):
                return visitor.visitQueryNoWith(self)
            else:
                return visitor.visitChildren(self)




    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.queryTerm(0)
            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184:
                self.state = 1154
                self.match(SqlBaseParser.ORDER)
                self.state = 1155
                self.match(SqlBaseParser.BY)
                self.state = 1156
                self.sortItem()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1157
                    self.match(SqlBaseParser.T__3)
                    self.state = 1158
                    self.sortItem()
                    self.state = 1163
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1166
                self.match(SqlBaseParser.OFFSET)
                self.state = 1167
                localctx.offset = self.rowCount()
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225 or _la==226:
                    self.state = 1168
                    _la = self._input.LA(1)
                    if not(_la==225 or _la==226):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




            self.state = 1186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                self.state = 1173
                self.match(SqlBaseParser.LIMIT)
                self.state = 1174
                localctx.limit = self.limitRowCount()
                pass
            elif token in [92]:
                self.state = 1175
                self.match(SqlBaseParser.FETCH)
                self.state = 1176
                _la = self._input.LA(1)
                if not(_la==95 or _la==163):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==308 or _la==312:
                    self.state = 1177
                    localctx.fetchFirst = self.rowCount()


                self.state = 1180
                _la = self._input.LA(1)
                if not(_la==225 or _la==226):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1184
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [181]:
                    self.state = 1181
                    self.match(SqlBaseParser.ONLY)
                    pass
                elif token in [288]:
                    self.state = 1182
                    self.match(SqlBaseParser.WITH)
                    self.state = 1183
                    self.match(SqlBaseParser.TIES)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [-1, 3, 288]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitRowCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def rowCount(self):
            return self.getTypedRuleContext(SqlBaseParser.RowCountContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_limitRowCount

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitRowCount" ):
                listener.enterLimitRowCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitRowCount" ):
                listener.exitLimitRowCount(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitRowCount" ):
                return visitor.visitLimitRowCount(self)
            else:
                return visitor.visitChildren(self)




    def limitRowCount(self):

        localctx = SqlBaseParser.LimitRowCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_limitRowCount)
        try:
            self.state = 1190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1188
                self.match(SqlBaseParser.ALL)
                pass
            elif token in [308, 312]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self.rowCount()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowCount

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowCount" ):
                listener.enterRowCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowCount" ):
                listener.exitRowCount(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowCount" ):
                return visitor.visitRowCount(self)
            else:
                return visitor.visitChildren(self)




    def rowCount(self):

        localctx = SqlBaseParser.RowCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_rowCount)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            _la = self._input.LA(1)
            if not(_la==308 or _la==312):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1195
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1211
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1209
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1197
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1198
                        localctx.operator = self.match(SqlBaseParser.INTERSECT)
                        self.state = 1200
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==22 or _la==75:
                            self.state = 1199
                            self.setQuantifier()


                        self.state = 1202
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1203
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1204
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==85 or _la==267):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1206
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==22 or _la==75:
                            self.state = 1205
                            self.setQuantifier()


                        self.state = 1208
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 1213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_queryPrimary)
        try:
            self.state = 1230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [234]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1214
                self.querySpecification()
                pass
            elif token in [246]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.match(SqlBaseParser.TABLE)
                self.state = 1216
                self.qualifiedName()
                pass
            elif token in [281]:
                localctx = SqlBaseParser.InlineTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1217
                self.match(SqlBaseParser.VALUES)
                self.state = 1218
                self.expression()
                self.state = 1223
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1219
                        self.match(SqlBaseParser.T__3)
                        self.state = 1220
                        self.expression() 
                    self.state = 1225
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                pass
            elif token in [2]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1226
                self.match(SqlBaseParser.T__1)
                self.state = 1227
                self.queryNoWith()
                self.state = 1228
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrdering = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.expression()
            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29 or _la==72:
                self.state = 1233
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==29 or _la==72):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==174:
                self.state = 1236
                self.match(SqlBaseParser.NULLS)
                self.state = 1237
                localctx.nullOrdering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==95 or _la==139):
                    localctx.nullOrdering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # BooleanExpressionContext
            self.having = None # BooleanExpressionContext

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SelectItemContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def groupBy(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupByContext,0)


        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def windowDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WindowDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WindowDefinitionContext,i)


        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(SqlBaseParser.SELECT)
            self.state = 1242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1241
                self.setQuantifier()


            self.state = 1244
            self.selectItem()
            self.state = 1249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1245
                    self.match(SqlBaseParser.T__3)
                    self.state = 1246
                    self.selectItem() 
                self.state = 1251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

            self.state = 1261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1252
                self.match(SqlBaseParser.FROM)
                self.state = 1253
                self.relation(0)
                self.state = 1258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1254
                        self.match(SqlBaseParser.T__3)
                        self.state = 1255
                        self.relation(0) 
                    self.state = 1260
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)



            self.state = 1265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1263
                self.match(SqlBaseParser.WHERE)
                self.state = 1264
                localctx.where = self.booleanExpression(0)


            self.state = 1270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1267
                self.match(SqlBaseParser.GROUP)
                self.state = 1268
                self.match(SqlBaseParser.BY)
                self.state = 1269
                self.groupBy()


            self.state = 1274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1272
                self.match(SqlBaseParser.HAVING)
                self.state = 1273
                localctx.having = self.booleanExpression(0)


            self.state = 1285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1276
                self.match(SqlBaseParser.WINDOW)
                self.state = 1277
                self.windowDefinition()
                self.state = 1282
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1278
                        self.match(SqlBaseParser.T__3)
                        self.state = 1279
                        self.windowDefinition() 
                    self.state = 1284
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingElementContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupBy" ):
                listener.enterGroupBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupBy" ):
                listener.exitGroupBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupBy" ):
                return visitor.visitGroupBy(self)
            else:
                return visitor.visitChildren(self)




    def groupBy(self):

        localctx = SqlBaseParser.GroupByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_groupBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1287
                self.setQuantifier()


            self.state = 1290
            self.groupingElement()
            self.state = 1295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1291
                    self.match(SqlBaseParser.T__3)
                    self.state = 1292
                    self.groupingElement() 
                self.state = 1297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MultipleGroupingSetsContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)
        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleGroupingSets" ):
                listener.enterMultipleGroupingSets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleGroupingSets" ):
                listener.exitMultipleGroupingSets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleGroupingSets" ):
                return visitor.visitMultipleGroupingSets(self)
            else:
                return visitor.visitChildren(self)


    class SingleGroupingSetContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groupingSet(self):
            return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleGroupingSet" ):
                listener.enterSingleGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleGroupingSet" ):
                listener.exitSingleGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleGroupingSet" ):
                return visitor.visitSingleGroupingSet(self)
            else:
                return visitor.visitChildren(self)


    class CubeContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube" ):
                listener.enterCube(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube" ):
                listener.exitCube(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCube" ):
                return visitor.visitCube(self)
            else:
                return visitor.visitChildren(self)


    class RollupContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup" ):
                listener.enterRollup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup" ):
                listener.exitRollup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollup" ):
                return visitor.visitRollup(self)
            else:
                return visitor.visitChildren(self)



    def groupingElement(self):

        localctx = SqlBaseParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_groupingElement)
        self._la = 0 # Token type
        try:
            self.state = 1338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SingleGroupingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.groupingSet()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RollupContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.match(SqlBaseParser.ROLLUP)
                self.state = 1300
                self.match(SqlBaseParser.T__1)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424665027685960261) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199284287806152737) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4609540318515936191) != 0):
                    self.state = 1301
                    self.groupingSet()
                    self.state = 1306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1302
                        self.match(SqlBaseParser.T__3)
                        self.state = 1303
                        self.groupingSet()
                        self.state = 1308
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1311
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CubeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1312
                self.match(SqlBaseParser.CUBE)
                self.state = 1313
                self.match(SqlBaseParser.T__1)
                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424665027685960261) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199284287806152737) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4609540318515936191) != 0):
                    self.state = 1314
                    self.groupingSet()
                    self.state = 1319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1315
                        self.match(SqlBaseParser.T__3)
                        self.state = 1316
                        self.groupingSet()
                        self.state = 1321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1324
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.MultipleGroupingSetsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1325
                self.match(SqlBaseParser.GROUPING)
                self.state = 1326
                self.match(SqlBaseParser.SETS)
                self.state = 1327
                self.match(SqlBaseParser.T__1)
                self.state = 1328
                self.groupingSet()
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1329
                    self.match(SqlBaseParser.T__3)
                    self.state = 1330
                    self.groupingSet()
                    self.state = 1335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1336
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 1353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1340
                self.match(SqlBaseParser.T__1)
                self.state = 1349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424665027685960261) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199284287806152737) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4609540318515936191) != 0):
                    self.state = 1341
                    self.expression()
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1342
                        self.match(SqlBaseParser.T__3)
                        self.state = 1343
                        self.expression()
                        self.state = 1348
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1351
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecificationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDefinition" ):
                listener.enterWindowDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDefinition" ):
                listener.exitWindowDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDefinition" ):
                return visitor.visitWindowDefinition(self)
            else:
                return visitor.visitChildren(self)




    def windowDefinition(self):

        localctx = SqlBaseParser.WindowDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_windowDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            localctx.name = self.identifier()
            self.state = 1356
            self.match(SqlBaseParser.AS)
            self.state = 1357
            self.match(SqlBaseParser.T__1)
            self.state = 1358
            self.windowSpecification()
            self.state = 1359
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.existingWindowName = None # IdentifierContext
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpecification" ):
                listener.enterWindowSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpecification" ):
                listener.exitWindowSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowSpecification" ):
                return visitor.visitWindowSpecification(self)
            else:
                return visitor.visitChildren(self)




    def windowSpecification(self):

        localctx = SqlBaseParser.WindowSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_windowSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1361
                localctx.existingWindowName = self.identifier()


            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 1364
                self.match(SqlBaseParser.PARTITION)
                self.state = 1365
                self.match(SqlBaseParser.BY)
                self.state = 1366
                localctx._expression = self.expression()
                localctx.partition.append(localctx._expression)
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1367
                    self.match(SqlBaseParser.T__3)
                    self.state = 1368
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184:
                self.state = 1376
                self.match(SqlBaseParser.ORDER)
                self.state = 1377
                self.match(SqlBaseParser.BY)
                self.state = 1378
                self.sortItem()
                self.state = 1383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1379
                    self.match(SqlBaseParser.T__3)
                    self.state = 1380
                    self.sortItem()
                    self.state = 1385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109 or _la==157 or _la==208 or _la==226:
                self.state = 1388
                self.windowFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            localctx.name = self.identifier()
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 1392
                self.columnAliases()


            self.state = 1395
            self.match(SqlBaseParser.AS)
            self.state = 1396
            self.match(SqlBaseParser.T__1)
            self.state = 1397
            self.query()
            self.state = 1398
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            _la = self._input.LA(1)
            if not(_la==22 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectAll" ):
                return visitor.visitSelectAll(self)
            else:
                return visitor.visitChildren(self)


    class SelectSingleContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSingle" ):
                listener.enterSelectSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSingle" ):
                listener.exitSelectSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSingle" ):
                return visitor.visitSelectSingle(self)
            else:
                return visitor.visitChildren(self)



    def selectItem(self):

        localctx = SqlBaseParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 1417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SelectSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1402
                self.expression()
                self.state = 1407
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1403
                        self.match(SqlBaseParser.AS)


                    self.state = 1406
                    self.identifier()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1409
                self.primaryExpression(0)
                self.state = 1410
                self.match(SqlBaseParser.T__0)
                self.state = 1411
                self.match(SqlBaseParser.ASTERISK)
                self.state = 1414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1412
                    self.match(SqlBaseParser.AS)
                    self.state = 1413
                    self.columnAliases()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1416
                self.match(SqlBaseParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RelationDefaultContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sampledRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationDefault" ):
                listener.enterRelationDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationDefault" ):
                listener.exitRelationDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationDefault" ):
                return visitor.visitRelationDefault(self)
            else:
                return visitor.visitChildren(self)


    class JoinRelationContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.left = None # RelationContext
            self.right = None # SampledRelationContext
            self.rightRelation = None # RelationContext
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)
        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)
        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)
        def sampledRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.RelationDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1420
            self.sampledRelation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1440
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.JoinRelationContext(self, SqlBaseParser.RelationContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1422
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1436
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [52]:
                        self.state = 1423
                        self.match(SqlBaseParser.CROSS)
                        self.state = 1424
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1425
                        localctx.right = self.sampledRelation()
                        pass
                    elif token in [100, 118, 128, 142, 220]:
                        self.state = 1426
                        self.joinType()
                        self.state = 1427
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1428
                        localctx.rightRelation = self.relation(0)
                        self.state = 1429
                        self.joinCriteria()
                        pass
                    elif token in [161]:
                        self.state = 1431
                        self.match(SqlBaseParser.NATURAL)
                        self.state = 1432
                        self.joinType()
                        self.state = 1433
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1434
                        localctx.right = self.sampledRelation()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1443
                    self.match(SqlBaseParser.INNER)


                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.match(SqlBaseParser.LEFT)
                self.state = 1448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==186:
                    self.state = 1447
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [220]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1450
                self.match(SqlBaseParser.RIGHT)
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==186:
                    self.state = 1451
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1454
                self.match(SqlBaseParser.FULL)
                self.state = 1456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==186:
                    self.state = 1455
                    self.match(SqlBaseParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [179]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.match(SqlBaseParser.ON)
                self.state = 1461
                self.booleanExpression(0)
                pass
            elif token in [275]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1462
                self.match(SqlBaseParser.USING)
                self.state = 1463
                self.match(SqlBaseParser.T__1)
                self.state = 1464
                self.identifier()
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1465
                    self.match(SqlBaseParser.T__3)
                    self.state = 1466
                    self.identifier()
                    self.state = 1471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1472
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampledRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # ExpressionContext

        def patternRecognition(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternRecognitionContext,0)


        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def sampleType(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampledRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampledRelation" ):
                listener.enterSampledRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampledRelation" ):
                listener.exitSampledRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampledRelation" ):
                return visitor.visitSampledRelation(self)
            else:
                return visitor.visitChildren(self)




    def sampledRelation(self):

        localctx = SqlBaseParser.SampledRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_sampledRelation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self.patternRecognition()
            self.state = 1483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1477
                self.match(SqlBaseParser.TABLESAMPLE)
                self.state = 1478
                self.sampleType()
                self.state = 1479
                self.match(SqlBaseParser.T__1)
                self.state = 1480
                localctx.percentage = self.expression()
                self.state = 1481
                self.match(SqlBaseParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleType" ):
                listener.enterSampleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleType" ):
                listener.exitSampleType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleType" ):
                return visitor.visitSampleType(self)
            else:
                return visitor.visitChildren(self)




    def sampleType(self):

        localctx = SqlBaseParser.SampleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_sampleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            _la = self._input.LA(1)
            if not(_la==32 or _la==245):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrimsSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_trimsSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimsSpecification" ):
                listener.enterTrimsSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimsSpecification" ):
                listener.exitTrimsSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrimsSpecification" ):
                return visitor.visitTrimsSpecification(self)
            else:
                return visitor.visitChildren(self)




    def trimsSpecification(self):

        localctx = SqlBaseParser.TrimsSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_trimsSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            _la = self._input.LA(1)
            if not(_la==34 or _la==141 or _la==256):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListAggOverflowBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def listaggCountIndication(self):
            return self.getTypedRuleContext(SqlBaseParser.ListaggCountIndicationContext,0)


        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_listAggOverflowBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAggOverflowBehavior" ):
                listener.enterListAggOverflowBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAggOverflowBehavior" ):
                listener.exitListAggOverflowBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListAggOverflowBehavior" ):
                return visitor.visitListAggOverflowBehavior(self)
            else:
                return visitor.visitChildren(self)




    def listAggOverflowBehavior(self):

        localctx = SqlBaseParser.ListAggOverflowBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_listAggOverflowBehavior)
        self._la = 0 # Token type
        try:
            self.state = 1495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1489
                self.match(SqlBaseParser.ERROR)
                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1490
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 1492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==309 or _la==310:
                    self.state = 1491
                    self.string()


                self.state = 1494
                self.listaggCountIndication()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListaggCountIndicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def COUNT(self):
            return self.getToken(SqlBaseParser.COUNT, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_listaggCountIndication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListaggCountIndication" ):
                listener.enterListaggCountIndication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListaggCountIndication" ):
                listener.exitListaggCountIndication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListaggCountIndication" ):
                return visitor.visitListaggCountIndication(self)
            else:
                return visitor.visitChildren(self)




    def listaggCountIndication(self):

        localctx = SqlBaseParser.ListaggCountIndicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_listaggCountIndication)
        try:
            self.state = 1501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [288]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.match(SqlBaseParser.WITH)
                self.state = 1498
                self.match(SqlBaseParser.COUNT)
                pass
            elif token in [290]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1499
                self.match(SqlBaseParser.WITHOUT)
                self.state = 1500
                self.match(SqlBaseParser.COUNT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternRecognitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)


        def MATCH_RECOGNIZE(self):
            return self.getToken(SqlBaseParser.MATCH_RECOGNIZE, 0)

        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def variableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.VariableDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.VariableDefinitionContext,i)


        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def measureDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MeasureDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MeasureDefinitionContext,i)


        def rowsPerMatch(self):
            return self.getTypedRuleContext(SqlBaseParser.RowsPerMatchContext,0)


        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def skipTo(self):
            return self.getTypedRuleContext(SqlBaseParser.SkipToContext,0)


        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def subsetDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubsetDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubsetDefinitionContext,i)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternRecognition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternRecognition" ):
                listener.enterPatternRecognition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternRecognition" ):
                listener.exitPatternRecognition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternRecognition" ):
                return visitor.visitPatternRecognition(self)
            else:
                return visitor.visitChildren(self)




    def patternRecognition(self):

        localctx = SqlBaseParser.PatternRecognitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_patternRecognition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            self.aliasedRelation()
            self.state = 1586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1504
                self.match(SqlBaseParser.MATCH_RECOGNIZE)
                self.state = 1505
                self.match(SqlBaseParser.T__1)
                self.state = 1516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 1506
                    self.match(SqlBaseParser.PARTITION)
                    self.state = 1507
                    self.match(SqlBaseParser.BY)
                    self.state = 1508
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1509
                        self.match(SqlBaseParser.T__3)
                        self.state = 1510
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 1515
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 1518
                    self.match(SqlBaseParser.ORDER)
                    self.state = 1519
                    self.match(SqlBaseParser.BY)
                    self.state = 1520
                    self.sortItem()
                    self.state = 1525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1521
                        self.match(SqlBaseParser.T__3)
                        self.state = 1522
                        self.sortItem()
                        self.state = 1527
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 1530
                    self.match(SqlBaseParser.MEASURES)
                    self.state = 1531
                    self.measureDefinition()
                    self.state = 1536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1532
                        self.match(SqlBaseParser.T__3)
                        self.state = 1533
                        self.measureDefinition()
                        self.state = 1538
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22 or _la==180:
                    self.state = 1541
                    self.rowsPerMatch()


                self.state = 1547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 1544
                    self.match(SqlBaseParser.AFTER)
                    self.state = 1545
                    self.match(SqlBaseParser.MATCH)
                    self.state = 1546
                    self.skipTo()


                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117 or _la==233:
                    self.state = 1549
                    _la = self._input.LA(1)
                    if not(_la==117 or _la==233):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1552
                self.match(SqlBaseParser.PATTERN)
                self.state = 1553
                self.match(SqlBaseParser.T__1)
                self.state = 1554
                self.rowPattern(0)
                self.state = 1555
                self.match(SqlBaseParser.T__2)
                self.state = 1565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243:
                    self.state = 1556
                    self.match(SqlBaseParser.SUBSET)
                    self.state = 1557
                    self.subsetDefinition()
                    self.state = 1562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1558
                        self.match(SqlBaseParser.T__3)
                        self.state = 1559
                        self.subsetDefinition()
                        self.state = 1564
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1567
                self.match(SqlBaseParser.DEFINE)
                self.state = 1568
                self.variableDefinition()
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1569
                    self.match(SqlBaseParser.T__3)
                    self.state = 1570
                    self.variableDefinition()
                    self.state = 1575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1576
                self.match(SqlBaseParser.T__2)
                self.state = 1584
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1577
                        self.match(SqlBaseParser.AS)


                    self.state = 1580
                    self.identifier()
                    self.state = 1582
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                    if la_ == 1:
                        self.state = 1581
                        self.columnAliases()






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_measureDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureDefinition" ):
                listener.enterMeasureDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureDefinition" ):
                listener.exitMeasureDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureDefinition" ):
                return visitor.visitMeasureDefinition(self)
            else:
                return visitor.visitChildren(self)




    def measureDefinition(self):

        localctx = SqlBaseParser.MeasureDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_measureDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self.expression()
            self.state = 1589
            self.match(SqlBaseParser.AS)
            self.state = 1590
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsPerMatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONE(self):
            return self.getToken(SqlBaseParser.ONE, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def PER(self):
            return self.getToken(SqlBaseParser.PER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def emptyMatchHandling(self):
            return self.getTypedRuleContext(SqlBaseParser.EmptyMatchHandlingContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowsPerMatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsPerMatch" ):
                listener.enterRowsPerMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsPerMatch" ):
                listener.exitRowsPerMatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowsPerMatch" ):
                return visitor.visitRowsPerMatch(self)
            else:
                return visitor.visitChildren(self)




    def rowsPerMatch(self):

        localctx = SqlBaseParser.RowsPerMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_rowsPerMatch)
        self._la = 0 # Token type
        try:
            self.state = 1603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1592
                self.match(SqlBaseParser.ONE)
                self.state = 1593
                self.match(SqlBaseParser.ROW)
                self.state = 1594
                self.match(SqlBaseParser.PER)
                self.state = 1595
                self.match(SqlBaseParser.MATCH)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1596
                self.match(SqlBaseParser.ALL)
                self.state = 1597
                self.match(SqlBaseParser.ROWS)
                self.state = 1598
                self.match(SqlBaseParser.PER)
                self.state = 1599
                self.match(SqlBaseParser.MATCH)
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178 or _la==239 or _la==288:
                    self.state = 1600
                    self.emptyMatchHandling()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyMatchHandlingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def MATCHES(self):
            return self.getToken(SqlBaseParser.MATCHES, 0)

        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def UNMATCHED(self):
            return self.getToken(SqlBaseParser.UNMATCHED, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_emptyMatchHandling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyMatchHandling" ):
                listener.enterEmptyMatchHandling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyMatchHandling" ):
                listener.exitEmptyMatchHandling(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyMatchHandling" ):
                return visitor.visitEmptyMatchHandling(self)
            else:
                return visitor.visitChildren(self)




    def emptyMatchHandling(self):

        localctx = SqlBaseParser.EmptyMatchHandlingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_emptyMatchHandling)
        try:
            self.state = 1614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [239]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1605
                self.match(SqlBaseParser.SHOW)
                self.state = 1606
                self.match(SqlBaseParser.EMPTY)
                self.state = 1607
                self.match(SqlBaseParser.MATCHES)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1608
                self.match(SqlBaseParser.OMIT)
                self.state = 1609
                self.match(SqlBaseParser.EMPTY)
                self.state = 1610
                self.match(SqlBaseParser.MATCHES)
                pass
            elif token in [288]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1611
                self.match(SqlBaseParser.WITH)
                self.state = 1612
                self.match(SqlBaseParser.UNMATCHED)
                self.state = 1613
                self.match(SqlBaseParser.ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkipToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def PAST(self):
            return self.getToken(SqlBaseParser.PAST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_skipTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkipTo" ):
                listener.enterSkipTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkipTo" ):
                listener.exitSkipTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkipTo" ):
                return visitor.visitSkipTo(self)
            else:
                return visitor.visitChildren(self)




    def skipTo(self):

        localctx = SqlBaseParser.SkipToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_skipTo)
        try:
            self.state = 1635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1616
                self.match(SqlBaseParser.T__4)
                self.state = 1617
                self.match(SqlBaseParser.TO)
                self.state = 1618
                self.match(SqlBaseParser.NEXT)
                self.state = 1619
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1620
                self.match(SqlBaseParser.T__4)
                self.state = 1621
                self.match(SqlBaseParser.PAST)
                self.state = 1622
                self.match(SqlBaseParser.LAST)
                self.state = 1623
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1624
                self.match(SqlBaseParser.T__4)
                self.state = 1625
                self.match(SqlBaseParser.TO)
                self.state = 1626
                self.match(SqlBaseParser.FIRST)
                self.state = 1627
                self.identifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1628
                self.match(SqlBaseParser.T__4)
                self.state = 1629
                self.match(SqlBaseParser.TO)
                self.state = 1630
                self.match(SqlBaseParser.LAST)
                self.state = 1631
                self.identifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1632
                self.match(SqlBaseParser.T__4)
                self.state = 1633
                self.match(SqlBaseParser.TO)
                self.state = 1634
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.union = list() # of IdentifierContexts

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_subsetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubsetDefinition" ):
                listener.enterSubsetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubsetDefinition" ):
                listener.exitSubsetDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubsetDefinition" ):
                return visitor.visitSubsetDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subsetDefinition(self):

        localctx = SqlBaseParser.SubsetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_subsetDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            localctx.name = self.identifier()
            self.state = 1638
            self.match(SqlBaseParser.EQ)
            self.state = 1639
            self.match(SqlBaseParser.T__1)
            self.state = 1640
            localctx._identifier = self.identifier()
            localctx.union.append(localctx._identifier)
            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1641
                self.match(SqlBaseParser.T__3)
                self.state = 1642
                localctx._identifier = self.identifier()
                localctx.union.append(localctx._identifier)
                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1648
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_variableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDefinition" ):
                listener.enterVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDefinition" ):
                listener.exitVariableDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDefinition" ):
                return visitor.visitVariableDefinition(self)
            else:
                return visitor.visitChildren(self)




    def variableDefinition(self):

        localctx = SqlBaseParser.VariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_variableDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.identifier()
            self.state = 1651
            self.match(SqlBaseParser.AS)
            self.state = 1652
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_aliasedRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)




    def aliasedRelation(self):

        localctx = SqlBaseParser.AliasedRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_aliasedRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.relationPrimary()
            self.state = 1662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 1655
                    self.match(SqlBaseParser.AS)


                self.state = 1658
                self.identifier()
                self.state = 1660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1659
                    self.columnAliases()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAliases" ):
                listener.enterColumnAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAliases" ):
                listener.exitColumnAliases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnAliases" ):
                return visitor.visitColumnAliases(self)
            else:
                return visitor.visitChildren(self)




    def columnAliases(self):

        localctx = SqlBaseParser.ColumnAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_columnAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.match(SqlBaseParser.T__1)
            self.state = 1665
            self.identifier()
            self.state = 1670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1666
                self.match(SqlBaseParser.T__3)
                self.state = 1667
                self.identifier()
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1673
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryRelation" ):
                listener.enterSubqueryRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryRelation" ):
                listener.exitSubqueryRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryRelation" ):
                return visitor.visitSubqueryRelation(self)
            else:
                return visitor.visitChildren(self)


    class JsonTableContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_TABLE(self):
            return self.getToken(SqlBaseParser.JSON_TABLE, 0)
        def jsonPathInvocation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonPathInvocationContext,0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def jsonTableColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonTableColumnContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonTableColumnContext,i)

        def PLAN(self):
            return self.getToken(SqlBaseParser.PLAN, 0)
        def jsonTableSpecificPlan(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonTableSpecificPlanContext,0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)
        def jsonTableDefaultPlan(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonTableDefaultPlanContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ERROR)
            else:
                return self.getToken(SqlBaseParser.ERROR, i)
        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonTable" ):
                listener.enterJsonTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonTable" ):
                listener.exitJsonTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonTable" ):
                return visitor.visitJsonTable(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedRelation" ):
                listener.enterParenthesizedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedRelation" ):
                listener.exitParenthesizedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedRelation" ):
                return visitor.visitParenthesizedRelation(self)
            else:
                return visitor.visitChildren(self)


    class UnnestContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNNEST(self):
            return self.getToken(SqlBaseParser.UNNEST, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def ORDINALITY(self):
            return self.getToken(SqlBaseParser.ORDINALITY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest" ):
                listener.enterUnnest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest" ):
                listener.exitUnnest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnest" ):
                return visitor.visitUnnest(self)
            else:
                return visitor.visitChildren(self)


    class TableFunctionInvocationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableFunctionCall(self):
            return self.getTypedRuleContext(SqlBaseParser.TableFunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunctionInvocation" ):
                listener.enterTableFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunctionInvocation" ):
                listener.exitTableFunctionInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionInvocation" ):
                return visitor.visitTableFunctionInvocation(self)
            else:
                return visitor.visitChildren(self)


    class LateralContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateral" ):
                listener.enterLateral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateral" ):
                listener.exitLateral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateral" ):
                return visitor.visitLateral(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def queryPeriod(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPeriodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 1746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1675
                self.qualifiedName()
                self.state = 1677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1676
                    self.queryPeriod()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SubqueryRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1679
                self.match(SqlBaseParser.T__1)
                self.state = 1680
                self.query()
                self.state = 1681
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UnnestContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1683
                self.match(SqlBaseParser.UNNEST)
                self.state = 1684
                self.match(SqlBaseParser.T__1)
                self.state = 1685
                self.expression()
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1686
                    self.match(SqlBaseParser.T__3)
                    self.state = 1687
                    self.expression()
                    self.state = 1692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1693
                self.match(SqlBaseParser.T__2)
                self.state = 1696
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1694
                    self.match(SqlBaseParser.WITH)
                    self.state = 1695
                    self.match(SqlBaseParser.ORDINALITY)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.LateralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1698
                self.match(SqlBaseParser.LATERAL)
                self.state = 1699
                self.match(SqlBaseParser.T__1)
                self.state = 1700
                self.query()
                self.state = 1701
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableFunctionInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1703
                self.match(SqlBaseParser.TABLE)
                self.state = 1704
                self.match(SqlBaseParser.T__1)
                self.state = 1705
                self.tableFunctionCall()
                self.state = 1706
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.ParenthesizedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1708
                self.match(SqlBaseParser.T__1)
                self.state = 1709
                self.relation(0)
                self.state = 1710
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.JsonTableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1712
                self.match(SqlBaseParser.JSON_TABLE)
                self.state = 1713
                self.match(SqlBaseParser.T__1)
                self.state = 1714
                self.jsonPathInvocation()
                self.state = 1715
                self.match(SqlBaseParser.COLUMNS)
                self.state = 1716
                self.match(SqlBaseParser.T__1)
                self.state = 1717
                self.jsonTableColumn()
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1718
                    self.match(SqlBaseParser.T__3)
                    self.state = 1719
                    self.jsonTableColumn()
                    self.state = 1724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1725
                self.match(SqlBaseParser.T__2)
                self.state = 1737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1726
                    self.match(SqlBaseParser.PLAN)
                    self.state = 1727
                    self.match(SqlBaseParser.T__1)
                    self.state = 1728
                    self.jsonTableSpecificPlan()
                    self.state = 1729
                    self.match(SqlBaseParser.T__2)

                elif la_ == 2:
                    self.state = 1731
                    self.match(SqlBaseParser.PLAN)
                    self.state = 1732
                    self.match(SqlBaseParser.DEFAULT)
                    self.state = 1733
                    self.match(SqlBaseParser.T__1)
                    self.state = 1734
                    self.jsonTableDefaultPlan()
                    self.state = 1735
                    self.match(SqlBaseParser.T__2)


                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==83:
                    self.state = 1739
                    _la = self._input.LA(1)
                    if not(_la==80 or _la==83):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1740
                    self.match(SqlBaseParser.ON)
                    self.state = 1741
                    self.match(SqlBaseParser.ERROR)


                self.state = 1744
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonTableColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonTableColumn

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QueryColumnContext(JsonTableColumnContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.JsonTableColumnContext
            super().__init__(parser)
            self.emptyBehavior = None # JsonQueryBehaviorContext
            self.errorBehavior = None # JsonQueryBehaviorContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def jsonRepresentation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonRepresentationContext,0)

        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def jsonQueryWrapperBehavior(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonQueryWrapperBehaviorContext,0)

        def WRAPPER(self):
            return self.getToken(SqlBaseParser.WRAPPER, 0)
        def QUOTES(self):
            return self.getToken(SqlBaseParser.QUOTES, 0)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ON)
            else:
                return self.getToken(SqlBaseParser.ON, i)
        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)
        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)
        def KEEP(self):
            return self.getToken(SqlBaseParser.KEEP, 0)
        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)
        def jsonQueryBehavior(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonQueryBehaviorContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonQueryBehaviorContext,i)

        def SCALAR(self):
            return self.getToken(SqlBaseParser.SCALAR, 0)
        def TEXT_STRING(self):
            return self.getToken(SqlBaseParser.TEXT_STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryColumn" ):
                listener.enterQueryColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryColumn" ):
                listener.exitQueryColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryColumn" ):
                return visitor.visitQueryColumn(self)
            else:
                return visitor.visitChildren(self)


    class NestedColumnsContext(JsonTableColumnContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.JsonTableColumnContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NESTED(self):
            return self.getToken(SqlBaseParser.NESTED, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def jsonTableColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonTableColumnContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonTableColumnContext,i)

        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedColumns" ):
                listener.enterNestedColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedColumns" ):
                listener.exitNestedColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedColumns" ):
                return visitor.visitNestedColumns(self)
            else:
                return visitor.visitChildren(self)


    class ValueColumnContext(JsonTableColumnContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.JsonTableColumnContext
            super().__init__(parser)
            self.emptyBehavior = None # JsonValueBehaviorContext
            self.errorBehavior = None # JsonValueBehaviorContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ON)
            else:
                return self.getToken(SqlBaseParser.ON, i)
        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)
        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)
        def jsonValueBehavior(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonValueBehaviorContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonValueBehaviorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueColumn" ):
                listener.enterValueColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueColumn" ):
                listener.exitValueColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueColumn" ):
                return visitor.visitValueColumn(self)
            else:
                return visitor.visitChildren(self)


    class OrdinalityColumnContext(JsonTableColumnContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.JsonTableColumnContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def ORDINALITY(self):
            return self.getToken(SqlBaseParser.ORDINALITY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinalityColumn" ):
                listener.enterOrdinalityColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinalityColumn" ):
                listener.exitOrdinalityColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrdinalityColumn" ):
                return visitor.visitOrdinalityColumn(self)
            else:
                return visitor.visitChildren(self)



    def jsonTableColumn(self):

        localctx = SqlBaseParser.JsonTableColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_jsonTableColumn)
        self._la = 0 # Token type
        try:
            self.state = 1825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.OrdinalityColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1748
                self.identifier()
                self.state = 1749
                self.match(SqlBaseParser.FOR)
                self.state = 1750
                self.match(SqlBaseParser.ORDINALITY)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ValueColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1752
                self.identifier()
                self.state = 1753
                self.type_(0)
                self.state = 1756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 1754
                    self.match(SqlBaseParser.PATH)
                    self.state = 1755
                    self.string()


                self.state = 1762
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1758
                    localctx.emptyBehavior = self.jsonValueBehavior()
                    self.state = 1759
                    self.match(SqlBaseParser.ON)
                    self.state = 1760
                    self.match(SqlBaseParser.EMPTY)


                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67 or _la==83 or _la==172:
                    self.state = 1764
                    localctx.errorBehavior = self.jsonValueBehavior()
                    self.state = 1765
                    self.match(SqlBaseParser.ON)
                    self.state = 1766
                    self.match(SqlBaseParser.ERROR)


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.QueryColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1770
                self.identifier()
                self.state = 1771
                self.type_(0)
                self.state = 1772
                self.match(SqlBaseParser.FORMAT)
                self.state = 1773
                self.jsonRepresentation()
                self.state = 1776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 1774
                    self.match(SqlBaseParser.PATH)
                    self.state = 1775
                    self.string()


                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288 or _la==290:
                    self.state = 1778
                    self.jsonQueryWrapperBehavior()
                    self.state = 1779
                    self.match(SqlBaseParser.WRAPPER)


                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136 or _la==178:
                    self.state = 1783
                    _la = self._input.LA(1)
                    if not(_la==136 or _la==178):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1784
                    self.match(SqlBaseParser.QUOTES)
                    self.state = 1788
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==179:
                        self.state = 1785
                        self.match(SqlBaseParser.ON)
                        self.state = 1786
                        self.match(SqlBaseParser.SCALAR)
                        self.state = 1787
                        self.match(SqlBaseParser.TEXT_STRING)




                self.state = 1796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1792
                    localctx.emptyBehavior = self.jsonQueryBehavior()
                    self.state = 1793
                    self.match(SqlBaseParser.ON)
                    self.state = 1794
                    self.match(SqlBaseParser.EMPTY)


                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==83 or _la==172:
                    self.state = 1798
                    localctx.errorBehavior = self.jsonQueryBehavior()
                    self.state = 1799
                    self.match(SqlBaseParser.ON)
                    self.state = 1800
                    self.match(SqlBaseParser.ERROR)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.NestedColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1804
                self.match(SqlBaseParser.NESTED)
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 1805
                    self.match(SqlBaseParser.PATH)


                self.state = 1808
                self.string()
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 1809
                    self.match(SqlBaseParser.AS)
                    self.state = 1810
                    self.identifier()


                self.state = 1813
                self.match(SqlBaseParser.COLUMNS)
                self.state = 1814
                self.match(SqlBaseParser.T__1)
                self.state = 1815
                self.jsonTableColumn()
                self.state = 1820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1816
                    self.match(SqlBaseParser.T__3)
                    self.state = 1817
                    self.jsonTableColumn()
                    self.state = 1822
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1823
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonTableSpecificPlanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonTableSpecificPlan

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CrossPlanContext(JsonTableSpecificPlanContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.JsonTableSpecificPlanContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def planPrimary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PlanPrimaryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PlanPrimaryContext,i)

        def CROSS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.CROSS)
            else:
                return self.getToken(SqlBaseParser.CROSS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrossPlan" ):
                listener.enterCrossPlan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrossPlan" ):
                listener.exitCrossPlan(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCrossPlan" ):
                return visitor.visitCrossPlan(self)
            else:
                return visitor.visitChildren(self)


    class JoinPlanContext(JsonTableSpecificPlanContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.JsonTableSpecificPlanContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def jsonTablePathName(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonTablePathNameContext,0)

        def planPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.PlanPrimaryContext,0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)
        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinPlan" ):
                listener.enterJoinPlan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinPlan" ):
                listener.exitJoinPlan(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinPlan" ):
                return visitor.visitJoinPlan(self)
            else:
                return visitor.visitChildren(self)


    class LeafPlanContext(JsonTableSpecificPlanContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.JsonTableSpecificPlanContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def jsonTablePathName(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonTablePathNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeafPlan" ):
                listener.enterLeafPlan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeafPlan" ):
                listener.exitLeafPlan(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeafPlan" ):
                return visitor.visitLeafPlan(self)
            else:
                return visitor.visitChildren(self)


    class UnionPlanContext(JsonTableSpecificPlanContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.JsonTableSpecificPlanContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def planPrimary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PlanPrimaryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PlanPrimaryContext,i)

        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.UNION)
            else:
                return self.getToken(SqlBaseParser.UNION, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionPlan" ):
                listener.enterUnionPlan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionPlan" ):
                listener.exitUnionPlan(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionPlan" ):
                return visitor.visitUnionPlan(self)
            else:
                return visitor.visitChildren(self)



    def jsonTableSpecificPlan(self):

        localctx = SqlBaseParser.JsonTableSpecificPlanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_jsonTableSpecificPlan)
        self._la = 0 # Token type
        try:
            self.state = 1852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.LeafPlanContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1827
                self.jsonTablePathName()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.JoinPlanContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1828
                self.jsonTablePathName()
                self.state = 1829
                _la = self._input.LA(1)
                if not(_la==118 or _la==186):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1830
                self.planPrimary()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UnionPlanContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1832
                self.planPrimary()
                self.state = 1833
                self.match(SqlBaseParser.UNION)
                self.state = 1834
                self.planPrimary()
                self.state = 1839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==267:
                    self.state = 1835
                    self.match(SqlBaseParser.UNION)
                    self.state = 1836
                    self.planPrimary()
                    self.state = 1841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CrossPlanContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1842
                self.planPrimary()
                self.state = 1843
                self.match(SqlBaseParser.CROSS)
                self.state = 1844
                self.planPrimary()
                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==52:
                    self.state = 1845
                    self.match(SqlBaseParser.CROSS)
                    self.state = 1846
                    self.planPrimary()
                    self.state = 1851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonTablePathNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonTablePathName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonTablePathName" ):
                listener.enterJsonTablePathName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonTablePathName" ):
                listener.exitJsonTablePathName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonTablePathName" ):
                return visitor.visitJsonTablePathName(self)
            else:
                return visitor.visitChildren(self)




    def jsonTablePathName(self):

        localctx = SqlBaseParser.JsonTablePathNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_jsonTablePathName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1854
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlanPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonTablePathName(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonTablePathNameContext,0)


        def jsonTableSpecificPlan(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonTableSpecificPlanContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_planPrimary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanPrimary" ):
                listener.enterPlanPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanPrimary" ):
                listener.exitPlanPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlanPrimary" ):
                return visitor.visitPlanPrimary(self)
            else:
                return visitor.visitChildren(self)




    def planPrimary(self):

        localctx = SqlBaseParser.PlanPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_planPrimary)
        try:
            self.state = 1861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 122, 124, 125, 127, 129, 136, 137, 138, 139, 140, 141, 143, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 287, 289, 290, 291, 292, 293, 294, 295, 315, 316, 317, 318]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1856
                self.jsonTablePathName()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1857
                self.match(SqlBaseParser.T__1)
                self.state = 1858
                self.jsonTableSpecificPlan()
                self.state = 1859
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonTableDefaultPlanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonTableDefaultPlan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonTableDefaultPlan" ):
                listener.enterJsonTableDefaultPlan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonTableDefaultPlan" ):
                listener.exitJsonTableDefaultPlan(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonTableDefaultPlan" ):
                return visitor.visitJsonTableDefaultPlan(self)
            else:
                return visitor.visitChildren(self)




    def jsonTableDefaultPlan(self):

        localctx = SqlBaseParser.JsonTableDefaultPlanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_jsonTableDefaultPlan)
        self._la = 0 # Token type
        try:
            self.state = 1873
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118, 186]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1863
                _la = self._input.LA(1)
                if not(_la==118 or _la==186):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 1864
                    self.match(SqlBaseParser.T__3)
                    self.state = 1865
                    _la = self._input.LA(1)
                    if not(_la==52 or _la==267):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [52, 267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1868
                _la = self._input.LA(1)
                if not(_la==52 or _la==267):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 1869
                    self.match(SqlBaseParser.T__3)
                    self.state = 1870
                    _la = self._input.LA(1)
                    if not(_la==118 or _la==186):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def tableFunctionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableFunctionArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableFunctionArgumentContext,i)


        def COPARTITION(self):
            return self.getToken(SqlBaseParser.COPARTITION, 0)

        def copartitionTables(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CopartitionTablesContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CopartitionTablesContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunctionCall" ):
                listener.enterTableFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunctionCall" ):
                listener.exitTableFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionCall" ):
                return visitor.visitTableFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionCall(self):

        localctx = SqlBaseParser.TableFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_tableFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self.qualifiedName()
            self.state = 1876
            self.match(SqlBaseParser.T__1)
            self.state = 1885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1877
                self.tableFunctionArgument()
                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1878
                    self.match(SqlBaseParser.T__3)
                    self.state = 1879
                    self.tableFunctionArgument()
                    self.state = 1884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1887
                self.match(SqlBaseParser.COPARTITION)
                self.state = 1888
                self.copartitionTables()
                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1889
                    self.match(SqlBaseParser.T__3)
                    self.state = 1890
                    self.copartitionTables()
                    self.state = 1895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1898
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableFunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.TableArgumentContext,0)


        def descriptorArgument(self):
            return self.getTypedRuleContext(SqlBaseParser.DescriptorArgumentContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableFunctionArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunctionArgument" ):
                listener.enterTableFunctionArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunctionArgument" ):
                listener.exitTableFunctionArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionArgument" ):
                return visitor.visitTableFunctionArgument(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionArgument(self):

        localctx = SqlBaseParser.TableFunctionArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_tableFunctionArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 1900
                self.identifier()
                self.state = 1901
                self.match(SqlBaseParser.T__5)


            self.state = 1908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 1905
                self.tableArgument()
                pass

            elif la_ == 2:
                self.state = 1906
                self.descriptorArgument()
                pass

            elif la_ == 3:
                self.state = 1907
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgumentRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.TableArgumentRelationContext,0)


        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def PRUNE(self):
            return self.getToken(SqlBaseParser.PRUNE, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def KEEP(self):
            return self.getToken(SqlBaseParser.KEEP, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgument" ):
                listener.enterTableArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgument" ):
                listener.exitTableArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgument" ):
                return visitor.visitTableArgument(self)
            else:
                return visitor.visitChildren(self)




    def tableArgument(self):

        localctx = SqlBaseParser.TableArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_tableArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            self.tableArgumentRelation()
            self.state = 1928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 1911
                self.match(SqlBaseParser.PARTITION)
                self.state = 1912
                self.match(SqlBaseParser.BY)
                self.state = 1926
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 1913
                    self.match(SqlBaseParser.T__1)
                    self.state = 1922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424665027685960261) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199284287806152737) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4609540318515936191) != 0):
                        self.state = 1914
                        self.expression()
                        self.state = 1919
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==4:
                            self.state = 1915
                            self.match(SqlBaseParser.T__3)
                            self.state = 1916
                            self.expression()
                            self.state = 1921
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1924
                    self.match(SqlBaseParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 1925
                    self.expression()
                    pass




            self.state = 1936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [206]:
                self.state = 1930
                self.match(SqlBaseParser.PRUNE)
                self.state = 1931
                self.match(SqlBaseParser.WHEN)
                self.state = 1932
                self.match(SqlBaseParser.EMPTY)
                pass
            elif token in [136]:
                self.state = 1933
                self.match(SqlBaseParser.KEEP)
                self.state = 1934
                self.match(SqlBaseParser.WHEN)
                self.state = 1935
                self.match(SqlBaseParser.EMPTY)
                pass
            elif token in [3, 4, 50, 184]:
                pass
            else:
                pass
            self.state = 1954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184:
                self.state = 1938
                self.match(SqlBaseParser.ORDER)
                self.state = 1939
                self.match(SqlBaseParser.BY)
                self.state = 1952
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1940
                    self.match(SqlBaseParser.T__1)
                    self.state = 1941
                    self.sortItem()
                    self.state = 1946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 1942
                        self.match(SqlBaseParser.T__3)
                        self.state = 1943
                        self.sortItem()
                        self.state = 1948
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1949
                    self.match(SqlBaseParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 1951
                    self.sortItem()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgumentRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableArgumentRelation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableArgumentQueryContext(TableArgumentRelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableArgumentRelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgumentQuery" ):
                listener.enterTableArgumentQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgumentQuery" ):
                listener.exitTableArgumentQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgumentQuery" ):
                return visitor.visitTableArgumentQuery(self)
            else:
                return visitor.visitChildren(self)


    class TableArgumentTableContext(TableArgumentRelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableArgumentRelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgumentTable" ):
                listener.enterTableArgumentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgumentTable" ):
                listener.exitTableArgumentTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgumentTable" ):
                return visitor.visitTableArgumentTable(self)
            else:
                return visitor.visitChildren(self)



    def tableArgumentRelation(self):

        localctx = SqlBaseParser.TableArgumentRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_tableArgumentRelation)
        self._la = 0 # Token type
        try:
            self.state = 1982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableArgumentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1956
                self.match(SqlBaseParser.TABLE)
                self.state = 1957
                self.match(SqlBaseParser.T__1)
                self.state = 1958
                self.qualifiedName()
                self.state = 1959
                self.match(SqlBaseParser.T__2)
                self.state = 1967
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1960
                        self.match(SqlBaseParser.AS)


                    self.state = 1963
                    self.identifier()
                    self.state = 1965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==2:
                        self.state = 1964
                        self.columnAliases()




                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TableArgumentQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1969
                self.match(SqlBaseParser.TABLE)
                self.state = 1970
                self.match(SqlBaseParser.T__1)
                self.state = 1971
                self.query()
                self.state = 1972
                self.match(SqlBaseParser.T__2)
                self.state = 1980
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                if la_ == 1:
                    self.state = 1974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==28:
                        self.state = 1973
                        self.match(SqlBaseParser.AS)


                    self.state = 1976
                    self.identifier()
                    self.state = 1978
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==2:
                        self.state = 1977
                        self.columnAliases()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescriptorArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIPTOR(self):
            return self.getToken(SqlBaseParser.DESCRIPTOR, 0)

        def descriptorField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DescriptorFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DescriptorFieldContext,i)


        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_descriptorArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescriptorArgument" ):
                listener.enterDescriptorArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescriptorArgument" ):
                listener.exitDescriptorArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescriptorArgument" ):
                return visitor.visitDescriptorArgument(self)
            else:
                return visitor.visitChildren(self)




    def descriptorArgument(self):

        localctx = SqlBaseParser.DescriptorArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_descriptorArgument)
        self._la = 0 # Token type
        try:
            self.state = 2002
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1984
                self.match(SqlBaseParser.DESCRIPTOR)
                self.state = 1985
                self.match(SqlBaseParser.T__1)
                self.state = 1986
                self.descriptorField()
                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1987
                    self.match(SqlBaseParser.T__3)
                    self.state = 1988
                    self.descriptorField()
                    self.state = 1993
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1994
                self.match(SqlBaseParser.T__2)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1996
                self.match(SqlBaseParser.CAST)
                self.state = 1997
                self.match(SqlBaseParser.T__1)
                self.state = 1998
                self.match(SqlBaseParser.NULL)
                self.state = 1999
                self.match(SqlBaseParser.AS)
                self.state = 2000
                self.match(SqlBaseParser.DESCRIPTOR)
                self.state = 2001
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescriptorFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_descriptorField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescriptorField" ):
                listener.enterDescriptorField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescriptorField" ):
                listener.exitDescriptorField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescriptorField" ):
                return visitor.visitDescriptorField(self)
            else:
                return visitor.visitChildren(self)




    def descriptorField(self):

        localctx = SqlBaseParser.DescriptorFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_descriptorField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            self.identifier()
            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424682620090108485) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199299680970645631) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4323456189061643193) != 0):
                self.state = 2005
                self.type_(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopartitionTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_copartitionTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopartitionTables" ):
                listener.enterCopartitionTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopartitionTables" ):
                listener.exitCopartitionTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopartitionTables" ):
                return visitor.visitCopartitionTables(self)
            else:
                return visitor.visitChildren(self)




    def copartitionTables(self):

        localctx = SqlBaseParser.CopartitionTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_copartitionTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.match(SqlBaseParser.T__1)
            self.state = 2009
            self.qualifiedName()
            self.state = 2010
            self.match(SqlBaseParser.T__3)
            self.state = 2011
            self.qualifiedName()
            self.state = 2016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 2012
                self.match(SqlBaseParser.T__3)
                self.state = 2013
                self.qualifiedName()
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2019
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2021
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self._valueExpression = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class OrContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr" ):
                listener.enterOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr" ):
                listener.exitOr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr" ):
                return visitor.visitOr(self)
            else:
                return visitor.visitChildren(self)


    class AndContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd" ):
                listener.enterAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd" ):
                listener.exitAnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd" ):
                return visitor.visitAnd(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 122, 124, 125, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 287, 289, 290, 291, 292, 293, 294, 295, 302, 303, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318]:
                localctx = SqlBaseParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2024
                localctx._valueExpression = self.valueExpression(0)
                self.state = 2026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                if la_ == 1:
                    self.state = 2025
                    self.predicate(localctx._valueExpression)


                pass
            elif token in [171]:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2028
                self.match(SqlBaseParser.NOT)
                self.state = 2029
                self.booleanExpression(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2040
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2038
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.AndContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 2032
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2033
                        self.match(SqlBaseParser.AND)
                        self.state = 2034
                        self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.OrContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 2035
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2036
                        self.match(SqlBaseParser.OR)
                        self.state = 2037
                        self.booleanExpression(2)
                        pass

             
                self.state = 2042
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, value:ParserRuleContext=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None
            self.value = value


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.value = ctx.value



    class ComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class LikeContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.pattern = None # ValueExpressionContext
            self.escape = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike" ):
                listener.enterLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike" ):
                listener.exitLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike" ):
                return visitor.visitLike(self)
            else:
                return visitor.visitChildren(self)


    class InSubqueryContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSubquery" ):
                listener.enterInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSubquery" ):
                listener.exitInSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInSubquery" ):
                return visitor.visitInSubquery(self)
            else:
                return visitor.visitChildren(self)


    class DistinctFromContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctFrom" ):
                listener.enterDistinctFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctFrom" ):
                listener.exitDistinctFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctFrom" ):
                return visitor.visitDistinctFrom(self)
            else:
                return visitor.visitChildren(self)


    class InListContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInList" ):
                listener.enterInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInList" ):
                listener.exitInList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInList" ):
                return visitor.visitInList(self)
            else:
                return visitor.visitChildren(self)


    class NullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullPredicate" ):
                listener.enterNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullPredicate" ):
                listener.exitNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullPredicate" ):
                return visitor.visitNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BetweenContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween" ):
                return visitor.visitBetween(self)
            else:
                return visitor.visitChildren(self)


    class QuantifiedComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def comparisonQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonQuantifierContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedComparison" ):
                listener.enterQuantifiedComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedComparison" ):
                listener.exitQuantifiedComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifiedComparison" ):
                return visitor.visitQuantifiedComparison(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, value:ParserRuleContext):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state, value)
        self.enterRule(localctx, 124, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2043
                self.comparisonOperator()
                self.state = 2044
                localctx.right = self.valueExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.QuantifiedComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2046
                self.comparisonOperator()
                self.state = 2047
                self.comparisonQuantifier()
                self.state = 2048
                self.match(SqlBaseParser.T__1)
                self.state = 2049
                self.query()
                self.state = 2050
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171:
                    self.state = 2052
                    self.match(SqlBaseParser.NOT)


                self.state = 2055
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2056
                localctx.lower = self.valueExpression(0)
                self.state = 2057
                self.match(SqlBaseParser.AND)
                self.state = 2058
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171:
                    self.state = 2060
                    self.match(SqlBaseParser.NOT)


                self.state = 2063
                self.match(SqlBaseParser.IN)
                self.state = 2064
                self.match(SqlBaseParser.T__1)
                self.state = 2065
                self.expression()
                self.state = 2070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2066
                    self.match(SqlBaseParser.T__3)
                    self.state = 2067
                    self.expression()
                    self.state = 2072
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2073
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.InSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171:
                    self.state = 2075
                    self.match(SqlBaseParser.NOT)


                self.state = 2078
                self.match(SqlBaseParser.IN)
                self.state = 2079
                self.match(SqlBaseParser.T__1)
                self.state = 2080
                self.query()
                self.state = 2081
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.LikeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171:
                    self.state = 2083
                    self.match(SqlBaseParser.NOT)


                self.state = 2086
                self.match(SqlBaseParser.LIKE)
                self.state = 2087
                localctx.pattern = self.valueExpression(0)
                self.state = 2090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2088
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 2089
                    localctx.escape = self.valueExpression(0)


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.NullPredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2092
                self.match(SqlBaseParser.IS)
                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171:
                    self.state = 2093
                    self.match(SqlBaseParser.NOT)


                self.state = 2096
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.DistinctFromContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2097
                self.match(SqlBaseParser.IS)
                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171:
                    self.state = 2098
                    self.match(SqlBaseParser.NOT)


                self.state = 2101
                self.match(SqlBaseParser.DISTINCT)
                self.state = 2102
                self.match(SqlBaseParser.FROM)
                self.state = 2103
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ConcatenationContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def CONCAT(self):
            return self.getToken(SqlBaseParser.CONCAT, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)


    class AtTimeZoneContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)
        def timeZoneSpecifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TimeZoneSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtTimeZone" ):
                listener.enterAtTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtTimeZone" ):
                listener.exitAtTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtTimeZone" ):
                return visitor.visitAtTimeZone(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2107
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2108
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==302 or _la==303):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2109
                self.valueExpression(4)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2126
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2124
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2112
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2113
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 304)) & ~0x3f) == 0 and ((1 << (_la - 304)) & 7) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2114
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2115
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2116
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==302 or _la==303):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2117
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ConcatenationContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2118
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2119
                        self.match(SqlBaseParser.CONCAT)
                        self.state = 2120
                        localctx.right = self.valueExpression(2)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.AtTimeZoneContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2121
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2122
                        self.match(SqlBaseParser.AT)
                        self.state = 2123
                        self.timeZoneSpecifier()
                        pass

             
                self.state = 2128
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class JsonValueContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.emptyBehavior = None # JsonValueBehaviorContext
            self.errorBehavior = None # JsonValueBehaviorContext
            self.copyFrom(ctx)

        def JSON_VALUE(self):
            return self.getToken(SqlBaseParser.JSON_VALUE, 0)
        def jsonPathInvocation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonPathInvocationContext,0)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ON)
            else:
                return self.getToken(SqlBaseParser.ON, i)
        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)
        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)
        def jsonValueBehavior(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonValueBehaviorContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonValueBehaviorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonValue" ):
                return visitor.visitJsonValue(self)
            else:
                return visitor.visitChildren(self)


    class SpecialDateTimeFunctionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.precision = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)
        def LOCALTIME(self):
            return self.getToken(SqlBaseParser.LOCALTIME, 0)
        def LOCALTIMESTAMP(self):
            return self.getToken(SqlBaseParser.LOCALTIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTimeFunction" ):
                listener.enterSpecialDateTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTimeFunction" ):
                listener.exitSpecialDateTimeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialDateTimeFunction" ):
                return visitor.visitSpecialDateTimeFunction(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimChar = None # ValueExpressionContext
            self.trimSource = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def trimsSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.TrimsSpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrim" ):
                return visitor.visitTrim(self)
            else:
                return visitor.visitChildren(self)


    class ParameterContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)


    class NormalizeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NORMALIZE(self):
            return self.getToken(SqlBaseParser.NORMALIZE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def normalForm(self):
            return self.getTypedRuleContext(SqlBaseParser.NormalFormContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalize" ):
                return visitor.visitNormalize(self)
            else:
                return visitor.visitChildren(self)


    class JsonObjectContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_OBJECT(self):
            return self.getToken(SqlBaseParser.JSON_OBJECT, 0)
        def jsonObjectMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonObjectMemberContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonObjectMemberContext,i)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.NULL)
            else:
                return self.getToken(SqlBaseParser.NULL, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def ABSENT(self):
            return self.getToken(SqlBaseParser.ABSENT, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def UNIQUE(self):
            return self.getToken(SqlBaseParser.UNIQUE, 0)
        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def jsonRepresentation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonRepresentationContext,0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObject" ):
                listener.enterJsonObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObject" ):
                listener.exitJsonObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonObject" ):
                return visitor.visitJsonObject(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)


    class JsonArrayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_ARRAY(self):
            return self.getToken(SqlBaseParser.JSON_ARRAY, 0)
        def jsonValueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonValueExpressionContext,i)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.NULL)
            else:
                return self.getToken(SqlBaseParser.NULL, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def ABSENT(self):
            return self.getToken(SqlBaseParser.ABSENT, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def jsonRepresentation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonRepresentationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArray" ):
                listener.enterJsonArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArray" ):
                listener.exitJsonArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonArray" ):
                return visitor.visitJsonArray(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.operand = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class NullLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class JsonExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_EXISTS(self):
            return self.getToken(SqlBaseParser.JSON_EXISTS, 0)
        def jsonPathInvocation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonPathInvocationContext,0)

        def jsonExistsErrorBehavior(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonExistsErrorBehaviorContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExists" ):
                listener.enterJsonExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExists" ):
                listener.exitJsonExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonExists" ):
                return visitor.visitJsonExists(self)
            else:
                return visitor.visitChildren(self)


    class CurrentPathContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_PATH(self):
            return self.getToken(SqlBaseParser.CURRENT_PATH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentPath" ):
                listener.enterCurrentPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentPath" ):
                listener.exitCurrentPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentPath" ):
                return visitor.visitCurrentPath(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_LITERAL(self):
            return self.getToken(SqlBaseParser.BINARY_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLiteral" ):
                listener.enterBinaryLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLiteral" ):
                listener.exitBinaryLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLiteral" ):
                return visitor.visitBinaryLiteral(self)
            else:
                return visitor.visitChildren(self)


    class CurrentUserContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUser" ):
                listener.enterCurrentUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUser" ):
                listener.exitCurrentUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUser" ):
                return visitor.visitCurrentUser(self)
            else:
                return visitor.visitChildren(self)


    class JsonQueryContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.emptyBehavior = None # JsonQueryBehaviorContext
            self.errorBehavior = None # JsonQueryBehaviorContext
            self.copyFrom(ctx)

        def JSON_QUERY(self):
            return self.getToken(SqlBaseParser.JSON_QUERY, 0)
        def jsonPathInvocation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonPathInvocationContext,0)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def jsonQueryWrapperBehavior(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonQueryWrapperBehaviorContext,0)

        def WRAPPER(self):
            return self.getToken(SqlBaseParser.WRAPPER, 0)
        def QUOTES(self):
            return self.getToken(SqlBaseParser.QUOTES, 0)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ON)
            else:
                return self.getToken(SqlBaseParser.ON, i)
        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)
        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)
        def KEEP(self):
            return self.getToken(SqlBaseParser.KEEP, 0)
        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)
        def jsonQueryBehavior(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonQueryBehaviorContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonQueryBehaviorContext,i)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def jsonRepresentation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonRepresentationContext,0)

        def SCALAR(self):
            return self.getToken(SqlBaseParser.SCALAR, 0)
        def TEXT_STRING(self):
            return self.getToken(SqlBaseParser.TEXT_STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonQuery" ):
                listener.enterJsonQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonQuery" ):
                listener.exitJsonQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonQuery" ):
                return visitor.visitJsonQuery(self)
            else:
                return visitor.visitChildren(self)


    class MeasureContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def over(self):
            return self.getTypedRuleContext(SqlBaseParser.OverContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasure" ):
                listener.enterMeasure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasure" ):
                listener.exitMeasure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasure" ):
                return visitor.visitMeasure(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ArrayConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstructor" ):
                listener.enterArrayConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstructor" ):
                listener.exitArrayConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayConstructor" ):
                return visitor.visitArrayConstructor(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.label = None # IdentifierContext
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def processingMode(self):
            return self.getTypedRuleContext(SqlBaseParser.ProcessingModeContext,0)

        def filter_(self):
            return self.getTypedRuleContext(SqlBaseParser.FilterContext,0)

        def over(self):
            return self.getTypedRuleContext(SqlBaseParser.OverContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def nullTreatment(self):
            return self.getTypedRuleContext(SqlBaseParser.NullTreatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class CurrentSchemaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_SCHEMA(self):
            return self.getToken(SqlBaseParser.CURRENT_SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchema" ):
                listener.enterCurrentSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchema" ):
                listener.exitCurrentSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentSchema" ):
                return visitor.visitCurrentSchema(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class ListaggContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def LISTAGG(self):
            return self.getToken(SqlBaseParser.LISTAGG, 0)
        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)
        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def OVERFLOW(self):
            return self.getToken(SqlBaseParser.OVERFLOW, 0)
        def listAggOverflowBehavior(self):
            return self.getTypedRuleContext(SqlBaseParser.ListAggOverflowBehaviorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListagg" ):
                listener.enterListagg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListagg" ):
                listener.exitListagg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListagg" ):
                return visitor.visitListagg(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class CurrentCatalogContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_CATALOG(self):
            return self.getToken(SqlBaseParser.CURRENT_CATALOG, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentCatalog" ):
                listener.enterCurrentCatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentCatalog" ):
                listener.exitCurrentCatalog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentCatalog" ):
                return visitor.visitCurrentCatalog(self)
            else:
                return visitor.visitChildren(self)


    class GroupingOperationContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingOperation" ):
                listener.enterGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingOperation" ):
                listener.exitGroupingOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingOperation" ):
                return visitor.visitGroupingOperation(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2130
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2131
                self.interval()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2132
                self.identifier()
                self.state = 2133
                self.string()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2135
                self.match(SqlBaseParser.DOUBLE)
                self.state = 2136
                self.match(SqlBaseParser.PRECISION)
                self.state = 2137
                self.string()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2138
                self.number()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2139
                self.booleanValue()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2140
                self.string()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.BinaryLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2141
                self.match(SqlBaseParser.BINARY_LITERAL)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.ParameterContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2142
                self.match(SqlBaseParser.QUESTION_MARK)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2143
                self.match(SqlBaseParser.POSITION)
                self.state = 2144
                self.match(SqlBaseParser.T__1)
                self.state = 2145
                self.valueExpression(0)
                self.state = 2146
                self.match(SqlBaseParser.IN)
                self.state = 2147
                self.valueExpression(0)
                self.state = 2148
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2150
                self.match(SqlBaseParser.T__1)
                self.state = 2151
                self.expression()
                self.state = 2154 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2152
                    self.match(SqlBaseParser.T__3)
                    self.state = 2153
                    self.expression()
                    self.state = 2156 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==4):
                        break

                self.state = 2158
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2160
                self.match(SqlBaseParser.ROW)
                self.state = 2161
                self.match(SqlBaseParser.T__1)
                self.state = 2162
                self.expression()
                self.state = 2167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2163
                    self.match(SqlBaseParser.T__3)
                    self.state = 2164
                    self.expression()
                    self.state = 2169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2170
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.ListaggContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2172
                localctx.name = self.match(SqlBaseParser.LISTAGG)
                self.state = 2173
                self.match(SqlBaseParser.T__1)
                self.state = 2175
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2174
                    self.setQuantifier()


                self.state = 2177
                self.expression()
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 2178
                    self.match(SqlBaseParser.T__3)
                    self.state = 2179
                    self.string()


                self.state = 2185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 2182
                    self.match(SqlBaseParser.ON)
                    self.state = 2183
                    self.match(SqlBaseParser.OVERFLOW)
                    self.state = 2184
                    self.listAggOverflowBehavior()


                self.state = 2187
                self.match(SqlBaseParser.T__2)

                self.state = 2188
                self.match(SqlBaseParser.WITHIN)
                self.state = 2189
                self.match(SqlBaseParser.GROUP)
                self.state = 2190
                self.match(SqlBaseParser.T__1)
                self.state = 2191
                self.match(SqlBaseParser.ORDER)
                self.state = 2192
                self.match(SqlBaseParser.BY)
                self.state = 2193
                self.sortItem()
                self.state = 2198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2194
                    self.match(SqlBaseParser.T__3)
                    self.state = 2195
                    self.sortItem()
                    self.state = 2200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2201
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                if la_ == 1:
                    self.state = 2203
                    self.processingMode()


                self.state = 2206
                self.qualifiedName()
                self.state = 2207
                self.match(SqlBaseParser.T__1)
                self.state = 2211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424682620090108485) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199299680970645631) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4323456189061643193) != 0):
                    self.state = 2208
                    localctx.label = self.identifier()
                    self.state = 2209
                    self.match(SqlBaseParser.T__0)


                self.state = 2213
                self.match(SqlBaseParser.ASTERISK)
                self.state = 2214
                self.match(SqlBaseParser.T__2)
                self.state = 2216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 2215
                    self.filter_()


                self.state = 2219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 2218
                    self.over()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2221
                    self.processingMode()


                self.state = 2224
                self.qualifiedName()
                self.state = 2225
                self.match(SqlBaseParser.T__1)
                self.state = 2237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424665027685958213) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199284287806152737) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4609540318515936191) != 0):
                    self.state = 2227
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                    if la_ == 1:
                        self.state = 2226
                        self.setQuantifier()


                    self.state = 2229
                    self.expression()
                    self.state = 2234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2230
                        self.match(SqlBaseParser.T__3)
                        self.state = 2231
                        self.expression()
                        self.state = 2236
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 2239
                    self.match(SqlBaseParser.ORDER)
                    self.state = 2240
                    self.match(SqlBaseParser.BY)
                    self.state = 2241
                    self.sortItem()
                    self.state = 2246
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2242
                        self.match(SqlBaseParser.T__3)
                        self.state = 2243
                        self.sortItem()
                        self.state = 2248
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2251
                self.match(SqlBaseParser.T__2)
                self.state = 2253
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2252
                    self.filter_()


                self.state = 2259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                if la_ == 1:
                    self.state = 2256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==113 or _la==216:
                        self.state = 2255
                        self.nullTreatment()


                    self.state = 2258
                    self.over()


                pass

            elif la_ == 16:
                localctx = SqlBaseParser.MeasureContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2261
                self.identifier()
                self.state = 2262
                self.over()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2264
                self.identifier()
                self.state = 2265
                self.match(SqlBaseParser.T__6)
                self.state = 2266
                self.expression()
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2268
                self.match(SqlBaseParser.T__1)
                self.state = 2277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424682620090108485) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199299680970645631) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4323456189061643193) != 0):
                    self.state = 2269
                    self.identifier()
                    self.state = 2274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2270
                        self.match(SqlBaseParser.T__3)
                        self.state = 2271
                        self.identifier()
                        self.state = 2276
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2279
                self.match(SqlBaseParser.T__2)
                self.state = 2280
                self.match(SqlBaseParser.T__6)
                self.state = 2281
                self.expression()
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2282
                self.match(SqlBaseParser.T__1)
                self.state = 2283
                self.query()
                self.state = 2284
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2286
                self.match(SqlBaseParser.EXISTS)
                self.state = 2287
                self.match(SqlBaseParser.T__1)
                self.state = 2288
                self.query()
                self.state = 2289
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2291
                self.match(SqlBaseParser.CASE)
                self.state = 2292
                localctx.operand = self.expression()
                self.state = 2294 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2293
                    self.whenClause()
                    self.state = 2296 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==285):
                        break

                self.state = 2300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 2298
                    self.match(SqlBaseParser.ELSE)
                    self.state = 2299
                    localctx.elseExpression = self.expression()


                self.state = 2302
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2304
                self.match(SqlBaseParser.CASE)
                self.state = 2306 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2305
                    self.whenClause()
                    self.state = 2308 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==285):
                        break

                self.state = 2312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 2310
                    self.match(SqlBaseParser.ELSE)
                    self.state = 2311
                    localctx.elseExpression = self.expression()


                self.state = 2314
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2316
                self.match(SqlBaseParser.CAST)
                self.state = 2317
                self.match(SqlBaseParser.T__1)
                self.state = 2318
                self.expression()
                self.state = 2319
                self.match(SqlBaseParser.AS)
                self.state = 2320
                self.type_(0)
                self.state = 2321
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2323
                self.match(SqlBaseParser.TRY_CAST)
                self.state = 2324
                self.match(SqlBaseParser.T__1)
                self.state = 2325
                self.expression()
                self.state = 2326
                self.match(SqlBaseParser.AS)
                self.state = 2327
                self.type_(0)
                self.state = 2328
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.ArrayConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2330
                self.match(SqlBaseParser.ARRAY)
                self.state = 2331
                self.match(SqlBaseParser.T__7)
                self.state = 2340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424665027685960261) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199284287806152737) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4609540318515936191) != 0):
                    self.state = 2332
                    self.expression()
                    self.state = 2337
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2333
                        self.match(SqlBaseParser.T__3)
                        self.state = 2334
                        self.expression()
                        self.state = 2339
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2342
                self.match(SqlBaseParser.T__8)
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2343
                self.identifier()
                pass

            elif la_ == 27:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2344
                localctx.name = self.match(SqlBaseParser.CURRENT_DATE)
                pass

            elif la_ == 28:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2345
                localctx.name = self.match(SqlBaseParser.CURRENT_TIME)
                self.state = 2349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 2346
                    self.match(SqlBaseParser.T__1)
                    self.state = 2347
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2348
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 29:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2351
                localctx.name = self.match(SqlBaseParser.CURRENT_TIMESTAMP)
                self.state = 2355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 2352
                    self.match(SqlBaseParser.T__1)
                    self.state = 2353
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2354
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 30:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2357
                localctx.name = self.match(SqlBaseParser.LOCALTIME)
                self.state = 2361
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                if la_ == 1:
                    self.state = 2358
                    self.match(SqlBaseParser.T__1)
                    self.state = 2359
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2360
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 31:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2363
                localctx.name = self.match(SqlBaseParser.LOCALTIMESTAMP)
                self.state = 2367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                if la_ == 1:
                    self.state = 2364
                    self.match(SqlBaseParser.T__1)
                    self.state = 2365
                    localctx.precision = self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2366
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 32:
                localctx = SqlBaseParser.CurrentUserContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2369
                localctx.name = self.match(SqlBaseParser.CURRENT_USER)
                pass

            elif la_ == 33:
                localctx = SqlBaseParser.CurrentCatalogContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2370
                localctx.name = self.match(SqlBaseParser.CURRENT_CATALOG)
                pass

            elif la_ == 34:
                localctx = SqlBaseParser.CurrentSchemaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2371
                localctx.name = self.match(SqlBaseParser.CURRENT_SCHEMA)
                pass

            elif la_ == 35:
                localctx = SqlBaseParser.CurrentPathContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2372
                localctx.name = self.match(SqlBaseParser.CURRENT_PATH)
                pass

            elif la_ == 36:
                localctx = SqlBaseParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2373
                self.match(SqlBaseParser.TRIM)
                self.state = 2374
                self.match(SqlBaseParser.T__1)
                self.state = 2382
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 2376
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
                    if la_ == 1:
                        self.state = 2375
                        self.trimsSpecification()


                    self.state = 2379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -304274493084532732) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424665027685960261) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199288685852663841) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4609540318515936191) != 0):
                        self.state = 2378
                        localctx.trimChar = self.valueExpression(0)


                    self.state = 2381
                    self.match(SqlBaseParser.FROM)


                self.state = 2384
                localctx.trimSource = self.valueExpression(0)
                self.state = 2385
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 37:
                localctx = SqlBaseParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2387
                self.match(SqlBaseParser.TRIM)
                self.state = 2388
                self.match(SqlBaseParser.T__1)
                self.state = 2389
                localctx.trimSource = self.valueExpression(0)
                self.state = 2390
                self.match(SqlBaseParser.T__3)
                self.state = 2391
                localctx.trimChar = self.valueExpression(0)
                self.state = 2392
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2394
                self.match(SqlBaseParser.SUBSTRING)
                self.state = 2395
                self.match(SqlBaseParser.T__1)
                self.state = 2396
                self.valueExpression(0)
                self.state = 2397
                self.match(SqlBaseParser.FROM)
                self.state = 2398
                self.valueExpression(0)
                self.state = 2401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2399
                    self.match(SqlBaseParser.FOR)
                    self.state = 2400
                    self.valueExpression(0)


                self.state = 2403
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 39:
                localctx = SqlBaseParser.NormalizeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2405
                self.match(SqlBaseParser.NORMALIZE)
                self.state = 2406
                self.match(SqlBaseParser.T__1)
                self.state = 2407
                self.valueExpression(0)
                self.state = 2410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 2408
                    self.match(SqlBaseParser.T__3)
                    self.state = 2409
                    self.normalForm()


                self.state = 2412
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2414
                self.match(SqlBaseParser.EXTRACT)
                self.state = 2415
                self.match(SqlBaseParser.T__1)
                self.state = 2416
                self.identifier()
                self.state = 2417
                self.match(SqlBaseParser.FROM)
                self.state = 2418
                self.valueExpression(0)
                self.state = 2419
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 41:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2421
                self.match(SqlBaseParser.T__1)
                self.state = 2422
                self.expression()
                self.state = 2423
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.GroupingOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2425
                self.match(SqlBaseParser.GROUPING)
                self.state = 2426
                self.match(SqlBaseParser.T__1)
                self.state = 2435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424682620090108485) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199299680970645631) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4323456189061643193) != 0):
                    self.state = 2427
                    self.qualifiedName()
                    self.state = 2432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2428
                        self.match(SqlBaseParser.T__3)
                        self.state = 2429
                        self.qualifiedName()
                        self.state = 2434
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2437
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 43:
                localctx = SqlBaseParser.JsonExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2438
                self.match(SqlBaseParser.JSON_EXISTS)
                self.state = 2439
                self.match(SqlBaseParser.T__1)
                self.state = 2440
                self.jsonPathInvocation()
                self.state = 2445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83 or _la==91 or _la==259 or _la==269:
                    self.state = 2441
                    self.jsonExistsErrorBehavior()
                    self.state = 2442
                    self.match(SqlBaseParser.ON)
                    self.state = 2443
                    self.match(SqlBaseParser.ERROR)


                self.state = 2447
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 44:
                localctx = SqlBaseParser.JsonValueContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2449
                self.match(SqlBaseParser.JSON_VALUE)
                self.state = 2450
                self.match(SqlBaseParser.T__1)
                self.state = 2451
                self.jsonPathInvocation()
                self.state = 2454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 2452
                    self.match(SqlBaseParser.RETURNING)
                    self.state = 2453
                    self.type_(0)


                self.state = 2460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 2456
                    localctx.emptyBehavior = self.jsonValueBehavior()
                    self.state = 2457
                    self.match(SqlBaseParser.ON)
                    self.state = 2458
                    self.match(SqlBaseParser.EMPTY)


                self.state = 2466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67 or _la==83 or _la==172:
                    self.state = 2462
                    localctx.errorBehavior = self.jsonValueBehavior()
                    self.state = 2463
                    self.match(SqlBaseParser.ON)
                    self.state = 2464
                    self.match(SqlBaseParser.ERROR)


                self.state = 2468
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 45:
                localctx = SqlBaseParser.JsonQueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2470
                self.match(SqlBaseParser.JSON_QUERY)
                self.state = 2471
                self.match(SqlBaseParser.T__1)
                self.state = 2472
                self.jsonPathInvocation()
                self.state = 2479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 2473
                    self.match(SqlBaseParser.RETURNING)
                    self.state = 2474
                    self.type_(0)
                    self.state = 2477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 2475
                        self.match(SqlBaseParser.FORMAT)
                        self.state = 2476
                        self.jsonRepresentation()




                self.state = 2484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288 or _la==290:
                    self.state = 2481
                    self.jsonQueryWrapperBehavior()
                    self.state = 2482
                    self.match(SqlBaseParser.WRAPPER)


                self.state = 2493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136 or _la==178:
                    self.state = 2486
                    _la = self._input.LA(1)
                    if not(_la==136 or _la==178):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2487
                    self.match(SqlBaseParser.QUOTES)
                    self.state = 2491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==179:
                        self.state = 2488
                        self.match(SqlBaseParser.ON)
                        self.state = 2489
                        self.match(SqlBaseParser.SCALAR)
                        self.state = 2490
                        self.match(SqlBaseParser.TEXT_STRING)




                self.state = 2499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 2495
                    localctx.emptyBehavior = self.jsonQueryBehavior()
                    self.state = 2496
                    self.match(SqlBaseParser.ON)
                    self.state = 2497
                    self.match(SqlBaseParser.EMPTY)


                self.state = 2505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==83 or _la==172:
                    self.state = 2501
                    localctx.errorBehavior = self.jsonQueryBehavior()
                    self.state = 2502
                    self.match(SqlBaseParser.ON)
                    self.state = 2503
                    self.match(SqlBaseParser.ERROR)


                self.state = 2507
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 46:
                localctx = SqlBaseParser.JsonObjectContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2509
                self.match(SqlBaseParser.JSON_OBJECT)
                self.state = 2510
                self.match(SqlBaseParser.T__1)
                self.state = 2539
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 2511
                    self.jsonObjectMember()
                    self.state = 2516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2512
                        self.match(SqlBaseParser.T__3)
                        self.state = 2513
                        self.jsonObjectMember()
                        self.state = 2518
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2525
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [172]:
                        self.state = 2519
                        self.match(SqlBaseParser.NULL)
                        self.state = 2520
                        self.match(SqlBaseParser.ON)
                        self.state = 2521
                        self.match(SqlBaseParser.NULL)
                        pass
                    elif token in [18]:
                        self.state = 2522
                        self.match(SqlBaseParser.ABSENT)
                        self.state = 2523
                        self.match(SqlBaseParser.ON)
                        self.state = 2524
                        self.match(SqlBaseParser.NULL)
                        pass
                    elif token in [3, 218, 288, 290]:
                        pass
                    else:
                        pass
                    self.state = 2537
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [288]:
                        self.state = 2527
                        self.match(SqlBaseParser.WITH)
                        self.state = 2528
                        self.match(SqlBaseParser.UNIQUE)
                        self.state = 2530
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==138:
                            self.state = 2529
                            self.match(SqlBaseParser.KEYS)


                        pass
                    elif token in [290]:
                        self.state = 2532
                        self.match(SqlBaseParser.WITHOUT)
                        self.state = 2533
                        self.match(SqlBaseParser.UNIQUE)
                        self.state = 2535
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==138:
                            self.state = 2534
                            self.match(SqlBaseParser.KEYS)


                        pass
                    elif token in [3, 218]:
                        pass
                    else:
                        pass


                self.state = 2547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 2541
                    self.match(SqlBaseParser.RETURNING)
                    self.state = 2542
                    self.type_(0)
                    self.state = 2545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 2543
                        self.match(SqlBaseParser.FORMAT)
                        self.state = 2544
                        self.jsonRepresentation()




                self.state = 2549
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 47:
                localctx = SqlBaseParser.JsonArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2550
                self.match(SqlBaseParser.JSON_ARRAY)
                self.state = 2551
                self.match(SqlBaseParser.T__1)
                self.state = 2568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
                if la_ == 1:
                    self.state = 2552
                    self.jsonValueExpression()
                    self.state = 2557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2553
                        self.match(SqlBaseParser.T__3)
                        self.state = 2554
                        self.jsonValueExpression()
                        self.state = 2559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2566
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [172]:
                        self.state = 2560
                        self.match(SqlBaseParser.NULL)
                        self.state = 2561
                        self.match(SqlBaseParser.ON)
                        self.state = 2562
                        self.match(SqlBaseParser.NULL)
                        pass
                    elif token in [18]:
                        self.state = 2563
                        self.match(SqlBaseParser.ABSENT)
                        self.state = 2564
                        self.match(SqlBaseParser.ON)
                        self.state = 2565
                        self.match(SqlBaseParser.NULL)
                        pass
                    elif token in [3, 218]:
                        pass
                    else:
                        pass


                self.state = 2576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 2570
                    self.match(SqlBaseParser.RETURNING)
                    self.state = 2571
                    self.type_(0)
                    self.state = 2574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98:
                        self.state = 2572
                        self.match(SqlBaseParser.FORMAT)
                        self.state = 2573
                        self.jsonRepresentation()




                self.state = 2578
                self.match(SqlBaseParser.T__2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2591
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2589
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2581
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 2582
                        self.match(SqlBaseParser.T__7)
                        self.state = 2583
                        localctx.index = self.valueExpression(0)
                        self.state = 2584
                        self.match(SqlBaseParser.T__8)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2586
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 2587
                        self.match(SqlBaseParser.T__0)
                        self.state = 2588
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 2593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JsonPathInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # StringContext
            self.pathName = None # IdentifierContext

        def jsonValueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonValueExpressionContext,0)


        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def PASSING(self):
            return self.getToken(SqlBaseParser.PASSING, 0)

        def jsonArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JsonArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JsonArgumentContext,i)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonPathInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPathInvocation" ):
                listener.enterJsonPathInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPathInvocation" ):
                listener.exitJsonPathInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonPathInvocation" ):
                return visitor.visitJsonPathInvocation(self)
            else:
                return visitor.visitChildren(self)




    def jsonPathInvocation(self):

        localctx = SqlBaseParser.JsonPathInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_jsonPathInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2594
            self.jsonValueExpression()
            self.state = 2595
            self.match(SqlBaseParser.T__3)
            self.state = 2596
            localctx.path = self.string()
            self.state = 2599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 2597
                self.match(SqlBaseParser.AS)
                self.state = 2598
                localctx.pathName = self.identifier()


            self.state = 2610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 2601
                self.match(SqlBaseParser.PASSING)
                self.state = 2602
                self.jsonArgument()
                self.state = 2607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2603
                    self.match(SqlBaseParser.T__3)
                    self.state = 2604
                    self.jsonArgument()
                    self.state = 2609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def jsonRepresentation(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonRepresentationContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonValueExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValueExpression" ):
                listener.enterJsonValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValueExpression" ):
                listener.exitJsonValueExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonValueExpression" ):
                return visitor.visitJsonValueExpression(self)
            else:
                return visitor.visitChildren(self)




    def jsonValueExpression(self):

        localctx = SqlBaseParser.JsonValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_jsonValueExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2612
            self.expression()
            self.state = 2615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 2613
                self.match(SqlBaseParser.FORMAT)
                self.state = 2614
                self.jsonRepresentation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonRepresentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON(self):
            return self.getToken(SqlBaseParser.JSON, 0)

        def ENCODING(self):
            return self.getToken(SqlBaseParser.ENCODING, 0)

        def UTF8(self):
            return self.getToken(SqlBaseParser.UTF8, 0)

        def UTF16(self):
            return self.getToken(SqlBaseParser.UTF16, 0)

        def UTF32(self):
            return self.getToken(SqlBaseParser.UTF32, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonRepresentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRepresentation" ):
                listener.enterJsonRepresentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRepresentation" ):
                listener.exitJsonRepresentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonRepresentation" ):
                return visitor.visitJsonRepresentation(self)
            else:
                return visitor.visitChildren(self)




    def jsonRepresentation(self):

        localctx = SqlBaseParser.JsonRepresentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_jsonRepresentation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2617
            self.match(SqlBaseParser.JSON)
            self.state = 2620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 2618
                self.match(SqlBaseParser.ENCODING)
                self.state = 2619
                _la = self._input.LA(1)
                if not(((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonValueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonValueExpressionContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArgument" ):
                listener.enterJsonArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArgument" ):
                listener.exitJsonArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonArgument" ):
                return visitor.visitJsonArgument(self)
            else:
                return visitor.visitChildren(self)




    def jsonArgument(self):

        localctx = SqlBaseParser.JsonArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_jsonArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2622
            self.jsonValueExpression()
            self.state = 2623
            self.match(SqlBaseParser.AS)
            self.state = 2624
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonExistsErrorBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonExistsErrorBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExistsErrorBehavior" ):
                listener.enterJsonExistsErrorBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExistsErrorBehavior" ):
                listener.exitJsonExistsErrorBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonExistsErrorBehavior" ):
                return visitor.visitJsonExistsErrorBehavior(self)
            else:
                return visitor.visitChildren(self)




    def jsonExistsErrorBehavior(self):

        localctx = SqlBaseParser.JsonExistsErrorBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_jsonExistsErrorBehavior)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2626
            _la = self._input.LA(1)
            if not(_la==83 or _la==91 or _la==259 or _la==269):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonValueBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValueBehavior" ):
                listener.enterJsonValueBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValueBehavior" ):
                listener.exitJsonValueBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonValueBehavior" ):
                return visitor.visitJsonValueBehavior(self)
            else:
                return visitor.visitChildren(self)




    def jsonValueBehavior(self):

        localctx = SqlBaseParser.JsonValueBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_jsonValueBehavior)
        try:
            self.state = 2632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2628
                self.match(SqlBaseParser.ERROR)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2629
                self.match(SqlBaseParser.NULL)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2630
                self.match(SqlBaseParser.DEFAULT)
                self.state = 2631
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonQueryWrapperBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def CONDITIONAL(self):
            return self.getToken(SqlBaseParser.CONDITIONAL, 0)

        def UNCONDITIONAL(self):
            return self.getToken(SqlBaseParser.UNCONDITIONAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonQueryWrapperBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonQueryWrapperBehavior" ):
                listener.enterJsonQueryWrapperBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonQueryWrapperBehavior" ):
                listener.exitJsonQueryWrapperBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonQueryWrapperBehavior" ):
                return visitor.visitJsonQueryWrapperBehavior(self)
            else:
                return visitor.visitChildren(self)




    def jsonQueryWrapperBehavior(self):

        localctx = SqlBaseParser.JsonQueryWrapperBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_jsonQueryWrapperBehavior)
        self._la = 0 # Token type
        try:
            self.state = 2645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [290]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2634
                self.match(SqlBaseParser.WITHOUT)
                self.state = 2636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 2635
                    self.match(SqlBaseParser.ARRAY)


                pass
            elif token in [288]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2638
                self.match(SqlBaseParser.WITH)
                self.state = 2640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47 or _la==266:
                    self.state = 2639
                    _la = self._input.LA(1)
                    if not(_la==47 or _la==266):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 2642
                    self.match(SqlBaseParser.ARRAY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonQueryBehaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def OBJECT(self):
            return self.getToken(SqlBaseParser.OBJECT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonQueryBehavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonQueryBehavior" ):
                listener.enterJsonQueryBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonQueryBehavior" ):
                listener.exitJsonQueryBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonQueryBehavior" ):
                return visitor.visitJsonQueryBehavior(self)
            else:
                return visitor.visitChildren(self)




    def jsonQueryBehavior(self):

        localctx = SqlBaseParser.JsonQueryBehaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_jsonQueryBehavior)
        try:
            self.state = 2653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2647
                self.match(SqlBaseParser.ERROR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2648
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2649
                self.match(SqlBaseParser.EMPTY)
                self.state = 2650
                self.match(SqlBaseParser.ARRAY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2651
                self.match(SqlBaseParser.EMPTY)
                self.state = 2652
                self.match(SqlBaseParser.OBJECT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjectMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def VALUE(self):
            return self.getToken(SqlBaseParser.VALUE, 0)

        def jsonValueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.JsonValueExpressionContext,0)


        def KEY(self):
            return self.getToken(SqlBaseParser.KEY, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_jsonObjectMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObjectMember" ):
                listener.enterJsonObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObjectMember" ):
                listener.exitJsonObjectMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonObjectMember" ):
                return visitor.visitJsonObjectMember(self)
            else:
                return visitor.visitChildren(self)




    def jsonObjectMember(self):

        localctx = SqlBaseParser.JsonObjectMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_jsonObjectMember)
        try:
            self.state = 2666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                if la_ == 1:
                    self.state = 2655
                    self.match(SqlBaseParser.KEY)


                self.state = 2658
                self.expression()
                self.state = 2659
                self.match(SqlBaseParser.VALUE)
                self.state = 2660
                self.jsonValueExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2662
                self.expression()
                self.state = 2663
                self.match(SqlBaseParser.T__9)
                self.state = 2664
                self.jsonValueExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcessingModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUNNING(self):
            return self.getToken(SqlBaseParser.RUNNING, 0)

        def FINAL(self):
            return self.getToken(SqlBaseParser.FINAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_processingMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcessingMode" ):
                listener.enterProcessingMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcessingMode" ):
                listener.exitProcessingMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcessingMode" ):
                return visitor.visitProcessingMode(self)
            else:
                return visitor.visitChildren(self)




    def processingMode(self):

        localctx = SqlBaseParser.ProcessingModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_processingMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2668
            _la = self._input.LA(1)
            if not(_la==94 or _la==227):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullTreatmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nullTreatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullTreatment" ):
                listener.enterNullTreatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullTreatment" ):
                listener.exitNullTreatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullTreatment" ):
                return visitor.visitNullTreatment(self)
            else:
                return visitor.visitChildren(self)




    def nullTreatment(self):

        localctx = SqlBaseParser.NullTreatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_nullTreatment)
        try:
            self.state = 2674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2670
                self.match(SqlBaseParser.IGNORE)
                self.state = 2671
                self.match(SqlBaseParser.NULLS)
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2672
                self.match(SqlBaseParser.RESPECT)
                self.state = 2673
                self.match(SqlBaseParser.NULLS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnicodeStringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNICODE_STRING(self):
            return self.getToken(SqlBaseParser.UNICODE_STRING, 0)
        def UESCAPE(self):
            return self.getToken(SqlBaseParser.UESCAPE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicodeStringLiteral" ):
                listener.enterUnicodeStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicodeStringLiteral" ):
                listener.exitUnicodeStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnicodeStringLiteral" ):
                return visitor.visitUnicodeStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BasicStringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicStringLiteral" ):
                listener.enterBasicStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicStringLiteral" ):
                listener.exitBasicStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicStringLiteral" ):
                return visitor.visitBasicStringLiteral(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = SqlBaseParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_string)
        try:
            self.state = 2682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [309]:
                localctx = SqlBaseParser.BasicStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2676
                self.match(SqlBaseParser.STRING)
                pass
            elif token in [310]:
                localctx = SqlBaseParser.UnicodeStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2677
                self.match(SqlBaseParser.UNICODE_STRING)
                self.state = 2680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                if la_ == 1:
                    self.state = 2678
                    self.match(SqlBaseParser.UESCAPE)
                    self.state = 2679
                    self.match(SqlBaseParser.STRING)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeZoneSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_timeZoneSpecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TimeZoneIntervalContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneInterval" ):
                listener.enterTimeZoneInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneInterval" ):
                listener.exitTimeZoneInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeZoneInterval" ):
                return visitor.visitTimeZoneInterval(self)
            else:
                return visitor.visitChildren(self)


    class TimeZoneStringContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneString" ):
                listener.enterTimeZoneString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneString" ):
                listener.exitTimeZoneString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeZoneString" ):
                return visitor.visitTimeZoneString(self)
            else:
                return visitor.visitChildren(self)



    def timeZoneSpecifier(self):

        localctx = SqlBaseParser.TimeZoneSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_timeZoneSpecifier)
        try:
            self.state = 2690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TimeZoneIntervalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2684
                self.match(SqlBaseParser.TIME)
                self.state = 2685
                self.match(SqlBaseParser.ZONE)
                self.state = 2686
                self.interval()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TimeZoneStringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2687
                self.match(SqlBaseParser.TIME)
                self.state = 2688
                self.match(SqlBaseParser.ZONE)
                self.state = 2689
                self.string()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2692
            _la = self._input.LA(1)
            if not(((((_la - 296)) & ~0x3f) == 0 and ((1 << (_la - 296)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonQuantifier" ):
                listener.enterComparisonQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonQuantifier" ):
                listener.exitComparisonQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonQuantifier" ):
                return visitor.visitComparisonQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def comparisonQuantifier(self):

        localctx = SqlBaseParser.ComparisonQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_comparisonQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            _la = self._input.LA(1)
            if not(_la==22 or _la==26 or _la==240):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            _la = self._input.LA(1)
            if not(_la==91 or _la==259):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def string(self):
            return self.getTypedRuleContext(SqlBaseParser.StringContext,0)


        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)


        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2698
            self.match(SqlBaseParser.INTERVAL)
            self.state = 2700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==302 or _la==303:
                self.state = 2699
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==302 or _la==303):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2702
            self.string()
            self.state = 2703
            localctx.from_ = self.intervalField()
            self.state = 2706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 2704
                self.match(SqlBaseParser.TO)
                self.state = 2705
                localctx.to = self.intervalField()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalField" ):
                return visitor.visitIntervalField(self)
            else:
                return visitor.visitChildren(self)




    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_intervalField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2708
            _la = self._input.LA(1)
            if not(_la==65 or _la==111 or _la==159 or _la==160 or _la==231 or _la==294):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFD(self):
            return self.getToken(SqlBaseParser.NFD, 0)

        def NFC(self):
            return self.getToken(SqlBaseParser.NFC, 0)

        def NFKD(self):
            return self.getToken(SqlBaseParser.NFKD, 0)

        def NFKC(self):
            return self.getToken(SqlBaseParser.NFKC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_normalForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalForm" ):
                listener.enterNormalForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalForm" ):
                listener.exitNormalForm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalForm" ):
                return visitor.visitNormalForm(self)
            else:
                return visitor.visitChildren(self)




    def normalForm(self):

        localctx = SqlBaseParser.NormalFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_normalForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2710
            _la = self._input.LA(1)
            if not(((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_type

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RowTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def rowField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFieldContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowType" ):
                listener.enterRowType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowType" ):
                listener.exitRowType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowType" ):
                return visitor.visitRowType(self)
            else:
                return visitor.visitChildren(self)


    class IntervalTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)
        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalType" ):
                return visitor.visitIntervalType(self)
            else:
                return visitor.visitChildren(self)


    class ArrayTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)


    class DoublePrecisionTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoublePrecisionType" ):
                listener.enterDoublePrecisionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoublePrecisionType" ):
                listener.exitDoublePrecisionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoublePrecisionType" ):
                return visitor.visitDoublePrecisionType(self)
            else:
                return visitor.visitChildren(self)


    class LegacyArrayTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyArrayType" ):
                listener.enterLegacyArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyArrayType" ):
                listener.exitLegacyArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyArrayType" ):
                return visitor.visitLegacyArrayType(self)
            else:
                return visitor.visitChildren(self)


    class GenericTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TypeParameterContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericType" ):
                listener.enterGenericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericType" ):
                listener.exitGenericType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericType" ):
                return visitor.visitGenericType(self)
            else:
                return visitor.visitChildren(self)


    class DateTimeTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.base = None # Token
            self.precision = None # TypeParameterContext
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)
        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)
        def TIME(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TIME)
            else:
                return self.getToken(SqlBaseParser.TIME, i)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def typeParameter(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeParameterContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeType" ):
                listener.enterDateTimeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeType" ):
                listener.exitDateTimeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimeType" ):
                return visitor.visitDateTimeType(self)
            else:
                return visitor.visitChildren(self)


    class LegacyMapTypeContext(TypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TypeContext
            super().__init__(parser)
            self.keyType = None # TypeContext
            self.valueType = None # TypeContext
            self.copyFrom(ctx)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TypeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyMapType" ):
                listener.enterLegacyMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyMapType" ):
                listener.exitLegacyMapType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyMapType" ):
                return visitor.visitLegacyMapType(self)
            else:
                return visitor.visitChildren(self)



    def type_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.TypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_type, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2713
                self.match(SqlBaseParser.ROW)
                self.state = 2714
                self.match(SqlBaseParser.T__1)
                self.state = 2715
                self.rowField()
                self.state = 2720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2716
                    self.match(SqlBaseParser.T__3)
                    self.state = 2717
                    self.rowField()
                    self.state = 2722
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2723
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2725
                self.match(SqlBaseParser.INTERVAL)
                self.state = 2726
                localctx.from_ = self.intervalField()
                self.state = 2729
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 2727
                    self.match(SqlBaseParser.TO)
                    self.state = 2728
                    localctx.to = self.intervalField()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2731
                localctx.base = self.match(SqlBaseParser.TIMESTAMP)
                self.state = 2736
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                if la_ == 1:
                    self.state = 2732
                    self.match(SqlBaseParser.T__1)
                    self.state = 2733
                    localctx.precision = self.typeParameter()
                    self.state = 2734
                    self.match(SqlBaseParser.T__2)


                self.state = 2741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
                if la_ == 1:
                    self.state = 2738
                    self.match(SqlBaseParser.WITHOUT)
                    self.state = 2739
                    self.match(SqlBaseParser.TIME)
                    self.state = 2740
                    self.match(SqlBaseParser.ZONE)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2743
                localctx.base = self.match(SqlBaseParser.TIMESTAMP)
                self.state = 2748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2744
                    self.match(SqlBaseParser.T__1)
                    self.state = 2745
                    localctx.precision = self.typeParameter()
                    self.state = 2746
                    self.match(SqlBaseParser.T__2)


                self.state = 2750
                self.match(SqlBaseParser.WITH)
                self.state = 2751
                self.match(SqlBaseParser.TIME)
                self.state = 2752
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2753
                localctx.base = self.match(SqlBaseParser.TIME)
                self.state = 2758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                if la_ == 1:
                    self.state = 2754
                    self.match(SqlBaseParser.T__1)
                    self.state = 2755
                    localctx.precision = self.typeParameter()
                    self.state = 2756
                    self.match(SqlBaseParser.T__2)


                self.state = 2763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                if la_ == 1:
                    self.state = 2760
                    self.match(SqlBaseParser.WITHOUT)
                    self.state = 2761
                    self.match(SqlBaseParser.TIME)
                    self.state = 2762
                    self.match(SqlBaseParser.ZONE)


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.DateTimeTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2765
                localctx.base = self.match(SqlBaseParser.TIME)
                self.state = 2770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2766
                    self.match(SqlBaseParser.T__1)
                    self.state = 2767
                    localctx.precision = self.typeParameter()
                    self.state = 2768
                    self.match(SqlBaseParser.T__2)


                self.state = 2772
                self.match(SqlBaseParser.WITH)
                self.state = 2773
                self.match(SqlBaseParser.TIME)
                self.state = 2774
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.DoublePrecisionTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2775
                self.match(SqlBaseParser.DOUBLE)
                self.state = 2776
                self.match(SqlBaseParser.PRECISION)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.LegacyArrayTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2777
                self.match(SqlBaseParser.ARRAY)
                self.state = 2778
                self.match(SqlBaseParser.LT)
                self.state = 2779
                self.type_(0)
                self.state = 2780
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.LegacyMapTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2782
                self.match(SqlBaseParser.MAP)
                self.state = 2783
                self.match(SqlBaseParser.LT)
                self.state = 2784
                localctx.keyType = self.type_(0)
                self.state = 2785
                self.match(SqlBaseParser.T__3)
                self.state = 2786
                localctx.valueType = self.type_(0)
                self.state = 2787
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.GenericTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2789
                self.identifier()
                self.state = 2801
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 2790
                    self.match(SqlBaseParser.T__1)
                    self.state = 2791
                    self.typeParameter()
                    self.state = 2796
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2792
                        self.match(SqlBaseParser.T__3)
                        self.state = 2793
                        self.typeParameter()
                        self.state = 2798
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2799
                    self.match(SqlBaseParser.T__2)


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2814
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,377,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.ArrayTypeContext(self, SqlBaseParser.TypeContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type)
                    self.state = 2805
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2806
                    self.match(SqlBaseParser.ARRAY)
                    self.state = 2810
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
                    if la_ == 1:
                        self.state = 2807
                        self.match(SqlBaseParser.T__7)
                        self.state = 2808
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 2809
                        self.match(SqlBaseParser.T__8)

             
                self.state = 2816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,377,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RowFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowField" ):
                listener.enterRowField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowField" ):
                listener.exitRowField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowField" ):
                return visitor.visitRowField(self)
            else:
                return visitor.visitChildren(self)




    def rowField(self):

        localctx = SqlBaseParser.RowFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_rowField)
        try:
            self.state = 2821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2817
                self.type_(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2818
                self.identifier()
                self.state = 2819
                self.type_(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def type_(self):
            return self.getTypedRuleContext(SqlBaseParser.TypeContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = SqlBaseParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_typeParameter)
        try:
            self.state = 2825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [312]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2823
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass
            elif token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 122, 124, 125, 127, 129, 136, 137, 138, 139, 140, 141, 143, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 287, 289, 290, 291, 292, 293, 294, 295, 315, 316, 317, 318]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2824
                self.type_(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2827
            self.match(SqlBaseParser.WHEN)
            self.state = 2828
            localctx.condition = self.expression()
            self.state = 2829
            self.match(SqlBaseParser.THEN)
            self.state = 2830
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter" ):
                listener.enterFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter" ):
                listener.exitFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilter" ):
                return visitor.visitFilter(self)
            else:
                return visitor.visitChildren(self)




    def filter_(self):

        localctx = SqlBaseParser.FilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2832
            self.match(SqlBaseParser.FILTER)
            self.state = 2833
            self.match(SqlBaseParser.T__1)
            self.state = 2834
            self.match(SqlBaseParser.WHERE)
            self.state = 2835
            self.booleanExpression(0)
            self.state = 2836
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_mergeCase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MergeInsertContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self._identifier = None # IdentifierContext
            self.targets = list() # of IdentifierContexts
            self._expression = None # ExpressionContext
            self.values = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeInsert" ):
                listener.enterMergeInsert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeInsert" ):
                listener.exitMergeInsert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeInsert" ):
                return visitor.visitMergeInsert(self)
            else:
                return visitor.visitChildren(self)


    class MergeUpdateContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self._identifier = None # IdentifierContext
            self.targets = list() # of IdentifierContexts
            self._expression = None # ExpressionContext
            self.values = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.EQ)
            else:
                return self.getToken(SqlBaseParser.EQ, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeUpdate" ):
                listener.enterMergeUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeUpdate" ):
                listener.exitMergeUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeUpdate" ):
                return visitor.visitMergeUpdate(self)
            else:
                return visitor.visitChildren(self)


    class MergeDeleteContext(MergeCaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.MergeCaseContext
            super().__init__(parser)
            self.condition = None # ExpressionContext
            self.copyFrom(ctx)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)
        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)
        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)
        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeDelete" ):
                listener.enterMergeDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeDelete" ):
                listener.exitMergeDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeDelete" ):
                return visitor.visitMergeDelete(self)
            else:
                return visitor.visitChildren(self)



    def mergeCase(self):

        localctx = SqlBaseParser.MergeCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_mergeCase)
        self._la = 0 # Token type
        try:
            self.state = 2902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.MergeUpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2838
                self.match(SqlBaseParser.WHEN)
                self.state = 2839
                self.match(SqlBaseParser.MATCHED)
                self.state = 2842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 2840
                    self.match(SqlBaseParser.AND)
                    self.state = 2841
                    localctx.condition = self.expression()


                self.state = 2844
                self.match(SqlBaseParser.THEN)
                self.state = 2845
                self.match(SqlBaseParser.UPDATE)
                self.state = 2846
                self.match(SqlBaseParser.SET)
                self.state = 2847
                localctx._identifier = self.identifier()
                localctx.targets.append(localctx._identifier)
                self.state = 2848
                self.match(SqlBaseParser.EQ)
                self.state = 2849
                localctx._expression = self.expression()
                localctx.values.append(localctx._expression)
                self.state = 2857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2850
                    self.match(SqlBaseParser.T__3)
                    self.state = 2851
                    localctx._identifier = self.identifier()
                    localctx.targets.append(localctx._identifier)
                    self.state = 2852
                    self.match(SqlBaseParser.EQ)
                    self.state = 2853
                    localctx._expression = self.expression()
                    localctx.values.append(localctx._expression)
                    self.state = 2859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.MergeDeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2860
                self.match(SqlBaseParser.WHEN)
                self.state = 2861
                self.match(SqlBaseParser.MATCHED)
                self.state = 2864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 2862
                    self.match(SqlBaseParser.AND)
                    self.state = 2863
                    localctx.condition = self.expression()


                self.state = 2866
                self.match(SqlBaseParser.THEN)
                self.state = 2867
                self.match(SqlBaseParser.DELETE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.MergeInsertContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2868
                self.match(SqlBaseParser.WHEN)
                self.state = 2869
                self.match(SqlBaseParser.NOT)
                self.state = 2870
                self.match(SqlBaseParser.MATCHED)
                self.state = 2873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 2871
                    self.match(SqlBaseParser.AND)
                    self.state = 2872
                    localctx.condition = self.expression()


                self.state = 2875
                self.match(SqlBaseParser.THEN)
                self.state = 2876
                self.match(SqlBaseParser.INSERT)
                self.state = 2888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2877
                    self.match(SqlBaseParser.T__1)
                    self.state = 2878
                    localctx._identifier = self.identifier()
                    localctx.targets.append(localctx._identifier)
                    self.state = 2883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==4:
                        self.state = 2879
                        self.match(SqlBaseParser.T__3)
                        self.state = 2880
                        localctx._identifier = self.identifier()
                        localctx.targets.append(localctx._identifier)
                        self.state = 2885
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2886
                    self.match(SqlBaseParser.T__2)


                self.state = 2890
                self.match(SqlBaseParser.VALUES)
                self.state = 2891
                self.match(SqlBaseParser.T__1)
                self.state = 2892
                localctx._expression = self.expression()
                localctx.values.append(localctx._expression)
                self.state = 2897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2893
                    self.match(SqlBaseParser.T__3)
                    self.state = 2894
                    localctx._expression = self.expression()
                    localctx.values.append(localctx._expression)
                    self.state = 2899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2900
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.windowName = None # IdentifierContext

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def windowSpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecificationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver" ):
                return visitor.visitOver(self)
            else:
                return visitor.visitChildren(self)




    def over(self):

        localctx = SqlBaseParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_over)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2904
            self.match(SqlBaseParser.OVER)
            self.state = 2910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 122, 124, 125, 127, 129, 136, 137, 138, 139, 140, 141, 143, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 287, 289, 290, 291, 292, 293, 294, 295, 315, 316, 317, 318]:
                self.state = 2905
                localctx.windowName = self.identifier()
                pass
            elif token in [2]:
                self.state = 2906
                self.match(SqlBaseParser.T__1)
                self.state = 2907
                self.windowSpecification()
                self.state = 2908
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameExtent(self):
            return self.getTypedRuleContext(SqlBaseParser.FrameExtentContext,0)


        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def measureDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MeasureDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MeasureDefinitionContext,i)


        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def skipTo(self):
            return self.getTypedRuleContext(SqlBaseParser.SkipToContext,0)


        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def subsetDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubsetDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubsetDefinitionContext,i)


        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def variableDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.VariableDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.VariableDefinitionContext,i)


        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_windowFrame)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 2912
                self.match(SqlBaseParser.MEASURES)
                self.state = 2913
                self.measureDefinition()
                self.state = 2918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2914
                    self.match(SqlBaseParser.T__3)
                    self.state = 2915
                    self.measureDefinition()
                    self.state = 2920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2923
            self.frameExtent()
            self.state = 2927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 2924
                self.match(SqlBaseParser.AFTER)
                self.state = 2925
                self.match(SqlBaseParser.MATCH)
                self.state = 2926
                self.skipTo()


            self.state = 2930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117 or _la==233:
                self.state = 2929
                _la = self._input.LA(1)
                if not(_la==117 or _la==233):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==195:
                self.state = 2932
                self.match(SqlBaseParser.PATTERN)
                self.state = 2933
                self.match(SqlBaseParser.T__1)
                self.state = 2934
                self.rowPattern(0)
                self.state = 2935
                self.match(SqlBaseParser.T__2)


            self.state = 2948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==243:
                self.state = 2939
                self.match(SqlBaseParser.SUBSET)
                self.state = 2940
                self.subsetDefinition()
                self.state = 2945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2941
                    self.match(SqlBaseParser.T__3)
                    self.state = 2942
                    self.subsetDefinition()
                    self.state = 2947
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 2950
                self.match(SqlBaseParser.DEFINE)
                self.state = 2951
                self.variableDefinition()
                self.state = 2956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2952
                    self.match(SqlBaseParser.T__3)
                    self.state = 2953
                    self.variableDefinition()
                    self.state = 2958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameExtentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def GROUPS(self):
            return self.getToken(SqlBaseParser.GROUPS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameExtent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameExtent" ):
                listener.enterFrameExtent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameExtent" ):
                listener.exitFrameExtent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameExtent" ):
                return visitor.visitFrameExtent(self)
            else:
                return visitor.visitChildren(self)




    def frameExtent(self):

        localctx = SqlBaseParser.FrameExtentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_frameExtent)
        try:
            self.state = 2985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2961
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2962
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2963
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2964
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2965
                localctx.frameType = self.match(SqlBaseParser.GROUPS)
                self.state = 2966
                localctx.start = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2967
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2968
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2969
                localctx.start = self.frameBound()
                self.state = 2970
                self.match(SqlBaseParser.AND)
                self.state = 2971
                localctx.end = self.frameBound()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2973
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2974
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2975
                localctx.start = self.frameBound()
                self.state = 2976
                self.match(SqlBaseParser.AND)
                self.state = 2977
                localctx.end = self.frameBound()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2979
                localctx.frameType = self.match(SqlBaseParser.GROUPS)
                self.state = 2980
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2981
                localctx.start = self.frameBound()
                self.state = 2982
                self.match(SqlBaseParser.AND)
                self.state = 2983
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BoundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundedFrame" ):
                listener.enterBoundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundedFrame" ):
                listener.exitBoundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundedFrame" ):
                return visitor.visitBoundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class UnboundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)
        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnboundedFrame" ):
                listener.enterUnboundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnboundedFrame" ):
                listener.exitUnboundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnboundedFrame" ):
                return visitor.visitUnboundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRowBoundContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRowBound" ):
                listener.enterCurrentRowBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRowBound" ):
                listener.exitCurrentRowBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRowBound" ):
                return visitor.visitCurrentRowBound(self)
            else:
                return visitor.visitChildren(self)



    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 2996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2987
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2988
                localctx.boundType = self.match(SqlBaseParser.PRECEDING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2989
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2990
                localctx.boundType = self.match(SqlBaseParser.FOLLOWING)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CurrentRowBoundContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2991
                self.match(SqlBaseParser.CURRENT)
                self.state = 2992
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.BoundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2993
                self.expression()
                self.state = 2994
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==96 or _la==201):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowPattern

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QuantifiedPrimaryContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def patternPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternPrimaryContext,0)

        def patternQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.PatternQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedPrimary" ):
                listener.enterQuantifiedPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedPrimary" ):
                listener.exitQuantifiedPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifiedPrimary" ):
                return visitor.visitQuantifiedPrimary(self)
            else:
                return visitor.visitChildren(self)


    class PatternConcatenationContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternConcatenation" ):
                listener.enterPatternConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternConcatenation" ):
                listener.exitPatternConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternConcatenation" ):
                return visitor.visitPatternConcatenation(self)
            else:
                return visitor.visitChildren(self)


    class PatternAlternationContext(RowPatternContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowPatternContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternAlternation" ):
                listener.enterPatternAlternation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternAlternation" ):
                listener.exitPatternAlternation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternAlternation" ):
                return visitor.visitPatternAlternation(self)
            else:
                return visitor.visitChildren(self)



    def rowPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RowPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_rowPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QuantifiedPrimaryContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2999
            self.patternPrimary()
            self.state = 3001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
            if la_ == 1:
                self.state = 3000
                self.patternQuantifier()


            self._ctx.stop = self._input.LT(-1)
            self.state = 3010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,402,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3008
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.PatternConcatenationContext(self, SqlBaseParser.RowPatternContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rowPattern)
                        self.state = 3003
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3004
                        self.rowPattern(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.PatternAlternationContext(self, SqlBaseParser.RowPatternContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rowPattern)
                        self.state = 3005
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3006
                        self.match(SqlBaseParser.T__10)
                        self.state = 3007
                        self.rowPattern(2)
                        pass

             
                self.state = 3012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,402,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PatternPermutationContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERMUTE(self):
            return self.getToken(SqlBaseParser.PERMUTE, 0)
        def rowPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowPatternContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPermutation" ):
                listener.enterPatternPermutation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPermutation" ):
                listener.exitPatternPermutation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPermutation" ):
                return visitor.visitPatternPermutation(self)
            else:
                return visitor.visitChildren(self)


    class PartitionEndAnchorContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionEndAnchor" ):
                listener.enterPartitionEndAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionEndAnchor" ):
                listener.exitPartitionEndAnchor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionEndAnchor" ):
                return visitor.visitPartitionEndAnchor(self)
            else:
                return visitor.visitChildren(self)


    class PatternVariableContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternVariable" ):
                listener.enterPatternVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternVariable" ):
                listener.exitPatternVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternVariable" ):
                return visitor.visitPatternVariable(self)
            else:
                return visitor.visitChildren(self)


    class ExcludedPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcludedPattern" ):
                listener.enterExcludedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcludedPattern" ):
                listener.exitExcludedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcludedPattern" ):
                return visitor.visitExcludedPattern(self)
            else:
                return visitor.visitChildren(self)


    class PartitionStartAnchorContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionStartAnchor" ):
                listener.enterPartitionStartAnchor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionStartAnchor" ):
                listener.exitPartitionStartAnchor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionStartAnchor" ):
                return visitor.visitPartitionStartAnchor(self)
            else:
                return visitor.visitChildren(self)


    class EmptyPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyPattern" ):
                listener.enterEmptyPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyPattern" ):
                listener.exitEmptyPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyPattern" ):
                return visitor.visitEmptyPattern(self)
            else:
                return visitor.visitChildren(self)


    class GroupedPatternContext(PatternPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowPattern(self):
            return self.getTypedRuleContext(SqlBaseParser.RowPatternContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupedPattern" ):
                listener.enterGroupedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupedPattern" ):
                listener.exitGroupedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupedPattern" ):
                return visitor.visitGroupedPattern(self)
            else:
                return visitor.visitChildren(self)



    def patternPrimary(self):

        localctx = SqlBaseParser.PatternPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_patternPrimary)
        self._la = 0 # Token type
        try:
            self.state = 3038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PatternVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3013
                self.identifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.EmptyPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3014
                self.match(SqlBaseParser.T__1)
                self.state = 3015
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.PatternPermutationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3016
                self.match(SqlBaseParser.PERMUTE)
                self.state = 3017
                self.match(SqlBaseParser.T__1)
                self.state = 3018
                self.rowPattern(0)
                self.state = 3023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 3019
                    self.match(SqlBaseParser.T__3)
                    self.state = 3020
                    self.rowPattern(0)
                    self.state = 3025
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3026
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.GroupedPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3028
                self.match(SqlBaseParser.T__1)
                self.state = 3029
                self.rowPattern(0)
                self.state = 3030
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.PartitionStartAnchorContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3032
                self.match(SqlBaseParser.T__11)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.PartitionEndAnchorContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3033
                self.match(SqlBaseParser.T__12)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.ExcludedPatternContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3034
                self.match(SqlBaseParser.T__13)
                self.state = 3035
                self.rowPattern(0)
                self.state = 3036
                self.match(SqlBaseParser.T__14)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_patternQuantifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ZeroOrMoreQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroOrMoreQuantifier" ):
                listener.enterZeroOrMoreQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroOrMoreQuantifier" ):
                listener.exitZeroOrMoreQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZeroOrMoreQuantifier" ):
                return visitor.visitZeroOrMoreQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class OneOrMoreQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneOrMoreQuantifier" ):
                listener.enterOneOrMoreQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneOrMoreQuantifier" ):
                listener.exitOneOrMoreQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneOrMoreQuantifier" ):
                return visitor.visitOneOrMoreQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class ZeroOrOneQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.reluctant = None # Token
            self.copyFrom(ctx)

        def QUESTION_MARK(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.QUESTION_MARK)
            else:
                return self.getToken(SqlBaseParser.QUESTION_MARK, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroOrOneQuantifier" ):
                listener.enterZeroOrOneQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroOrOneQuantifier" ):
                listener.exitZeroOrOneQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZeroOrOneQuantifier" ):
                return visitor.visitZeroOrOneQuantifier(self)
            else:
                return visitor.visitChildren(self)


    class RangeQuantifierContext(PatternQuantifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PatternQuantifierContext
            super().__init__(parser)
            self.exactly = None # Token
            self.reluctant = None # Token
            self.atLeast = None # Token
            self.atMost = None # Token
            self.copyFrom(ctx)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def QUESTION_MARK(self):
            return self.getToken(SqlBaseParser.QUESTION_MARK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeQuantifier" ):
                listener.enterRangeQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeQuantifier" ):
                listener.exitRangeQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeQuantifier" ):
                return visitor.visitRangeQuantifier(self)
            else:
                return visitor.visitChildren(self)



    def patternQuantifier(self):

        localctx = SqlBaseParser.PatternQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_patternQuantifier)
        self._la = 0 # Token type
        try:
            self.state = 3070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ZeroOrMoreQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3040
                self.match(SqlBaseParser.ASTERISK)
                self.state = 3042
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 3041
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.OneOrMoreQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3044
                self.match(SqlBaseParser.PLUS)
                self.state = 3046
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 3045
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ZeroOrOneQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3048
                self.match(SqlBaseParser.QUESTION_MARK)
                self.state = 3050
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 3049
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.RangeQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3052
                self.match(SqlBaseParser.T__15)
                self.state = 3053
                localctx.exactly = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 3054
                self.match(SqlBaseParser.T__16)
                self.state = 3056
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
                if la_ == 1:
                    self.state = 3055
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.RangeQuantifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3058
                self.match(SqlBaseParser.T__15)
                self.state = 3060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==312:
                    self.state = 3059
                    localctx.atLeast = self.match(SqlBaseParser.INTEGER_VALUE)


                self.state = 3062
                self.match(SqlBaseParser.T__3)
                self.state = 3064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==312:
                    self.state = 3063
                    localctx.atMost = self.match(SqlBaseParser.INTEGER_VALUE)


                self.state = 3066
                self.match(SqlBaseParser.T__16)
                self.state = 3068
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
                if la_ == 1:
                    self.state = 3067
                    localctx.reluctant = self.match(SqlBaseParser.QUESTION_MARK)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_updateAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateAssignment" ):
                listener.enterUpdateAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateAssignment" ):
                listener.exitUpdateAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateAssignment" ):
                return visitor.visitUpdateAssignment(self)
            else:
                return visitor.visitChildren(self)




    def updateAssignment(self):

        localctx = SqlBaseParser.UpdateAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_updateAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3072
            self.identifier()
            self.state = 3073
            self.match(SqlBaseParser.EQ)
            self.state = 3074
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_explainOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainFormatContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)
        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)
        def JSON(self):
            return self.getToken(SqlBaseParser.JSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainFormat" ):
                listener.enterExplainFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainFormat" ):
                listener.exitExplainFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainFormat" ):
                return visitor.visitExplainFormat(self)
            else:
                return visitor.visitChildren(self)


    class ExplainTypeContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)
        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)
        def VALIDATE(self):
            return self.getToken(SqlBaseParser.VALIDATE, 0)
        def IO(self):
            return self.getToken(SqlBaseParser.IO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainType" ):
                listener.enterExplainType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainType" ):
                listener.exitExplainType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainType" ):
                return visitor.visitExplainType(self)
            else:
                return visitor.visitChildren(self)



    def explainOption(self):

        localctx = SqlBaseParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.state = 3080
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98]:
                localctx = SqlBaseParser.ExplainFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3076
                self.match(SqlBaseParser.FORMAT)
                self.state = 3077
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==106 or _la==129 or _la==249):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [262]:
                localctx = SqlBaseParser.ExplainTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3078
                self.match(SqlBaseParser.TYPE)
                self.state = 3079
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==76 or _la==125 or _la==150 or _la==279):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transactionMode

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TransactionAccessModeContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransactionModeContext
            super().__init__(parser)
            self.accessMode = None # Token
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)
        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionAccessMode" ):
                return visitor.visitTransactionAccessMode(self)
            else:
                return visitor.visitChildren(self)


    class IsolationLevelContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransactionModeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)
        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)
        def levelOfIsolation(self):
            return self.getTypedRuleContext(SqlBaseParser.LevelOfIsolationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsolationLevel" ):
                return visitor.visitIsolationLevel(self)
            else:
                return visitor.visitChildren(self)



    def transactionMode(self):

        localctx = SqlBaseParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_transactionMode)
        self._la = 0 # Token type
        try:
            self.state = 3087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                localctx = SqlBaseParser.IsolationLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3082
                self.match(SqlBaseParser.ISOLATION)
                self.state = 3083
                self.match(SqlBaseParser.LEVEL)
                self.state = 3084
                self.levelOfIsolation()
                pass
            elif token in [209]:
                localctx = SqlBaseParser.TransactionAccessModeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3085
                self.match(SqlBaseParser.READ)
                self.state = 3086
                localctx.accessMode = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==181 or _la==293):
                    localctx.accessMode = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelOfIsolationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_levelOfIsolation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ReadUncommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadUncommitted" ):
                listener.enterReadUncommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadUncommitted" ):
                listener.exitReadUncommitted(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadUncommitted" ):
                return visitor.visitReadUncommitted(self)
            else:
                return visitor.visitChildren(self)


    class SerializableContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializable" ):
                listener.enterSerializable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializable" ):
                listener.exitSerializable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSerializable" ):
                return visitor.visitSerializable(self)
            else:
                return visitor.visitChildren(self)


    class ReadCommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)
        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadCommitted" ):
                listener.enterReadCommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadCommitted" ):
                listener.exitReadCommitted(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadCommitted" ):
                return visitor.visitReadCommitted(self)
            else:
                return visitor.visitChildren(self)


    class RepeatableReadContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)
        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatableRead" ):
                listener.enterRepeatableRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatableRead" ):
                listener.exitRepeatableRead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatableRead" ):
                return visitor.visitRepeatableRead(self)
            else:
                return visitor.visitChildren(self)



    def levelOfIsolation(self):

        localctx = SqlBaseParser.LevelOfIsolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_levelOfIsolation)
        try:
            self.state = 3096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ReadUncommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3089
                self.match(SqlBaseParser.READ)
                self.state = 3090
                self.match(SqlBaseParser.UNCOMMITTED)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ReadCommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3091
                self.match(SqlBaseParser.READ)
                self.state = 3092
                self.match(SqlBaseParser.COMMITTED)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.RepeatableReadContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3093
                self.match(SqlBaseParser.REPEATABLE)
                self.state = 3094
                self.match(SqlBaseParser.READ)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SerializableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3095
                self.match(SqlBaseParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_callArgument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionalArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalArgument" ):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalArgument" ):
                listener.exitPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalArgument" ):
                return visitor.visitPositionalArgument(self)
            else:
                return visitor.visitChildren(self)


    class NamedArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgument" ):
                return visitor.visitNamedArgument(self)
            else:
                return visitor.visitChildren(self)



    def callArgument(self):

        localctx = SqlBaseParser.CallArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_callArgument)
        try:
            self.state = 3103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.PositionalArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3098
                self.expression()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.NamedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3099
                self.identifier()
                self.state = 3100
                self.match(SqlBaseParser.T__5)
                self.state = 3101
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pathElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QualifiedArgumentContext(PathElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PathElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedArgument" ):
                listener.enterQualifiedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedArgument" ):
                listener.exitQualifiedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedArgument" ):
                return visitor.visitQualifiedArgument(self)
            else:
                return visitor.visitChildren(self)


    class UnqualifiedArgumentContext(PathElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PathElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedArgument" ):
                listener.enterUnqualifiedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedArgument" ):
                listener.exitUnqualifiedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedArgument" ):
                return visitor.visitUnqualifiedArgument(self)
            else:
                return visitor.visitChildren(self)



    def pathElement(self):

        localctx = SqlBaseParser.PathElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_pathElement)
        try:
            self.state = 3110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.QualifiedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3105
                self.identifier()
                self.state = 3106
                self.match(SqlBaseParser.T__0)
                self.state = 3107
                self.identifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UnqualifiedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3109
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PathElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PathElementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pathSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathSpecification" ):
                listener.enterPathSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathSpecification" ):
                listener.exitPathSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPathSpecification" ):
                return visitor.visitPathSpecification(self)
            else:
                return visitor.visitChildren(self)




    def pathSpecification(self):

        localctx = SqlBaseParser.PathSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_pathSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3112
            self.pathElement()
            self.state = 3117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3113
                self.match(SqlBaseParser.T__3)
                self.state = 3114
                self.pathElement()
                self.state = 3119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilege" ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = SqlBaseParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3120
            _la = self._input.LA(1)
            if not(_la==51 or _la==70 or _la==120 or _la==234 or _la==272):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3122
            self.identifier()
            self.state = 3127
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,419,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3123
                    self.match(SqlBaseParser.T__0)
                    self.state = 3124
                    self.identifier() 
                self.state = 3129
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,419,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryPeriodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.end = None # ValueExpressionContext

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def rangeType(self):
            return self.getTypedRuleContext(SqlBaseParser.RangeTypeContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPeriod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPeriod" ):
                listener.enterQueryPeriod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPeriod" ):
                listener.exitQueryPeriod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPeriod" ):
                return visitor.visitQueryPeriod(self)
            else:
                return visitor.visitChildren(self)




    def queryPeriod(self):

        localctx = SqlBaseParser.QueryPeriodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_queryPeriod)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3130
            self.match(SqlBaseParser.FOR)
            self.state = 3131
            self.rangeType()
            self.state = 3132
            self.match(SqlBaseParser.AS)
            self.state = 3133
            self.match(SqlBaseParser.OF)
            self.state = 3134
            localctx.end = self.valueExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_rangeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeType" ):
                listener.enterRangeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeType" ):
                listener.exitRangeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeType" ):
                return visitor.visitRangeType(self)
            else:
                return visitor.visitChildren(self)




    def rangeType(self):

        localctx = SqlBaseParser.RangeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_rangeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3136
            _la = self._input.LA(1)
            if not(_la==254 or _la==283):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_grantor

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CurrentUserGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUserGrantor" ):
                listener.enterCurrentUserGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUserGrantor" ):
                listener.exitCurrentUserGrantor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUserGrantor" ):
                return visitor.visitCurrentUserGrantor(self)
            else:
                return visitor.visitChildren(self)


    class SpecifiedPrincipalContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def principal(self):
            return self.getTypedRuleContext(SqlBaseParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifiedPrincipal" ):
                listener.enterSpecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifiedPrincipal" ):
                listener.exitSpecifiedPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecifiedPrincipal" ):
                return visitor.visitSpecifiedPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRoleGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_ROLE(self):
            return self.getToken(SqlBaseParser.CURRENT_ROLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRoleGrantor" ):
                listener.enterCurrentRoleGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRoleGrantor" ):
                listener.exitCurrentRoleGrantor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRoleGrantor" ):
                return visitor.visitCurrentRoleGrantor(self)
            else:
                return visitor.visitChildren(self)



    def grantor(self):

        localctx = SqlBaseParser.GrantorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_grantor)
        try:
            self.state = 3141
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 122, 124, 125, 127, 129, 136, 137, 138, 139, 140, 141, 143, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 287, 289, 290, 291, 292, 293, 294, 295, 315, 316, 317, 318]:
                localctx = SqlBaseParser.SpecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3138
                self.principal()
                pass
            elif token in [62]:
                localctx = SqlBaseParser.CurrentUserGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3139
                self.match(SqlBaseParser.CURRENT_USER)
                pass
            elif token in [58]:
                localctx = SqlBaseParser.CurrentRoleGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3140
                self.match(SqlBaseParser.CURRENT_ROLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_principal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnspecifiedPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnspecifiedPrincipal" ):
                listener.enterUnspecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnspecifiedPrincipal" ):
                listener.exitUnspecifiedPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnspecifiedPrincipal" ):
                return visitor.visitUnspecifiedPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class UserPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPrincipal" ):
                listener.enterUserPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPrincipal" ):
                listener.exitUserPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserPrincipal" ):
                return visitor.visitUserPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class RolePrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRolePrincipal" ):
                listener.enterRolePrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRolePrincipal" ):
                listener.exitRolePrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRolePrincipal" ):
                return visitor.visitRolePrincipal(self)
            else:
                return visitor.visitChildren(self)



    def principal(self):

        localctx = SqlBaseParser.PrincipalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_principal)
        try:
            self.state = 3148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnspecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3143
                self.identifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UserPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3144
                self.match(SqlBaseParser.USER)
                self.state = 3145
                self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.RolePrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3146
                self.match(SqlBaseParser.ROLE)
                self.state = 3147
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoles" ):
                listener.enterRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoles" ):
                listener.exitRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoles" ):
                return visitor.visitRoles(self)
            else:
                return visitor.visitChildren(self)




    def roles(self):

        localctx = SqlBaseParser.RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3150
            self.identifier()
            self.state = 3155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 3151
                self.match(SqlBaseParser.T__3)
                self.state = 3152
                self.identifier()
                self.state = 3157
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BackQuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackQuotedIdentifier" ):
                return visitor.visitBackQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class QuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class DigitIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIGIT_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigitIdentifier" ):
                listener.enterDigitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigitIdentifier" ):
                listener.exitDigitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDigitIdentifier" ):
                return visitor.visitDigitIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_identifier)
        try:
            self.state = 3163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [315]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3158
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [317]:
                localctx = SqlBaseParser.QuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3159
                self.match(SqlBaseParser.QUOTED_IDENTIFIER)
                pass
            elif token in [18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 80, 81, 83, 86, 89, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 122, 124, 125, 127, 129, 136, 137, 138, 139, 140, 141, 143, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 287, 289, 290, 291, 292, 293, 294, 295]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3160
                self.nonReserved()
                pass
            elif token in [318]:
                localctx = SqlBaseParser.BackQuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3161
                self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
                pass
            elif token in [316]:
                localctx = SqlBaseParser.DigitIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3162
                self.match(SqlBaseParser.DIGIT_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_VALUE(self):
            return self.getToken(SqlBaseParser.DOUBLE_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 3165
                    self.match(SqlBaseParser.MINUS)


                self.state = 3168
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 3169
                    self.match(SqlBaseParser.MINUS)


                self.state = 3172
                self.match(SqlBaseParser.DOUBLE_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 3173
                    self.match(SqlBaseParser.MINUS)


                self.state = 3176
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSENT(self):
            return self.getToken(SqlBaseParser.ABSENT, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def ADMIN(self):
            return self.getToken(SqlBaseParser.ADMIN, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def CALL(self):
            return self.getToken(SqlBaseParser.CALL, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CATALOG(self):
            return self.getToken(SqlBaseParser.CATALOG, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def CONDITIONAL(self):
            return self.getToken(SqlBaseParser.CONDITIONAL, 0)

        def COPARTITION(self):
            return self.getToken(SqlBaseParser.COPARTITION, 0)

        def COUNT(self):
            return self.getToken(SqlBaseParser.COUNT, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATE(self):
            return self.getToken(SqlBaseParser.DATE, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)

        def DEFINE(self):
            return self.getToken(SqlBaseParser.DEFINE, 0)

        def DEFINER(self):
            return self.getToken(SqlBaseParser.DEFINER, 0)

        def DENY(self):
            return self.getToken(SqlBaseParser.DENY, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIPTOR(self):
            return self.getToken(SqlBaseParser.DESCRIPTOR, 0)

        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def EMPTY(self):
            return self.getToken(SqlBaseParser.EMPTY, 0)

        def ENCODING(self):
            return self.getToken(SqlBaseParser.ENCODING, 0)

        def ERROR(self):
            return self.getToken(SqlBaseParser.ERROR, 0)

        def EXCLUDING(self):
            return self.getToken(SqlBaseParser.EXCLUDING, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def FINAL(self):
            return self.getToken(SqlBaseParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GRACE(self):
            return self.getToken(SqlBaseParser.GRACE, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def GRANTED(self):
            return self.getToken(SqlBaseParser.GRANTED, 0)

        def GRANTS(self):
            return self.getToken(SqlBaseParser.GRANTS, 0)

        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)

        def GROUPS(self):
            return self.getToken(SqlBaseParser.GROUPS, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(SqlBaseParser.IMMEDIATE, 0)

        def INCLUDING(self):
            return self.getToken(SqlBaseParser.INCLUDING, 0)

        def INITIAL(self):
            return self.getToken(SqlBaseParser.INITIAL, 0)

        def INPUT(self):
            return self.getToken(SqlBaseParser.INPUT, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def INVOKER(self):
            return self.getToken(SqlBaseParser.INVOKER, 0)

        def IO(self):
            return self.getToken(SqlBaseParser.IO, 0)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)

        def JSON(self):
            return self.getToken(SqlBaseParser.JSON, 0)

        def KEEP(self):
            return self.getToken(SqlBaseParser.KEEP, 0)

        def KEY(self):
            return self.getToken(SqlBaseParser.KEY, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MATCHES(self):
            return self.getToken(SqlBaseParser.MATCHES, 0)

        def MATCH_RECOGNIZE(self):
            return self.getToken(SqlBaseParser.MATCH_RECOGNIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)

        def MEASURES(self):
            return self.getToken(SqlBaseParser.MEASURES, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def NESTED(self):
            return self.getToken(SqlBaseParser.NESTED, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def NFC(self):
            return self.getToken(SqlBaseParser.NFC, 0)

        def NFD(self):
            return self.getToken(SqlBaseParser.NFD, 0)

        def NFKC(self):
            return self.getToken(SqlBaseParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(SqlBaseParser.NFKD, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NONE(self):
            return self.getToken(SqlBaseParser.NONE, 0)

        def NULLIF(self):
            return self.getToken(SqlBaseParser.NULLIF, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OBJECT(self):
            return self.getToken(SqlBaseParser.OBJECT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def OMIT(self):
            return self.getToken(SqlBaseParser.OMIT, 0)

        def ONE(self):
            return self.getToken(SqlBaseParser.ONE, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def ORDINALITY(self):
            return self.getToken(SqlBaseParser.ORDINALITY, 0)

        def OUTPUT(self):
            return self.getToken(SqlBaseParser.OUTPUT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERFLOW(self):
            return self.getToken(SqlBaseParser.OVERFLOW, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PASSING(self):
            return self.getToken(SqlBaseParser.PASSING, 0)

        def PAST(self):
            return self.getToken(SqlBaseParser.PAST, 0)

        def PATH(self):
            return self.getToken(SqlBaseParser.PATH, 0)

        def PATTERN(self):
            return self.getToken(SqlBaseParser.PATTERN, 0)

        def PER(self):
            return self.getToken(SqlBaseParser.PER, 0)

        def PERIOD(self):
            return self.getToken(SqlBaseParser.PERIOD, 0)

        def PERMUTE(self):
            return self.getToken(SqlBaseParser.PERMUTE, 0)

        def PLAN(self):
            return self.getToken(SqlBaseParser.PLAN, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def PRUNE(self):
            return self.getToken(SqlBaseParser.PRUNE, 0)

        def QUOTES(self):
            return self.getToken(SqlBaseParser.QUOTES, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def RUNNING(self):
            return self.getToken(SqlBaseParser.RUNNING, 0)

        def SCALAR(self):
            return self.getToken(SqlBaseParser.SCALAR, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SECURITY(self):
            return self.getToken(SqlBaseParser.SECURITY, 0)

        def SEEK(self):
            return self.getToken(SqlBaseParser.SEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATS(self):
            return self.getToken(SqlBaseParser.STATS, 0)

        def SUBSET(self):
            return self.getToken(SqlBaseParser.SUBSET, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)

        def TEXT_STRING(self):
            return self.getToken(SqlBaseParser.TEXT_STRING, 0)

        def TIES(self):
            return self.getToken(SqlBaseParser.TIES, 0)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def UNCONDITIONAL(self):
            return self.getToken(SqlBaseParser.UNCONDITIONAL, 0)

        def UNIQUE(self):
            return self.getToken(SqlBaseParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def UNMATCHED(self):
            return self.getToken(SqlBaseParser.UNMATCHED, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def UTF16(self):
            return self.getToken(SqlBaseParser.UTF16, 0)

        def UTF32(self):
            return self.getToken(SqlBaseParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(SqlBaseParser.UTF8, 0)

        def VALIDATE(self):
            return self.getToken(SqlBaseParser.VALIDATE, 0)

        def VALUE(self):
            return self.getToken(SqlBaseParser.VALUE, 0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(SqlBaseParser.VERSION, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def WITHIN(self):
            return self.getToken(SqlBaseParser.WITHIN, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(SqlBaseParser.WRAPPER, 0)

        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3179
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9203388181402353664) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5424682620090108485) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -199299680970645631) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -297239776711541761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 546785967033) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[18] = self.queryTerm_sempred
        self._predicates[30] = self.relation_sempred
        self._predicates[61] = self.booleanExpression_sempred
        self._predicates[63] = self.valueExpression_sempred
        self._predicates[64] = self.primaryExpression_sempred
        self._predicates[84] = self.type_sempred
        self._predicates[94] = self.rowPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 22)
         

    def type_sempred(self, localctx:TypeContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def rowPattern_sempred(self, localctx:RowPatternContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         




