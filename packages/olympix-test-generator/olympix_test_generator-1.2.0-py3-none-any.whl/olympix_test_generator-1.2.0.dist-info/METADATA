Metadata-Version: 2.1
Name: olympix-test-generator
Version: 1.2.0
Summary: Used to auto-generate unit tests for smart contracts using the Forge framework.
Home-page: https://github.com/olympix/olympix-test-generator
Author: Evan Fenster
Author-email: evan@olympix.ai
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Description-Content-Type: text/markdown
Requires-Dist: blessed (==1.20.0)
Requires-Dist: certifi (==2023.5.7)
Requires-Dist: charset-normalizer (==3.2.0)
Requires-Dist: idna (==3.4)
Requires-Dist: inquirer (==3.1.3)
Requires-Dist: python-dotenv (==1.0.0)
Requires-Dist: python-editor (==1.0.4)
Requires-Dist: readchar (==4.0.5)
Requires-Dist: requests (==2.31.0)
Requires-Dist: six (==1.16.0)
Requires-Dist: urllib3 (==2.0.4)
Requires-Dist: wcwidth (==0.2.6)

# Olympix Test Generator

Olympix Test Generator is a Python package designed to assist with the generation of unit tests for Solidity smart contracts. These unit tests are specifically designed to be ran through [Foundry](https://book.getfoundry.sh/), a tool for writing unit tests in Solidity. 

## Installation

You can install Olympix Test Generator using pip:

```bash
pip install olympix-test-generator
```

## Usage

The package includes a command-line interface for generating tests.

Before running the script, make sure to set the `OLYMPIX_API_KEY` environment variable in your system.

To generate a test, run:

```bash
olympix generate
```

The tool will guide you through the process of generating the test. 

A test contract will be written in the same directory as the selected smart contract, or in a neighboring test folder if it exists. No existing files will be overwritten. The tests are also outputted to the console. 

## Project Structure

The project includes the following Python files:

- `client.py`: The main script for interacting with the Olympix DevSecTools API. It includes an interactive command-line interface.

## Dependencies

This project's dependencies are specified in the `requirements.txt` file.
