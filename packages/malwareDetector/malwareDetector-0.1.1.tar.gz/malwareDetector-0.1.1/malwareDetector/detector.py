import os
import numpy as np
from typing import Any
from .utils import platform_info
from .config import CONFIG


class detector(object):
    def __init__(self) -> None:
        self.config = CONFIG

    def extractFeature(self) -> Any:
        raise NotImplementedError("extractFeature must be implemented in the derived class.")

    def vectorize(self) -> np.array:
        raise NotImplementedError("vectorize must be implemented in the derived class.")

    def model(self) -> Any:
        raise NotImplementedError("model must be implemented in the derived class.")

    def predict(self) -> np.array:
        raise NotImplementedError("predict must be implemented in the derived class.")

    def mkdir(self) -> None:
        for folder in self.config.folder.folder_list:
            if not os.path.exists(folder):
                os.mkdir(folder)

if __name__ == "__main__":
    platform_info()