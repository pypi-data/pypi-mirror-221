"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
analyis.proto
Contains RPC definitions for analysis
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import kerfed.protos.common.v1.fab_pb2
import kerfed.protos.common.v1.fileblob_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class TitleBlockInfo(google.protobuf.message.Message):
    """Metadata that is used when creating drawings as part of the analysis."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LOGO_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    FOOTER_FIELD_NUMBER: builtins.int
    @property
    def logo(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """PNG or SVG of the logo to use in drawings."""
    name: builtins.str
    """A human-readable name or descriptor for the originator of the drawing."""
    footer: builtins.str
    """A markdown block that will be inserted in text at the base of the drawing.
    This can be used for license or copyright information.
    """
    def __init__(
        self,
        *,
        logo: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        name: builtins.str = ...,
        footer: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["logo", b"logo"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["footer", b"footer", "logo", b"logo", "name", b"name"]) -> None: ...

global___TitleBlockInfo = TitleBlockInfo

@typing_extensions.final
class AnalyzeRequest(google.protobuf.message.Message):
    """Request a raw CAD file to be fully analyzed by the geometry pipeline."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_FIELD_NUMBER: builtins.int
    UNITS_FIELD_NUMBER: builtins.int
    METHOD_ID_FIELD_NUMBER: builtins.int
    TITLE_BLOCK_FIELD_NUMBER: builtins.int
    @property
    def source(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """Raw CAD geometry to be analyzed in a supported format."""
    units: builtins.str
    """If the raw file is in a format that does not include unit
    information (i.e. SVG, DXF, STL, OBJ) specify the file's units
    through this request. If not passed the pipeline will "guess"
    which may or may not be correct.
    """
    @property
    def method_id(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Specify which methods you want the pipeline to analyze.
        If unspecified will run and return all methods.
        Valid options include:
        `mill`, `flat`, `bent`, `roll`, `add`, `cots`.
        """
    @property
    def title_block(self) -> global___TitleBlockInfo:
        """Return drawings with a specific logo."""
    def __init__(
        self,
        *,
        source: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        units: builtins.str = ...,
        method_id: collections.abc.Iterable[builtins.str] | None = ...,
        title_block: global___TitleBlockInfo | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source", b"source", "title_block", b"title_block"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["method_id", b"method_id", "source", b"source", "title_block", b"title_block", "units", b"units"]) -> None: ...

global___AnalyzeRequest = AnalyzeRequest

@typing_extensions.final
class AnalyzeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FAB_FIELD_NUMBER: builtins.int
    @property
    def fab(self) -> kerfed.protos.common.v1.fab_pb2.PartFabrication: ...
    def __init__(
        self,
        *,
        fab: kerfed.protos.common.v1.fab_pb2.PartFabrication | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["fab", b"fab"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["fab", b"fab"]) -> None: ...

global___AnalyzeResponse = AnalyzeResponse
