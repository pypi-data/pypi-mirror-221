"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import kerfed.protos.common.v1.fileblob_pb2
import kerfed.protos.common.v1.scene_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class LoadRequest(google.protobuf.message.Message):
    """load a raw file into a neutral format"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_FIELD_NUMBER: builtins.int
    UNITS_FIELD_NUMBER: builtins.int
    SPLIT_FIELD_NUMBER: builtins.int
    @property
    def source(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """Raw CAD geometry to be analyzed in a supported format."""
    units: builtins.str
    """If the raw file is in a format that does not include unit
    information (i.e. SVG, DXF, STL, OBJ) specify the file's units
    through this request. If not passed the pipeline will "guess"
    which may or may not be correct.
    """
    split: builtins.bool
    """run a split operation."""
    def __init__(
        self,
        *,
        source: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        units: builtins.str = ...,
        split: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["source", b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["source", b"source", "split", b"split", "units", b"units"]) -> None: ...

global___LoadRequest = LoadRequest

@typing_extensions.final
class LoadResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCENE_FIELD_NUMBER: builtins.int
    @property
    def scene(self) -> kerfed.protos.common.v1.scene_pb2.Scene: ...
    def __init__(
        self,
        *,
        scene: kerfed.protos.common.v1.scene_pb2.Scene | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["scene", b"scene"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["scene", b"scene"]) -> None: ...

global___LoadResponse = LoadResponse
