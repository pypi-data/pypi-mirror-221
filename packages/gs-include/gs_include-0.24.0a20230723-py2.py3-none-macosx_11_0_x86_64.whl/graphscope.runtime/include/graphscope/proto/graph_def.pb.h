// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph_def.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_5fdef_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_graph_5fdef_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_graph_5fdef_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_5fdef_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_graph_5fdef_2eproto;
namespace gs {
namespace rpc {
namespace graph {
class EdgeKindPb;
struct EdgeKindPbDefaultTypeInternal;
extern EdgeKindPbDefaultTypeInternal _EdgeKindPb_default_instance_;
class GraphDefPb;
struct GraphDefPbDefaultTypeInternal;
extern GraphDefPbDefaultTypeInternal _GraphDefPb_default_instance_;
class GraphDefPb_PropertyNameToIdEntry_DoNotUse;
struct GraphDefPb_PropertyNameToIdEntry_DoNotUseDefaultTypeInternal;
extern GraphDefPb_PropertyNameToIdEntry_DoNotUseDefaultTypeInternal _GraphDefPb_PropertyNameToIdEntry_DoNotUse_default_instance_;
class GrootInfoPb;
struct GrootInfoPbDefaultTypeInternal;
extern GrootInfoPbDefaultTypeInternal _GrootInfoPb_default_instance_;
class LabelIdPb;
struct LabelIdPbDefaultTypeInternal;
extern LabelIdPbDefaultTypeInternal _LabelIdPb_default_instance_;
class MutableGraphInfoPb;
struct MutableGraphInfoPbDefaultTypeInternal;
extern MutableGraphInfoPbDefaultTypeInternal _MutableGraphInfoPb_default_instance_;
class PropertyDefPb;
struct PropertyDefPbDefaultTypeInternal;
extern PropertyDefPbDefaultTypeInternal _PropertyDefPb_default_instance_;
class PropertyValuePb;
struct PropertyValuePbDefaultTypeInternal;
extern PropertyValuePbDefaultTypeInternal _PropertyValuePb_default_instance_;
class TypeDefPb;
struct TypeDefPbDefaultTypeInternal;
extern TypeDefPbDefaultTypeInternal _TypeDefPb_default_instance_;
class VineyardInfoPb;
struct VineyardInfoPbDefaultTypeInternal;
extern VineyardInfoPbDefaultTypeInternal _VineyardInfoPb_default_instance_;
}  // namespace graph
}  // namespace rpc
}  // namespace gs
PROTOBUF_NAMESPACE_OPEN
template <>
::gs::rpc::graph::EdgeKindPb* Arena::CreateMaybeMessage<::gs::rpc::graph::EdgeKindPb>(Arena*);
template <>
::gs::rpc::graph::GraphDefPb* Arena::CreateMaybeMessage<::gs::rpc::graph::GraphDefPb>(Arena*);
template <>
::gs::rpc::graph::GraphDefPb_PropertyNameToIdEntry_DoNotUse* Arena::CreateMaybeMessage<::gs::rpc::graph::GraphDefPb_PropertyNameToIdEntry_DoNotUse>(Arena*);
template <>
::gs::rpc::graph::GrootInfoPb* Arena::CreateMaybeMessage<::gs::rpc::graph::GrootInfoPb>(Arena*);
template <>
::gs::rpc::graph::LabelIdPb* Arena::CreateMaybeMessage<::gs::rpc::graph::LabelIdPb>(Arena*);
template <>
::gs::rpc::graph::MutableGraphInfoPb* Arena::CreateMaybeMessage<::gs::rpc::graph::MutableGraphInfoPb>(Arena*);
template <>
::gs::rpc::graph::PropertyDefPb* Arena::CreateMaybeMessage<::gs::rpc::graph::PropertyDefPb>(Arena*);
template <>
::gs::rpc::graph::PropertyValuePb* Arena::CreateMaybeMessage<::gs::rpc::graph::PropertyValuePb>(Arena*);
template <>
::gs::rpc::graph::TypeDefPb* Arena::CreateMaybeMessage<::gs::rpc::graph::TypeDefPb>(Arena*);
template <>
::gs::rpc::graph::VineyardInfoPb* Arena::CreateMaybeMessage<::gs::rpc::graph::VineyardInfoPb>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace gs {
namespace rpc {
namespace graph {
enum GraphTypePb : int {
  UNKNOWN_TYPE = 0,
  IMMUTABLE_EDGECUT = 1,
  DYNAMIC_PROPERTY = 2,
  DYNAMIC_PROJECTED = 3,
  ARROW_PROPERTY = 4,
  ARROW_PROJECTED = 5,
  PERSISTENT_STORE = 6,
  ARROW_FLATTENED = 7,
  GraphTypePb_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GraphTypePb_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GraphTypePb_IsValid(int value);
constexpr GraphTypePb GraphTypePb_MIN = static_cast<GraphTypePb>(0);
constexpr GraphTypePb GraphTypePb_MAX = static_cast<GraphTypePb>(7);
constexpr int GraphTypePb_ARRAYSIZE = 7 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
GraphTypePb_descriptor();
template <typename T>
const std::string& GraphTypePb_Name(T value) {
  static_assert(std::is_same<T, GraphTypePb>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GraphTypePb_Name().");
  return GraphTypePb_Name(static_cast<GraphTypePb>(value));
}
template <>
inline const std::string& GraphTypePb_Name(GraphTypePb value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<GraphTypePb_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool GraphTypePb_Parse(absl::string_view name, GraphTypePb* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GraphTypePb>(
      GraphTypePb_descriptor(), name, value);
}
enum VertexMapTypePb : int {
  UNKNOWN_VM_TYPE = 0,
  GLOBAL_VERTEX_MAP = 1,
  LOCAL_VERTEX_MAP = 2,
  VertexMapTypePb_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VertexMapTypePb_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VertexMapTypePb_IsValid(int value);
constexpr VertexMapTypePb VertexMapTypePb_MIN = static_cast<VertexMapTypePb>(0);
constexpr VertexMapTypePb VertexMapTypePb_MAX = static_cast<VertexMapTypePb>(2);
constexpr int VertexMapTypePb_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
VertexMapTypePb_descriptor();
template <typename T>
const std::string& VertexMapTypePb_Name(T value) {
  static_assert(std::is_same<T, VertexMapTypePb>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VertexMapTypePb_Name().");
  return VertexMapTypePb_Name(static_cast<VertexMapTypePb>(value));
}
template <>
inline const std::string& VertexMapTypePb_Name(VertexMapTypePb value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<VertexMapTypePb_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool VertexMapTypePb_Parse(absl::string_view name, VertexMapTypePb* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VertexMapTypePb>(
      VertexMapTypePb_descriptor(), name, value);
}
enum TypeEnumPb : int {
  UNSPECIFIED = 0,
  VERTEX = 1,
  EDGE = 2,
  TypeEnumPb_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TypeEnumPb_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TypeEnumPb_IsValid(int value);
constexpr TypeEnumPb TypeEnumPb_MIN = static_cast<TypeEnumPb>(0);
constexpr TypeEnumPb TypeEnumPb_MAX = static_cast<TypeEnumPb>(2);
constexpr int TypeEnumPb_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TypeEnumPb_descriptor();
template <typename T>
const std::string& TypeEnumPb_Name(T value) {
  static_assert(std::is_same<T, TypeEnumPb>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TypeEnumPb_Name().");
  return TypeEnumPb_Name(static_cast<TypeEnumPb>(value));
}
template <>
inline const std::string& TypeEnumPb_Name(TypeEnumPb value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TypeEnumPb_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TypeEnumPb_Parse(absl::string_view name, TypeEnumPb* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypeEnumPb>(
      TypeEnumPb_descriptor(), name, value);
}
enum DataTypePb : int {
  UNKNOWN = 0,
  BOOL = 1,
  CHAR = 2,
  SHORT = 3,
  INT = 4,
  LONG = 5,
  FLOAT = 6,
  DOUBLE = 7,
  STRING = 8,
  BYTES = 9,
  INT_LIST = 10,
  LONG_LIST = 11,
  FLOAT_LIST = 12,
  DOUBLE_LIST = 13,
  STRING_LIST = 14,
  NULLVALUE = 15,
  UINT = 16,
  ULONG = 17,
  DYNAMIC = 18,
  DataTypePb_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataTypePb_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DataTypePb_IsValid(int value);
constexpr DataTypePb DataTypePb_MIN = static_cast<DataTypePb>(0);
constexpr DataTypePb DataTypePb_MAX = static_cast<DataTypePb>(18);
constexpr int DataTypePb_ARRAYSIZE = 18 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
DataTypePb_descriptor();
template <typename T>
const std::string& DataTypePb_Name(T value) {
  static_assert(std::is_same<T, DataTypePb>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataTypePb_Name().");
  return DataTypePb_Name(static_cast<DataTypePb>(value));
}
template <>
inline const std::string& DataTypePb_Name(DataTypePb value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<DataTypePb_descriptor,
                                                 0, 18>(
      static_cast<int>(value));
}
inline bool DataTypePb_Parse(absl::string_view name, DataTypePb* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataTypePb>(
      DataTypePb_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class GrootInfoPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.graph.GrootInfoPb) */ {
 public:
  inline GrootInfoPb() : GrootInfoPb(nullptr) {}
  ~GrootInfoPb() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GrootInfoPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrootInfoPb(const GrootInfoPb& from);
  GrootInfoPb(GrootInfoPb&& from) noexcept
    : GrootInfoPb() {
    *this = ::std::move(from);
  }

  inline GrootInfoPb& operator=(const GrootInfoPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrootInfoPb& operator=(GrootInfoPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrootInfoPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrootInfoPb* internal_default_instance() {
    return reinterpret_cast<const GrootInfoPb*>(
               &_GrootInfoPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GrootInfoPb& a, GrootInfoPb& b) {
    a.Swap(&b);
  }
  inline void Swap(GrootInfoPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrootInfoPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrootInfoPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrootInfoPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrootInfoPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrootInfoPb& from) {
    GrootInfoPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrootInfoPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "gs.rpc.graph.GrootInfoPb";
  }
  protected:
  explicit GrootInfoPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastLabelIdFieldNumber = 1,
    kLastPropertyIdFieldNumber = 2,
    kLastTableIdFieldNumber = 3,
  };
  // int32 last_label_id = 1;
  void clear_last_label_id() ;
  ::int32_t last_label_id() const;
  void set_last_label_id(::int32_t value);

  private:
  ::int32_t _internal_last_label_id() const;
  void _internal_set_last_label_id(::int32_t value);

  public:
  // int32 last_property_id = 2;
  void clear_last_property_id() ;
  ::int32_t last_property_id() const;
  void set_last_property_id(::int32_t value);

  private:
  ::int32_t _internal_last_property_id() const;
  void _internal_set_last_property_id(::int32_t value);

  public:
  // int64 last_table_id = 3;
  void clear_last_table_id() ;
  ::int64_t last_table_id() const;
  void set_last_table_id(::int64_t value);

  private:
  ::int64_t _internal_last_table_id() const;
  void _internal_set_last_table_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.GrootInfoPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t last_label_id_;
    ::int32_t last_property_id_;
    ::int64_t last_table_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};// -------------------------------------------------------------------

class VineyardInfoPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.graph.VineyardInfoPb) */ {
 public:
  inline VineyardInfoPb() : VineyardInfoPb(nullptr) {}
  ~VineyardInfoPb() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VineyardInfoPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VineyardInfoPb(const VineyardInfoPb& from);
  VineyardInfoPb(VineyardInfoPb&& from) noexcept
    : VineyardInfoPb() {
    *this = ::std::move(from);
  }

  inline VineyardInfoPb& operator=(const VineyardInfoPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline VineyardInfoPb& operator=(VineyardInfoPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VineyardInfoPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const VineyardInfoPb* internal_default_instance() {
    return reinterpret_cast<const VineyardInfoPb*>(
               &_VineyardInfoPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VineyardInfoPb& a, VineyardInfoPb& b) {
    a.Swap(&b);
  }
  inline void Swap(VineyardInfoPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VineyardInfoPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VineyardInfoPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VineyardInfoPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VineyardInfoPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VineyardInfoPb& from) {
    VineyardInfoPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VineyardInfoPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "gs.rpc.graph.VineyardInfoPb";
  }
  protected:
  explicit VineyardInfoPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFragmentsFieldNumber = 10,
    kSchemaPathFieldNumber = 5,
    kPropertySchemaJsonFieldNumber = 8,
    kOidTypeFieldNumber = 1,
    kVidTypeFieldNumber = 2,
    kVdataTypeFieldNumber = 3,
    kEdataTypeFieldNumber = 4,
    kVineyardIdFieldNumber = 7,
    kGenerateEidFieldNumber = 6,
    kRetainOidFieldNumber = 11,
    kVertexMapTypeFieldNumber = 9,
  };
  // repeated int64 fragments = 10;
  int fragments_size() const;
  private:
  int _internal_fragments_size() const;

  public:
  void clear_fragments() ;
  ::int64_t fragments(int index) const;
  void set_fragments(int index, ::int64_t value);
  void add_fragments(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& fragments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_fragments();

  private:
  ::int64_t _internal_fragments(int index) const;
  void _internal_add_fragments(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_fragments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_fragments();

  public:
  // string schema_path = 5;
  void clear_schema_path() ;
  const std::string& schema_path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_path(Arg_&& arg, Args_... args);
  std::string* mutable_schema_path();
  PROTOBUF_NODISCARD std::string* release_schema_path();
  void set_allocated_schema_path(std::string* ptr);

  private:
  const std::string& _internal_schema_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_path(
      const std::string& value);
  std::string* _internal_mutable_schema_path();

  public:
  // string property_schema_json = 8;
  void clear_property_schema_json() ;
  const std::string& property_schema_json() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property_schema_json(Arg_&& arg, Args_... args);
  std::string* mutable_property_schema_json();
  PROTOBUF_NODISCARD std::string* release_property_schema_json();
  void set_allocated_property_schema_json(std::string* ptr);

  private:
  const std::string& _internal_property_schema_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_schema_json(
      const std::string& value);
  std::string* _internal_mutable_property_schema_json();

  public:
  // .gs.rpc.graph.DataTypePb oid_type = 1;
  void clear_oid_type() ;
  ::gs::rpc::graph::DataTypePb oid_type() const;
  void set_oid_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_oid_type() const;
  void _internal_set_oid_type(::gs::rpc::graph::DataTypePb value);

  public:
  // .gs.rpc.graph.DataTypePb vid_type = 2;
  void clear_vid_type() ;
  ::gs::rpc::graph::DataTypePb vid_type() const;
  void set_vid_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_vid_type() const;
  void _internal_set_vid_type(::gs::rpc::graph::DataTypePb value);

  public:
  // .gs.rpc.graph.DataTypePb vdata_type = 3;
  void clear_vdata_type() ;
  ::gs::rpc::graph::DataTypePb vdata_type() const;
  void set_vdata_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_vdata_type() const;
  void _internal_set_vdata_type(::gs::rpc::graph::DataTypePb value);

  public:
  // .gs.rpc.graph.DataTypePb edata_type = 4;
  void clear_edata_type() ;
  ::gs::rpc::graph::DataTypePb edata_type() const;
  void set_edata_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_edata_type() const;
  void _internal_set_edata_type(::gs::rpc::graph::DataTypePb value);

  public:
  // int64 vineyard_id = 7;
  void clear_vineyard_id() ;
  ::int64_t vineyard_id() const;
  void set_vineyard_id(::int64_t value);

  private:
  ::int64_t _internal_vineyard_id() const;
  void _internal_set_vineyard_id(::int64_t value);

  public:
  // bool generate_eid = 6;
  void clear_generate_eid() ;
  bool generate_eid() const;
  void set_generate_eid(bool value);

  private:
  bool _internal_generate_eid() const;
  void _internal_set_generate_eid(bool value);

  public:
  // bool retain_oid = 11;
  void clear_retain_oid() ;
  bool retain_oid() const;
  void set_retain_oid(bool value);

  private:
  bool _internal_retain_oid() const;
  void _internal_set_retain_oid(bool value);

  public:
  // .gs.rpc.graph.VertexMapTypePb vertex_map_type = 9;
  void clear_vertex_map_type() ;
  ::gs::rpc::graph::VertexMapTypePb vertex_map_type() const;
  void set_vertex_map_type(::gs::rpc::graph::VertexMapTypePb value);

  private:
  ::gs::rpc::graph::VertexMapTypePb _internal_vertex_map_type() const;
  void _internal_set_vertex_map_type(::gs::rpc::graph::VertexMapTypePb value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.VineyardInfoPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> fragments_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _fragments_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_schema_json_;
    int oid_type_;
    int vid_type_;
    int vdata_type_;
    int edata_type_;
    ::int64_t vineyard_id_;
    bool generate_eid_;
    bool retain_oid_;
    int vertex_map_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};// -------------------------------------------------------------------

class MutableGraphInfoPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.graph.MutableGraphInfoPb) */ {
 public:
  inline MutableGraphInfoPb() : MutableGraphInfoPb(nullptr) {}
  ~MutableGraphInfoPb() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MutableGraphInfoPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MutableGraphInfoPb(const MutableGraphInfoPb& from);
  MutableGraphInfoPb(MutableGraphInfoPb&& from) noexcept
    : MutableGraphInfoPb() {
    *this = ::std::move(from);
  }

  inline MutableGraphInfoPb& operator=(const MutableGraphInfoPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutableGraphInfoPb& operator=(MutableGraphInfoPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MutableGraphInfoPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutableGraphInfoPb* internal_default_instance() {
    return reinterpret_cast<const MutableGraphInfoPb*>(
               &_MutableGraphInfoPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MutableGraphInfoPb& a, MutableGraphInfoPb& b) {
    a.Swap(&b);
  }
  inline void Swap(MutableGraphInfoPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutableGraphInfoPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MutableGraphInfoPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MutableGraphInfoPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MutableGraphInfoPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MutableGraphInfoPb& from) {
    MutableGraphInfoPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutableGraphInfoPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "gs.rpc.graph.MutableGraphInfoPb";
  }
  protected:
  explicit MutableGraphInfoPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertySchemaJsonFieldNumber = 3,
    kVdataTypeFieldNumber = 1,
    kEdataTypeFieldNumber = 2,
  };
  // string property_schema_json = 3;
  void clear_property_schema_json() ;
  const std::string& property_schema_json() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_property_schema_json(Arg_&& arg, Args_... args);
  std::string* mutable_property_schema_json();
  PROTOBUF_NODISCARD std::string* release_property_schema_json();
  void set_allocated_property_schema_json(std::string* ptr);

  private:
  const std::string& _internal_property_schema_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_schema_json(
      const std::string& value);
  std::string* _internal_mutable_property_schema_json();

  public:
  // .gs.rpc.graph.DataTypePb vdata_type = 1;
  void clear_vdata_type() ;
  ::gs::rpc::graph::DataTypePb vdata_type() const;
  void set_vdata_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_vdata_type() const;
  void _internal_set_vdata_type(::gs::rpc::graph::DataTypePb value);

  public:
  // .gs.rpc.graph.DataTypePb edata_type = 2;
  void clear_edata_type() ;
  ::gs::rpc::graph::DataTypePb edata_type() const;
  void set_edata_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_edata_type() const;
  void _internal_set_edata_type(::gs::rpc::graph::DataTypePb value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.MutableGraphInfoPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_schema_json_;
    int vdata_type_;
    int edata_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};// -------------------------------------------------------------------

class GraphDefPb_PropertyNameToIdEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GraphDefPb_PropertyNameToIdEntry_DoNotUse, 
    std::string, ::int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GraphDefPb_PropertyNameToIdEntry_DoNotUse, 
    std::string, ::int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  GraphDefPb_PropertyNameToIdEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GraphDefPb_PropertyNameToIdEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GraphDefPb_PropertyNameToIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GraphDefPb_PropertyNameToIdEntry_DoNotUse& other);
  static const GraphDefPb_PropertyNameToIdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GraphDefPb_PropertyNameToIdEntry_DoNotUse*>(&_GraphDefPb_PropertyNameToIdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gs.rpc.graph.GraphDefPb.PropertyNameToIdEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_graph_5fdef_2eproto;
};
// -------------------------------------------------------------------

class GraphDefPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.graph.GraphDefPb) */ {
 public:
  inline GraphDefPb() : GraphDefPb(nullptr) {}
  ~GraphDefPb() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GraphDefPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GraphDefPb(const GraphDefPb& from);
  GraphDefPb(GraphDefPb&& from) noexcept
    : GraphDefPb() {
    *this = ::std::move(from);
  }

  inline GraphDefPb& operator=(const GraphDefPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphDefPb& operator=(GraphDefPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphDefPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphDefPb* internal_default_instance() {
    return reinterpret_cast<const GraphDefPb*>(
               &_GraphDefPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GraphDefPb& a, GraphDefPb& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphDefPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphDefPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphDefPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GraphDefPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GraphDefPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GraphDefPb& from) {
    GraphDefPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphDefPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "gs.rpc.graph.GraphDefPb";
  }
  protected:
  explicit GraphDefPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTypeDefsFieldNumber = 5,
    kEdgeKindsFieldNumber = 6,
    kPropertyNameToIdFieldNumber = 7,
    kKeyFieldNumber = 2,
    kExtensionFieldNumber = 8,
    kVersionFieldNumber = 1,
    kGraphTypeFieldNumber = 3,
    kDirectedFieldNumber = 4,
    kIsMultigraphFieldNumber = 9,
    kCompactEdgesFieldNumber = 10,
    kUsePerfectHashFieldNumber = 11,
  };
  // repeated .gs.rpc.graph.TypeDefPb type_defs = 5;
  int type_defs_size() const;
  private:
  int _internal_type_defs_size() const;

  public:
  void clear_type_defs() ;
  ::gs::rpc::graph::TypeDefPb* mutable_type_defs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::TypeDefPb >*
      mutable_type_defs();
  private:
  const ::gs::rpc::graph::TypeDefPb& _internal_type_defs(int index) const;
  ::gs::rpc::graph::TypeDefPb* _internal_add_type_defs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>& _internal_type_defs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>* _internal_mutable_type_defs();
  public:
  const ::gs::rpc::graph::TypeDefPb& type_defs(int index) const;
  ::gs::rpc::graph::TypeDefPb* add_type_defs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::TypeDefPb >&
      type_defs() const;
  // repeated .gs.rpc.graph.EdgeKindPb edge_kinds = 6;
  int edge_kinds_size() const;
  private:
  int _internal_edge_kinds_size() const;

  public:
  void clear_edge_kinds() ;
  ::gs::rpc::graph::EdgeKindPb* mutable_edge_kinds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::EdgeKindPb >*
      mutable_edge_kinds();
  private:
  const ::gs::rpc::graph::EdgeKindPb& _internal_edge_kinds(int index) const;
  ::gs::rpc::graph::EdgeKindPb* _internal_add_edge_kinds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>& _internal_edge_kinds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>* _internal_mutable_edge_kinds();
  public:
  const ::gs::rpc::graph::EdgeKindPb& edge_kinds(int index) const;
  ::gs::rpc::graph::EdgeKindPb* add_edge_kinds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::EdgeKindPb >&
      edge_kinds() const;
  // map<string, int32> property_name_to_id = 7;
  int property_name_to_id_size() const;
  private:
  int _internal_property_name_to_id_size() const;

  public:
  void clear_property_name_to_id() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >&
      _internal_property_name_to_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >*
      _internal_mutable_property_name_to_id();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >&
      property_name_to_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >*
      mutable_property_name_to_id();
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // .google.protobuf.Any extension = 8;
  bool has_extension() const;
  void clear_extension() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& extension() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_extension();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_extension();
  void set_allocated_extension(::PROTOBUF_NAMESPACE_ID::Any* extension);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_extension() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_extension();
  public:
  void unsafe_arena_set_allocated_extension(
      ::PROTOBUF_NAMESPACE_ID::Any* extension);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_extension();
  // int64 version = 1;
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // .gs.rpc.graph.GraphTypePb graph_type = 3;
  void clear_graph_type() ;
  ::gs::rpc::graph::GraphTypePb graph_type() const;
  void set_graph_type(::gs::rpc::graph::GraphTypePb value);

  private:
  ::gs::rpc::graph::GraphTypePb _internal_graph_type() const;
  void _internal_set_graph_type(::gs::rpc::graph::GraphTypePb value);

  public:
  // bool directed = 4;
  void clear_directed() ;
  bool directed() const;
  void set_directed(bool value);

  private:
  bool _internal_directed() const;
  void _internal_set_directed(bool value);

  public:
  // bool is_multigraph = 9;
  void clear_is_multigraph() ;
  bool is_multigraph() const;
  void set_is_multigraph(bool value);

  private:
  bool _internal_is_multigraph() const;
  void _internal_set_is_multigraph(bool value);

  public:
  // bool compact_edges = 10;
  void clear_compact_edges() ;
  bool compact_edges() const;
  void set_compact_edges(bool value);

  private:
  bool _internal_compact_edges() const;
  void _internal_set_compact_edges(bool value);

  public:
  // bool use_perfect_hash = 11;
  void clear_use_perfect_hash() ;
  bool use_perfect_hash() const;
  void set_use_perfect_hash(bool value);

  private:
  bool _internal_use_perfect_hash() const;
  void _internal_set_use_perfect_hash(bool value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.GraphDefPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::TypeDefPb > type_defs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::EdgeKindPb > edge_kinds_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GraphDefPb_PropertyNameToIdEntry_DoNotUse,
        std::string, ::int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> property_name_to_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::Any* extension_;
    ::int64_t version_;
    int graph_type_;
    bool directed_;
    bool is_multigraph_;
    bool compact_edges_;
    bool use_perfect_hash_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};// -------------------------------------------------------------------

class TypeDefPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.graph.TypeDefPb) */ {
 public:
  inline TypeDefPb() : TypeDefPb(nullptr) {}
  ~TypeDefPb() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TypeDefPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypeDefPb(const TypeDefPb& from);
  TypeDefPb(TypeDefPb&& from) noexcept
    : TypeDefPb() {
    *this = ::std::move(from);
  }

  inline TypeDefPb& operator=(const TypeDefPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeDefPb& operator=(TypeDefPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TypeDefPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypeDefPb* internal_default_instance() {
    return reinterpret_cast<const TypeDefPb*>(
               &_TypeDefPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TypeDefPb& a, TypeDefPb& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeDefPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeDefPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypeDefPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypeDefPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TypeDefPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TypeDefPb& from) {
    TypeDefPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeDefPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "gs.rpc.graph.TypeDefPb";
  }
  protected:
  explicit TypeDefPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 5,
    kLabelFieldNumber = 2,
    kCommentFieldNumber = 6,
    kLabelIdFieldNumber = 3,
    kVersionIdFieldNumber = 1,
    kTypeEnumFieldNumber = 4,
  };
  // repeated .gs.rpc.graph.PropertyDefPb props = 5;
  int props_size() const;
  private:
  int _internal_props_size() const;

  public:
  void clear_props() ;
  ::gs::rpc::graph::PropertyDefPb* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::PropertyDefPb >*
      mutable_props();
  private:
  const ::gs::rpc::graph::PropertyDefPb& _internal_props(int index) const;
  ::gs::rpc::graph::PropertyDefPb* _internal_add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>& _internal_props() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>* _internal_mutable_props();
  public:
  const ::gs::rpc::graph::PropertyDefPb& props(int index) const;
  ::gs::rpc::graph::PropertyDefPb* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::PropertyDefPb >&
      props() const;
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* ptr);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string comment = 6;
  void clear_comment() ;
  const std::string& comment() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comment(Arg_&& arg, Args_... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* ptr);

  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(
      const std::string& value);
  std::string* _internal_mutable_comment();

  public:
  // .gs.rpc.graph.LabelIdPb label_id = 3;
  bool has_label_id() const;
  void clear_label_id() ;
  const ::gs::rpc::graph::LabelIdPb& label_id() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::LabelIdPb* release_label_id();
  ::gs::rpc::graph::LabelIdPb* mutable_label_id();
  void set_allocated_label_id(::gs::rpc::graph::LabelIdPb* label_id);
  private:
  const ::gs::rpc::graph::LabelIdPb& _internal_label_id() const;
  ::gs::rpc::graph::LabelIdPb* _internal_mutable_label_id();
  public:
  void unsafe_arena_set_allocated_label_id(
      ::gs::rpc::graph::LabelIdPb* label_id);
  ::gs::rpc::graph::LabelIdPb* unsafe_arena_release_label_id();
  // int32 version_id = 1;
  void clear_version_id() ;
  ::int32_t version_id() const;
  void set_version_id(::int32_t value);

  private:
  ::int32_t _internal_version_id() const;
  void _internal_set_version_id(::int32_t value);

  public:
  // .gs.rpc.graph.TypeEnumPb type_enum = 4;
  void clear_type_enum() ;
  ::gs::rpc::graph::TypeEnumPb type_enum() const;
  void set_type_enum(::gs::rpc::graph::TypeEnumPb value);

  private:
  ::gs::rpc::graph::TypeEnumPb _internal_type_enum() const;
  void _internal_set_type_enum(::gs::rpc::graph::TypeEnumPb value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.TypeDefPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::PropertyDefPb > props_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    ::gs::rpc::graph::LabelIdPb* label_id_;
    ::int32_t version_id_;
    int type_enum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};// -------------------------------------------------------------------

class LabelIdPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.graph.LabelIdPb) */ {
 public:
  inline LabelIdPb() : LabelIdPb(nullptr) {}
  ~LabelIdPb() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LabelIdPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LabelIdPb(const LabelIdPb& from);
  LabelIdPb(LabelIdPb&& from) noexcept
    : LabelIdPb() {
    *this = ::std::move(from);
  }

  inline LabelIdPb& operator=(const LabelIdPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelIdPb& operator=(LabelIdPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelIdPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelIdPb* internal_default_instance() {
    return reinterpret_cast<const LabelIdPb*>(
               &_LabelIdPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LabelIdPb& a, LabelIdPb& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelIdPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelIdPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelIdPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LabelIdPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LabelIdPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LabelIdPb& from) {
    LabelIdPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelIdPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "gs.rpc.graph.LabelIdPb";
  }
  protected:
  explicit LabelIdPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.LabelIdPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};// -------------------------------------------------------------------

class PropertyDefPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.graph.PropertyDefPb) */ {
 public:
  inline PropertyDefPb() : PropertyDefPb(nullptr) {}
  ~PropertyDefPb() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PropertyDefPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyDefPb(const PropertyDefPb& from);
  PropertyDefPb(PropertyDefPb&& from) noexcept
    : PropertyDefPb() {
    *this = ::std::move(from);
  }

  inline PropertyDefPb& operator=(const PropertyDefPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyDefPb& operator=(PropertyDefPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyDefPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyDefPb* internal_default_instance() {
    return reinterpret_cast<const PropertyDefPb*>(
               &_PropertyDefPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PropertyDefPb& a, PropertyDefPb& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyDefPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyDefPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyDefPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyDefPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyDefPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyDefPb& from) {
    PropertyDefPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyDefPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "gs.rpc.graph.PropertyDefPb";
  }
  protected:
  explicit PropertyDefPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kCommentFieldNumber = 7,
    kDefaultValueFieldNumber = 5,
    kIdFieldNumber = 1,
    kInnerIdFieldNumber = 2,
    kDataTypeFieldNumber = 4,
    kPkFieldNumber = 6,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string comment = 7;
  void clear_comment() ;
  const std::string& comment() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comment(Arg_&& arg, Args_... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* ptr);

  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(
      const std::string& value);
  std::string* _internal_mutable_comment();

  public:
  // .gs.rpc.graph.PropertyValuePb default_value = 5;
  bool has_default_value() const;
  void clear_default_value() ;
  const ::gs::rpc::graph::PropertyValuePb& default_value() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::PropertyValuePb* release_default_value();
  ::gs::rpc::graph::PropertyValuePb* mutable_default_value();
  void set_allocated_default_value(::gs::rpc::graph::PropertyValuePb* default_value);
  private:
  const ::gs::rpc::graph::PropertyValuePb& _internal_default_value() const;
  ::gs::rpc::graph::PropertyValuePb* _internal_mutable_default_value();
  public:
  void unsafe_arena_set_allocated_default_value(
      ::gs::rpc::graph::PropertyValuePb* default_value);
  ::gs::rpc::graph::PropertyValuePb* unsafe_arena_release_default_value();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 inner_id = 2;
  void clear_inner_id() ;
  ::int32_t inner_id() const;
  void set_inner_id(::int32_t value);

  private:
  ::int32_t _internal_inner_id() const;
  void _internal_set_inner_id(::int32_t value);

  public:
  // .gs.rpc.graph.DataTypePb data_type = 4;
  void clear_data_type() ;
  ::gs::rpc::graph::DataTypePb data_type() const;
  void set_data_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_data_type() const;
  void _internal_set_data_type(::gs::rpc::graph::DataTypePb value);

  public:
  // bool pk = 6;
  void clear_pk() ;
  bool pk() const;
  void set_pk(bool value);

  private:
  bool _internal_pk() const;
  void _internal_set_pk(bool value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.PropertyDefPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    ::gs::rpc::graph::PropertyValuePb* default_value_;
    ::int32_t id_;
    ::int32_t inner_id_;
    int data_type_;
    bool pk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};// -------------------------------------------------------------------

class PropertyValuePb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.graph.PropertyValuePb) */ {
 public:
  inline PropertyValuePb() : PropertyValuePb(nullptr) {}
  ~PropertyValuePb() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PropertyValuePb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyValuePb(const PropertyValuePb& from);
  PropertyValuePb(PropertyValuePb&& from) noexcept
    : PropertyValuePb() {
    *this = ::std::move(from);
  }

  inline PropertyValuePb& operator=(const PropertyValuePb& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyValuePb& operator=(PropertyValuePb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyValuePb& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyValuePb* internal_default_instance() {
    return reinterpret_cast<const PropertyValuePb*>(
               &_PropertyValuePb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PropertyValuePb& a, PropertyValuePb& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyValuePb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyValuePb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyValuePb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyValuePb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyValuePb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyValuePb& from) {
    PropertyValuePb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyValuePb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "gs.rpc.graph.PropertyValuePb";
  }
  protected:
  explicit PropertyValuePb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kDataTypeFieldNumber = 1,
  };
  // bytes val = 2;
  void clear_val() ;
  const std::string& val() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_val(Arg_&& arg, Args_... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* ptr);

  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(
      const std::string& value);
  std::string* _internal_mutable_val();

  public:
  // .gs.rpc.graph.DataTypePb data_type = 1;
  void clear_data_type() ;
  ::gs::rpc::graph::DataTypePb data_type() const;
  void set_data_type(::gs::rpc::graph::DataTypePb value);

  private:
  ::gs::rpc::graph::DataTypePb _internal_data_type() const;
  void _internal_set_data_type(::gs::rpc::graph::DataTypePb value);

  public:
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.PropertyValuePb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
    int data_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};// -------------------------------------------------------------------

class EdgeKindPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.graph.EdgeKindPb) */ {
 public:
  inline EdgeKindPb() : EdgeKindPb(nullptr) {}
  ~EdgeKindPb() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EdgeKindPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeKindPb(const EdgeKindPb& from);
  EdgeKindPb(EdgeKindPb&& from) noexcept
    : EdgeKindPb() {
    *this = ::std::move(from);
  }

  inline EdgeKindPb& operator=(const EdgeKindPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeKindPb& operator=(EdgeKindPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeKindPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeKindPb* internal_default_instance() {
    return reinterpret_cast<const EdgeKindPb*>(
               &_EdgeKindPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EdgeKindPb& a, EdgeKindPb& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeKindPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeKindPb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeKindPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeKindPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeKindPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeKindPb& from) {
    EdgeKindPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeKindPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "gs.rpc.graph.EdgeKindPb";
  }
  protected:
  explicit EdgeKindPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeLabelFieldNumber = 1,
    kSrcVertexLabelFieldNumber = 3,
    kDstVertexLabelFieldNumber = 5,
    kEdgeLabelIdFieldNumber = 2,
    kSrcVertexLabelIdFieldNumber = 4,
    kDstVertexLabelIdFieldNumber = 6,
  };
  // string edge_label = 1;
  void clear_edge_label() ;
  const std::string& edge_label() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_edge_label(Arg_&& arg, Args_... args);
  std::string* mutable_edge_label();
  PROTOBUF_NODISCARD std::string* release_edge_label();
  void set_allocated_edge_label(std::string* ptr);

  private:
  const std::string& _internal_edge_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edge_label(
      const std::string& value);
  std::string* _internal_mutable_edge_label();

  public:
  // string src_vertex_label = 3;
  void clear_src_vertex_label() ;
  const std::string& src_vertex_label() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_src_vertex_label(Arg_&& arg, Args_... args);
  std::string* mutable_src_vertex_label();
  PROTOBUF_NODISCARD std::string* release_src_vertex_label();
  void set_allocated_src_vertex_label(std::string* ptr);

  private:
  const std::string& _internal_src_vertex_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_vertex_label(
      const std::string& value);
  std::string* _internal_mutable_src_vertex_label();

  public:
  // string dst_vertex_label = 5;
  void clear_dst_vertex_label() ;
  const std::string& dst_vertex_label() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dst_vertex_label(Arg_&& arg, Args_... args);
  std::string* mutable_dst_vertex_label();
  PROTOBUF_NODISCARD std::string* release_dst_vertex_label();
  void set_allocated_dst_vertex_label(std::string* ptr);

  private:
  const std::string& _internal_dst_vertex_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_vertex_label(
      const std::string& value);
  std::string* _internal_mutable_dst_vertex_label();

  public:
  // .gs.rpc.graph.LabelIdPb edge_label_id = 2;
  bool has_edge_label_id() const;
  void clear_edge_label_id() ;
  const ::gs::rpc::graph::LabelIdPb& edge_label_id() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::LabelIdPb* release_edge_label_id();
  ::gs::rpc::graph::LabelIdPb* mutable_edge_label_id();
  void set_allocated_edge_label_id(::gs::rpc::graph::LabelIdPb* edge_label_id);
  private:
  const ::gs::rpc::graph::LabelIdPb& _internal_edge_label_id() const;
  ::gs::rpc::graph::LabelIdPb* _internal_mutable_edge_label_id();
  public:
  void unsafe_arena_set_allocated_edge_label_id(
      ::gs::rpc::graph::LabelIdPb* edge_label_id);
  ::gs::rpc::graph::LabelIdPb* unsafe_arena_release_edge_label_id();
  // .gs.rpc.graph.LabelIdPb src_vertex_label_id = 4;
  bool has_src_vertex_label_id() const;
  void clear_src_vertex_label_id() ;
  const ::gs::rpc::graph::LabelIdPb& src_vertex_label_id() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::LabelIdPb* release_src_vertex_label_id();
  ::gs::rpc::graph::LabelIdPb* mutable_src_vertex_label_id();
  void set_allocated_src_vertex_label_id(::gs::rpc::graph::LabelIdPb* src_vertex_label_id);
  private:
  const ::gs::rpc::graph::LabelIdPb& _internal_src_vertex_label_id() const;
  ::gs::rpc::graph::LabelIdPb* _internal_mutable_src_vertex_label_id();
  public:
  void unsafe_arena_set_allocated_src_vertex_label_id(
      ::gs::rpc::graph::LabelIdPb* src_vertex_label_id);
  ::gs::rpc::graph::LabelIdPb* unsafe_arena_release_src_vertex_label_id();
  // .gs.rpc.graph.LabelIdPb dst_vertex_label_id = 6;
  bool has_dst_vertex_label_id() const;
  void clear_dst_vertex_label_id() ;
  const ::gs::rpc::graph::LabelIdPb& dst_vertex_label_id() const;
  PROTOBUF_NODISCARD ::gs::rpc::graph::LabelIdPb* release_dst_vertex_label_id();
  ::gs::rpc::graph::LabelIdPb* mutable_dst_vertex_label_id();
  void set_allocated_dst_vertex_label_id(::gs::rpc::graph::LabelIdPb* dst_vertex_label_id);
  private:
  const ::gs::rpc::graph::LabelIdPb& _internal_dst_vertex_label_id() const;
  ::gs::rpc::graph::LabelIdPb* _internal_mutable_dst_vertex_label_id();
  public:
  void unsafe_arena_set_allocated_dst_vertex_label_id(
      ::gs::rpc::graph::LabelIdPb* dst_vertex_label_id);
  ::gs::rpc::graph::LabelIdPb* unsafe_arena_release_dst_vertex_label_id();
  // @@protoc_insertion_point(class_scope:gs.rpc.graph.EdgeKindPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edge_label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_vertex_label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_vertex_label_;
    ::gs::rpc::graph::LabelIdPb* edge_label_id_;
    ::gs::rpc::graph::LabelIdPb* src_vertex_label_id_;
    ::gs::rpc::graph::LabelIdPb* dst_vertex_label_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_5fdef_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GrootInfoPb

// int32 last_label_id = 1;
inline void GrootInfoPb::clear_last_label_id() {
  _impl_.last_label_id_ = 0;
}
inline ::int32_t GrootInfoPb::last_label_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GrootInfoPb.last_label_id)
  return _internal_last_label_id();
}
inline void GrootInfoPb::set_last_label_id(::int32_t value) {
  _internal_set_last_label_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GrootInfoPb.last_label_id)
}
inline ::int32_t GrootInfoPb::_internal_last_label_id() const {
  return _impl_.last_label_id_;
}
inline void GrootInfoPb::_internal_set_last_label_id(::int32_t value) {
  ;
  _impl_.last_label_id_ = value;
}

// int32 last_property_id = 2;
inline void GrootInfoPb::clear_last_property_id() {
  _impl_.last_property_id_ = 0;
}
inline ::int32_t GrootInfoPb::last_property_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GrootInfoPb.last_property_id)
  return _internal_last_property_id();
}
inline void GrootInfoPb::set_last_property_id(::int32_t value) {
  _internal_set_last_property_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GrootInfoPb.last_property_id)
}
inline ::int32_t GrootInfoPb::_internal_last_property_id() const {
  return _impl_.last_property_id_;
}
inline void GrootInfoPb::_internal_set_last_property_id(::int32_t value) {
  ;
  _impl_.last_property_id_ = value;
}

// int64 last_table_id = 3;
inline void GrootInfoPb::clear_last_table_id() {
  _impl_.last_table_id_ = ::int64_t{0};
}
inline ::int64_t GrootInfoPb::last_table_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GrootInfoPb.last_table_id)
  return _internal_last_table_id();
}
inline void GrootInfoPb::set_last_table_id(::int64_t value) {
  _internal_set_last_table_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GrootInfoPb.last_table_id)
}
inline ::int64_t GrootInfoPb::_internal_last_table_id() const {
  return _impl_.last_table_id_;
}
inline void GrootInfoPb::_internal_set_last_table_id(::int64_t value) {
  ;
  _impl_.last_table_id_ = value;
}

// -------------------------------------------------------------------

// VineyardInfoPb

// .gs.rpc.graph.DataTypePb oid_type = 1;
inline void VineyardInfoPb::clear_oid_type() {
  _impl_.oid_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::oid_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.oid_type)
  return _internal_oid_type();
}
inline void VineyardInfoPb::set_oid_type(::gs::rpc::graph::DataTypePb value) {
   _internal_set_oid_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.oid_type)
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::_internal_oid_type() const {
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.oid_type_);
}
inline void VineyardInfoPb::_internal_set_oid_type(::gs::rpc::graph::DataTypePb value) {
  ;
  _impl_.oid_type_ = value;
}

// .gs.rpc.graph.DataTypePb vid_type = 2;
inline void VineyardInfoPb::clear_vid_type() {
  _impl_.vid_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::vid_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.vid_type)
  return _internal_vid_type();
}
inline void VineyardInfoPb::set_vid_type(::gs::rpc::graph::DataTypePb value) {
   _internal_set_vid_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.vid_type)
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::_internal_vid_type() const {
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.vid_type_);
}
inline void VineyardInfoPb::_internal_set_vid_type(::gs::rpc::graph::DataTypePb value) {
  ;
  _impl_.vid_type_ = value;
}

// .gs.rpc.graph.DataTypePb vdata_type = 3;
inline void VineyardInfoPb::clear_vdata_type() {
  _impl_.vdata_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::vdata_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.vdata_type)
  return _internal_vdata_type();
}
inline void VineyardInfoPb::set_vdata_type(::gs::rpc::graph::DataTypePb value) {
   _internal_set_vdata_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.vdata_type)
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::_internal_vdata_type() const {
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.vdata_type_);
}
inline void VineyardInfoPb::_internal_set_vdata_type(::gs::rpc::graph::DataTypePb value) {
  ;
  _impl_.vdata_type_ = value;
}

// .gs.rpc.graph.DataTypePb edata_type = 4;
inline void VineyardInfoPb::clear_edata_type() {
  _impl_.edata_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::edata_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.edata_type)
  return _internal_edata_type();
}
inline void VineyardInfoPb::set_edata_type(::gs::rpc::graph::DataTypePb value) {
   _internal_set_edata_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.edata_type)
}
inline ::gs::rpc::graph::DataTypePb VineyardInfoPb::_internal_edata_type() const {
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.edata_type_);
}
inline void VineyardInfoPb::_internal_set_edata_type(::gs::rpc::graph::DataTypePb value) {
  ;
  _impl_.edata_type_ = value;
}

// string schema_path = 5;
inline void VineyardInfoPb::clear_schema_path() {
  _impl_.schema_path_.ClearToEmpty();
}
inline const std::string& VineyardInfoPb::schema_path() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.schema_path)
  return _internal_schema_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VineyardInfoPb::set_schema_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.schema_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.schema_path)
}
inline std::string* VineyardInfoPb::mutable_schema_path() {
  std::string* _s = _internal_mutable_schema_path();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.VineyardInfoPb.schema_path)
  return _s;
}
inline const std::string& VineyardInfoPb::_internal_schema_path() const {
  return _impl_.schema_path_.Get();
}
inline void VineyardInfoPb::_internal_set_schema_path(const std::string& value) {
  ;


  _impl_.schema_path_.Set(value, GetArenaForAllocation());
}
inline std::string* VineyardInfoPb::_internal_mutable_schema_path() {
  ;
  return _impl_.schema_path_.Mutable( GetArenaForAllocation());
}
inline std::string* VineyardInfoPb::release_schema_path() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.VineyardInfoPb.schema_path)
  return _impl_.schema_path_.Release();
}
inline void VineyardInfoPb::set_allocated_schema_path(std::string* value) {
  _impl_.schema_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_path_.IsDefault()) {
          _impl_.schema_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.VineyardInfoPb.schema_path)
}

// bool generate_eid = 6;
inline void VineyardInfoPb::clear_generate_eid() {
  _impl_.generate_eid_ = false;
}
inline bool VineyardInfoPb::generate_eid() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.generate_eid)
  return _internal_generate_eid();
}
inline void VineyardInfoPb::set_generate_eid(bool value) {
  _internal_set_generate_eid(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.generate_eid)
}
inline bool VineyardInfoPb::_internal_generate_eid() const {
  return _impl_.generate_eid_;
}
inline void VineyardInfoPb::_internal_set_generate_eid(bool value) {
  ;
  _impl_.generate_eid_ = value;
}

// int64 vineyard_id = 7;
inline void VineyardInfoPb::clear_vineyard_id() {
  _impl_.vineyard_id_ = ::int64_t{0};
}
inline ::int64_t VineyardInfoPb::vineyard_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.vineyard_id)
  return _internal_vineyard_id();
}
inline void VineyardInfoPb::set_vineyard_id(::int64_t value) {
  _internal_set_vineyard_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.vineyard_id)
}
inline ::int64_t VineyardInfoPb::_internal_vineyard_id() const {
  return _impl_.vineyard_id_;
}
inline void VineyardInfoPb::_internal_set_vineyard_id(::int64_t value) {
  ;
  _impl_.vineyard_id_ = value;
}

// string property_schema_json = 8;
inline void VineyardInfoPb::clear_property_schema_json() {
  _impl_.property_schema_json_.ClearToEmpty();
}
inline const std::string& VineyardInfoPb::property_schema_json() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.property_schema_json)
  return _internal_property_schema_json();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VineyardInfoPb::set_property_schema_json(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.property_schema_json_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.property_schema_json)
}
inline std::string* VineyardInfoPb::mutable_property_schema_json() {
  std::string* _s = _internal_mutable_property_schema_json();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.VineyardInfoPb.property_schema_json)
  return _s;
}
inline const std::string& VineyardInfoPb::_internal_property_schema_json() const {
  return _impl_.property_schema_json_.Get();
}
inline void VineyardInfoPb::_internal_set_property_schema_json(const std::string& value) {
  ;


  _impl_.property_schema_json_.Set(value, GetArenaForAllocation());
}
inline std::string* VineyardInfoPb::_internal_mutable_property_schema_json() {
  ;
  return _impl_.property_schema_json_.Mutable( GetArenaForAllocation());
}
inline std::string* VineyardInfoPb::release_property_schema_json() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.VineyardInfoPb.property_schema_json)
  return _impl_.property_schema_json_.Release();
}
inline void VineyardInfoPb::set_allocated_property_schema_json(std::string* value) {
  _impl_.property_schema_json_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_schema_json_.IsDefault()) {
          _impl_.property_schema_json_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.VineyardInfoPb.property_schema_json)
}

// .gs.rpc.graph.VertexMapTypePb vertex_map_type = 9;
inline void VineyardInfoPb::clear_vertex_map_type() {
  _impl_.vertex_map_type_ = 0;
}
inline ::gs::rpc::graph::VertexMapTypePb VineyardInfoPb::vertex_map_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.vertex_map_type)
  return _internal_vertex_map_type();
}
inline void VineyardInfoPb::set_vertex_map_type(::gs::rpc::graph::VertexMapTypePb value) {
   _internal_set_vertex_map_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.vertex_map_type)
}
inline ::gs::rpc::graph::VertexMapTypePb VineyardInfoPb::_internal_vertex_map_type() const {
  return static_cast<::gs::rpc::graph::VertexMapTypePb>(_impl_.vertex_map_type_);
}
inline void VineyardInfoPb::_internal_set_vertex_map_type(::gs::rpc::graph::VertexMapTypePb value) {
  ;
  _impl_.vertex_map_type_ = value;
}

// repeated int64 fragments = 10;
inline int VineyardInfoPb::_internal_fragments_size() const {
  return _impl_.fragments_.size();
}
inline int VineyardInfoPb::fragments_size() const {
  return _internal_fragments_size();
}
inline void VineyardInfoPb::clear_fragments() {
  _internal_mutable_fragments()->Clear();
}
inline ::int64_t VineyardInfoPb::fragments(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.fragments)
  return _internal_fragments(index);
}
inline void VineyardInfoPb::set_fragments(int index, ::int64_t value) {
  _internal_mutable_fragments()->Set(index, value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.fragments)
}
inline void VineyardInfoPb::add_fragments(::int64_t value) {
  _internal_add_fragments(value);
  // @@protoc_insertion_point(field_add:gs.rpc.graph.VineyardInfoPb.fragments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& VineyardInfoPb::fragments() const {
  // @@protoc_insertion_point(field_list:gs.rpc.graph.VineyardInfoPb.fragments)
  return _internal_fragments();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* VineyardInfoPb::mutable_fragments() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.graph.VineyardInfoPb.fragments)
  return _internal_mutable_fragments();
}

inline ::int64_t VineyardInfoPb::_internal_fragments(int index) const {
  return _internal_fragments().Get(index);
}
inline void VineyardInfoPb::_internal_add_fragments(::int64_t value) {
  _internal_mutable_fragments()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& VineyardInfoPb::_internal_fragments() const {
  return _impl_.fragments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* VineyardInfoPb::_internal_mutable_fragments() {
  return &_impl_.fragments_;
}

// bool retain_oid = 11;
inline void VineyardInfoPb::clear_retain_oid() {
  _impl_.retain_oid_ = false;
}
inline bool VineyardInfoPb::retain_oid() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.VineyardInfoPb.retain_oid)
  return _internal_retain_oid();
}
inline void VineyardInfoPb::set_retain_oid(bool value) {
  _internal_set_retain_oid(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.VineyardInfoPb.retain_oid)
}
inline bool VineyardInfoPb::_internal_retain_oid() const {
  return _impl_.retain_oid_;
}
inline void VineyardInfoPb::_internal_set_retain_oid(bool value) {
  ;
  _impl_.retain_oid_ = value;
}

// -------------------------------------------------------------------

// MutableGraphInfoPb

// .gs.rpc.graph.DataTypePb vdata_type = 1;
inline void MutableGraphInfoPb::clear_vdata_type() {
  _impl_.vdata_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb MutableGraphInfoPb::vdata_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.MutableGraphInfoPb.vdata_type)
  return _internal_vdata_type();
}
inline void MutableGraphInfoPb::set_vdata_type(::gs::rpc::graph::DataTypePb value) {
   _internal_set_vdata_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.MutableGraphInfoPb.vdata_type)
}
inline ::gs::rpc::graph::DataTypePb MutableGraphInfoPb::_internal_vdata_type() const {
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.vdata_type_);
}
inline void MutableGraphInfoPb::_internal_set_vdata_type(::gs::rpc::graph::DataTypePb value) {
  ;
  _impl_.vdata_type_ = value;
}

// .gs.rpc.graph.DataTypePb edata_type = 2;
inline void MutableGraphInfoPb::clear_edata_type() {
  _impl_.edata_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb MutableGraphInfoPb::edata_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.MutableGraphInfoPb.edata_type)
  return _internal_edata_type();
}
inline void MutableGraphInfoPb::set_edata_type(::gs::rpc::graph::DataTypePb value) {
   _internal_set_edata_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.MutableGraphInfoPb.edata_type)
}
inline ::gs::rpc::graph::DataTypePb MutableGraphInfoPb::_internal_edata_type() const {
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.edata_type_);
}
inline void MutableGraphInfoPb::_internal_set_edata_type(::gs::rpc::graph::DataTypePb value) {
  ;
  _impl_.edata_type_ = value;
}

// string property_schema_json = 3;
inline void MutableGraphInfoPb::clear_property_schema_json() {
  _impl_.property_schema_json_.ClearToEmpty();
}
inline const std::string& MutableGraphInfoPb::property_schema_json() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.MutableGraphInfoPb.property_schema_json)
  return _internal_property_schema_json();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MutableGraphInfoPb::set_property_schema_json(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.property_schema_json_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.MutableGraphInfoPb.property_schema_json)
}
inline std::string* MutableGraphInfoPb::mutable_property_schema_json() {
  std::string* _s = _internal_mutable_property_schema_json();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.MutableGraphInfoPb.property_schema_json)
  return _s;
}
inline const std::string& MutableGraphInfoPb::_internal_property_schema_json() const {
  return _impl_.property_schema_json_.Get();
}
inline void MutableGraphInfoPb::_internal_set_property_schema_json(const std::string& value) {
  ;


  _impl_.property_schema_json_.Set(value, GetArenaForAllocation());
}
inline std::string* MutableGraphInfoPb::_internal_mutable_property_schema_json() {
  ;
  return _impl_.property_schema_json_.Mutable( GetArenaForAllocation());
}
inline std::string* MutableGraphInfoPb::release_property_schema_json() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.MutableGraphInfoPb.property_schema_json)
  return _impl_.property_schema_json_.Release();
}
inline void MutableGraphInfoPb::set_allocated_property_schema_json(std::string* value) {
  _impl_.property_schema_json_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.property_schema_json_.IsDefault()) {
          _impl_.property_schema_json_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.MutableGraphInfoPb.property_schema_json)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GraphDefPb

// int64 version = 1;
inline void GraphDefPb::clear_version() {
  _impl_.version_ = ::int64_t{0};
}
inline ::int64_t GraphDefPb::version() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.version)
  return _internal_version();
}
inline void GraphDefPb::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.version)
}
inline ::int64_t GraphDefPb::_internal_version() const {
  return _impl_.version_;
}
inline void GraphDefPb::_internal_set_version(::int64_t value) {
  ;
  _impl_.version_ = value;
}

// string key = 2;
inline void GraphDefPb::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GraphDefPb::key() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GraphDefPb::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.key)
}
inline std::string* GraphDefPb::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.GraphDefPb.key)
  return _s;
}
inline const std::string& GraphDefPb::_internal_key() const {
  return _impl_.key_.Get();
}
inline void GraphDefPb::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* GraphDefPb::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* GraphDefPb::release_key() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.GraphDefPb.key)
  return _impl_.key_.Release();
}
inline void GraphDefPb::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.GraphDefPb.key)
}

// .gs.rpc.graph.GraphTypePb graph_type = 3;
inline void GraphDefPb::clear_graph_type() {
  _impl_.graph_type_ = 0;
}
inline ::gs::rpc::graph::GraphTypePb GraphDefPb::graph_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.graph_type)
  return _internal_graph_type();
}
inline void GraphDefPb::set_graph_type(::gs::rpc::graph::GraphTypePb value) {
   _internal_set_graph_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.graph_type)
}
inline ::gs::rpc::graph::GraphTypePb GraphDefPb::_internal_graph_type() const {
  return static_cast<::gs::rpc::graph::GraphTypePb>(_impl_.graph_type_);
}
inline void GraphDefPb::_internal_set_graph_type(::gs::rpc::graph::GraphTypePb value) {
  ;
  _impl_.graph_type_ = value;
}

// bool directed = 4;
inline void GraphDefPb::clear_directed() {
  _impl_.directed_ = false;
}
inline bool GraphDefPb::directed() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.directed)
  return _internal_directed();
}
inline void GraphDefPb::set_directed(bool value) {
  _internal_set_directed(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.directed)
}
inline bool GraphDefPb::_internal_directed() const {
  return _impl_.directed_;
}
inline void GraphDefPb::_internal_set_directed(bool value) {
  ;
  _impl_.directed_ = value;
}

// repeated .gs.rpc.graph.TypeDefPb type_defs = 5;
inline int GraphDefPb::_internal_type_defs_size() const {
  return _impl_.type_defs_.size();
}
inline int GraphDefPb::type_defs_size() const {
  return _internal_type_defs_size();
}
inline void GraphDefPb::clear_type_defs() {
  _internal_mutable_type_defs()->Clear();
}
inline ::gs::rpc::graph::TypeDefPb* GraphDefPb::mutable_type_defs(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.GraphDefPb.type_defs)
  return _internal_mutable_type_defs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::TypeDefPb >*
GraphDefPb::mutable_type_defs() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.graph.GraphDefPb.type_defs)
  return _internal_mutable_type_defs();
}
inline const ::gs::rpc::graph::TypeDefPb& GraphDefPb::_internal_type_defs(int index) const {
  return _internal_type_defs().Get(index);
}
inline const ::gs::rpc::graph::TypeDefPb& GraphDefPb::type_defs(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.type_defs)
  return _internal_type_defs(index);
}
inline ::gs::rpc::graph::TypeDefPb* GraphDefPb::_internal_add_type_defs() {
  return _internal_mutable_type_defs()->Add();
}
inline ::gs::rpc::graph::TypeDefPb* GraphDefPb::add_type_defs() {
  ::gs::rpc::graph::TypeDefPb* _add = _internal_add_type_defs();
  // @@protoc_insertion_point(field_add:gs.rpc.graph.GraphDefPb.type_defs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::TypeDefPb >&
GraphDefPb::type_defs() const {
  // @@protoc_insertion_point(field_list:gs.rpc.graph.GraphDefPb.type_defs)
  return _internal_type_defs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>&
GraphDefPb::_internal_type_defs() const {
  return _impl_.type_defs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::TypeDefPb>*
GraphDefPb::_internal_mutable_type_defs() {
  return &_impl_.type_defs_;
}

// repeated .gs.rpc.graph.EdgeKindPb edge_kinds = 6;
inline int GraphDefPb::_internal_edge_kinds_size() const {
  return _impl_.edge_kinds_.size();
}
inline int GraphDefPb::edge_kinds_size() const {
  return _internal_edge_kinds_size();
}
inline void GraphDefPb::clear_edge_kinds() {
  _internal_mutable_edge_kinds()->Clear();
}
inline ::gs::rpc::graph::EdgeKindPb* GraphDefPb::mutable_edge_kinds(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.GraphDefPb.edge_kinds)
  return _internal_mutable_edge_kinds()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::EdgeKindPb >*
GraphDefPb::mutable_edge_kinds() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.graph.GraphDefPb.edge_kinds)
  return _internal_mutable_edge_kinds();
}
inline const ::gs::rpc::graph::EdgeKindPb& GraphDefPb::_internal_edge_kinds(int index) const {
  return _internal_edge_kinds().Get(index);
}
inline const ::gs::rpc::graph::EdgeKindPb& GraphDefPb::edge_kinds(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.edge_kinds)
  return _internal_edge_kinds(index);
}
inline ::gs::rpc::graph::EdgeKindPb* GraphDefPb::_internal_add_edge_kinds() {
  return _internal_mutable_edge_kinds()->Add();
}
inline ::gs::rpc::graph::EdgeKindPb* GraphDefPb::add_edge_kinds() {
  ::gs::rpc::graph::EdgeKindPb* _add = _internal_add_edge_kinds();
  // @@protoc_insertion_point(field_add:gs.rpc.graph.GraphDefPb.edge_kinds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::EdgeKindPb >&
GraphDefPb::edge_kinds() const {
  // @@protoc_insertion_point(field_list:gs.rpc.graph.GraphDefPb.edge_kinds)
  return _internal_edge_kinds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>&
GraphDefPb::_internal_edge_kinds() const {
  return _impl_.edge_kinds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::EdgeKindPb>*
GraphDefPb::_internal_mutable_edge_kinds() {
  return &_impl_.edge_kinds_;
}

// map<string, int32> property_name_to_id = 7;
inline int GraphDefPb::_internal_property_name_to_id_size() const {
  return _impl_.property_name_to_id_.size();
}
inline int GraphDefPb::property_name_to_id_size() const {
  return _internal_property_name_to_id_size();
}
inline void GraphDefPb::clear_property_name_to_id() {
  _impl_.property_name_to_id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >&
GraphDefPb::_internal_property_name_to_id() const {
  return _impl_.property_name_to_id_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >&
GraphDefPb::property_name_to_id() const {
  // @@protoc_insertion_point(field_map:gs.rpc.graph.GraphDefPb.property_name_to_id)
  return _internal_property_name_to_id();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >*
GraphDefPb::_internal_mutable_property_name_to_id() {
  return _impl_.property_name_to_id_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >*
GraphDefPb::mutable_property_name_to_id() {
  // @@protoc_insertion_point(field_mutable_map:gs.rpc.graph.GraphDefPb.property_name_to_id)
  return _internal_mutable_property_name_to_id();
}

// .google.protobuf.Any extension = 8;
inline bool GraphDefPb::has_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extension_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GraphDefPb::_internal_extension() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GraphDefPb::extension() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.extension)
  return _internal_extension();
}
inline void GraphDefPb::unsafe_arena_set_allocated_extension(
    ::PROTOBUF_NAMESPACE_ID::Any* extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extension_);
  }
  _impl_.extension_ = extension;
  if (extension) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.GraphDefPb.extension)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GraphDefPb::release_extension() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.extension_;
  _impl_.extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GraphDefPb::unsafe_arena_release_extension() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.GraphDefPb.extension)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.extension_;
  _impl_.extension_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GraphDefPb::_internal_mutable_extension() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.extension_ = p;
  }
  return _impl_.extension_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GraphDefPb::mutable_extension() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.GraphDefPb.extension)
  return _msg;
}
inline void GraphDefPb::set_allocated_extension(::PROTOBUF_NAMESPACE_ID::Any* extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extension_);
  }
  if (extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension));
    if (message_arena != submessage_arena) {
      extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.extension_ = extension;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.GraphDefPb.extension)
}

// bool is_multigraph = 9;
inline void GraphDefPb::clear_is_multigraph() {
  _impl_.is_multigraph_ = false;
}
inline bool GraphDefPb::is_multigraph() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.is_multigraph)
  return _internal_is_multigraph();
}
inline void GraphDefPb::set_is_multigraph(bool value) {
  _internal_set_is_multigraph(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.is_multigraph)
}
inline bool GraphDefPb::_internal_is_multigraph() const {
  return _impl_.is_multigraph_;
}
inline void GraphDefPb::_internal_set_is_multigraph(bool value) {
  ;
  _impl_.is_multigraph_ = value;
}

// bool compact_edges = 10;
inline void GraphDefPb::clear_compact_edges() {
  _impl_.compact_edges_ = false;
}
inline bool GraphDefPb::compact_edges() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.compact_edges)
  return _internal_compact_edges();
}
inline void GraphDefPb::set_compact_edges(bool value) {
  _internal_set_compact_edges(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.compact_edges)
}
inline bool GraphDefPb::_internal_compact_edges() const {
  return _impl_.compact_edges_;
}
inline void GraphDefPb::_internal_set_compact_edges(bool value) {
  ;
  _impl_.compact_edges_ = value;
}

// bool use_perfect_hash = 11;
inline void GraphDefPb::clear_use_perfect_hash() {
  _impl_.use_perfect_hash_ = false;
}
inline bool GraphDefPb::use_perfect_hash() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.GraphDefPb.use_perfect_hash)
  return _internal_use_perfect_hash();
}
inline void GraphDefPb::set_use_perfect_hash(bool value) {
  _internal_set_use_perfect_hash(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.GraphDefPb.use_perfect_hash)
}
inline bool GraphDefPb::_internal_use_perfect_hash() const {
  return _impl_.use_perfect_hash_;
}
inline void GraphDefPb::_internal_set_use_perfect_hash(bool value) {
  ;
  _impl_.use_perfect_hash_ = value;
}

// -------------------------------------------------------------------

// TypeDefPb

// int32 version_id = 1;
inline void TypeDefPb::clear_version_id() {
  _impl_.version_id_ = 0;
}
inline ::int32_t TypeDefPb::version_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.version_id)
  return _internal_version_id();
}
inline void TypeDefPb::set_version_id(::int32_t value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.TypeDefPb.version_id)
}
inline ::int32_t TypeDefPb::_internal_version_id() const {
  return _impl_.version_id_;
}
inline void TypeDefPb::_internal_set_version_id(::int32_t value) {
  ;
  _impl_.version_id_ = value;
}

// string label = 2;
inline void TypeDefPb::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& TypeDefPb::label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TypeDefPb::set_label(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.TypeDefPb.label)
}
inline std::string* TypeDefPb::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.TypeDefPb.label)
  return _s;
}
inline const std::string& TypeDefPb::_internal_label() const {
  return _impl_.label_.Get();
}
inline void TypeDefPb::_internal_set_label(const std::string& value) {
  ;


  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* TypeDefPb::_internal_mutable_label() {
  ;
  return _impl_.label_.Mutable( GetArenaForAllocation());
}
inline std::string* TypeDefPb::release_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.TypeDefPb.label)
  return _impl_.label_.Release();
}
inline void TypeDefPb::set_allocated_label(std::string* value) {
  _impl_.label_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.TypeDefPb.label)
}

// .gs.rpc.graph.LabelIdPb label_id = 3;
inline bool TypeDefPb::has_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.label_id_ != nullptr);
  return value;
}
inline void TypeDefPb::clear_label_id() {
  if (_impl_.label_id_ != nullptr) _impl_.label_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::gs::rpc::graph::LabelIdPb& TypeDefPb::_internal_label_id() const {
  const ::gs::rpc::graph::LabelIdPb* p = _impl_.label_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::LabelIdPb&>(
      ::gs::rpc::graph::_LabelIdPb_default_instance_);
}
inline const ::gs::rpc::graph::LabelIdPb& TypeDefPb::label_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.label_id)
  return _internal_label_id();
}
inline void TypeDefPb::unsafe_arena_set_allocated_label_id(
    ::gs::rpc::graph::LabelIdPb* label_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.label_id_);
  }
  _impl_.label_id_ = label_id;
  if (label_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.TypeDefPb.label_id)
}
inline ::gs::rpc::graph::LabelIdPb* TypeDefPb::release_label_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.label_id_;
  _impl_.label_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* TypeDefPb::unsafe_arena_release_label_id() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.TypeDefPb.label_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.label_id_;
  _impl_.label_id_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* TypeDefPb::_internal_mutable_label_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.label_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::LabelIdPb>(GetArenaForAllocation());
    _impl_.label_id_ = p;
  }
  return _impl_.label_id_;
}
inline ::gs::rpc::graph::LabelIdPb* TypeDefPb::mutable_label_id() {
  ::gs::rpc::graph::LabelIdPb* _msg = _internal_mutable_label_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.TypeDefPb.label_id)
  return _msg;
}
inline void TypeDefPb::set_allocated_label_id(::gs::rpc::graph::LabelIdPb* label_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.label_id_;
  }
  if (label_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(label_id);
    if (message_arena != submessage_arena) {
      label_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.label_id_ = label_id;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.TypeDefPb.label_id)
}

// .gs.rpc.graph.TypeEnumPb type_enum = 4;
inline void TypeDefPb::clear_type_enum() {
  _impl_.type_enum_ = 0;
}
inline ::gs::rpc::graph::TypeEnumPb TypeDefPb::type_enum() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.type_enum)
  return _internal_type_enum();
}
inline void TypeDefPb::set_type_enum(::gs::rpc::graph::TypeEnumPb value) {
   _internal_set_type_enum(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.TypeDefPb.type_enum)
}
inline ::gs::rpc::graph::TypeEnumPb TypeDefPb::_internal_type_enum() const {
  return static_cast<::gs::rpc::graph::TypeEnumPb>(_impl_.type_enum_);
}
inline void TypeDefPb::_internal_set_type_enum(::gs::rpc::graph::TypeEnumPb value) {
  ;
  _impl_.type_enum_ = value;
}

// repeated .gs.rpc.graph.PropertyDefPb props = 5;
inline int TypeDefPb::_internal_props_size() const {
  return _impl_.props_.size();
}
inline int TypeDefPb::props_size() const {
  return _internal_props_size();
}
inline void TypeDefPb::clear_props() {
  _internal_mutable_props()->Clear();
}
inline ::gs::rpc::graph::PropertyDefPb* TypeDefPb::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.TypeDefPb.props)
  return _internal_mutable_props()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::PropertyDefPb >*
TypeDefPb::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.graph.TypeDefPb.props)
  return _internal_mutable_props();
}
inline const ::gs::rpc::graph::PropertyDefPb& TypeDefPb::_internal_props(int index) const {
  return _internal_props().Get(index);
}
inline const ::gs::rpc::graph::PropertyDefPb& TypeDefPb::props(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.props)
  return _internal_props(index);
}
inline ::gs::rpc::graph::PropertyDefPb* TypeDefPb::_internal_add_props() {
  return _internal_mutable_props()->Add();
}
inline ::gs::rpc::graph::PropertyDefPb* TypeDefPb::add_props() {
  ::gs::rpc::graph::PropertyDefPb* _add = _internal_add_props();
  // @@protoc_insertion_point(field_add:gs.rpc.graph.TypeDefPb.props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::graph::PropertyDefPb >&
TypeDefPb::props() const {
  // @@protoc_insertion_point(field_list:gs.rpc.graph.TypeDefPb.props)
  return _internal_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>&
TypeDefPb::_internal_props() const {
  return _impl_.props_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::gs::rpc::graph::PropertyDefPb>*
TypeDefPb::_internal_mutable_props() {
  return &_impl_.props_;
}

// string comment = 6;
inline void TypeDefPb::clear_comment() {
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& TypeDefPb::comment() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.TypeDefPb.comment)
  return _internal_comment();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TypeDefPb::set_comment(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.comment_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.TypeDefPb.comment)
}
inline std::string* TypeDefPb::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.TypeDefPb.comment)
  return _s;
}
inline const std::string& TypeDefPb::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void TypeDefPb::_internal_set_comment(const std::string& value) {
  ;


  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* TypeDefPb::_internal_mutable_comment() {
  ;
  return _impl_.comment_.Mutable( GetArenaForAllocation());
}
inline std::string* TypeDefPb::release_comment() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.TypeDefPb.comment)
  return _impl_.comment_.Release();
}
inline void TypeDefPb::set_allocated_comment(std::string* value) {
  _impl_.comment_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.comment_.IsDefault()) {
          _impl_.comment_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.TypeDefPb.comment)
}

// -------------------------------------------------------------------

// LabelIdPb

// int32 id = 1;
inline void LabelIdPb::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t LabelIdPb::id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.LabelIdPb.id)
  return _internal_id();
}
inline void LabelIdPb::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.LabelIdPb.id)
}
inline ::int32_t LabelIdPb::_internal_id() const {
  return _impl_.id_;
}
inline void LabelIdPb::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// PropertyDefPb

// int32 id = 1;
inline void PropertyDefPb::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t PropertyDefPb::id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.id)
  return _internal_id();
}
inline void PropertyDefPb::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.id)
}
inline ::int32_t PropertyDefPb::_internal_id() const {
  return _impl_.id_;
}
inline void PropertyDefPb::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// int32 inner_id = 2;
inline void PropertyDefPb::clear_inner_id() {
  _impl_.inner_id_ = 0;
}
inline ::int32_t PropertyDefPb::inner_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.inner_id)
  return _internal_inner_id();
}
inline void PropertyDefPb::set_inner_id(::int32_t value) {
  _internal_set_inner_id(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.inner_id)
}
inline ::int32_t PropertyDefPb::_internal_inner_id() const {
  return _impl_.inner_id_;
}
inline void PropertyDefPb::_internal_set_inner_id(::int32_t value) {
  ;
  _impl_.inner_id_ = value;
}

// string name = 3;
inline void PropertyDefPb::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PropertyDefPb::name() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyDefPb::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.name)
}
inline std::string* PropertyDefPb::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.PropertyDefPb.name)
  return _s;
}
inline const std::string& PropertyDefPb::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PropertyDefPb::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyDefPb::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* PropertyDefPb::release_name() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.PropertyDefPb.name)
  return _impl_.name_.Release();
}
inline void PropertyDefPb::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.PropertyDefPb.name)
}

// .gs.rpc.graph.DataTypePb data_type = 4;
inline void PropertyDefPb::clear_data_type() {
  _impl_.data_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb PropertyDefPb::data_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.data_type)
  return _internal_data_type();
}
inline void PropertyDefPb::set_data_type(::gs::rpc::graph::DataTypePb value) {
   _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.data_type)
}
inline ::gs::rpc::graph::DataTypePb PropertyDefPb::_internal_data_type() const {
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.data_type_);
}
inline void PropertyDefPb::_internal_set_data_type(::gs::rpc::graph::DataTypePb value) {
  ;
  _impl_.data_type_ = value;
}

// .gs.rpc.graph.PropertyValuePb default_value = 5;
inline bool PropertyDefPb::has_default_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_value_ != nullptr);
  return value;
}
inline void PropertyDefPb::clear_default_value() {
  if (_impl_.default_value_ != nullptr) _impl_.default_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::gs::rpc::graph::PropertyValuePb& PropertyDefPb::_internal_default_value() const {
  const ::gs::rpc::graph::PropertyValuePb* p = _impl_.default_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::PropertyValuePb&>(
      ::gs::rpc::graph::_PropertyValuePb_default_instance_);
}
inline const ::gs::rpc::graph::PropertyValuePb& PropertyDefPb::default_value() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.default_value)
  return _internal_default_value();
}
inline void PropertyDefPb::unsafe_arena_set_allocated_default_value(
    ::gs::rpc::graph::PropertyValuePb* default_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_value_);
  }
  _impl_.default_value_ = default_value;
  if (default_value) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.PropertyDefPb.default_value)
}
inline ::gs::rpc::graph::PropertyValuePb* PropertyDefPb::release_default_value() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::PropertyValuePb* temp = _impl_.default_value_;
  _impl_.default_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::PropertyValuePb* PropertyDefPb::unsafe_arena_release_default_value() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.PropertyDefPb.default_value)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::PropertyValuePb* temp = _impl_.default_value_;
  _impl_.default_value_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::PropertyValuePb* PropertyDefPb::_internal_mutable_default_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.default_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::PropertyValuePb>(GetArenaForAllocation());
    _impl_.default_value_ = p;
  }
  return _impl_.default_value_;
}
inline ::gs::rpc::graph::PropertyValuePb* PropertyDefPb::mutable_default_value() {
  ::gs::rpc::graph::PropertyValuePb* _msg = _internal_mutable_default_value();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.PropertyDefPb.default_value)
  return _msg;
}
inline void PropertyDefPb::set_allocated_default_value(::gs::rpc::graph::PropertyValuePb* default_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.default_value_;
  }
  if (default_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_value);
    if (message_arena != submessage_arena) {
      default_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.default_value_ = default_value;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.PropertyDefPb.default_value)
}

// bool pk = 6;
inline void PropertyDefPb::clear_pk() {
  _impl_.pk_ = false;
}
inline bool PropertyDefPb::pk() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.pk)
  return _internal_pk();
}
inline void PropertyDefPb::set_pk(bool value) {
  _internal_set_pk(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.pk)
}
inline bool PropertyDefPb::_internal_pk() const {
  return _impl_.pk_;
}
inline void PropertyDefPb::_internal_set_pk(bool value) {
  ;
  _impl_.pk_ = value;
}

// string comment = 7;
inline void PropertyDefPb::clear_comment() {
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& PropertyDefPb::comment() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyDefPb.comment)
  return _internal_comment();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyDefPb::set_comment(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.comment_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyDefPb.comment)
}
inline std::string* PropertyDefPb::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.PropertyDefPb.comment)
  return _s;
}
inline const std::string& PropertyDefPb::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void PropertyDefPb::_internal_set_comment(const std::string& value) {
  ;


  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyDefPb::_internal_mutable_comment() {
  ;
  return _impl_.comment_.Mutable( GetArenaForAllocation());
}
inline std::string* PropertyDefPb::release_comment() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.PropertyDefPb.comment)
  return _impl_.comment_.Release();
}
inline void PropertyDefPb::set_allocated_comment(std::string* value) {
  _impl_.comment_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.comment_.IsDefault()) {
          _impl_.comment_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.PropertyDefPb.comment)
}

// -------------------------------------------------------------------

// PropertyValuePb

// .gs.rpc.graph.DataTypePb data_type = 1;
inline void PropertyValuePb::clear_data_type() {
  _impl_.data_type_ = 0;
}
inline ::gs::rpc::graph::DataTypePb PropertyValuePb::data_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyValuePb.data_type)
  return _internal_data_type();
}
inline void PropertyValuePb::set_data_type(::gs::rpc::graph::DataTypePb value) {
   _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyValuePb.data_type)
}
inline ::gs::rpc::graph::DataTypePb PropertyValuePb::_internal_data_type() const {
  return static_cast<::gs::rpc::graph::DataTypePb>(_impl_.data_type_);
}
inline void PropertyValuePb::_internal_set_data_type(::gs::rpc::graph::DataTypePb value) {
  ;
  _impl_.data_type_ = value;
}

// bytes val = 2;
inline void PropertyValuePb::clear_val() {
  _impl_.val_.ClearToEmpty();
}
inline const std::string& PropertyValuePb::val() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.PropertyValuePb.val)
  return _internal_val();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyValuePb::set_val(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.val_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.PropertyValuePb.val)
}
inline std::string* PropertyValuePb::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.PropertyValuePb.val)
  return _s;
}
inline const std::string& PropertyValuePb::_internal_val() const {
  return _impl_.val_.Get();
}
inline void PropertyValuePb::_internal_set_val(const std::string& value) {
  ;


  _impl_.val_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyValuePb::_internal_mutable_val() {
  ;
  return _impl_.val_.Mutable( GetArenaForAllocation());
}
inline std::string* PropertyValuePb::release_val() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.PropertyValuePb.val)
  return _impl_.val_.Release();
}
inline void PropertyValuePb::set_allocated_val(std::string* value) {
  _impl_.val_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.val_.IsDefault()) {
          _impl_.val_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.PropertyValuePb.val)
}

// -------------------------------------------------------------------

// EdgeKindPb

// string edge_label = 1;
inline void EdgeKindPb::clear_edge_label() {
  _impl_.edge_label_.ClearToEmpty();
}
inline const std::string& EdgeKindPb::edge_label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.edge_label)
  return _internal_edge_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EdgeKindPb::set_edge_label(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.edge_label_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.EdgeKindPb.edge_label)
}
inline std::string* EdgeKindPb::mutable_edge_label() {
  std::string* _s = _internal_mutable_edge_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.edge_label)
  return _s;
}
inline const std::string& EdgeKindPb::_internal_edge_label() const {
  return _impl_.edge_label_.Get();
}
inline void EdgeKindPb::_internal_set_edge_label(const std::string& value) {
  ;


  _impl_.edge_label_.Set(value, GetArenaForAllocation());
}
inline std::string* EdgeKindPb::_internal_mutable_edge_label() {
  ;
  return _impl_.edge_label_.Mutable( GetArenaForAllocation());
}
inline std::string* EdgeKindPb::release_edge_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.edge_label)
  return _impl_.edge_label_.Release();
}
inline void EdgeKindPb::set_allocated_edge_label(std::string* value) {
  _impl_.edge_label_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.edge_label_.IsDefault()) {
          _impl_.edge_label_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.edge_label)
}

// .gs.rpc.graph.LabelIdPb edge_label_id = 2;
inline bool EdgeKindPb::has_edge_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edge_label_id_ != nullptr);
  return value;
}
inline void EdgeKindPb::clear_edge_label_id() {
  if (_impl_.edge_label_id_ != nullptr) _impl_.edge_label_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::_internal_edge_label_id() const {
  const ::gs::rpc::graph::LabelIdPb* p = _impl_.edge_label_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::LabelIdPb&>(
      ::gs::rpc::graph::_LabelIdPb_default_instance_);
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::edge_label_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.edge_label_id)
  return _internal_edge_label_id();
}
inline void EdgeKindPb::unsafe_arena_set_allocated_edge_label_id(
    ::gs::rpc::graph::LabelIdPb* edge_label_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edge_label_id_);
  }
  _impl_.edge_label_id_ = edge_label_id;
  if (edge_label_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.EdgeKindPb.edge_label_id)
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::release_edge_label_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.edge_label_id_;
  _impl_.edge_label_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::unsafe_arena_release_edge_label_id() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.edge_label_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.edge_label_id_;
  _impl_.edge_label_id_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::_internal_mutable_edge_label_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edge_label_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::LabelIdPb>(GetArenaForAllocation());
    _impl_.edge_label_id_ = p;
  }
  return _impl_.edge_label_id_;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::mutable_edge_label_id() {
  ::gs::rpc::graph::LabelIdPb* _msg = _internal_mutable_edge_label_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.edge_label_id)
  return _msg;
}
inline void EdgeKindPb::set_allocated_edge_label_id(::gs::rpc::graph::LabelIdPb* edge_label_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edge_label_id_;
  }
  if (edge_label_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edge_label_id);
    if (message_arena != submessage_arena) {
      edge_label_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge_label_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edge_label_id_ = edge_label_id;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.edge_label_id)
}

// string src_vertex_label = 3;
inline void EdgeKindPb::clear_src_vertex_label() {
  _impl_.src_vertex_label_.ClearToEmpty();
}
inline const std::string& EdgeKindPb::src_vertex_label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.src_vertex_label)
  return _internal_src_vertex_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EdgeKindPb::set_src_vertex_label(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.src_vertex_label_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.EdgeKindPb.src_vertex_label)
}
inline std::string* EdgeKindPb::mutable_src_vertex_label() {
  std::string* _s = _internal_mutable_src_vertex_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.src_vertex_label)
  return _s;
}
inline const std::string& EdgeKindPb::_internal_src_vertex_label() const {
  return _impl_.src_vertex_label_.Get();
}
inline void EdgeKindPb::_internal_set_src_vertex_label(const std::string& value) {
  ;


  _impl_.src_vertex_label_.Set(value, GetArenaForAllocation());
}
inline std::string* EdgeKindPb::_internal_mutable_src_vertex_label() {
  ;
  return _impl_.src_vertex_label_.Mutable( GetArenaForAllocation());
}
inline std::string* EdgeKindPb::release_src_vertex_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.src_vertex_label)
  return _impl_.src_vertex_label_.Release();
}
inline void EdgeKindPb::set_allocated_src_vertex_label(std::string* value) {
  _impl_.src_vertex_label_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.src_vertex_label_.IsDefault()) {
          _impl_.src_vertex_label_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.src_vertex_label)
}

// .gs.rpc.graph.LabelIdPb src_vertex_label_id = 4;
inline bool EdgeKindPb::has_src_vertex_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.src_vertex_label_id_ != nullptr);
  return value;
}
inline void EdgeKindPb::clear_src_vertex_label_id() {
  if (_impl_.src_vertex_label_id_ != nullptr) _impl_.src_vertex_label_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::_internal_src_vertex_label_id() const {
  const ::gs::rpc::graph::LabelIdPb* p = _impl_.src_vertex_label_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::LabelIdPb&>(
      ::gs::rpc::graph::_LabelIdPb_default_instance_);
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::src_vertex_label_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.src_vertex_label_id)
  return _internal_src_vertex_label_id();
}
inline void EdgeKindPb::unsafe_arena_set_allocated_src_vertex_label_id(
    ::gs::rpc::graph::LabelIdPb* src_vertex_label_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_vertex_label_id_);
  }
  _impl_.src_vertex_label_id_ = src_vertex_label_id;
  if (src_vertex_label_id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.EdgeKindPb.src_vertex_label_id)
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::release_src_vertex_label_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.src_vertex_label_id_;
  _impl_.src_vertex_label_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::unsafe_arena_release_src_vertex_label_id() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.src_vertex_label_id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.src_vertex_label_id_;
  _impl_.src_vertex_label_id_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::_internal_mutable_src_vertex_label_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.src_vertex_label_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::LabelIdPb>(GetArenaForAllocation());
    _impl_.src_vertex_label_id_ = p;
  }
  return _impl_.src_vertex_label_id_;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::mutable_src_vertex_label_id() {
  ::gs::rpc::graph::LabelIdPb* _msg = _internal_mutable_src_vertex_label_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.src_vertex_label_id)
  return _msg;
}
inline void EdgeKindPb::set_allocated_src_vertex_label_id(::gs::rpc::graph::LabelIdPb* src_vertex_label_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.src_vertex_label_id_;
  }
  if (src_vertex_label_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(src_vertex_label_id);
    if (message_arena != submessage_arena) {
      src_vertex_label_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_vertex_label_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.src_vertex_label_id_ = src_vertex_label_id;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.src_vertex_label_id)
}

// string dst_vertex_label = 5;
inline void EdgeKindPb::clear_dst_vertex_label() {
  _impl_.dst_vertex_label_.ClearToEmpty();
}
inline const std::string& EdgeKindPb::dst_vertex_label() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.dst_vertex_label)
  return _internal_dst_vertex_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EdgeKindPb::set_dst_vertex_label(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.dst_vertex_label_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.graph.EdgeKindPb.dst_vertex_label)
}
inline std::string* EdgeKindPb::mutable_dst_vertex_label() {
  std::string* _s = _internal_mutable_dst_vertex_label();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.dst_vertex_label)
  return _s;
}
inline const std::string& EdgeKindPb::_internal_dst_vertex_label() const {
  return _impl_.dst_vertex_label_.Get();
}
inline void EdgeKindPb::_internal_set_dst_vertex_label(const std::string& value) {
  ;


  _impl_.dst_vertex_label_.Set(value, GetArenaForAllocation());
}
inline std::string* EdgeKindPb::_internal_mutable_dst_vertex_label() {
  ;
  return _impl_.dst_vertex_label_.Mutable( GetArenaForAllocation());
}
inline std::string* EdgeKindPb::release_dst_vertex_label() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.dst_vertex_label)
  return _impl_.dst_vertex_label_.Release();
}
inline void EdgeKindPb::set_allocated_dst_vertex_label(std::string* value) {
  _impl_.dst_vertex_label_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dst_vertex_label_.IsDefault()) {
          _impl_.dst_vertex_label_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.dst_vertex_label)
}

// .gs.rpc.graph.LabelIdPb dst_vertex_label_id = 6;
inline bool EdgeKindPb::has_dst_vertex_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dst_vertex_label_id_ != nullptr);
  return value;
}
inline void EdgeKindPb::clear_dst_vertex_label_id() {
  if (_impl_.dst_vertex_label_id_ != nullptr) _impl_.dst_vertex_label_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::_internal_dst_vertex_label_id() const {
  const ::gs::rpc::graph::LabelIdPb* p = _impl_.dst_vertex_label_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::graph::LabelIdPb&>(
      ::gs::rpc::graph::_LabelIdPb_default_instance_);
}
inline const ::gs::rpc::graph::LabelIdPb& EdgeKindPb::dst_vertex_label_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.graph.EdgeKindPb.dst_vertex_label_id)
  return _internal_dst_vertex_label_id();
}
inline void EdgeKindPb::unsafe_arena_set_allocated_dst_vertex_label_id(
    ::gs::rpc::graph::LabelIdPb* dst_vertex_label_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dst_vertex_label_id_);
  }
  _impl_.dst_vertex_label_id_ = dst_vertex_label_id;
  if (dst_vertex_label_id) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.graph.EdgeKindPb.dst_vertex_label_id)
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::release_dst_vertex_label_id() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.dst_vertex_label_id_;
  _impl_.dst_vertex_label_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::unsafe_arena_release_dst_vertex_label_id() {
  // @@protoc_insertion_point(field_release:gs.rpc.graph.EdgeKindPb.dst_vertex_label_id)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::gs::rpc::graph::LabelIdPb* temp = _impl_.dst_vertex_label_id_;
  _impl_.dst_vertex_label_id_ = nullptr;
  return temp;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::_internal_mutable_dst_vertex_label_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.dst_vertex_label_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::graph::LabelIdPb>(GetArenaForAllocation());
    _impl_.dst_vertex_label_id_ = p;
  }
  return _impl_.dst_vertex_label_id_;
}
inline ::gs::rpc::graph::LabelIdPb* EdgeKindPb::mutable_dst_vertex_label_id() {
  ::gs::rpc::graph::LabelIdPb* _msg = _internal_mutable_dst_vertex_label_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.graph.EdgeKindPb.dst_vertex_label_id)
  return _msg;
}
inline void EdgeKindPb::set_allocated_dst_vertex_label_id(::gs::rpc::graph::LabelIdPb* dst_vertex_label_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dst_vertex_label_id_;
  }
  if (dst_vertex_label_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dst_vertex_label_id);
    if (message_arena != submessage_arena) {
      dst_vertex_label_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_vertex_label_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.dst_vertex_label_id_ = dst_vertex_label_id;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.graph.EdgeKindPb.dst_vertex_label_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace rpc
}  // namespace gs


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::gs::rpc::graph::GraphTypePb> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::gs::rpc::graph::GraphTypePb>() {
  return ::gs::rpc::graph::GraphTypePb_descriptor();
}
template <>
struct is_proto_enum<::gs::rpc::graph::VertexMapTypePb> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::gs::rpc::graph::VertexMapTypePb>() {
  return ::gs::rpc::graph::VertexMapTypePb_descriptor();
}
template <>
struct is_proto_enum<::gs::rpc::graph::TypeEnumPb> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::gs::rpc::graph::TypeEnumPb>() {
  return ::gs::rpc::graph::TypeEnumPb_descriptor();
}
template <>
struct is_proto_enum<::gs::rpc::graph::DataTypePb> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::gs::rpc::graph::DataTypePb>() {
  return ::gs::rpc::graph::DataTypePb_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_graph_5fdef_2eproto_2epb_2eh
