# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Created by: https://snaptrade.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class PerformanceCustom(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Performance Custom Response Object
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def totalEquityTimeframe() -> typing.Type['PerformanceCustomTotalEquityTimeframe']:
                return PerformanceCustomTotalEquityTimeframe
        
            @staticmethod
            def contributions() -> typing.Type['NetContributions']:
                return NetContributions
        
            @staticmethod
            def contributionTimeframe() -> typing.Type['PerformanceCustomContributionTimeframe']:
                return PerformanceCustomContributionTimeframe
        
            @staticmethod
            def contributionTimeframeCumulative() -> typing.Type['PerformanceCustomContributionTimeframeCumulative']:
                return PerformanceCustomContributionTimeframeCumulative
        
            @staticmethod
            def withdrawalTimeframe() -> typing.Type['PerformanceCustomWithdrawalTimeframe']:
                return PerformanceCustomWithdrawalTimeframe
            
            
            class contributionStreak(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contributionStreak':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class contributionMonthsContributed(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contributionMonthsContributed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class contributionTotalMonths(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contributionTotalMonths':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def dividends() -> typing.Type['PerformanceCustomDividends']:
                return PerformanceCustomDividends
            
            
            class dividendIncome(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dividendIncome':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class monthlyDividends(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'monthlyDividends':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def badTickers() -> typing.Type['PerformanceCustomBadTickers']:
                return PerformanceCustomBadTickers
        
            @staticmethod
            def dividendTimeline() -> typing.Type['PerformanceCustomDividendTimeline']:
                return PerformanceCustomDividendTimeline
            
            
            class commissions(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'commissions':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class forexFees(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'forexFees':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class fees(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fees':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class rateOfReturn(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rateOfReturn':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def returnRateTimeframe() -> typing.Type['PerformanceCustomReturnRateTimeframe']:
                return PerformanceCustomReturnRateTimeframe
            detailedMode = schemas.BoolSchema
            __annotations__ = {
                "totalEquityTimeframe": totalEquityTimeframe,
                "contributions": contributions,
                "contributionTimeframe": contributionTimeframe,
                "contributionTimeframeCumulative": contributionTimeframeCumulative,
                "withdrawalTimeframe": withdrawalTimeframe,
                "contributionStreak": contributionStreak,
                "contributionMonthsContributed": contributionMonthsContributed,
                "contributionTotalMonths": contributionTotalMonths,
                "dividends": dividends,
                "dividendIncome": dividendIncome,
                "monthlyDividends": monthlyDividends,
                "badTickers": badTickers,
                "dividendTimeline": dividendTimeline,
                "commissions": commissions,
                "forexFees": forexFees,
                "fees": fees,
                "rateOfReturn": rateOfReturn,
                "returnRateTimeframe": returnRateTimeframe,
                "detailedMode": detailedMode,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalEquityTimeframe"]) -> 'PerformanceCustomTotalEquityTimeframe': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributions"]) -> 'NetContributions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributionTimeframe"]) -> 'PerformanceCustomContributionTimeframe': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributionTimeframeCumulative"]) -> 'PerformanceCustomContributionTimeframeCumulative': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["withdrawalTimeframe"]) -> 'PerformanceCustomWithdrawalTimeframe': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributionStreak"]) -> MetaOapg.properties.contributionStreak: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributionMonthsContributed"]) -> MetaOapg.properties.contributionMonthsContributed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributionTotalMonths"]) -> MetaOapg.properties.contributionTotalMonths: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dividends"]) -> 'PerformanceCustomDividends': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dividendIncome"]) -> MetaOapg.properties.dividendIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyDividends"]) -> MetaOapg.properties.monthlyDividends: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["badTickers"]) -> 'PerformanceCustomBadTickers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dividendTimeline"]) -> 'PerformanceCustomDividendTimeline': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commissions"]) -> MetaOapg.properties.commissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forexFees"]) -> MetaOapg.properties.forexFees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> MetaOapg.properties.fees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateOfReturn"]) -> MetaOapg.properties.rateOfReturn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["returnRateTimeframe"]) -> 'PerformanceCustomReturnRateTimeframe': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detailedMode"]) -> MetaOapg.properties.detailedMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalEquityTimeframe"], typing_extensions.Literal["contributions"], typing_extensions.Literal["contributionTimeframe"], typing_extensions.Literal["contributionTimeframeCumulative"], typing_extensions.Literal["withdrawalTimeframe"], typing_extensions.Literal["contributionStreak"], typing_extensions.Literal["contributionMonthsContributed"], typing_extensions.Literal["contributionTotalMonths"], typing_extensions.Literal["dividends"], typing_extensions.Literal["dividendIncome"], typing_extensions.Literal["monthlyDividends"], typing_extensions.Literal["badTickers"], typing_extensions.Literal["dividendTimeline"], typing_extensions.Literal["commissions"], typing_extensions.Literal["forexFees"], typing_extensions.Literal["fees"], typing_extensions.Literal["rateOfReturn"], typing_extensions.Literal["returnRateTimeframe"], typing_extensions.Literal["detailedMode"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalEquityTimeframe"]) -> typing.Union['PerformanceCustomTotalEquityTimeframe', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributions"]) -> typing.Union['NetContributions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributionTimeframe"]) -> typing.Union['PerformanceCustomContributionTimeframe', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributionTimeframeCumulative"]) -> typing.Union['PerformanceCustomContributionTimeframeCumulative', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["withdrawalTimeframe"]) -> typing.Union['PerformanceCustomWithdrawalTimeframe', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributionStreak"]) -> typing.Union[MetaOapg.properties.contributionStreak, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributionMonthsContributed"]) -> typing.Union[MetaOapg.properties.contributionMonthsContributed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributionTotalMonths"]) -> typing.Union[MetaOapg.properties.contributionTotalMonths, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dividends"]) -> typing.Union['PerformanceCustomDividends', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dividendIncome"]) -> typing.Union[MetaOapg.properties.dividendIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyDividends"]) -> typing.Union[MetaOapg.properties.monthlyDividends, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["badTickers"]) -> typing.Union['PerformanceCustomBadTickers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dividendTimeline"]) -> typing.Union['PerformanceCustomDividendTimeline', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commissions"]) -> typing.Union[MetaOapg.properties.commissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forexFees"]) -> typing.Union[MetaOapg.properties.forexFees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> typing.Union[MetaOapg.properties.fees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateOfReturn"]) -> typing.Union[MetaOapg.properties.rateOfReturn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["returnRateTimeframe"]) -> typing.Union['PerformanceCustomReturnRateTimeframe', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detailedMode"]) -> typing.Union[MetaOapg.properties.detailedMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalEquityTimeframe"], typing_extensions.Literal["contributions"], typing_extensions.Literal["contributionTimeframe"], typing_extensions.Literal["contributionTimeframeCumulative"], typing_extensions.Literal["withdrawalTimeframe"], typing_extensions.Literal["contributionStreak"], typing_extensions.Literal["contributionMonthsContributed"], typing_extensions.Literal["contributionTotalMonths"], typing_extensions.Literal["dividends"], typing_extensions.Literal["dividendIncome"], typing_extensions.Literal["monthlyDividends"], typing_extensions.Literal["badTickers"], typing_extensions.Literal["dividendTimeline"], typing_extensions.Literal["commissions"], typing_extensions.Literal["forexFees"], typing_extensions.Literal["fees"], typing_extensions.Literal["rateOfReturn"], typing_extensions.Literal["returnRateTimeframe"], typing_extensions.Literal["detailedMode"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        totalEquityTimeframe: typing.Union['PerformanceCustomTotalEquityTimeframe', schemas.Unset] = schemas.unset,
        contributions: typing.Union['NetContributions', schemas.Unset] = schemas.unset,
        contributionTimeframe: typing.Union['PerformanceCustomContributionTimeframe', schemas.Unset] = schemas.unset,
        contributionTimeframeCumulative: typing.Union['PerformanceCustomContributionTimeframeCumulative', schemas.Unset] = schemas.unset,
        withdrawalTimeframe: typing.Union['PerformanceCustomWithdrawalTimeframe', schemas.Unset] = schemas.unset,
        contributionStreak: typing.Union[MetaOapg.properties.contributionStreak, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        contributionMonthsContributed: typing.Union[MetaOapg.properties.contributionMonthsContributed, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        contributionTotalMonths: typing.Union[MetaOapg.properties.contributionTotalMonths, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dividends: typing.Union['PerformanceCustomDividends', schemas.Unset] = schemas.unset,
        dividendIncome: typing.Union[MetaOapg.properties.dividendIncome, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monthlyDividends: typing.Union[MetaOapg.properties.monthlyDividends, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        badTickers: typing.Union['PerformanceCustomBadTickers', schemas.Unset] = schemas.unset,
        dividendTimeline: typing.Union['PerformanceCustomDividendTimeline', schemas.Unset] = schemas.unset,
        commissions: typing.Union[MetaOapg.properties.commissions, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        forexFees: typing.Union[MetaOapg.properties.forexFees, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fees: typing.Union[MetaOapg.properties.fees, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateOfReturn: typing.Union[MetaOapg.properties.rateOfReturn, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        returnRateTimeframe: typing.Union['PerformanceCustomReturnRateTimeframe', schemas.Unset] = schemas.unset,
        detailedMode: typing.Union[MetaOapg.properties.detailedMode, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PerformanceCustom':
        return super().__new__(
            cls,
            *args,
            totalEquityTimeframe=totalEquityTimeframe,
            contributions=contributions,
            contributionTimeframe=contributionTimeframe,
            contributionTimeframeCumulative=contributionTimeframeCumulative,
            withdrawalTimeframe=withdrawalTimeframe,
            contributionStreak=contributionStreak,
            contributionMonthsContributed=contributionMonthsContributed,
            contributionTotalMonths=contributionTotalMonths,
            dividends=dividends,
            dividendIncome=dividendIncome,
            monthlyDividends=monthlyDividends,
            badTickers=badTickers,
            dividendTimeline=dividendTimeline,
            commissions=commissions,
            forexFees=forexFees,
            fees=fees,
            rateOfReturn=rateOfReturn,
            returnRateTimeframe=returnRateTimeframe,
            detailedMode=detailedMode,
            _configuration=_configuration,
            **kwargs,
        )

from snaptrade_client.model.net_contributions import NetContributions
from snaptrade_client.model.performance_custom_bad_tickers import PerformanceCustomBadTickers
from snaptrade_client.model.performance_custom_contribution_timeframe import PerformanceCustomContributionTimeframe
from snaptrade_client.model.performance_custom_contribution_timeframe_cumulative import PerformanceCustomContributionTimeframeCumulative
from snaptrade_client.model.performance_custom_dividend_timeline import PerformanceCustomDividendTimeline
from snaptrade_client.model.performance_custom_dividends import PerformanceCustomDividends
from snaptrade_client.model.performance_custom_return_rate_timeframe import PerformanceCustomReturnRateTimeframe
from snaptrade_client.model.performance_custom_total_equity_timeframe import PerformanceCustomTotalEquityTimeframe
from snaptrade_client.model.performance_custom_withdrawal_timeframe import PerformanceCustomWithdrawalTimeframe
