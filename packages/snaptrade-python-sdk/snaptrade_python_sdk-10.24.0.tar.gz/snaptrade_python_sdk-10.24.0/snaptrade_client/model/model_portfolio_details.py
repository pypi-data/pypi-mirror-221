# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Created by: https://snaptrade.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class ModelPortfolioDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def model_portfolio() -> typing.Type['ModelPortfolio']:
                return ModelPortfolio
        
            @staticmethod
            def model_portfolio_security() -> typing.Type['ModelPortfolioDetailsModelPortfolioSecurity']:
                return ModelPortfolioDetailsModelPortfolioSecurity
        
            @staticmethod
            def model_portfolio_asset_class() -> typing.Type['ModelPortfolioDetailsModelPortfolioAssetClass']:
                return ModelPortfolioDetailsModelPortfolioAssetClass
            __annotations__ = {
                "model_portfolio": model_portfolio,
                "model_portfolio_security": model_portfolio_security,
                "model_portfolio_asset_class": model_portfolio_asset_class,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_portfolio"]) -> 'ModelPortfolio': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_portfolio_security"]) -> 'ModelPortfolioDetailsModelPortfolioSecurity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_portfolio_asset_class"]) -> 'ModelPortfolioDetailsModelPortfolioAssetClass': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["model_portfolio"], typing_extensions.Literal["model_portfolio_security"], typing_extensions.Literal["model_portfolio_asset_class"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_portfolio"]) -> typing.Union['ModelPortfolio', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_portfolio_security"]) -> typing.Union['ModelPortfolioDetailsModelPortfolioSecurity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_portfolio_asset_class"]) -> typing.Union['ModelPortfolioDetailsModelPortfolioAssetClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model_portfolio"], typing_extensions.Literal["model_portfolio_security"], typing_extensions.Literal["model_portfolio_asset_class"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        model_portfolio: typing.Union['ModelPortfolio', schemas.Unset] = schemas.unset,
        model_portfolio_security: typing.Union['ModelPortfolioDetailsModelPortfolioSecurity', schemas.Unset] = schemas.unset,
        model_portfolio_asset_class: typing.Union['ModelPortfolioDetailsModelPortfolioAssetClass', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ModelPortfolioDetails':
        return super().__new__(
            cls,
            *args,
            model_portfolio=model_portfolio,
            model_portfolio_security=model_portfolio_security,
            model_portfolio_asset_class=model_portfolio_asset_class,
            _configuration=_configuration,
            **kwargs,
        )

from snaptrade_client.model.model_portfolio import ModelPortfolio
from snaptrade_client.model.model_portfolio_details_model_portfolio_asset_class import ModelPortfolioDetailsModelPortfolioAssetClass
from snaptrade_client.model.model_portfolio_details_model_portfolio_security import ModelPortfolioDetailsModelPortfolioSecurity
