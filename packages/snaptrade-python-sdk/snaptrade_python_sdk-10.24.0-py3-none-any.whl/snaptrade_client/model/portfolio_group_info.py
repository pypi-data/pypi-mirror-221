# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Created by: https://snaptrade.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class PortfolioGroupInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Summary of all relevant information about a portfolio group.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def symbols() -> typing.Type['PortfolioGroupInfoSymbols']:
                return PortfolioGroupInfoSymbols
        
            @staticmethod
            def quotable_symbols() -> typing.Type['PortfolioGroupInfoQuotableSymbols']:
                return PortfolioGroupInfoQuotableSymbols
        
            @staticmethod
            def balances() -> typing.Type['PortfolioGroupInfoBalances']:
                return PortfolioGroupInfoBalances
        
            @staticmethod
            def positions() -> typing.Type['PortfolioGroupInfoPositions']:
                return PortfolioGroupInfoPositions
        
            @staticmethod
            def target_positions() -> typing.Type['PortfolioGroupInfoTargetPositions']:
                return PortfolioGroupInfoTargetPositions
        
            @staticmethod
            def ideal_positions() -> typing.Type['PortfolioGroupInfoIdealPositions']:
                return PortfolioGroupInfoIdealPositions
        
            @staticmethod
            def excluded_positions() -> typing.Type['PortfolioGroupInfoExcludedPositions']:
                return PortfolioGroupInfoExcludedPositions
        
            @staticmethod
            def calculated_trades() -> typing.Type['PortfolioGroupInfoCalculatedTrades']:
                return PortfolioGroupInfoCalculatedTrades
        
            @staticmethod
            def brokerage_authorizations() -> typing.Type['PortfolioGroupInfoBrokerageAuthorizations']:
                return PortfolioGroupInfoBrokerageAuthorizations
            accuracy = schemas.NumberSchema
        
            @staticmethod
            def settings() -> typing.Type['PortfolioGroupSettings']:
                return PortfolioGroupSettings
            __annotations__ = {
                "symbols": symbols,
                "quotable_symbols": quotable_symbols,
                "balances": balances,
                "positions": positions,
                "target_positions": target_positions,
                "ideal_positions": ideal_positions,
                "excluded_positions": excluded_positions,
                "calculated_trades": calculated_trades,
                "brokerage_authorizations": brokerage_authorizations,
                "accuracy": accuracy,
                "settings": settings,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbols"]) -> 'PortfolioGroupInfoSymbols': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quotable_symbols"]) -> 'PortfolioGroupInfoQuotableSymbols': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balances"]) -> 'PortfolioGroupInfoBalances': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positions"]) -> 'PortfolioGroupInfoPositions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_positions"]) -> 'PortfolioGroupInfoTargetPositions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ideal_positions"]) -> 'PortfolioGroupInfoIdealPositions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excluded_positions"]) -> 'PortfolioGroupInfoExcludedPositions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculated_trades"]) -> 'PortfolioGroupInfoCalculatedTrades': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brokerage_authorizations"]) -> 'PortfolioGroupInfoBrokerageAuthorizations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accuracy"]) -> MetaOapg.properties.accuracy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'PortfolioGroupSettings': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["symbols"], typing_extensions.Literal["quotable_symbols"], typing_extensions.Literal["balances"], typing_extensions.Literal["positions"], typing_extensions.Literal["target_positions"], typing_extensions.Literal["ideal_positions"], typing_extensions.Literal["excluded_positions"], typing_extensions.Literal["calculated_trades"], typing_extensions.Literal["brokerage_authorizations"], typing_extensions.Literal["accuracy"], typing_extensions.Literal["settings"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbols"]) -> typing.Union['PortfolioGroupInfoSymbols', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quotable_symbols"]) -> typing.Union['PortfolioGroupInfoQuotableSymbols', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balances"]) -> typing.Union['PortfolioGroupInfoBalances', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positions"]) -> typing.Union['PortfolioGroupInfoPositions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_positions"]) -> typing.Union['PortfolioGroupInfoTargetPositions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ideal_positions"]) -> typing.Union['PortfolioGroupInfoIdealPositions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excluded_positions"]) -> typing.Union['PortfolioGroupInfoExcludedPositions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculated_trades"]) -> typing.Union['PortfolioGroupInfoCalculatedTrades', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brokerage_authorizations"]) -> typing.Union['PortfolioGroupInfoBrokerageAuthorizations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accuracy"]) -> typing.Union[MetaOapg.properties.accuracy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> typing.Union['PortfolioGroupSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["symbols"], typing_extensions.Literal["quotable_symbols"], typing_extensions.Literal["balances"], typing_extensions.Literal["positions"], typing_extensions.Literal["target_positions"], typing_extensions.Literal["ideal_positions"], typing_extensions.Literal["excluded_positions"], typing_extensions.Literal["calculated_trades"], typing_extensions.Literal["brokerage_authorizations"], typing_extensions.Literal["accuracy"], typing_extensions.Literal["settings"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        symbols: typing.Union['PortfolioGroupInfoSymbols', schemas.Unset] = schemas.unset,
        quotable_symbols: typing.Union['PortfolioGroupInfoQuotableSymbols', schemas.Unset] = schemas.unset,
        balances: typing.Union['PortfolioGroupInfoBalances', schemas.Unset] = schemas.unset,
        positions: typing.Union['PortfolioGroupInfoPositions', schemas.Unset] = schemas.unset,
        target_positions: typing.Union['PortfolioGroupInfoTargetPositions', schemas.Unset] = schemas.unset,
        ideal_positions: typing.Union['PortfolioGroupInfoIdealPositions', schemas.Unset] = schemas.unset,
        excluded_positions: typing.Union['PortfolioGroupInfoExcludedPositions', schemas.Unset] = schemas.unset,
        calculated_trades: typing.Union['PortfolioGroupInfoCalculatedTrades', schemas.Unset] = schemas.unset,
        brokerage_authorizations: typing.Union['PortfolioGroupInfoBrokerageAuthorizations', schemas.Unset] = schemas.unset,
        accuracy: typing.Union[MetaOapg.properties.accuracy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        settings: typing.Union['PortfolioGroupSettings', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'PortfolioGroupInfo':
        return super().__new__(
            cls,
            *args,
            symbols=symbols,
            quotable_symbols=quotable_symbols,
            balances=balances,
            positions=positions,
            target_positions=target_positions,
            ideal_positions=ideal_positions,
            excluded_positions=excluded_positions,
            calculated_trades=calculated_trades,
            brokerage_authorizations=brokerage_authorizations,
            accuracy=accuracy,
            settings=settings,
            _configuration=_configuration,
            **kwargs,
        )

from snaptrade_client.model.portfolio_group_info_balances import PortfolioGroupInfoBalances
from snaptrade_client.model.portfolio_group_info_brokerage_authorizations import PortfolioGroupInfoBrokerageAuthorizations
from snaptrade_client.model.portfolio_group_info_calculated_trades import PortfolioGroupInfoCalculatedTrades
from snaptrade_client.model.portfolio_group_info_excluded_positions import PortfolioGroupInfoExcludedPositions
from snaptrade_client.model.portfolio_group_info_ideal_positions import PortfolioGroupInfoIdealPositions
from snaptrade_client.model.portfolio_group_info_positions import PortfolioGroupInfoPositions
from snaptrade_client.model.portfolio_group_info_quotable_symbols import PortfolioGroupInfoQuotableSymbols
from snaptrade_client.model.portfolio_group_info_symbols import PortfolioGroupInfoSymbols
from snaptrade_client.model.portfolio_group_info_target_positions import PortfolioGroupInfoTargetPositions
from snaptrade_client.model.portfolio_group_settings import PortfolioGroupSettings
