Metadata-Version: 2.1
Name: dnv-bladed-models
Version: 0.3.44
Summary: An API for working with Bladed Next Gen models.
Author: DNV
Author-email: DNV <bladednextgen@dnv.com>
License: MIT License
        
        Copyright (c) 2023 DNV
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: homepage, https://bladednextgen.dnv.com/
Keywords: bladed,models
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE

# Bladed Next Gen Python Models API

`dnv_bladed_models=0.3.44`

A Python package to easily work with JSON input models for Bladed Next Generation.

Visit <https://bladednextgen.dnv.com/> for more information.

## Prerequisites

 - Requires Python 3.7 or above
 
## Usage

Load a JSON model from file:

```python
import dnv_bladed_models as models

analysis = models.BladedAnalysis.from_file('/path/to/analysis.json')
```

Modify a model object in code:

```python
analysis.SteadyCalculation.TipSpeedRatioRange.Minimum = 4.
analysis.SteadyCalculation.TipSpeedRatioRange.Maximum = 10.
analysis.SteadyCalculation.TipSpeedRatioRange.Interval = 0.1
```

Work with a turbine assembly component in the Component Library, in code:

```python
blade: models.Blade = analysis.ComponentDefinitions['Blade']
```

Save a model to a JSON file:

```python
analysis.to_file('/path/to/file.json')
```

Create a new model object programmatically:

```python
beam = models.LidarBeam(
    MountingPosition=models.LidarMountingPosition(
        X=1,
        Y=2,
        Z=3
    )
)
```

Render a model as a JSON string:

```python
json_str = blade.to_json()
```

Load a model from a JSON string:

```python
blade = models.Blade.from_json(json_str)
```

