{"version":3,"file":"chunks/app_views_settings_project_projectReleaseTracking_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/inactivePlugins.tsx","webpack:///./app/components/pluginList.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/project/projectReleaseTracking.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {space} from 'sentry/styles/space';\nimport {Plugin} from 'sentry/types';\n\ntype Props = {\n  onEnablePlugin: (plugin: Plugin) => void;\n  plugins: Plugin[];\n  disabled?: boolean;\n};\n\nfunction InactivePlugins({disabled, plugins, onEnablePlugin}: Props) {\n  if (plugins.length === 0) {\n    return null;\n  }\n\n  return (\n    <Panel>\n      <PanelHeader>{t('Inactive Integrations')}</PanelHeader>\n\n      <PanelBody>\n        <Plugins>\n          {plugins.map(plugin => (\n            <IntegrationButton\n              disabled={disabled}\n              title={\n                disabled ? t('You do not have permission to set up an integration.') : ''\n              }\n              key={plugin.id}\n              onClick={() => onEnablePlugin(plugin)}\n              className={`ref-plugin-enable-${plugin.id}`}\n            >\n              <Label>\n                <StyledPluginIcon pluginId={plugin.id} />\n                <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>\n              </Label>\n            </IntegrationButton>\n          ))}\n        </Plugins>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nconst Plugins = styled('div')`\n  display: flex;\n  padding: ${space(1)};\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst IntegrationButton = styled(Button)`\n  margin: ${space(1)};\n  width: 175px;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: #889ab0;\n  letter-spacing: 0.1px;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: 1px solid #eee;\n  background: inherit;\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 10px;\n\n  &:hover {\n    border-color: #ccc;\n  }\n`;\n\nconst Label = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport default InactivePlugins;\n","import {disablePlugin, enablePlugin} from 'sentry/actionCreators/plugins';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport InactivePlugins from 'sentry/components/inactivePlugins';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport PluginConfig from 'sentry/components/pluginConfig';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\n\ntype Props = {\n  organization: Organization;\n  pluginList: Plugin[];\n  project: Project;\n  onDisablePlugin?: (plugin: Plugin) => void;\n  onEnablePlugin?: (plugin: Plugin) => void;\n};\n\nfunction PluginList({\n  organization,\n  project,\n  pluginList,\n  onDisablePlugin = () => {},\n  onEnablePlugin = () => {},\n}: Props) {\n  const hasWriteAccess = hasEveryAccess(['project:write'], {organization, project});\n\n  const handleEnablePlugin = (plugin: Plugin) => {\n    enablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onEnablePlugin(plugin);\n  };\n\n  const handleDisablePlugin = (plugin: Plugin) => {\n    disablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onDisablePlugin(plugin);\n  };\n\n  if (!pluginList.length) {\n    return (\n      <Panel>\n        <PanelItem>\n          {t(\"Oops! Looks like there aren't any available integrations installed.\")}\n        </PanelItem>\n      </Panel>\n    );\n  }\n\n  return (\n    <div>\n      {pluginList\n        .filter(p => p.enabled)\n        .map(data => (\n          <PluginConfig\n            data={data}\n            organization={organization}\n            project={project}\n            key={data.id}\n            onDisablePlugin={handleDisablePlugin}\n          />\n        ))}\n\n      <InactivePlugins\n        disabled={!hasWriteAccess}\n        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}\n        onEnablePlugin={handleEnablePlugin}\n      />\n    </div>\n  );\n}\n\nexport default PluginList;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {Component} from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends Component<Omit<P, 'plugins'> & WithPluginProps, State> {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Alert} from 'sentry/components/alert';\nimport AutoSelectText from 'sentry/components/autoSelectText';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport PluginList from 'sentry/components/pluginList';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nconst TOKEN_PLACEHOLDER = 'YOUR_TOKEN';\nconst WEBHOOK_PLACEHOLDER = 'YOUR_WEBHOOK_URL';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\n\ntype Props = {\n  organization: Organization;\n  plugins: {loading: boolean; plugins: Plugin[]};\n  project: Project;\n} & RouteComponentProps<{projectId: string}, {}>;\n\ntype State = {\n  data: {\n    token: string;\n    webhookUrl: string;\n  } | null;\n} & DeprecatedAsyncView['state'];\n\nconst placeholderData = {\n  token: TOKEN_PLACEHOLDER,\n  webhookUrl: WEBHOOK_PLACEHOLDER,\n};\n\nclass ProjectReleaseTracking extends DeprecatedAsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Releases'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    // Allow 403s\n    return [\n      [\n        'data',\n        `/projects/${organization.slug}/${projectId}/releases/token/`,\n        {},\n        {allowError: err => err && err.status === 403},\n      ],\n    ];\n  }\n\n  handleRegenerateToken = () => {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n    this.api.request(`/projects/${organization.slug}/${projectId}/releases/token/`, {\n      method: 'POST',\n      data: {project: projectId},\n      success: data => {\n        this.setState({\n          data: {\n            token: data.token,\n            webhookUrl: data.webhookUrl,\n          },\n        });\n        addSuccessMessage(\n          t(\n            'Your deploy token has been regenerated. You will need to update any existing deploy hooks.'\n          )\n        );\n      },\n      error: () => {\n        addErrorMessage(t('Unable to regenerate deploy token, please try again'));\n      },\n    });\n  };\n\n  getReleaseWebhookIntructions() {\n    const {webhookUrl} = this.state.data || placeholderData;\n    return (\n      'curl ' +\n      webhookUrl +\n      ' \\\\' +\n      '\\n  ' +\n      '-X POST \\\\' +\n      '\\n  ' +\n      \"-H 'Content-Type: application/json' \\\\\" +\n      '\\n  ' +\n      '-d \\'{\"version\": \"abcdefg\"}\\''\n    );\n  }\n\n  renderBody() {\n    const {organization, project, plugins} = this.props;\n    const hasWrite = hasEveryAccess(['project:write'], {organization, project});\n\n    if (plugins.loading) {\n      return <LoadingIndicator />;\n    }\n\n    const pluginList = plugins.plugins.filter(\n      (p: Plugin) => p.type === 'release-tracking' && p.hasConfiguration\n    );\n\n    let {token, webhookUrl} = this.state.data || placeholderData;\n\n    token = getDynamicText({value: token, fixed: '__TOKEN__'});\n    webhookUrl = getDynamicText({value: webhookUrl, fixed: '__WEBHOOK_URL__'});\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Release Tracking')} />\n        <TextBlock>\n          {t(\n            'Configure release tracking for this project to automatically record new releases of your application.'\n          )}\n        </TextBlock>\n\n        {!hasWrite && (\n          <Alert type=\"warning\">\n            {t(\n              'You do not have sufficient permissions to access Release tokens, placeholders are displayed below.'\n            )}\n          </Alert>\n        )}\n\n        <Panel>\n          <PanelHeader>{t('Client Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                'Start by binding the [release] attribute in your application, take a look at [link] to see how to configure this for the SDK you are using.',\n                {\n                  link: (\n                    <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=/configuration/releases/\">\n                      our docs\n                    </ExternalLink>\n                  ),\n                  release: <code>release</code>,\n                }\n              )}\n            </p>\n            <p>\n              {t(\n                \"This will annotate each event with the version of your application, as well as automatically create a release entity in the system the first time it's seen.\"\n              )}\n            </p>\n            <p>\n              {t(\n                'In addition you may configure a release hook (or use our API) to push a release and include additional metadata with it.'\n              )}\n            </p>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Deploy Token')}</PanelHeader>\n          <PanelBody>\n            <FieldGroup\n              label={t('Token')}\n              help={t('A unique secret which is used to generate deploy hook URLs')}\n            >\n              <TextCopyInput>{token}</TextCopyInput>\n            </FieldGroup>\n            <FieldGroup\n              label={t('Regenerate Token')}\n              help={t(\n                'If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.'\n              )}\n            >\n              <div>\n                <Confirm\n                  disabled={!hasWrite}\n                  priority=\"danger\"\n                  onConfirm={this.handleRegenerateToken}\n                  message={t(\n                    'Are you sure you want to regenerate your token? Your current token will no longer be usable.'\n                  )}\n                >\n                  <Button priority=\"danger\">{t('Regenerate Token')}</Button>\n                </Confirm>\n              </div>\n            </FieldGroup>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Webhook')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {t(\n                'If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.'\n              )}\n            </p>\n\n            <AutoSelectText>\n              <pre>{webhookUrl}</pre>\n            </AutoSelectText>\n\n            <p>\n              {t(\n                'The release webhook accepts the same parameters as the \"Create a new Release\" API endpoint.'\n              )}\n            </p>\n\n            {getDynamicText({\n              value: (\n                <AutoSelectText>\n                  <pre>{this.getReleaseWebhookIntructions()}</pre>\n                </AutoSelectText>\n              ),\n              fixed: (\n                <pre>\n                  {`curl __WEBHOOK_URL__ \\\\\n  -X POST \\\\\n  -H 'Content-Type: application/json' \\\\\n  -d \\'{\"version\": \"abcdefg\"}\\'`}\n                </pre>\n              ),\n            })}\n          </PanelBody>\n        </Panel>\n\n        <PluginList\n          organization={organization}\n          project={project}\n          pluginList={pluginList}\n        />\n\n        <Panel>\n          <PanelHeader>{t('API')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {t(\n                'You can notify Sentry when you release new versions of your application via our HTTP API.'\n              )}\n            </p>\n\n            <p>\n              {tct('See the [link:releases documentation] for more information.', {\n                link: <ExternalLink href=\"https://docs.sentry.io/workflow/releases/\" />,\n              })}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withPlugins(ProjectReleaseTracking);\n\n// Export for tests\nexport {ProjectReleaseTracking};\n"],"names":["InactivePlugins","_ref","disabled","plugins","onEnablePlugin","length","_jsxs","Panel","children","_jsx","PanelHeader","t","PanelBody","Plugins","map","plugin","IntegrationButton","title","onClick","className","id","Label","StyledPluginIcon","pluginId","TextOverflow","shortName","name","displayName","_styled","target","space","Button","p","theme","fontSizeSmall","borderRadius","styles","PluginIcon","PluginList","organization","project","pluginList","onDisablePlugin","hasWriteAccess","hasEveryAccess","handleDisablePlugin","disablePlugin","projectId","slug","orgId","filter","enabled","data","PluginConfig","isHidden","enablePlugin","PanelItem","routeName","orgSlug","projectSlug","arguments","undefined","tmplBase","tmpl","WrappedComponent","WithPlugins","Component","constructor","_defineProperty","loading","PluginsStore","listen","this","setState","componentDidMount","fetchPlugins","componentDidUpdate","prevProps","_prevState","prevContext","props","prevOrg","prevProject","defined","isOrgSame","isProjectSame","componentWillUnmount","unsubscribe","render","state","getDisplayName","withOrganization","withProject","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","SentryDocumentTitle","renderComponent","placeholderData","token","webhookUrl","ProjectReleaseTracking","params","api","request","method","success","addSuccessMessage","error","addErrorMessage","routeTitleGen","getEndpoints","allowError","err","status","getReleaseWebhookIntructions","renderBody","hasWrite","LoadingIndicator","type","hasConfiguration","getDynamicText","value","fixed","SettingsPageHeader","TextBlock","Alert","withPadding","tct","link","ExternalLink","href","release","FieldGroup","label","help","TextCopyInput","Confirm","priority","onConfirm","handleRegenerateToken","message","AutoSelectText","withPlugins"],"sourceRoot":""}