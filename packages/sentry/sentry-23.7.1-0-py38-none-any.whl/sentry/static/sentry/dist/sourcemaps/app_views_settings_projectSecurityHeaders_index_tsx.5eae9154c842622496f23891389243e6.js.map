{"version":3,"file":"chunks/app_views_settings_projectSecurityHeaders_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"scAWO,MAAMA,GAAgBC,EAAAA,EAAAA,GAAO,KAAI,CAAAC,OAAA,YAAXD,CAAY,+CAGrCE,GAAMA,EAAEC,SAAW,oBAAsB,MAAK,KAG3C,SAASC,EAAgBC,GAA0B,IAAzB,QAACC,EAAO,MAAEC,GAAaF,EACtD,OACEG,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,IAACC,EAAG,CAAAF,SAAEJ,KACNK,EAAAA,EAAAA,IAACE,EAAK,CAAAH,SAAEH,MAGd,CAPgBH,EAAgBU,YAAA,mBAShC,MAAMC,EAAeC,IAAA,IAAC,MAACC,GAAsBD,EAAA,MAAM,gBACtCC,EAAMC,8BACRC,EAAAA,EAAAA,GAAM,QAAQA,EAAAA,EAAAA,GAAM,qDAG7BjB,GAAKA,EAAEe,MAAMG,iEAEOH,EAAMI,2BAE3B,EAEKT,GAAMZ,EAAAA,EAAAA,GAAO,KAAI,CAAAC,OAAA,YAAXD,CACRe,EAAY,WACLb,GAAKA,EAAEe,MAAMK,WAAS,KAG3BT,GAAQb,EAAAA,EAAAA,GAAO,KAAI,CAAAC,OAAA,YAAXD,CACVe,EAAY,WACLb,GAAKA,EAAEe,MAAMM,SAAO,qB,qQCtB/B,MAAMC,EAAanB,IAAA,IAAC,eAACoB,EAAc,WAAEC,GAAkBrB,EAAA,OAAKsB,EAAAA,EAAAA,IAAG,WAClDD,GAAaP,EAAAA,EAAAA,GAAM,IAAKA,EAAAA,EAAAA,GAAM,GAAE,IAAIM,EAAiB,GAAIN,EAAAA,EAAAA,GAAM,GAAE,SAoB9E,GAjBoBnB,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,wEAItBE,GAAMA,EAAE0B,UAAY1B,EAAEe,MAAMY,QAAU3B,EAAEe,MAAMa,SAAQ,eAClD5B,GAAKA,EAAEe,MAAMc,eAAa,sEAGZ7B,GAAKA,EAAEe,MAAMe,QAAM,wBACxB9B,GAAKA,EAAEe,MAAMgB,mBAAiB,iBAC3C/B,GAAKA,EAAEe,MAAMgB,mBAAiB,2BACzB/B,GAAKA,EAAEe,MAAMI,qBAAmB,oCAG5CG,EAAU,I,0DC5Bd,QAZA,SACEU,EACAC,GAGQ,IADRC,EAAoBC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAEpB,MAAMC,EAAY,GAAEN,OAAeC,IAC7BM,EAAOL,EAAe,GAAEI,OAAcJ,IAAgBI,EAE5D,OANmBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAMsBI,EAApB,GAAEA,YACzB,C,4QCGe,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACElC,EAAAA,EAAAA,IAACmC,EAAAA,EAAmB,CAACC,MAAOC,KAAKJ,WAAWlC,SACzCsC,KAAKC,mBAGZ,EAdmBP,EAAmB5B,YAAA,qB,o4BCcxC,MAAMoC,UAA+BR,EAAAA,EACnCS,eACE,MAAM,aAACC,GAAgBJ,KAAKK,OACtB,UAACC,GAAaN,KAAKK,MAAME,OAE/B,MAAO,CAAC,CAAC,UAAY,aAAYH,EAAaI,QAAQF,WACxD,CAEAV,WACE,MAAM,UAACU,GAAaN,KAAKK,MAAME,OAC/B,OAAOE,EAAAA,EAAAA,IAAcC,EAAAA,EAAAA,GAAE,oBAAqBJ,GAAW,EACzD,CAEAK,aACE,MAAO,CACL,CACEC,KAAM,gCACNC,KAAKC,EAAAA,EAAAA,GAAc,OAAQd,KAAKK,QAElC,CACEO,KAAM,uCACNC,KAAKC,EAAAA,EAAAA,GAAc,aAAcd,KAAKK,QAExC,CACEO,KAAM,iCACNC,KAAKC,EAAAA,EAAAA,GAAc,QAASd,KAAKK,QAGvC,CAEAU,aACE,MAAM,aAACX,EAAY,OAAEG,GAAUP,KAAKK,OAC9B,QAACW,GAAWhB,KAAKiB,MACvB,OAAgB,OAAZD,EACK,MAIPxD,EAAAA,EAAAA,IAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,IAACuD,EAAAA,EAAkB,CAACnB,OAAOW,EAAAA,EAAAA,GAAE,8BAE7B/C,EAAAA,EAAAA,IAACwD,EAAAA,EAAS,CACRH,QAASA,EACTV,UAAWC,EAAOD,UAClBc,MAAOhB,EAAaI,QAGtBhD,EAAAA,EAAAA,IAAC6D,EAAAA,EAAK,CAAA3D,SAAA,EACJC,EAAAA,EAAAA,IAAC2D,EAAAA,EAAW,CAAA5D,UAAEgD,EAAAA,EAAAA,GAAE,+BAChBlD,EAAAA,EAAAA,IAAC+D,EAAAA,EAAS,CAACC,aAAW,EAAA9D,SAAA,EACpBC,EAAAA,EAAAA,IAAC8D,EAAAA,EAAS,CAACC,MAAO,CAACC,aAAc,IAAIjE,UAClCkE,EAAAA,EAAAA,IACC,uHACA,CACEC,WAAWlE,EAAAA,EAAAA,IAAA,QAAAD,SAAM,oBAIvBF,EAAAA,EAAAA,IAACT,EAAAA,EAAa,CAAAW,SAAA,EACZC,EAAAA,EAAAA,IAACP,EAAAA,EAAgB,CACfE,QAAQ,qBACRC,OAAOmD,EAAAA,EAAAA,GAAE,8CAEX/C,EAAAA,EAAAA,IAACP,EAAAA,EAAgB,CACfE,QAAQ,iBACRC,OAAOmD,EAAAA,EAAAA,GAAE,+CAMjBlD,EAAAA,EAAAA,IAAC6D,EAAAA,EAAK,CAAA3D,SAAA,EACJC,EAAAA,EAAAA,IAAC2D,EAAAA,EAAW,CAAA5D,UAAEgD,EAAAA,EAAAA,GAAE,wBAChB/C,EAAAA,EAAAA,IAAC4D,EAAAA,EAAS,CAAA7D,SACPsC,KAAKW,aAAamB,KAAIzE,IAAA,IAAC,KAACuD,EAAI,IAAEC,GAAIxD,EAAA,OACjCG,EAAAA,EAAAA,IAACuE,EAAU,CAAArE,SAAA,EACTC,EAAAA,EAAAA,IAACqE,EAAU,CAAAtE,SAAEkD,KACbjD,EAAAA,EAAAA,IAACsE,EAAAA,GAAM,CAACC,GAAIrB,EAAKsB,SAAS,UAASzE,UAChCgD,EAAAA,EAAAA,GAAE,oBAHUG,EAKJ,WAMzB,EAGF,SAAeuB,EAAAA,EAAAA,GAAiBlC,GAE1B6B,GAAa/E,EAAAA,EAAAA,GAAOqF,EAAAA,EAAS,CAAApF,OAAA,aAAhBD,CAAiB,CAAA4D,KAAA,UAAA0B,OAAA,qDAK9BN,GAAahF,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,aAAbD,CAAc,CAAA4D,KAAA,UAAA0B,OAAA,mB,0jBChHjC,MAAMC,EAAmB,kDAElB,SAASC,EAAexB,GAC7B,MAAMyB,EAAWzB,EAAQ1B,OAAS0B,EAAQ,GAAG0B,IAAIC,SAAWJ,EAC5D,OAAOK,EAAAA,EAAAA,GAAe,CACpBrF,MAAOkF,EACPI,MAAON,GAEX,CAQe,SAASpB,EAAS9D,GAAqC,IAApC,QAAC2D,EAAO,MAAEI,EAAK,UAAEd,GAAiBjD,EAClE,OACEG,EAAAA,EAAAA,IAAC6D,EAAAA,EAAK,CAAA3D,SAAA,EACJC,EAAAA,EAAAA,IAAC2D,EAAAA,EAAW,CAAA5D,UAAEgD,EAAAA,EAAAA,GAAE,iBAChBlD,EAAAA,EAAAA,IAAC+D,EAAAA,EAAS,CAAA7D,SAAA,EACRC,EAAAA,EAAAA,IAACmF,EAAAA,EAAU,CAACC,KAAK,OAAMrF,UACpBkE,EAAAA,EAAAA,IACC,sFACA,CACEoB,MAAMrF,EAAAA,EAAAA,IAACsF,EAAAA,EAAI,CAACf,GAAK,aAAYd,cAAkBd,iBAIrD3C,EAAAA,EAAAA,IAACuF,EAAAA,EAAU,CAACC,QAAQ,EAAOC,0BAAwB,EAAA1F,UACjDC,EAAAA,EAAAA,IAAC0F,EAAAA,EAAa,CAAA3F,SAAE8E,EAAexB,YAKzC,CAnBwBG,EAASrD,YAAA,W","sources":["webpack:///./app/components/keyValueTable.tsx","webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/index.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {Theme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  keyName: React.ReactNode;\n  value: React.ReactNode;\n};\n\nexport const KeyValueTable = styled('dl')<{noMargin?: boolean}>`\n  display: grid;\n  grid-template-columns: 50% 50%;\n  ${p => (p.noMargin ? 'margin-bottom: 0;' : null)}\n`;\n\nexport function KeyValueTableRow({keyName, value}: Props) {\n  return (\n    <Fragment>\n      <Key>{keyName}</Key>\n      <Value>{value}</Value>\n    </Fragment>\n  );\n}\n\nconst commonStyles = ({theme}: {theme: Theme}) => `\nfont-size: ${theme.fontSizeMedium};\npadding: ${space(0.5)} ${space(1)};\nfont-weight: normal;\nline-height: inherit;\n${p => p.theme.overflowEllipsis};\n&:nth-of-type(2n-1) {\n  background-color: ${theme.backgroundSecondary};\n}\n`;\n\nconst Key = styled('dt')`\n  ${commonStyles};\n  color: ${p => p.theme.textColor};\n`;\n\nconst Value = styled('dd')`\n  ${commonStyles};\n  color: ${p => p.theme.subText};\n  text-align: right;\n`;\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {KeyValueTable, KeyValueTableRow} from 'sentry/components/keyValueTable';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, ProjectKey} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport ReportUri from 'sentry/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{projectId: string}, {}>;\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & DeprecatedAsyncView['state'];\n\nclass ProjectSecurityHeaders extends DeprecatedAsyncView<Props, State> {\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    return [['keyList', `/projects/${organization.slug}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Security Headers'), projectId, false);\n  }\n\n  getReports() {\n    return [\n      {\n        name: 'Content Security Policy (CSP)',\n        url: recreateRoute('csp/', this.props),\n      },\n      {\n        name: 'Certificate Transparency (Expect-CT)',\n        url: recreateRoute('expect-ct/', this.props),\n      },\n      {\n        name: 'HTTP Public Key Pinning (HPKP)',\n        url: recreateRoute('hpkp/', this.props),\n      },\n    ];\n  }\n\n  renderBody() {\n    const {organization, params} = this.props;\n    const {keyList} = this.state;\n    if (keyList === null) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Security Header Reports')} />\n\n        <ReportUri\n          keyList={keyList}\n          projectId={params.projectId}\n          orgId={organization.slug}\n        />\n\n        <Panel>\n          <PanelHeader>{t('Additional Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <TextBlock style={{marginBottom: 20}}>\n              {tct(\n                'In addition to the [key_param] parameter, you may also pass the following within the querystring for the report URI:',\n                {\n                  key_param: <code>sentry_key</code>,\n                }\n              )}\n            </TextBlock>\n            <KeyValueTable>\n              <KeyValueTableRow\n                keyName=\"sentry_environment\"\n                value={t('The environment name (e.g. production).')}\n              />\n              <KeyValueTableRow\n                keyName=\"sentry_release\"\n                value={t('The version of the application.')}\n              />\n            </KeyValueTable>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Supported Formats')}</PanelHeader>\n          <PanelBody>\n            {this.getReports().map(({name, url}) => (\n              <ReportItem key={url}>\n                <HeaderName>{name}</HeaderName>\n                <Button to={url} priority=\"primary\">\n                  {t('Instructions')}\n                </Button>\n              </ReportItem>\n            ))}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(ProjectSecurityHeaders);\n\nconst ReportItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst HeaderName = styled('span')`\n  font-size: 1.2em;\n`;\n","import FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Link from 'sentry/components/links/link';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelAlert from 'sentry/components/panels/panelAlert';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <FieldGroup inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </FieldGroup>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"names":["KeyValueTable","_styled","target","p","noMargin","KeyValueTableRow","_ref","keyName","value","_jsxs","Fragment","children","_jsx","Key","Value","displayName","commonStyles","_ref2","theme","fontSizeMedium","space","overflowEllipsis","backgroundSecondary","textColor","subText","getPadding","disablePadding","hasButtons","css","lightText","gray300","gray400","fontSizeSmall","border","panelBorderRadius","routeName","orgSlug","projectSlug","arguments","length","undefined","tmplBase","tmpl","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","ProjectSecurityHeaders","getEndpoints","organization","props","projectId","params","slug","routeTitleGen","t","getReports","name","url","recreateRoute","renderBody","keyList","state","SettingsPageHeader","ReportUri","orgId","Panel","PanelHeader","PanelBody","withPadding","TextBlock","style","marginBottom","tct","key_param","map","ReportItem","HeaderName","Button","to","priority","withOrganization","PanelItem","styles","DEFAULT_ENDPOINT","getSecurityDsn","endpoint","dsn","security","getDynamicText","fixed","PanelAlert","type","link","Link","FieldGroup","inline","flexibleControlStateSize","TextCopyInput"],"sourceRoot":""}