{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/data/forms/accountPassword.tsx","webpack:///./app/views/settings/account/accountSecurity/components/twoFactorRequired.tsx","webpack:///./app/views/settings/account/passwordForm.tsx","webpack:///./app/views/settings/account/accountSecurity/index.tsx"],"sourcesContent":["import {Link as RouterLink} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\nimport useRouter from 'sentry/utils/useRouter';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = LinkProps & {\n  /**\n   * Link target. We don't want to expose the ToLocationFunction on this component.\n   */\n  to: LocationDescriptor;\n  /**\n   * The class to apply when the link is 'active'\n   */\n  activeClassName?: string;\n  disabled?: boolean;\n  index?: boolean;\n  /**\n   * Should be should be supplied by the parent component\n   */\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  query?: string;\n};\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const router = useRouter();\n  const queryData = query ? qs.parse(query) : undefined;\n  const targetLocation = typeof to === 'string' ? {pathname: to, query: queryData} : to;\n  const target = normalizeUrl(targetLocation);\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : target}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default ListLink;\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\n\nconst getUserIsNotManaged = ({user}) => !user.isManaged;\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Password',\n    fields: [\n      {\n        name: 'password',\n        type: 'secret',\n        autoComplete: 'current-password',\n        label: t('Current Password'),\n        help: t('Your current password'),\n        placeholder: '',\n        visible: getUserIsNotManaged,\n        required: true,\n      },\n      {\n        name: 'passwordNew',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: t('New Password'),\n        placeholder: '',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => (form[id] !== form.passwordVerify ? [[id, '']] : []),\n      },\n      {\n        name: 'passwordVerify',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: t('Verify New Password'),\n        help: t('Verify your new password'),\n        placeholder: '',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => {\n          // If password is set, and passwords don't match, then return an error\n          if (form.passwordNew && form.passwordNew !== form[id]) {\n            return [[id, t('Passwords do not match')]];\n          }\n\n          return [];\n        },\n      },\n    ],\n  },\n];\n\nexport const route = '/settings/account/security/';\nexport default formGroups;\n","import styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport getPendingInvite from 'sentry/utils/getPendingInvite';\n\nfunction TwoFactorRequired() {\n  return !getPendingInvite() ? null : (\n    <StyledAlert data-test-id=\"require-2fa\" type=\"error\" showIcon>\n      {tct(\n        'You have been invited to an organization that requires [link:two-factor authentication]. Setup two-factor authentication below to join your organization.',\n        {\n          link: <ExternalLink href=\"https://docs.sentry.io/accounts/require-2fa/\" />,\n        }\n      )}\n    </StyledAlert>\n  );\n}\n\nconst StyledAlert = styled(Alert)`\n  margin: ${space(3)} 0;\n`;\n\nexport default TwoFactorRequired;\n","import styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport PanelAlert from 'sentry/components/panels/panelAlert';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport accountPasswordFields from 'sentry/data/forms/accountPassword';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\n\ntype OnSubmitSuccess = Parameters<NonNullable<FormProps['onSubmitSuccess']>>;\n\nfunction PasswordForm() {\n  function handleSubmitSuccess(_change: OnSubmitSuccess[0], model: OnSubmitSuccess[1]) {\n    // Reset form on success\n    model.resetForm();\n    addSuccessMessage('Password has been changed');\n  }\n\n  function handleSubmitError() {\n    addErrorMessage('Error changing password');\n  }\n\n  const user = ConfigStore.get('user');\n\n  return (\n    <Form\n      apiMethod=\"PUT\"\n      apiEndpoint=\"/users/me/password/\"\n      initialData={{}}\n      onSubmitSuccess={handleSubmitSuccess}\n      onSubmitError={handleSubmitError}\n      hideFooter\n    >\n      <JsonForm\n        forms={accountPasswordFields}\n        additionalFieldProps={{user}}\n        renderFooter={() => (\n          <Actions>\n            <Button type=\"submit\" priority=\"primary\">\n              {t('Change password')}\n            </Button>\n          </Actions>\n        )}\n        renderHeader={() => (\n          <PanelAlert type=\"info\">\n            {t('Changing your password will invalidate all logged in sessions.')}\n          </PanelAlert>\n        )}\n      />\n    </Form>\n  );\n}\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nexport default PasswordForm;\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {openEmailVerification} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport ListLink from 'sentry/components/links/listLink';\nimport NavTabs from 'sentry/components/navTabs';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Authenticator, OrganizationSummary} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport RemoveConfirm from 'sentry/views/settings/account/accountSecurity/components/removeConfirm';\nimport TwoFactorRequired from 'sentry/views/settings/account/accountSecurity/components/twoFactorRequired';\nimport PasswordForm from 'sentry/views/settings/account/passwordForm';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = {\n  authenticators: Authenticator[] | null;\n  countEnrolled: number;\n  deleteDisabled: boolean;\n  handleRefresh: () => void;\n  hasVerifiedEmail: boolean;\n  onDisable: (auth: Authenticator) => void;\n  orgsRequire2fa: OrganizationSummary[];\n} & DeprecatedAsyncView['props'] &\n  RouteComponentProps<{}, {}>;\n\n/**\n * Lists 2fa devices + password change form\n */\nclass AccountSecurity extends DeprecatedAsyncView<Props> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    return [];\n  }\n\n  handleSessionClose = async () => {\n    try {\n      await this.api.requestPromise('/auth/', {\n        method: 'DELETE',\n        data: {all: true},\n      });\n      window.location.assign('/auth/login/');\n    } catch (err) {\n      addErrorMessage(t('There was a problem closing all sessions'));\n      throw err;\n    }\n  };\n\n  formatOrgSlugs = () => {\n    const {orgsRequire2fa} = this.props;\n    const slugs = orgsRequire2fa.map(({slug}) => slug);\n\n    return [slugs.slice(0, -1).join(', '), slugs.slice(-1)[0]].join(\n      slugs.length > 1 ? ' and ' : ''\n    );\n  };\n\n  handleAdd2FAClicked = () => {\n    const {handleRefresh} = this.props;\n    openEmailVerification({\n      onClose: () => {\n        handleRefresh();\n      },\n      actionMessage: 'enrolling a 2FA device',\n    });\n  };\n\n  renderBody() {\n    const {authenticators, countEnrolled, deleteDisabled, onDisable, hasVerifiedEmail} =\n      this.props;\n    const isEmpty = !authenticators?.length;\n\n    return (\n      <div>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={recreateRoute('', this.props)} index>\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('session-history/', this.props)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        {!isEmpty && countEnrolled === 0 && <TwoFactorRequired />}\n\n        <PasswordForm />\n\n        <Panel>\n          <PanelHeader>{t('Sessions')}</PanelHeader>\n          <PanelBody>\n            <FieldGroup\n              alignRight\n              flexibleControlStateSize\n              label={t('Sign out of all devices')}\n              help={t(\n                'Signing out of all devices will sign you out of this device as well.'\n              )}\n            >\n              <Button onClick={this.handleSessionClose}>\n                {t('Sign out of all devices')}\n              </Button>\n            </FieldGroup>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Two-Factor Authentication')}</PanelHeader>\n\n          {isEmpty && (\n            <EmptyMessage>{t('No available authenticators to add')}</EmptyMessage>\n          )}\n\n          <PanelBody>\n            {!isEmpty &&\n              authenticators?.map(auth => {\n                const {\n                  id,\n                  authId,\n                  description,\n                  isBackupInterface,\n                  isEnrolled,\n                  disallowNewEnrollment,\n                  configureButton,\n                  name,\n                } = auth;\n                if (disallowNewEnrollment && !isEnrolled) {\n                  return null;\n                }\n                return (\n                  <AuthenticatorPanelItem key={id}>\n                    <AuthenticatorHeader>\n                      <AuthenticatorTitle>\n                        <AuthenticatorStatus\n                          role=\"status\"\n                          aria-label={\n                            isEnrolled\n                              ? t('Authentication Method Active')\n                              : t('Authentication Method Inactive')\n                          }\n                          enabled={isEnrolled}\n                        />\n                        <AuthenticatorName>{name}</AuthenticatorName>\n                      </AuthenticatorTitle>\n\n                      <Actions>\n                        {!isBackupInterface && !isEnrolled && hasVerifiedEmail && (\n                          <Button\n                            to={`/settings/account/security/mfa/${id}/enroll/`}\n                            size=\"sm\"\n                            priority=\"primary\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n                        {!isBackupInterface && !isEnrolled && !hasVerifiedEmail && (\n                          <Button\n                            onClick={this.handleAdd2FAClicked}\n                            size=\"sm\"\n                            priority=\"primary\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n\n                        {isEnrolled && authId && (\n                          <Button\n                            to={`/settings/account/security/mfa/${authId}/`}\n                            size=\"sm\"\n                          >\n                            {configureButton}\n                          </Button>\n                        )}\n\n                        {!isBackupInterface && isEnrolled && (\n                          <Tooltip\n                            title={t(\n                              `Two-factor authentication is required for organization(s): %s.`,\n                              this.formatOrgSlugs()\n                            )}\n                            disabled={!deleteDisabled}\n                          >\n                            <RemoveConfirm\n                              onConfirm={() => onDisable(auth)}\n                              disabled={deleteDisabled}\n                            >\n                              <Button\n                                size=\"sm\"\n                                aria-label={t('Delete')}\n                                icon={<IconDelete />}\n                              />\n                            </RemoveConfirm>\n                          </Tooltip>\n                        )}\n                      </Actions>\n\n                      {isBackupInterface && !isEnrolled ? t('requires 2FA') : null}\n                    </AuthenticatorHeader>\n\n                    <Description>{description}</Description>\n                  </AuthenticatorPanelItem>\n                );\n              })}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst AuthenticatorName = styled('span')`\n  font-size: 1.2em;\n`;\n\nconst AuthenticatorPanelItem = styled(PanelItem)`\n  flex-direction: column;\n`;\n\nconst AuthenticatorHeader = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst AuthenticatorTitle = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n`;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-right: ${space(1)};\n`;\n\nconst Description = styled(TextBlock)`\n  margin-top: ${space(2)};\n  margin-bottom: 0;\n`;\n\nexport default AccountSecurity;\n"],"names":["ListLink","_ref","children","className","isActive","query","to","activeClassName","index","disabled","props","router","useRouter","queryData","qs","undefined","targetLocation","pathname","target","normalizeUrl","active","_jsx","StyledLi","classNames","RouterLink","onlyActiveOnIndex","displayName","_styled","shouldForwardProp","prop","p","theme","getUserIsNotManaged","user","isManaged","formGroups","title","fields","name","type","autoComplete","label","t","help","placeholder","visible","required","validate","_ref2","id","form","passwordVerify","_ref3","passwordNew","route","StyledAlert","Alert","space","getPendingInvite","showIcon","tct","link","ExternalLink","href","PasswordForm","ConfigStore","get","Form","apiMethod","apiEndpoint","initialData","onSubmitSuccess","_change","model","resetForm","addSuccessMessage","onSubmitError","addErrorMessage","hideFooter","JsonForm","forms","accountPasswordFields","additionalFieldProps","renderFooter","Actions","Button","priority","renderHeader","PanelAlert","PanelItem","styles","AccountSecurity","DeprecatedAsyncView","constructor","arguments","_defineProperty","async","this","api","requestPromise","method","data","all","window","location","assign","err","orgsRequire2fa","slugs","map","slug","slice","join","length","handleRefresh","openEmailVerification","onClose","actionMessage","getTitle","getEndpoints","renderBody","authenticators","countEnrolled","deleteDisabled","onDisable","hasVerifiedEmail","isEmpty","_jsxs","SettingsPageHeader","tabs","NavTabs","underlined","recreateRoute","TwoFactorRequired","Panel","PanelHeader","PanelBody","FieldGroup","alignRight","flexibleControlStateSize","onClick","handleSessionClose","EmptyMessage","auth","authId","description","isBackupInterface","isEnrolled","disallowNewEnrollment","configureButton","AuthenticatorPanelItem","AuthenticatorHeader","AuthenticatorTitle","AuthenticatorStatus","role","enabled","AuthenticatorName","size","handleAdd2FAClicked","Tooltip","formatOrgSlugs","RemoveConfirm","onConfirm","icon","IconDelete","Description","CircleIndicator","TextBlock"],"sourceRoot":""}