{"version":3,"file":"chunks/app_gettingStartedDocs_dotnet_aspnetcore_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"mqBAWO,MAAMA,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IAAI,sCAAuC,CAC1CC,QAAQH,EAAAA,EAAAA,IAAA,iBAIdI,eAAgB,CACd,CACEC,SAAU,QACVN,aAAaO,EAAAA,EAAAA,GAAE,oBACfC,KAAM,qDAER,CACEF,SAAU,QACVN,aAAaO,EAAAA,EAAAA,GAAE,qBACfC,KAAM,oDAIZ,CACEX,KAAMC,EAAAA,GAASW,UACfT,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,mFACA,CACEO,aAAaT,EAAAA,EAAAA,IAAA,WACbU,aAAaV,EAAAA,EAAAA,IAAA,eAKrBI,eAAgB,CACd,CACEC,SAAU,SACVE,KAAO,+QAQUf,uXAYvB,CACEI,KAAMC,EAAAA,GAASc,OACfZ,aAAaO,EAAAA,EAAAA,GAAE,kEACfF,eAAgB,CACd,CACEC,SAAU,SACVE,KAAM,8CAGVK,gBACEZ,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,kKACA,CACEK,MAAMP,EAAAA,EAAAA,IAAA,WACNa,MACEb,EAAAA,EAAAA,IAACc,EAAAA,EAAY,CAACC,KAAK,iFAO/B,CACEC,OAAOV,EAAAA,EAAAA,GAAE,0BACTP,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,iGACA,CACEK,MAAMP,EAAAA,EAAAA,IAAA,eAKdI,eAAgB,CACd,CACEC,SAAU,SACVE,KAAO,qyBA6BT,CACER,aAAaO,EAAAA,EAAAA,GACX,gIAEFD,SAAU,SACVE,KAAO,6pBAgCb,CACES,OAAOV,EAAAA,EAAAA,GAAE,WACTP,aACEkB,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAjB,SAAA,EACNK,EAAAA,EAAAA,GACC,iGAEFW,EAAAA,EAAAA,IAACE,EAAAA,EAAI,CAACC,OAAO,SAAQnB,SAAA,EACnBD,EAAAA,EAAAA,IAACqB,EAAAA,EAAQ,CAAApB,UACNC,EAAAA,EAAAA,IACC,4EACA,CACEW,MACEb,EAAAA,EAAAA,IAACc,EAAAA,EAAY,CAACC,KAAK,iEAErBR,MAAMP,EAAAA,EAAAA,IAAA,WACNG,QAAQH,EAAAA,EAAAA,IAAA,kBAIdA,EAAAA,EAAAA,IAACqB,EAAAA,EAAQ,CAAApB,UACNC,EAAAA,EAAAA,IAAI,uCAAwC,CAC3CW,MAAMb,EAAAA,EAAAA,IAACc,EAAAA,EAAY,CAACC,KAAK,2CACzBZ,QAAQH,EAAAA,EAAAA,IAAA,kBAGZA,EAAAA,EAAAA,IAACqB,EAAAA,EAAQ,CAAApB,UACNC,EAAAA,EAAAA,IAAI,yCAA0C,CAC7CW,MAAMb,EAAAA,EAAAA,IAACc,EAAAA,EAAY,CAACC,KAAK,4CACzBZ,QAAQH,EAAAA,EAAAA,IAAA,wBAOrB,EAGM,SAASsB,EAA4BC,GAA+B,IAA9B,IAAC/B,KAAQgC,GAAmBD,EACvE,OAAOvB,EAAAA,EAAAA,IAACyB,EAAAA,EAAM,CAAClC,MAAOA,EAAM,CAACC,WAAWgC,GAC1C,CAFgBF,EAA4BI,YAAA,+BAI5C,S","sources":["webpack:///./app/gettingStartedDocs/dotnet/aspnetcore.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct('Install the [strong:NuGet] package:', {\n          strong: <strong />,\n        })}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'shell',\n        description: t('Package Manager:'),\n        code: 'Install-Package Sentry.AspNetCore -Version 3.34.0',\n      },\n      {\n        language: 'shell',\n        description: t('Or .NET Core CLI:'),\n        code: 'dotnet add package Sentry.AspNetCore -v 3.34.0',\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          'Add Sentry to [programCode:Program.cs] through the [webHostCode:WebHostBuilder]:',\n          {\n            webHostCode: <code />,\n            programCode: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'csharp',\n        code: `\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n  Host.CreateDefaultBuilder(args)\n      .ConfigureWebHostDefaults(webBuilder =>\n      {\n          // Add the following line:\n          webBuilder.UseSentry(o =>\n          {\n              o.Dsn = \"${dsn}\";\n              // When configuring for the first time, to see what the SDK is doing:\n              o.Debug = true;\n              // Set TracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n              // We recommend adjusting this value in production.\n              o.TracesSampleRate = 1.0;\n          });\n      });\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t('To verify your set up, you can capture a message with the SDK:'),\n    configurations: [\n      {\n        language: 'csharp',\n        code: 'SentrySdk.CaptureMessage(\"Hello Sentry\");',\n      },\n    ],\n    additionalInfo: (\n      <p>\n        {tct(\n          \"If you don't want to depend on the static class, the SDK registers a client in the DI container. In this case, you can [link:take [code:IHub] as a dependency].\",\n          {\n            code: <code />,\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/dotnet/guides/aspnetcore/unit-testing/\" />\n            ),\n          }\n        )}\n      </p>\n    ),\n  },\n  {\n    title: t('Performance Monitoring'),\n    description: (\n      <p>\n        {tct(\n          'You can measure the performance of your endpoints by adding a middleware to [code:Startup.cs]:',\n          {\n            code: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'csharp',\n        code: `\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Sentry.AspNetCore;\n\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseRouting();\n\n        // Enable automatic tracing integration.\n        // If running with .NET 5 or below, make sure to put this middleware\n        // right after \"UseRouting()\".\n        app.UseSentryTracing();\n\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllerRoute(\n                name: \"default\",\n                pattern: \"{controller=Home}/{action=Index}/{id?}\");\n        });\n    }\n}\n        `,\n      },\n      {\n        description: t(\n          \"You'll be able to monitor the performance of your actions automatically. To add additional spans to it, you can use the API:\"\n        ),\n        language: 'csharp',\n        code: `\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing Sentry;\n\npublic class HomeController : Controller\n{\n    private readonly IHub _sentryHub;\n\n    public HomeController(IHub sentryHub) => _sentryHub = sentryHub;\n\n    [HttpGet(\"/person/{id}\")]\n    public IActionResult Person(string id)\n    {\n        var childSpan = _sentryHub.GetSpan()?.StartChild(\"additional-work\");\n        try\n        {\n            // Do the work that gets measured.\n\n            childSpan?.Finish(SpanStatus.Ok);\n        }\n        catch (Exception e)\n        {\n            childSpan?.Finish(e);\n            throw;\n        }\n    }\n}\n        `,\n      },\n    ],\n  },\n  {\n    title: t('Samples'),\n    description: (\n      <Fragment>\n        {t(\n          'See the following examples that demonstrate how to integrate Sentry with various frameworks.'\n        )}\n        <List symbol=\"bullet\">\n          <ListItem>\n            {tct(\n              '[link:Multiple samples in the [code:dotnet] SDK repository] [strong:(C#)]',\n              {\n                link: (\n                  <ExternalLink href=\"https://github.com/getsentry/sentry-dotnet/tree/main/samples\" />\n                ),\n                code: <code />,\n                strong: <strong />,\n              }\n            )}\n          </ListItem>\n          <ListItem>\n            {tct('[link:Basic F# sample] [strong:(F#)]', {\n              link: <ExternalLink href=\"https://github.com/sentry-demos/fsharp\" />,\n              strong: <strong />,\n            })}\n          </ListItem>\n          <ListItem>\n            {tct('[link:Giraffe F# sample] [strong:(F#)]', {\n              link: <ExternalLink href=\"https://github.com/sentry-demos/giraffe\" />,\n              strong: <strong />,\n            })}\n          </ListItem>\n        </List>\n      </Fragment>\n    ),\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithAspnetcore({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} {...props} />;\n}\n\nexport default GettingStartedWithAspnetcore;\n"],"names":["steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","_jsx","children","tct","strong","configurations","language","t","code","CONFIGURE","webHostCode","programCode","VERIFY","additionalInfo","link","ExternalLink","href","title","_jsxs","Fragment","List","symbol","ListItem","GettingStartedWithAspnetcore","_ref","props","Layout","displayName"],"sourceRoot":""}