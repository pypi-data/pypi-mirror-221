{"version":3,"file":"chunks/app_views_projectInstall_newProject_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeAnalytics/useRouteAnalyticsEventNames.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/views/projectInstall/newProject.tsx","webpack:///./app/views/projects/gettingStartedWithProjectContext.tsx"],"sourcesContent":["import {useContext, useEffect} from 'react';\n\nimport {RouteAnalyticsContext} from 'sentry/views/routeAnalyticsContextProvider';\n\n/**\n * This hook provides custom analytics event names for route based analytics.\n * @param eventKey The key used to identify the event\n * @param eventName The English string used as the event name\n */\nexport default function useRouteAnalyticsEventNames(eventKey: string, eventName: string) {\n  const {setEventNames, previousUrl} = useContext(RouteAnalyticsContext);\n  useEffect(() => {\n    setEventNames(eventKey, eventName);\n  }, [setEventNames, eventKey, eventName, previousUrl]);\n}\n","/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import {Fragment, useCallback, useContext, useMemo, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport omit from 'lodash/omit';\nimport startCase from 'lodash/startCase';\nimport {PlatformIcon} from 'platformicons';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openCreateTeamModal, openModal} from 'sentry/actionCreators/modal';\nimport Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport Input from 'sentry/components/input';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {SupportedLanguages} from 'sentry/components/onboarding/frameworkSuggestionModal';\nimport PlatformPicker, {Platform} from 'sentry/components/platformPicker';\nimport {useProjectCreationAccess} from 'sentry/components/projects/useProjectCreationAccess';\nimport TeamSelector from 'sentry/components/teamSelector';\nimport {IconAdd} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {space} from 'sentry/styles/space';\nimport {OnboardingSelectedSDK, Team} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useRouteAnalyticsEventNames from 'sentry/utils/routeAnalytics/useRouteAnalyticsEventNames';\nimport slugify from 'sentry/utils/slugify';\nimport useApi from 'sentry/utils/useApi';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useTeams} from 'sentry/utils/useTeams';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport IssueAlertOptions, {\n  MetricValues,\n  RuleAction,\n} from 'sentry/views/projectInstall/issueAlertOptions';\nimport {GettingStartedWithProjectContext} from 'sentry/views/projects/gettingStartedWithProjectContext';\n\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\nfunction CreateProject() {\n  const api = useApi();\n  const organization = useOrganization();\n  const location = useLocation();\n  const gettingStartedWithProjectContext = useContext(GettingStartedWithProjectContext);\n  const {teams} = useTeams();\n\n  const autoFill =\n    location.query.referrer === 'getting-started' &&\n    location.query.project === gettingStartedWithProjectContext.project?.id;\n\n  const accessTeams = teams.filter((team: Team) => team.access.includes('team:admin'));\n\n  useRouteAnalyticsEventNames(\n    'project_creation_page.viewed',\n    'Project Create: Creation page viewed'\n  );\n\n  const [projectName, setProjectName] = useState(\n    autoFill ? gettingStartedWithProjectContext.project?.name : ''\n  );\n  const [platform, setPlatform] = useState<OnboardingSelectedSDK | undefined>(\n    autoFill ? gettingStartedWithProjectContext.project?.platform : undefined\n  );\n  const [team, setTeam] = useState(\n    autoFill\n      ? gettingStartedWithProjectContext.project?.teamSlug ?? accessTeams?.[0]?.slug\n      : accessTeams?.[0]?.slug\n  );\n\n  const [errors, setErrors] = useState(false);\n  const [inFlight, setInFlight] = useState(false);\n\n  const [alertRuleConfig, setAlertRuleConfig] = useState<IssueAlertFragment | undefined>(\n    undefined\n  );\n\n  const frameworkSelectionEnabled = !!organization?.features.includes(\n    'onboarding-sdk-selection'\n  );\n\n  const createProject = useCallback(\n    async (selectedFramework?: OnboardingSelectedSDK) => {\n      const {slug} = organization;\n      const {\n        shouldCreateCustomRule,\n        name,\n        conditions,\n        actions,\n        actionMatch,\n        frequency,\n        defaultRules,\n      } = alertRuleConfig || {};\n\n      const selectedPlatform = selectedFramework ?? platform;\n\n      if (!selectedPlatform) {\n        addErrorMessage(t('Please select a platform in Step 1'));\n        return;\n      }\n\n      setInFlight(true);\n\n      try {\n        const url = team\n          ? `/teams/${slug}/${team}/projects/`\n          : `/organizations/${slug}/experimental/projects/`;\n        const projectData = await api.requestPromise(url, {\n          method: 'POST',\n          data: {\n            name: projectName,\n            platform: selectedPlatform.key,\n            default_rules: defaultRules ?? true,\n          },\n        });\n\n        let ruleId: string | undefined;\n        if (shouldCreateCustomRule) {\n          const ruleData = await api.requestPromise(\n            `/projects/${organization.slug}/${projectData.slug}/rules/`,\n            {\n              method: 'POST',\n              data: {\n                name,\n                conditions,\n                actions,\n                actionMatch,\n                frequency,\n              },\n            }\n          );\n          ruleId = ruleData.id;\n        }\n        trackAnalytics('project_creation_page.created', {\n          organization,\n          issue_alert: defaultRules\n            ? 'Default'\n            : shouldCreateCustomRule\n            ? 'Custom'\n            : 'No Rule',\n          project_id: projectData.id,\n          rule_id: ruleId || '',\n        });\n\n        ProjectsStore.onCreateSuccess(projectData, organization.slug);\n\n        if (team) {\n          addSuccessMessage(\n            tct('Created project [project]', {\n              project: `${projectData.slug}`,\n            })\n          );\n        } else {\n          addSuccessMessage(\n            tct('Created [project] under new team [team]', {\n              project: `${projectData.slug}`,\n              team: `#${projectData.team_slug}`,\n            })\n          );\n        }\n\n        browserHistory.push(\n          normalizeUrl(\n            `/organizations/${organization.slug}/projects/${projectData.slug}/getting-started/`\n          )\n        );\n      } catch (err) {\n        setInFlight(false);\n        setErrors(err.responseJSON);\n        addErrorMessage(\n          tct('Failed to create project [project]', {\n            project: `${projectName}`,\n          })\n        );\n\n        // Only log this if the error is something other than:\n        // * The user not having access to create a project, or,\n        // * A project with that slug already exists\n        if (err.status !== 403 && err.status !== 409) {\n          Sentry.withScope(scope => {\n            scope.setExtra('err', err);\n            Sentry.captureMessage('Project creation failed');\n          });\n        }\n      }\n    },\n    [api, alertRuleConfig, organization, platform, projectName, team]\n  );\n\n  const handleProjectCreation = useCallback(async () => {\n    const selectedPlatform = platform;\n\n    if (!selectedPlatform) {\n      addErrorMessage(t('Please select a platform in Step 1'));\n      return;\n    }\n\n    if (\n      selectedPlatform.type !== 'language' ||\n      !Object.values(SupportedLanguages).includes(\n        selectedPlatform.language as SupportedLanguages\n      )\n    ) {\n      createProject();\n      return;\n    }\n\n    const {FrameworkSuggestionModal, modalCss} = await import(\n      'sentry/components/onboarding/frameworkSuggestionModal'\n    );\n\n    openModal(\n      deps => (\n        <FrameworkSuggestionModal\n          {...deps}\n          organization={organization}\n          selectedPlatform={selectedPlatform}\n          onConfigure={selectedFramework => {\n            createProject(selectedFramework);\n          }}\n          onSkip={createProject}\n        />\n      ),\n      {\n        modalCss,\n        onClose: () => {\n          trackAnalytics('project_creation.select_framework_modal_close_button_clicked', {\n            platform: selectedPlatform.key,\n            organization,\n          });\n        },\n      }\n    );\n  }, [platform, createProject, organization]);\n\n  function handlePlatformChange(selectedPlatform: Platform | null) {\n    if (!selectedPlatform?.id) {\n      setPlatform(undefined);\n      setProjectName('');\n      return;\n    }\n\n    const userModifiedName = !!projectName && projectName !== platform?.key;\n    const newName = userModifiedName ? projectName : selectedPlatform.id;\n\n    setPlatform({\n      ...omit(selectedPlatform, 'id'),\n      key: selectedPlatform.id,\n    });\n\n    setProjectName(newName);\n  }\n\n  const {shouldCreateCustomRule, conditions} = alertRuleConfig || {};\n  const {canCreateProject} = useProjectCreationAccess({organization, teams: accessTeams});\n\n  const canCreateTeam = organization.access.includes('project:admin');\n  const isOrgMemberWithNoAccess = accessTeams.length === 0 && !canCreateTeam;\n\n  const canSubmitForm =\n    !inFlight &&\n    (team || isOrgMemberWithNoAccess) &&\n    canCreateProject &&\n    projectName !== '' &&\n    (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value));\n\n  const alertFrequencyDefaultValues = useMemo(() => {\n    if (!autoFill) {\n      return {};\n    }\n\n    const alertRules = gettingStartedWithProjectContext.project?.alertRules;\n\n    if (alertRules?.length === 0) {\n      return {\n        alertSetting: String(RuleAction.CREATE_ALERT_LATER),\n      };\n    }\n\n    if (\n      alertRules?.[0].conditions?.[0].id?.endsWith('EventFrequencyCondition') ||\n      alertRules?.[0].conditions?.[0].id?.endsWith('EventUniqueUserFrequencyCondition')\n    ) {\n      return {\n        alertSetting: String(RuleAction.CUSTOMIZED_ALERTS),\n        interval: String(alertRules?.[0].conditions?.[0].interval),\n        threshold: String(alertRules?.[0].conditions?.[0].value),\n        metric: alertRules?.[0].conditions?.[0].id?.endsWith('EventFrequencyCondition')\n          ? MetricValues.ERRORS\n          : MetricValues.USERS,\n      };\n    }\n\n    return {\n      alertSetting: String(RuleAction.ALERT_ON_EVERY_ISSUE),\n    };\n  }, [gettingStartedWithProjectContext, autoFill]);\n\n  const createProjectForm = (\n    <Fragment>\n      <Layout.Title withMargins>\n        {t('3. Name your project and assign it a team')}\n      </Layout.Title>\n      <CreateProjectForm\n        onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\n          // Prevent the page from reloading\n          event.preventDefault();\n          frameworkSelectionEnabled ? handleProjectCreation() : createProject();\n        }}\n      >\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInputWrap>\n            <StyledPlatformIcon platform={platform?.key ?? 'other'} size={20} />\n            <ProjectNameInput\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('project-name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => setProjectName(slugify(e.target.value))}\n            />\n          </ProjectNameInputWrap>\n        </div>\n        {!isOrgMemberWithNoAccess && (\n          <div>\n            <FormLabel>{t('Team')}</FormLabel>\n            <TeamSelectInput>\n              <TeamSelector\n                name=\"select-team\"\n                aria-label={t('Select a Team')}\n                menuPlacement=\"auto\"\n                clearable={false}\n                value={team}\n                placeholder={t('Select a Team')}\n                onChange={choice => setTeam(choice.value)}\n                teamFilter={(tm: Team) => tm.access.includes('team:admin')}\n              />\n              {canCreateTeam && (\n                <Button\n                  borderless\n                  data-test-id=\"create-team\"\n                  icon={<IconAdd isCircled />}\n                  onClick={() =>\n                    openCreateTeamModal({\n                      organization,\n                      onClose: ({slug}) => setTeam(slug),\n                    })\n                  }\n                  title={t('Create a team')}\n                  aria-label={t('Create a team')}\n                />\n              )}\n            </TeamSelectInput>\n          </div>\n        )}\n        <div>\n          <Button\n            type=\"submit\"\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    </Fragment>\n  );\n\n  return (\n    <Access access={canCreateProject ? ['project:read'] : ['project:admin']}>\n      <div data-test-id=\"onboarding-info\">\n        <Layout.Title withMargins>{t('Create a new project in 3 steps')}</Layout.Title>\n        <HelpText>\n          {tct(\n            'Set up a separate project for each part of your application (for example, your API server and frontend client), to quickly pinpoint which part of your application errors are coming from. [link: Read the docs].',\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/sentry-basics/integrate-frontend/create-new-project/\" />\n              ),\n            }\n          )}\n        </HelpText>\n        <Layout.Title withMargins>{t('1. Choose your platform')}</Layout.Title>\n        <PlatformPicker\n          platform={platform?.key}\n          defaultCategory={platform?.category}\n          setPlatform={handlePlatformChange}\n          organization={organization}\n          showOther\n          noAutoFilter\n        />\n        <IssueAlertOptions\n          {...alertFrequencyDefaultValues}\n          onChange={updatedData => setAlertRuleConfig(updatedData)}\n        />\n        {createProjectForm}\n\n        {errors && (\n          <Alert type=\"error\">\n            {Object.keys(errors).map(key => (\n              <div key={key}>\n                <strong>{startCase(key)}</strong>: {errors[key]}\n              </div>\n            ))}\n          </Alert>\n        )}\n      </div>\n    </Access>\n  );\n}\n\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px minmax(250px, max-content) max-content;\n  gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst ProjectNameInputWrap = styled('div')`\n  position: relative;\n`;\n\nconst ProjectNameInput = styled(Input)`\n  padding-left: calc(${p => p.theme.formPadding.md.paddingLeft}px * 1.5 + 20px);\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  position: absolute;\n  top: 50%;\n  left: ${p => p.theme.formPadding.md.paddingLeft}px;\n  transform: translateY(-50%);\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import styled from '@emotion/styled';\n\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {space} from 'sentry/styles/space';\n\nimport {CreateProject} from './createProject';\n\nfunction NewProject() {\n  return (\n    <SentryDocumentTitle>\n      <Container>\n        <div className=\"container\">\n          <Content>\n            <CreateProject />\n          </Content>\n        </div>\n      </Container>\n    </SentryDocumentTitle>\n  );\n}\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n","import {createContext, useCallback} from 'react';\n\nimport {OnboardingSelectedSDK, Project} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {useSessionStorage} from 'sentry/utils/useSessionStorage';\n\ntype GettingStartedWithProject = Pick<Project, 'name' | 'id'> & {\n  alertRules: IssueAlertRule[];\n  platform: OnboardingSelectedSDK;\n  teamSlug?: Project['team']['slug'];\n};\n\nexport type ProjectsContextProps = {\n  setProject: (project: GettingStartedWithProject) => void;\n  project?: GettingStartedWithProject;\n};\n\nexport const GettingStartedWithProjectContext = createContext<ProjectsContextProps>({\n  project: undefined,\n  setProject: () => {},\n});\n\ntype ProviderProps = {\n  children: React.ReactNode;\n  project?: GettingStartedWithProject;\n};\n\nexport function GettingStartedWithProjectContextProvider({\n  children,\n  project,\n}: ProviderProps) {\n  const [sessionStorage, setSessionStorage] = useSessionStorage<{\n    project?: GettingStartedWithProject;\n  }>('getting-started-with-project', {\n    project,\n  });\n\n  const handleSetProject = useCallback(\n    (newProject?: GettingStartedWithProject) => {\n      setSessionStorage({project: newProject});\n    },\n    [setSessionStorage]\n  );\n\n  return (\n    <GettingStartedWithProjectContext.Provider\n      value={{\n        project: sessionStorage.project,\n        setProject: handleSetProject,\n      }}\n    >\n      {children}\n    </GettingStartedWithProjectContext.Provider>\n  );\n}\n"],"names":["useRouteAnalyticsEventNames","eventKey","eventName","setEventNames","previousUrl","useContext","RouteAnalyticsContext","useEffect","slugify","str","normalize","toLowerCase","replace","CreateProject","api","useApi","organization","useOrganization","location","useLocation","gettingStartedWithProjectContext","GettingStartedWithProjectContext","teams","useTeams","autoFill","query","referrer","project","id","accessTeams","filter","team","access","includes","projectName","setProjectName","useState","name","platform","setPlatform","undefined","setTeam","teamSlug","slug","errors","setErrors","inFlight","setInFlight","alertRuleConfig","setAlertRuleConfig","frameworkSelectionEnabled","features","createProject","useCallback","async","shouldCreateCustomRule","conditions","actions","actionMatch","frequency","defaultRules","selectedPlatform","selectedFramework","url","projectData","requestPromise","method","data","key","default_rules","ruleId","trackAnalytics","issue_alert","project_id","rule_id","ProjectsStore","onCreateSuccess","addSuccessMessage","tct","team_slug","browserHistory","push","normalizeUrl","err","responseJSON","addErrorMessage","status","Sentry","scope","setExtra","t","handleProjectCreation","type","Object","values","SupportedLanguages","language","FrameworkSuggestionModal","modalCss","openModal","deps","_jsx","onConfigure","onSkip","onClose","canCreateProject","useProjectCreationAccess","canCreateTeam","isOrgMemberWithNoAccess","length","canSubmitForm","every","condition","value","alertFrequencyDefaultValues","useMemo","alertRules","alertSetting","String","RuleAction","CREATE_ALERT_LATER","endsWith","CUSTOMIZED_ALERTS","interval","threshold","metric","MetricValues","ERRORS","USERS","ALERT_ON_EVERY_ISSUE","createProjectForm","_jsxs","Fragment","children","Layout","withMargins","CreateProjectForm","onSubmit","event","preventDefault","FormLabel","ProjectNameInputWrap","StyledPlatformIcon","size","ProjectNameInput","placeholder","autoComplete","onChange","e","target","TeamSelectInput","TeamSelector","menuPlacement","clearable","choice","teamFilter","tm","Button","borderless","icon","IconAdd","isCircled","onClick","openCreateTeamModal","_ref","title","priority","disabled","Access","HelpText","link","ExternalLink","href","PlatformPicker","defaultCategory","category","newName","omit","showOther","noAutoFilter","IssueAlertOptions","updatedData","Alert","keys","map","startCase","displayName","_styled","space","p","theme","background","fontSizeExtraLarge","styles","Input","formPadding","md","paddingLeft","PlatformIcon","subText","NewProject","SentryDocumentTitle","Container","className","Content","createContext","setProject","GettingStartedWithProjectContextProvider","sessionStorage","setSessionStorage","useSessionStorage","handleSetProject","newProject","Provider"],"sourceRoot":""}