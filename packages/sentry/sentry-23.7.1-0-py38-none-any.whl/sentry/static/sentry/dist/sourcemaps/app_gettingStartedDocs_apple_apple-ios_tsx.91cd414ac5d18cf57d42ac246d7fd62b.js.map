{"version":3,"file":"chunks/app_gettingStartedDocs_apple_apple-ios_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"ijBAOO,MAAMA,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,mVACA,CACEC,kBACEH,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,oDAErBC,YAAYN,EAAAA,EAAAA,IAAA,iBAKpBO,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,6DAIT,CACEV,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,sIACA,CACEQ,cAAcV,EAAAA,EAAAA,IAAA,eAKtBQ,SAAU,QACVC,KAAO,4FAMb,CACEb,KAAMC,EAAAA,GAASc,UACfZ,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,+KACA,CACEU,aAAaZ,EAAAA,EAAAA,IAAA,eAKrBO,eAAgB,CACd,CACEC,SAAU,QACVC,KAAO,gPASUjB,+UAYnB,CACEO,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,+IACA,CACEW,aACEb,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,qEAM7BG,SAAU,QACVC,KAAO,sIAOcjB,yVAa3B,CACEI,KAAMC,EAAAA,GAASiB,OACff,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,6KACA,CACEa,gBAAgBf,EAAAA,EAAAA,IAAA,eAKxBO,eAAgB,CACd,CACEC,SAAU,QACVC,KAAO,mXAcb,CACEO,OAAOC,EAAAA,EAAAA,GAAE,yBACTlB,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,uaACA,CACEgB,IACElB,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,sFAErBc,MACEnB,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,kIAErBe,WACEpB,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,oFAErBgB,mBACErB,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,8HAErBiB,kBACEtB,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,sGAErBkB,IAAIvB,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,qDACvBmB,OAAOxB,EAAAA,EAAAA,IAAA,aAKfO,eAAgB,CACd,CACEC,SAAU,QACVC,KAAO,qVAiBd,EAEYgB,EAAY,CACvB,CACEC,GAAI,qBACJC,MAAMV,EAAAA,EAAAA,GAAE,sBACRlB,aAAakB,EAAAA,EAAAA,GACX,iFAEFW,KAAM,mDAER,CACEF,GAAI,gBACJC,MAAMV,EAAAA,EAAAA,GAAE,iBACRlB,aAAakB,EAAAA,EAAAA,GAAE,mEACfW,KAAM,gDAER,CACEF,GAAI,UACJC,MAAMV,EAAAA,EAAAA,GAAE,WACRlB,aAAakB,EAAAA,EAAAA,GAAE,yDACfW,KAAM,+FAER,CACEF,GAAI,YACJC,MAAMV,EAAAA,EAAAA,GAAE,aACRlB,aAAakB,EAAAA,EAAAA,GACX,kFAEFW,KAAM,sDAKH,SAASC,EAAqBC,GAA+B,IAA9B,IAACtC,KAAQuC,GAAmBD,EAChE,OAAO9B,EAAAA,EAAAA,IAACgC,EAAAA,EAAM,CAACzC,MAAOA,EAAM,CAACC,QAAOiC,UAAWA,KAAeM,GAChE,CAFgBF,EAAqBI,YAAA,wBAIrC,S","sources":["webpack:///./app/gettingStartedDocs/apple/apple-ios.tsx"],"sourcesContent":["import ExternalLink from 'sentry/components/links/externalLink';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct(\n          'We recommend installing the SDK with Swift Package Manager (SPM), but we also support [alternateMethods: alternate installation methods]. To integrate Sentry into your Xcode project using SPM, open your App in Xcode and open [addPackage: File > Add Packages]. Then add the SDK by entering the Git repo url in the top right search field:',\n          {\n            alternateMethods: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/apple/install/\" />\n            ),\n            addPackage: <strong />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'text',\n        code: `\nhttps://github.com/getsentry/sentry-cocoa.git\n        `,\n      },\n      {\n        description: (\n          <p>\n            {tct(\n              'Alternatively, when your project uses a [packageSwift: Package.swift] file to manage dependencies, you can specify the target with:',\n              {\n                packageSwift: <code />,\n              }\n            )}\n          </p>\n        ),\n        language: 'swift',\n        code: `\n.package(url: \"https://github.com/getsentry/sentry-cocoa\", from: \"8.9.2\"),\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          'Make sure you initialize the SDK as soon as possible in your application lifecycle e.g. in your AppDelegate [appDelegate: application:didFinishLaunchingWithOptions] method:',\n          {\n            appDelegate: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'swift',\n        code: `\nimport Sentry\n\n// ....\n\nfunc application(_ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n    SentrySDK.start { options in\n        options.dsn = \"${dsn}\"\n        options.debug = true // Enabled debug when first installing is always helpful\n\n        // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n        // We recommend adjusting this value in production.\n        options.tracesSampleRate = 1.0\n    }\n\n    return true\n}\n        `,\n      },\n      {\n        description: (\n          <p>\n            {tct(\n              \"When using SwiftUI and your app doesn't implement an app delegate, initialize the SDK within the [initializer: App conformer's initializer]:\",\n              {\n                initializer: (\n                  <ExternalLink href=\"https://developer.apple.com/documentation/swiftui/app/main()\" />\n                ),\n              }\n            )}\n          </p>\n        ),\n        language: 'swift',\n        code: `\nimport Sentry\n\n@main\nstruct SwiftUIApp: App {\n    init() {\n        SentrySDK.start { options in\n            options.dsn = \"${dsn}\"\n            options.debug = true // Enabled debug when first installing is always helpful\n\n            // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n            // We recommend adjusting this value in production.\n            options.tracesSampleRate = 1.0\n        }\n    }\n}\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: (\n      <p>\n        {tct(\n          'This snippet contains an intentional error you can use to test that errors are uploaded to Sentry correctly. You can add it to your main [viewController: ViewController].',\n          {\n            viewController: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'swift',\n        code: `\nlet button = UIButton(type: .roundedRect)\nbutton.frame = CGRect(x: 20, y: 50, width: 100, height: 30)\nbutton.setTitle(\"Break the world\", for: [])\nbutton.addTarget(self, action: #selector(self.breakTheWorld(_:)), for: .touchUpInside)\nview.addSubview(button)\n\n@IBAction func breakTheWorld(_ sender: AnyObject) {\n    fatalError(\"Break the world\")\n}\n        `,\n      },\n    ],\n  },\n  {\n    title: t('Experimental Features'),\n    description: (\n      <p>\n        {tct(\n          'Want to play with some new features? Try out our experimental features for [vh: View Hierarchy], [ttfd: Time to Full Display (TTFD)], [metricKit: MetricKit], [prewarmedAppStart: Prewarmed App Start Tracing], and [asyncStacktraces: Swift Async Stacktraces]. Experimental features are still a work-in-progress and may have bugs. We recognize the irony. [break] Let us know if you have feedback through [gh: GitHub issues].',\n          {\n            vh: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/apple/guides/ios/enriching-events/viewhierarchy/\" />\n            ),\n            ttfd: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/apple/guides/ios/performance/instrumentation/automatic-instrumentation/#time-to-full-display\" />\n            ),\n            metricKit: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/apple/guides/watchos/configuration/metric-kit/\" />\n            ),\n            prewarmedAppStart: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/apple/performance/instrumentation/automatic-instrumentation/#prewarmed-app-start-tracing\" />\n            ),\n            asyncStacktraces: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/apple/guides/ios/#stitch-together-swift-concurrency-stack-traces\" />\n            ),\n            gh: <ExternalLink href=\"https://github.com/getsentry/sentry-cocoa/issues\" />,\n            break: <br />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'swift',\n        code: `\nimport Sentry\n\nSentrySDK.start { options in\n    // ...\n\n    // Enable all experimental features\n    options.attachViewHierarchy = true\n    options.enablePreWarmedAppStartTracing = true\n    options.enableMetricKit = true\n    options.enableTimeToFullDisplayTracing = true\n    options.swiftAsyncStacktraces = true\n}\n        `,\n      },\n    ],\n  },\n];\n\nexport const nextSteps = [\n  {\n    id: 'cocoapods-carthage',\n    name: t('CocoaPods/Carthage'),\n    description: t(\n      'Learn about integrating Sentry into your project using CocoaPods or Carthage.'\n    ),\n    link: 'https://docs.sentry.io/platforms/apple/install/',\n  },\n  {\n    id: 'debug-symbols',\n    name: t('Debug Symbols'),\n    description: t('Symbolicate and get readable stacktraces in your Sentry errors.'),\n    link: 'https://docs.sentry.io/platforms/apple/dsym/',\n  },\n  {\n    id: 'swiftui',\n    name: t('SwiftUI'),\n    description: t('Learn about our first class integration with SwiftUI.'),\n    link: 'https://docs.sentry.io/platforms/apple/performance/instrumentation/swiftui-instrumentation/',\n  },\n  {\n    id: 'profiling',\n    name: t('Profiling'),\n    description: t(\n      'Collect and analyze performance profiles from real user devices in production.'\n    ),\n    link: 'https://docs.sentry.io/platforms/apple/profiling/',\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithIos({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} nextSteps={nextSteps} {...props} />;\n}\n\nexport default GettingStartedWithIos;\n"],"names":["steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","_jsx","children","tct","alternateMethods","ExternalLink","href","addPackage","configurations","language","code","packageSwift","CONFIGURE","appDelegate","initializer","VERIFY","viewController","title","t","vh","ttfd","metricKit","prewarmedAppStart","asyncStacktraces","gh","break","nextSteps","id","name","link","GettingStartedWithIos","_ref","props","Layout","displayName"],"sourceRoot":""}