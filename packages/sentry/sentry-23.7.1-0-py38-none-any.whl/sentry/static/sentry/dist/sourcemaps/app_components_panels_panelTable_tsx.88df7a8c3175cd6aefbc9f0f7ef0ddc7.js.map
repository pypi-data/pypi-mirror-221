{"version":3,"file":"chunks/app_components_panels_panelTable_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"ioBAiEA,SAASA,EAAUC,GAYC,IAZA,QAClBC,EAAO,SACPC,EAAQ,UACRC,EAAS,QACTC,EAAO,eACPC,EAAc,UACdC,EAAS,aACTC,GAAeC,EAAAA,EAAAA,GAAE,iCAAgC,YACjDC,EAAW,OACXC,EAAM,cACNC,GAAgB,KACbC,GACaZ,EAChB,MAAMa,GAAkC,IAAdV,EACpBW,GAA0BD,GAAqBT,EAC/CW,GAAqBF,IAAsBC,EAEjD,OACEE,EAAAA,EAAAA,IAACC,EAAO,CACNC,QAASjB,EAAQkB,OACjBd,eAAgBA,EAChBC,UAAWA,EACXc,QAASL,KACLH,EAAKV,SAAA,CAERD,EAAQoB,KAAI,CAACC,EAAQC,KACpBC,EAAAA,EAAAA,IAACC,EAAgB,CAASC,OAAQf,EAAe,eAAa,eAAcT,SACzEoB,GADoBC,KAKxBV,IACCW,EAAAA,EAAAA,IAACG,EAAc,CAAAzB,SAAEQ,IAAUc,EAAAA,EAAAA,IAACI,EAAAA,EAAgB,MAG7Cd,IACCE,EAAAA,EAAAA,IAACa,EAAsB,CAAA3B,SAAA,EACrBsB,EAAAA,EAAAA,IAAA,KAAAtB,SAAIK,IACHE,KAIJM,GAAqBe,EAAW5B,KAGvC,CAEA,SAAS4B,EAAW5B,GAClB,MAAwB,mBAAbA,EACFA,IAGFA,CACT,CArDSH,EAAUgC,YAAA,aAgEnB,MAAMJ,GAAiBK,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,IAE9BH,GAAyBG,EAAAA,EAAAA,GAAOE,EAAAA,EAAiB,CAAAD,OAAA,aAAxBD,CAAyB,IAElDf,GAAUe,EAAAA,EAAAA,GAAOG,EAAAA,EAAK,CAC1BC,kBAAmBC,GAAkB,iBAANA,IAAkBC,EAAAA,EAAAA,GAAYD,IAAY,YAANA,EAAeJ,OAAA,aADpED,CAEd,8CAEgCK,GAAKA,EAAEnB,SAAO,eAG1CmB,GAAMA,EAAEhC,eAAiB,GAAM,aAAWkC,EAAAA,EAAAA,GAAM,OAAM,0BAEjCF,GAAMA,EAAEjB,QAAUiB,EAAEnB,QAAU,EAAI,GAAE,8BAC9BmB,GAAKA,EAAEG,MAAMC,QAAM,OAI9CZ,EAAsB,KAAOF,EAAc,uCAElBU,GAAKA,EAAEnB,SAAO,oBAOhCO,GAAmBO,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,UAClCK,GAAKA,EAAEG,MAAME,SAAO,eAChBL,GAAKA,EAAEG,MAAMG,eAAa,4DAGtBN,GAAKA,EAAEG,MAAMI,cAAY,KAAIP,GAAKA,EAAEG,MAAMI,cAAY,oBACzDP,GAAKA,EAAEG,MAAMK,qBAAmB,6FAO5CR,GACAA,EAAEX,QACD,sDAGUW,EAAEG,MAAMM,OAAOC,gBAC3B,KAGH,G","sources":["webpack:///./app/components/panels/panelTable.tsx"],"sourcesContent":["import isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\nimport Panel from './panel';\n\nexport type PanelTableProps = {\n  /**\n   * Headers of the table.\n   */\n  headers: React.ReactNode[];\n  /**\n   * The body of the table. Make sure the number of children elements are\n   * multiples of the length of headers.\n   */\n  children?: React.ReactNode | (() => React.ReactNode);\n  className?: string;\n  /**\n   * Renders without predefined padding on the header and body cells\n   */\n  disablePadding?: boolean;\n  /**\n   * Action to display when isEmpty is true\n   */\n  emptyAction?: React.ReactNode;\n  /**\n   * Message to use for `<EmptyStateWarning>`\n   */\n  emptyMessage?: React.ReactNode;\n  /**\n   * Displays an `<EmptyStateWarning>` if true\n   */\n  isEmpty?: boolean;\n  /**\n   * If this is true, then display a loading indicator\n   */\n  isLoading?: boolean;\n  /**\n   * A custom loading indicator.\n   */\n  loader?: React.ReactNode;\n  /**\n   * If true, scrolling headers out of view will pin to the top of container.\n   */\n  stickyHeaders?: boolean;\n};\n\n/**\n * Bare bones table generates a CSS grid template based on the content.\n *\n * The number of children elements should be a multiple of `this.props.columns` to have\n * it look ok.\n *\n *\n * Potential customizations:\n * - [ ] Add borders for columns to make them more like cells\n * - [ ] Add prop to disable borders for rows\n * - [ ] We may need to wrap `children` with our own component (similar to what we're doing\n *       with `headers`. Then we can get rid of that gross `> *` selector\n * - [ ] Allow customization of wrappers (Header and body cells if added)\n */\nfunction PanelTable({\n  headers,\n  children,\n  isLoading,\n  isEmpty,\n  disablePadding,\n  className,\n  emptyMessage = t('There are no items to display'),\n  emptyAction,\n  loader,\n  stickyHeaders = false,\n  ...props\n}: PanelTableProps) {\n  const shouldShowLoading = isLoading === true;\n  const shouldShowEmptyMessage = !shouldShowLoading && isEmpty;\n  const shouldShowContent = !shouldShowLoading && !shouldShowEmptyMessage;\n\n  return (\n    <Wrapper\n      columns={headers.length}\n      disablePadding={disablePadding}\n      className={className}\n      hasRows={shouldShowContent}\n      {...props}\n    >\n      {headers.map((header, i) => (\n        <PanelTableHeader key={i} sticky={stickyHeaders} data-test-id=\"table-header\">\n          {header}\n        </PanelTableHeader>\n      ))}\n\n      {shouldShowLoading && (\n        <LoadingWrapper>{loader || <LoadingIndicator />}</LoadingWrapper>\n      )}\n\n      {shouldShowEmptyMessage && (\n        <TableEmptyStateWarning>\n          <p>{emptyMessage}</p>\n          {emptyAction}\n        </TableEmptyStateWarning>\n      )}\n\n      {shouldShowContent && getContent(children)}\n    </Wrapper>\n  );\n}\n\nfunction getContent(children: PanelTableProps['children']) {\n  if (typeof children === 'function') {\n    return children();\n  }\n\n  return children;\n}\n\ntype WrapperProps = {\n  /**\n   * The number of columns the table will have, this is derived from the headers list\n   */\n  columns: number;\n  disablePadding: PanelTableProps['disablePadding'];\n  hasRows: boolean;\n};\n\nconst LoadingWrapper = styled('div')``;\n\nconst TableEmptyStateWarning = styled(EmptyStateWarning)``;\n\nconst Wrapper = styled(Panel, {\n  shouldForwardProp: p => typeof p === 'string' && isPropValid(p) && p !== 'columns',\n})<WrapperProps>`\n  display: grid;\n  grid-template-columns: repeat(${p => p.columns}, auto);\n\n  > * {\n    ${p => (p.disablePadding ? '' : `padding: ${space(2)};`)}\n\n    &:nth-last-child(n + ${p => (p.hasRows ? p.columns + 1 : 0)}) {\n      border-bottom: 1px solid ${p => p.theme.border};\n    }\n  }\n\n  > ${TableEmptyStateWarning}, > ${LoadingWrapper} {\n    border: none;\n    grid-column: auto / span ${p => p.columns};\n  }\n\n  /* safari needs an overflow value or the contents will spill out */\n  overflow: auto;\n`;\n\nexport const PanelTableHeader = styled('div')<{sticky: boolean}>`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-radius: ${p => p.theme.borderRadius} ${p => p.theme.borderRadius} 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-height: 45px;\n\n  ${p =>\n    p.sticky &&\n    `\n    position: sticky;\n    top: 0;\n    z-index: ${p.theme.zIndex.initial};\n  `}\n`;\n\nexport default PanelTable;\n"],"names":["PanelTable","_ref","headers","children","isLoading","isEmpty","disablePadding","className","emptyMessage","t","emptyAction","loader","stickyHeaders","props","shouldShowLoading","shouldShowEmptyMessage","shouldShowContent","_jsxs","Wrapper","columns","length","hasRows","map","header","i","_jsx","PanelTableHeader","sticky","LoadingWrapper","LoadingIndicator","TableEmptyStateWarning","getContent","displayName","_styled","target","EmptyStateWarning","Panel","shouldForwardProp","p","isPropValid","space","theme","border","subText","fontSizeSmall","borderRadius","backgroundSecondary","zIndex","initial"],"sourceRoot":""}