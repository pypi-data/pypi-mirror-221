{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionReplays_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/performance/transactionSummary/transactionReplays/useReplaysFromTransaction.tsx","webpack:///./app/views/performance/transactionSummary/transactionReplays/useReplaysWithTxData.tsx","webpack:///./app/views/performance/transactionSummary/transactionReplays/transactionReplays.tsx","webpack:///./app/views/performance/transactionSummary/transactionReplays/index.tsx"],"sourcesContent":["import {useCallback, useEffect, useMemo, useState} from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport type {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT} from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\nimport {getReplayListFields} from 'sentry/views/replays/types';\n\ntype Options = {\n  location: Location;\n  organization: Organization;\n  replayIdsEventView: EventView;\n};\n\nexport type EventSpanData = {\n  'count()': number;\n  replayId: string;\n  'span_ops_breakdown.relative': string;\n  'spans.browser': null | number;\n  'spans.db': null | number;\n  'spans.http': null | number;\n  'spans.resource': null | number;\n  'spans.ui': null | number;\n  timestamp: string;\n  trace: string;\n  'transaction.duration': number;\n};\n\ntype Return = {\n  data: null | {\n    events: EventSpanData[];\n    replayRecordsEventView: EventView;\n  };\n  fetchError: any;\n  isFetching: boolean;\n  pageLinks: null | string;\n};\n\nfunction useReplaysFromTransaction({\n  location,\n  organization,\n  replayIdsEventView,\n}: Options): Return {\n  const api = useApi();\n\n  const [response, setResponse] = useState<{\n    events: EventSpanData[];\n    pageLinks: null | string;\n    replayIds: undefined | string[];\n  }>({events: [], pageLinks: null, replayIds: undefined});\n\n  const [fetchError, setFetchError] = useState<any>();\n\n  const {cursor} = location.query;\n  const fetchReplayIds = useCallback(async () => {\n    try {\n      const [{data}, _textStatus, resp] = await doDiscoverQuery<{data: EventSpanData[]}>(\n        api,\n        `/organizations/${organization.slug}/events/`,\n        replayIdsEventView.getEventsAPIPayload({\n          query: {cursor},\n        } as Location<ReplayListLocationQuery>)\n      );\n\n      setResponse({\n        pageLinks: resp?.getResponseHeader('Link') ?? '',\n        replayIds: data.map(record => String(record.replayId)),\n        events: data || [],\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n      setFetchError(err);\n    }\n  }, [api, cursor, organization.slug, replayIdsEventView]);\n\n  const replayRecordsEventView = useMemo(() => {\n    if (!response.replayIds) {\n      return null;\n    }\n\n    return EventView.fromSavedQuery({\n      id: '',\n      name: '',\n      version: 2,\n      fields: getReplayListFields(organization),\n      projects: [],\n      query: `id:[${String(response.replayIds)}]`,\n      orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n    });\n  }, [location.query.sort, response.replayIds, organization]);\n\n  useEffect(() => {\n    fetchReplayIds();\n  }, [fetchReplayIds]);\n\n  return {\n    data: replayRecordsEventView\n      ? {\n          events: response.events,\n          replayRecordsEventView,\n        }\n      : null,\n    fetchError,\n    isFetching: !fetchError && !response.replayIds,\n    pageLinks: response.pageLinks,\n  };\n}\n\nexport default useReplaysFromTransaction;\n","import {EventSpanData} from 'sentry/views/performance/transactionSummary/transactionReplays/useReplaysFromTransaction';\nimport {ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Opts = {\n  events: EventSpanData[];\n  replays: undefined | ReplayListRecord[];\n};\n\nexport type ReplayListRecordWithTx = ReplayListRecord & {\n  txEvent: {[x: string]: any};\n};\n\ntype Return = undefined | ReplayListRecordWithTx[];\n\nfunction useReplaysWithTxData({events, replays}: Opts): Return {\n  const replaysWithTx = replays?.map<ReplayListRecordWithTx>(replay => {\n    const slowestEvent = events.reduce((slowest, event) => {\n      if (event.replayId !== replay.id) {\n        return slowest;\n      }\n      if (!slowest['transaction.duration']) {\n        return event;\n      }\n      return event['transaction.duration'] > slowest['transaction.duration']\n        ? event\n        : slowest;\n    }, {});\n\n    return {\n      ...replay,\n      txEvent: slowestEvent ?? {},\n    };\n  });\n\n  return replaysWithTx;\n}\n\nexport default useReplaysWithTxData;\n","import {Fragment, useEffect, useMemo} from 'react';\nimport {useTheme} from '@emotion/react';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  SPAN_OP_BREAKDOWN_FIELDS,\n  SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n} from 'sentry/utils/discover/fields';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport PageLayout, {\n  ChildProps,\n} from 'sentry/views/performance/transactionSummary/pageLayout';\nimport Tab from 'sentry/views/performance/transactionSummary/tabs';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {ReplayColumn} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\nimport useReplaysFromTransaction, {EventSpanData} from './useReplaysFromTransaction';\nimport useReplaysWithTxData from './useReplaysWithTxData';\n\nfunction TransactionReplays() {\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n  const {projects} = useProjects();\n\n  return (\n    <PageLayout\n      location={{\n        ...location,\n        query: {\n          ...location.query,\n          statsPeriod: '14d',\n        },\n      }}\n      organization={organization}\n      projects={projects}\n      tab={Tab.REPLAYS}\n      getDocumentTitle={getDocumentTitle}\n      generateEventView={generateEventView}\n      childComponent={ReplaysContentWrapper}\n    />\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Replays')].join(' \\u2014 ');\n  }\n\n  return [t('Summary'), t('Replays')].join(' \\u2014 ');\n}\n\nfunction generateEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}) {\n  const fields = [\n    'replayId',\n    'count()',\n    'transaction.duration',\n    'trace',\n    'timestamp',\n    ...SPAN_OP_BREAKDOWN_FIELDS,\n    SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n  ];\n\n  return EventView.fromSavedQuery({\n    id: '',\n    name: `Replay events within a transaction`,\n    version: 2,\n    fields,\n    query: `event.type:transaction transaction:\"${transactionName}\" !replayId:\"\"`,\n    projects: [Number(location.query.project)],\n  });\n}\n\nfunction ReplaysContentWrapper({\n  eventView: replayIdsEventView,\n  location,\n  organization,\n  setError,\n}: ChildProps) {\n  const {data, fetchError, isFetching, pageLinks} = useReplaysFromTransaction({\n    replayIdsEventView,\n    location,\n    organization,\n  });\n\n  useEffect(() => {\n    setError(fetchError?.message ?? fetchError);\n  }, [setError, fetchError]);\n\n  if (!data) {\n    return isFetching ? (\n      <Layout.Main fullWidth>\n        <LoadingIndicator />\n      </Layout.Main>\n    ) : (\n      <Fragment>{null}</Fragment>\n    );\n  }\n\n  const {events, replayRecordsEventView} = data;\n  return (\n    <ReplaysContent\n      eventView={replayRecordsEventView}\n      events={events}\n      organization={organization}\n      pageLinks={pageLinks}\n    />\n  );\n}\n\nfunction ReplaysContent({\n  eventView,\n  events,\n  organization,\n}: {\n  eventView: EventView;\n  events: EventSpanData[];\n  organization: Organization;\n  pageLinks: string | null;\n}) {\n  const location = useMemo(() => ({query: {}} as Location<ReplayListLocationQuery>), []);\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const {replays, isFetching, fetchError} = useReplayList({\n    eventView,\n    location,\n    organization,\n  });\n\n  const replaysWithTx = useReplaysWithTxData({\n    replays,\n    events,\n  });\n\n  return (\n    <Layout.Main fullWidth>\n      <ReplayTable\n        fetchError={fetchError}\n        isFetching={isFetching}\n        replays={replaysWithTx}\n        sort={undefined}\n        visibleColumns={[\n          ReplayColumn.REPLAY,\n          ...(hasRoomForColumns ? [ReplayColumn.SLOWEST_TRANSACTION] : []),\n          ReplayColumn.OS,\n          ReplayColumn.BROWSER,\n          ReplayColumn.DURATION,\n          ReplayColumn.COUNT_ERRORS,\n          ReplayColumn.ACTIVITY,\n        ]}\n      />\n    </Layout.Main>\n  );\n}\nexport default TransactionReplays;\n","import Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport TransactionReplays from './transactionReplays';\n\nfunction renderNoAccess() {\n  return (\n    <Layout.Page withPadding>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </Layout.Page>\n  );\n}\n\nfunction TransactionReplaysContainer() {\n  const organization = useOrganization();\n\n  return (\n    <Feature\n      features={['session-replay']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <TransactionReplays />\n    </Feature>\n  );\n}\n\nexport default TransactionReplaysContainer;\n"],"names":["_ref","location","organization","replayIdsEventView","api","useApi","response","setResponse","useState","events","pageLinks","replayIds","undefined","fetchError","setFetchError","cursor","query","fetchReplayIds","useCallback","async","data","_textStatus","resp","doDiscoverQuery","slug","getEventsAPIPayload","getResponseHeader","map","record","String","replayId","err","Sentry","replayRecordsEventView","useMemo","EventView","fromSavedQuery","id","name","version","fields","getReplayListFields","projects","orderby","decodeScalar","sort","DEFAULT_SORT","useEffect","isFetching","replays","replaysWithTx","replay","slowestEvent","reduce","slowest","event","txEvent","TransactionReplays","useLocation","useOrganization","useProjects","_jsx","PageLayout","statsPeriod","tab","Tab","REPLAYS","getDocumentTitle","generateEventView","childComponent","ReplaysContentWrapper","transactionName","trim","length","t","join","SPAN_OP_BREAKDOWN_FIELDS","SPAN_OP_RELATIVE_BREAKDOWN_FIELD","Number","project","_ref2","eventView","setError","useReplaysFromTransaction","message","Layout","fullWidth","children","LoadingIndicator","Fragment","ReplaysContent","_ref3","theme","useTheme","hasRoomForColumns","useMedia","breakpoints","small","useReplayList","useReplaysWithTxData","ReplayTable","visibleColumns","ReplayColumn","REPLAY","SLOWEST_TRANSACTION","OS","BROWSER","DURATION","COUNT_ERRORS","ACTIVITY","displayName","renderNoAccess","withPadding","Alert","type","TransactionReplaysContainer","Feature","features","renderDisabled"],"sourceRoot":""}