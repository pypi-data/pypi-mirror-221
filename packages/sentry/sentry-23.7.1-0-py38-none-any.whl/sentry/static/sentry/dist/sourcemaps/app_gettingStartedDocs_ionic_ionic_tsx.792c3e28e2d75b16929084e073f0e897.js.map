{"version":3,"file":"chunks/app_gettingStartedDocs_ionic_ionic_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"khBAQO,MAAMA,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,sTACA,CACEC,sBAAsBH,EAAAA,EAAAA,IAAA,WACtBI,iBAAiBJ,EAAAA,EAAAA,IAAA,WACjBK,eAAeL,EAAAA,EAAAA,IAAA,eAKvBM,eAAgB,CACd,CACEC,SAAU,OACVR,aAAaS,EAAAA,EAAAA,GACX,8EAEFC,KAAM,wDAER,CACEF,SAAU,OACVR,aAAaS,EAAAA,EAAAA,GAAE,MACfC,KAAM,8CAER,CACEV,aACEW,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAV,SAAA,EACPD,EAAAA,EAAAA,IAAA,MAAAC,UAAKO,EAAAA,EAAAA,GAAE,4BACNA,EAAAA,EAAAA,GAAE,yDACHR,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,2JACA,CACEU,qBAAqBZ,EAAAA,EAAAA,IAAA,WACrBa,cAAcb,EAAAA,EAAAA,IAAA,WACdc,kBAAkBd,EAAAA,EAAAA,IAAA,kBAM5BM,eAAgB,CACd,CACEP,aAAaC,EAAAA,EAAAA,IAAA,UAAAC,SAAQ,SACrBM,SAAU,OACVE,KAAO,qgBAmBT,CACEV,aAAaC,EAAAA,EAAAA,IAAA,UAAAC,SAAQ,WACrBM,SAAU,SACVE,KAAO,qcAqBfM,gBACEf,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,mJACA,CAACO,MAAMT,EAAAA,EAAAA,IAAA,gBAKf,CACEJ,KAAMC,EAAAA,GAASmB,UACfjB,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IAAI,0DAA2D,CAACO,MAAMT,EAAAA,EAAAA,IAAA,eAG3EM,eAAgB,CACd,CACEC,SAAU,aACVE,KAAO,oTAOHjB,oxBAuBN,CACEe,SAAU,aACVR,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,wIACA,CACEO,MAAMT,EAAAA,EAAAA,IAAA,eAKdS,KAAO,saAwBb,CACEb,KAAMC,EAAAA,GAASoB,OACflB,aAAaS,EAAAA,EAAAA,GACX,oHAEFF,eAAgB,CACd,CACEC,SAAU,aACVE,KAAO,mHAMT,CACEF,SAAU,aACVR,aAAaS,EAAAA,EAAAA,GAAE,6DACfC,KAAO,oHAKT,CACEF,SAAU,aACVR,aAAaS,EAAAA,EAAAA,GAAE,8BACfC,KAAO,uFAQd,EAGM,SAASS,EAAuBC,GAA+B,IAA9B,IAAC3B,KAAQ4B,GAAmBD,EAClE,OAAOnB,EAAAA,EAAAA,IAACqB,EAAAA,EAAM,CAAC9B,MAAOA,EAAM,CAACC,WAAW4B,GAC1C,CAFgBF,EAAuBI,YAAA,0BAIvC,S","sources":["webpack:///./app/gettingStartedDocs/ionic/ionic.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct(\n          \"To use Sentry in your Ionic app, install the Sentry Capacitor SDK alongside the sibling Sentry SDK related to the Web framework you're using with Ionic. The supported siblings are: Angular [sentryAngularIvyCode:@sentry/angular-ivy], React [sentryReactCode:@sentry/react] and Vue [sentryVueCode:@sentry/vue].\",\n          {\n            sentryAngularIvyCode: <code />,\n            sentryReactCode: <code />,\n            sentryVueCode: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        description: t(\n          'Heres an example of installing Sentry Capacitor along with Sentry Angular:'\n        ),\n        code: 'npm install --save @sentry/capacitor @sentry/angular',\n      },\n      {\n        language: 'bash',\n        description: t('or'),\n        code: 'yarn add @sentry/capacitor @sentry/angular',\n      },\n      {\n        description: (\n          <Fragment>\n            <h5>{t('Capacitor 2 - Android')}</h5>\n            {t('This step is not needed if you are using Capacitor 3')}\n            <p>\n              {tct(\n                'Then, add the [sentryCapacitorCode:SentryCapacitor] plugin class inside the [onCreateCode:onCreate] method of your [mainActivityCode:MainActivity] file.',\n                {\n                  sentryCapacitorCode: <code />,\n                  onCreateCode: <code />,\n                  mainActivityCode: <code />,\n                }\n              )}\n            </p>\n          </Fragment>\n        ),\n        configurations: [\n          {\n            description: <strong>Java</strong>,\n            language: 'java',\n            code: `\nimport android.os.Bundle;\nimport com.getcapacitor.BridgeActivity;\nimport com.getcapacitor.Plugin;\nimport io.sentry.capacitor.SentryCapacitor;\nimport java.util.ArrayList;\n\npublic class MainActivity extends BridgeActivity {\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    // Initializes the Bridge\n    this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\n      add(SentryCapacitor.class);\n    }});\n  }\n}\n            `,\n          },\n          {\n            description: <strong>Kotlin</strong>,\n            language: 'kotlin',\n            code: `\nimport android.os.Bundle\nimport com.getcapacitor.BridgeActivity\nimport com.getcapacitor.Plugin\nimport io.sentry.capacitor.SentryCapacitor\n\nclass MainActivity : BridgeActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    // Initializes the Bridge\n    this.init(\n      savedInstanceState,\n      listOf<Class<out Plugin>>(SentryCapacitor::class.java)\n    )\n  }\n}\n            `,\n          },\n        ],\n      },\n    ],\n    additionalInfo: (\n      <p>\n        {tct(\n          'The same installation process applies to the other siblings, all you need to do is to replace [code:@sentry/angular-ivy] by the desired sibling.',\n          {code: <code />}\n        )}\n      </p>\n    ),\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct('You must initialize the Sentry SDK as early as you can:', {code: <code />})}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\nimport * as Sentry from \"@sentry/capacitor\";\n// The example is using Angular 12+. Import '@sentry/angular' for Angular 10 and 11. Import '@sentry/vue' or '@sentry/react' when using a Sibling different than Angular.\nimport * as SentrySibling from \"@sentry/angular-ivy\";\n\nSentry.init(\n  {\n    dsn: \"${dsn}\",\n    // To set your release and dist versions\n    release: \"my-project-name@\" + process.env.npm_package_version,\n    dist: \"1\",\n    // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n    // We recommend adjusting this value in production.\n    tracesSampleRate: 1.0,\n    integrations: [\n      new SentrySibling.BrowserTracing({\n        // Set \"tracePropagationTargets\" to control for which URLs distributed tracing should be enabled\n        tracePropagationTargets: [\n          \"localhost\",\n          /^https:\\/\\/yourserver\\.io\\/api/,\n        ],\n        routingInstrumentation: SentrySibling.routingInstrumentation,\n      }),\n    ],\n  },\n  // Forward the init method to the sibling Framework.\n  SentrySibling.init\n);\n        `,\n      },\n      {\n        language: 'javascript',\n        description: (\n          <p>\n            {tct(\n              \"Additionally for Angular, you will also need to configure your root [code:app.module.ts] (same code doesn't apply to other siblings):\",\n              {\n                code: <code />,\n              }\n            )}\n          </p>\n        ),\n        code: `\n@NgModule({\n  providers: [\n    {\n      provide: ErrorHandler,\n      // Attach the Sentry ErrorHandler\n      useValue: SentrySibling.createErrorHandler(),\n    },\n    {\n      provide: SentrySibling.TraceService,\n      deps: [Router],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: () => () => {},\n      deps: [SentrySibling.TraceService],\n      multi: true,\n    },\n  ],\n})\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t(\n      'This snippet includes an intentional error, so you can test that everything is working as soon as you set it up:'\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\nimport * as Sentry from \"@sentry/capacitor\";\n\nSentry.captureException(\"Test Captured Exception\");\n        `,\n      },\n      {\n        language: 'javascript',\n        description: t('You can also throw an error anywhere in your application:'),\n        code: `\n// Must be thrown after Sentry.init is called to be captured.\nthrow new Error(\"Test Thrown Error\");\n        `,\n      },\n      {\n        language: 'javascript',\n        description: t('Or trigger a native crash:'),\n        code: `\nimport * as Sentry from \"@sentry/capacitor\";\n\nSentry.nativeCrash();\n        `,\n      },\n    ],\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithIonic({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} {...props} />;\n}\n\nexport default GettingStartedWithIonic;\n"],"names":["steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","_jsx","children","tct","sentryAngularIvyCode","sentryReactCode","sentryVueCode","configurations","language","t","code","_jsxs","Fragment","sentryCapacitorCode","onCreateCode","mainActivityCode","additionalInfo","CONFIGURE","VERIFY","GettingStartedWithIonic","_ref","props","Layout","displayName"],"sourceRoot":""}