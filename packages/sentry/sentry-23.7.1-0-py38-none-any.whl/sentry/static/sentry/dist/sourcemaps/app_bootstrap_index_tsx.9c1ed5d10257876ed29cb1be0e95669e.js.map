{"version":3,"file":"chunks/app_bootstrap_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"mNAGA,MAAMA,EAAgB,sBAEhBC,EAAmBC,IACvBC,OAAOC,eAAiBF,EAAKE,eAC7BD,OAAOE,oBAAsBH,EAAKG,oBAClCF,OAAOG,sBAAwBJ,EAAKI,4BAAyBC,EAEtDL,GAkCFM,eAAeC,IACpB,MAAMC,EAAgBP,OAAOQ,cAK7B,YAAsBJ,IAAlBG,QAjCNF,iBACE,MAAMI,QAAiBC,MAAMb,GACvBE,QAAqBU,EAASE,OAKpC,GAA4B,OAAxBZ,EAAKa,gBAA2BZ,OAAOa,gBAAiB,CAC1D,MAAMC,GAASC,EAAAA,EAAAA,GAAYf,OAAOgB,SAASC,MACvCH,IACFf,EAAKa,eAAiB,CACpBM,gBAAkB,WAAUJ,EAAOK,iBACnCC,UAAW,oBACXC,UAAWP,EAAOK,MAGxB,CAGA,OAFAnB,OAAOQ,cAAgBT,EAEhBD,EAAgBC,EACzB,CAciBuB,GAGRxB,EAAgBS,EACzB,C,2DC/CA,MAAMgB,EAAgB,oEAMf,SAASR,EAAYS,GAC1B,MAAMC,EAAQD,EAASC,MAAMF,GAC7B,IAAKE,EACH,OAAO,KAGT,MACEC,EACAC,GACEF,GAEGN,KAASS,GAAeJ,EAASK,QAAQH,EAAmB,IAAII,MAAM,KAG7E,MAAO,CAACX,OAAML,OAFCc,EAAYG,OAAOJ,GAAeK,KAAK,KAGxD,C","sources":["webpack:///./app/bootstrap/index.tsx","webpack:///./app/utils/extractSlug.tsx"],"sourcesContent":["import {Config} from 'sentry/types';\nimport {extractSlug} from 'sentry/utils/extractSlug';\n\nconst BOOTSTRAP_URL = '/api/client-config/';\n\nconst bootApplication = (data: Config) => {\n  window.csrfCookieName = data.csrfCookieName;\n  window.superUserCookieName = data.superUserCookieName;\n  window.superUserCookieDomain = data.superUserCookieDomain ?? undefined;\n\n  return data;\n};\n\n/**\n * Load the client configuration data using the BOOTSTRAP_URL. Used when\n * running in standalone SPA mode.\n */\nasync function bootWithHydration() {\n  const response = await fetch(BOOTSTRAP_URL);\n  const data: Config = await response.json();\n\n  // Shim up the initialData payload to quack like it came from\n  // a customer-domains initial request. Because our initial call to BOOTSTRAP_URL\n  // will not be on a customer domain, the response will not include this context.\n  if (data.customerDomain === null && window.__SENTRY_DEV_UI) {\n    const domain = extractSlug(window.location.host);\n    if (domain) {\n      data.customerDomain = {\n        organizationUrl: `https://${domain.slug}.sentry.io`,\n        sentryUrl: 'https://sentry.io',\n        subdomain: domain.slug,\n      };\n    }\n  }\n  window.__initialData = data;\n\n  return bootApplication(data);\n}\n\n/**\n * Load client configuration bootstrap data. This will detect if the app is\n * running in SPA mode or being booted from the django-rendered layout.html\n * template.\n */\nexport async function bootstrap() {\n  const bootstrapData = window.__initialData;\n\n  // If __initialData is not already set on the window, we are likely running in\n  // pure SPA mode, meaning django is not serving our frontend application and we\n  // need to make an API request to hydrate the bootstrap data to boot the app.\n  if (bootstrapData === undefined) {\n    return await bootWithHydration();\n  }\n\n  return bootApplication(bootstrapData);\n}\n","type ExtractedSlug = {\n  domain: string;\n  slug: string;\n};\n\n// XXX: If you change this also change its sibiling in:\n// - static/index.ejs\n// - webpack.config.ts\nconst KNOWN_DOMAINS = /(?:\\.?)((?:localhost|dev\\.getsentry\\.net|sentry\\.dev)(?:\\:\\d*)?)$/;\n\n/**\n * Extract a slug from a known local development host.\n * If the host is not a known development host null is returned.\n */\nexport function extractSlug(hostname: string): ExtractedSlug | null {\n  const match = hostname.match(KNOWN_DOMAINS);\n  if (!match) {\n    return null;\n  }\n\n  const [\n    matchedExpression, // Expression includes optional leading `.`\n    matchedDomain, // First match group never includes optional leading `.`\n  ] = match;\n\n  const [slug, ...domainParts] = hostname.replace(matchedExpression, '').split('.');\n  const domain = domainParts.concat(matchedDomain).join('.');\n\n  return {slug, domain};\n}\n"],"names":["BOOTSTRAP_URL","bootApplication","data","window","csrfCookieName","superUserCookieName","superUserCookieDomain","undefined","async","bootstrap","bootstrapData","__initialData","response","fetch","json","customerDomain","__SENTRY_DEV_UI","domain","extractSlug","location","host","organizationUrl","slug","sentryUrl","subdomain","bootWithHydration","KNOWN_DOMAINS","hostname","match","matchedExpression","matchedDomain","domainParts","replace","split","concat","join"],"sourceRoot":""}