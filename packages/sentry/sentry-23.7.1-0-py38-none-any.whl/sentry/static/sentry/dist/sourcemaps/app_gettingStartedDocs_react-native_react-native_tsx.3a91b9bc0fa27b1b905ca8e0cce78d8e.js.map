{"version":3,"file":"chunks/app_gettingStartedDocs_react-native_react-native_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/gettingStartedDocs/react-native/react-native.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list/';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct(\n          'Sentry captures data by using an SDK within your applicationâ€™s runtime. If you are using Expo, see [expoLink:How to Add Sentry to Your Expo Project]. This SDK works for both managed and bare projects.',\n          {expoLink: <ExternalLink href=\"https://docs.expo.dev/guides/using-sentry/\" />}\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        description: <div>{tct('Run [code:@sentry/wizard]:', {code: <code />})}</div>,\n        code: 'npx @sentry/wizard -s -i reactNative',\n        additionalInfo: (\n          <Fragment>\n            <p>\n              {tct(\n                '[wizardLink:Sentry Wizard] will patch your project accordingly, though you can [setupManuallyLink:setup manually] if you prefer.',\n                {\n                  wizardLink: (\n                    <ExternalLink href=\"https://github.com/getsentry/sentry-wizard\" />\n                  ),\n                  setupManuallyLink: (\n                    <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/manual-setup/manual-setup/\" />\n                  ),\n                }\n              )}\n            </p>\n            <List symbol=\"bullet\">\n              <ListItem>\n                {t(\n                  'iOS Specifics: When you use Xcode, you can hook directly into the build process to upload debug symbols and source maps.'\n                )}\n              </ListItem>\n              <ListItem>\n                {tct(\n                  \"Android Specifics: We hook into Gradle for the source map build process. When you run [gradLewCode:./gradlew] assembleRelease, source maps are automatically built and uploaded to Sentry. If you have enabled Gradle's [orgGradleCode:org.gradle.configureondemand] feature, you'll need a clean build, or you'll need to disable this feature to upload the source map on every build by setting [orgGradleCodeConfigureCode:org.gradle.configureondemand=false] or remove it.\",\n                  {\n                    gradLewCode: <code />,\n                    orgGradleCode: <code />,\n                    orgGradleCodeConfigureCode: <code />,\n                  }\n                )}\n              </ListItem>\n            </List>\n          </Fragment>\n        ),\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        import * as Sentry from \"@sentry/react-native\";\n\n        Sentry.init({\n          dsn: \"${dsn}\",\n          // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n          // We recommend adjusting this value in production.\n          tracesSampleRate: 1.0,\n        });\n        `,\n        additionalInfo: (\n          <p>\n            {tct('The \"sentry-wizard\" will try to add it to your [code:App.tsx]', {\n              code: <code />,\n            })}\n          </p>\n        ),\n      },\n      {\n        language: 'javascript',\n        description: (\n          <p>\n            {tct(\n              'Wrap your app with Sentry to automatically instrument it with [touchEventTrakingLink:touch event tracking] and [automaticPerformanceMonitoringLink:automatic performance monitoring]:',\n              {\n                touchEventTrakingLink: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/touchevents/\" />\n                ),\n                automaticPerformanceMonitoringLink: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/performance/instrumentation/automatic-instrumentation/\" />\n                ),\n              }\n            )}\n          </p>\n        ),\n        code: 'export default Sentry.wrap(App);',\n        additionalInfo: t(\n          'You do not need to do this for Sentry to work or if your app does not have a single parent \"App\" component.'\n        ),\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t(\n      'Then create an intentional error, so you can test that everything is working:'\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: \"throw new Error('My first Sentry error!');\",\n      },\n      {\n        language: 'javascript',\n        description: t('Or, try a native crash with:'),\n        code: 'Sentry.nativeCrash();',\n        additionalInfo: (\n          <Fragment>\n            {t(\n              \"If you're new to Sentry, use the email alert to access your account and complete a product tour.\"\n            )}\n            {t(\n              \"If you're an existing user and have disabled alerts, you won't receive this email.\"\n            )}\n          </Fragment>\n        ),\n      },\n    ],\n  },\n  {\n    title: t('Performance'),\n    description: (\n      <Fragment>\n        {t(\n          'Sentry can measure the performance of your app automatically when instrumented with the following routers:'\n        )}\n        <List symbol=\"bullet\">\n          <ListItem>\n            <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/performance/instrumentation/automatic-instrumentation/#react-navigation\">\n              {t('React Navigation')}\n            </ExternalLink>\n          </ListItem>\n          <ListItem>\n            <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/performance/instrumentation/automatic-instrumentation/#react-navigation-v4\">\n              {t('React Navigation V4 and prior')}\n            </ExternalLink>\n          </ListItem>\n          <ListItem>\n            <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/performance/instrumentation/automatic-instrumentation/#react-native-navigation\">\n              {t('React Native Navigation')}\n            </ExternalLink>\n          </ListItem>\n        </List>\n        {t('Additionally, you can create transactions and spans programatically:')}\n      </Fragment>\n    ),\n    configurations: [\n      {\n        description: t('For example:'),\n        language: 'javascript',\n        code: `\n        // Let's say this function is invoked when a user clicks on the checkout button of your shop\n        shopCheckout() {\n          // This will create a new Transaction for you\n          const transaction = Sentry.startTransaction({ name: \"shopCheckout\" });\n          // Set transaction on scope to associate with errors and get included span instrumentation\n          // If there's currently an unfinished transaction, it may be dropped\n          Sentry.getCurrentHub().configureScope(scope => scope.setSpan(transaction));\n\n          // Assume this function makes an xhr/fetch call\n          const result = validateShoppingCartOnServer();\n\n          const span = transaction.startChild({\n            data: {\n              result\n            },\n            op: 'task',\n            description: \"processing shopping cart result\",\n          });\n          try {\n            processAndValidateShoppingCart(result);\n            span.setStatus(SpanStatus.Ok);\n          } catch (err) {\n            span.setStatus(SpanStatus.UnknownError);\n            throw err;\n          } finally {\n            span.finish();\n            transaction.finish();\n          }\n        }\n        `,\n        additionalInfo: (\n          <p>\n            {tct(\n              'For more information, please refer to the [docLink: Sentry React Native documentation].',\n              {\n                docLink: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/performance/instrumentation/\" />\n                ),\n              }\n            )}\n          </p>\n        ),\n      },\n    ],\n  },\n  {\n    title: t('Debug Symbols'),\n    description: (\n      <Fragment>\n        {t(\n          'We offer a range of methods to provide Sentry with debug symbols so that you can see symbolicated stack traces and triage issues faster.'\n        )}\n        <p>\n          {tct(\n            \"Complete stack traces will be shown for React Native Javascript errors by default using Sentry's [automaticSourceMapsUploadLink:automatic source maps upload]. To set up manual source maps upload follow [guideLink:this guide].\",\n            {\n              automaticSourceMapsUploadLink: (\n                <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/sourcemaps/\" />\n              ),\n              guideLink: (\n                <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/sourcemaps/\" />\n              ),\n            }\n          )}\n        </p>\n        <p>\n          {tct(\n            \"You'll also need to upload [debugSymbolsLink:Debug Symbols] generated by the native iOS and Android tooling for native crashes.\",\n            {\n              debugSymbolsLink: (\n                <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/upload-debug/\" />\n              ),\n            }\n          )}\n        </p>\n      </Fragment>\n    ),\n  },\n  {\n    title: t('Source Context'),\n    description: (\n      <Fragment>\n        <p>\n          {tct(\n            \"If Sentry has access to your application's source code, it can show snippets of code [italic:(source context)] around the location of stack frames, which helps to quickly pinpoint problematic code.\",\n            {\n              italic: <i />,\n            }\n          )}\n        </p>\n        <p>\n          {tct(\n            'Source Context will be shown for React Native Javascript error by default if source maps are uploaded. To set up source maps upload, follow the [sourceMapsGuideLink:Source Maps guide].',\n            {\n              sourceMapsGuideLink: (\n                <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/sourcemaps/\" />\n              ),\n            }\n          )}\n        </p>\n        <p>\n          {tct(\n            \"To enable source context for native errors, you'll need to upload native debug symbols to Sentry by following the instructions at [uploadWithGradleLink:Uploading Source Code Context With Sentry Gradle Plugin] and Uploading Source Context With Xcode.\",\n            {\n              uploadWithGradleLink: (\n                <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/upload-debug/#uploading-source-context-with-sentry-gradle-plugin\" />\n              ),\n              uploadWithXCodeLink: (\n                <ExternalLink href=\"https://docs.sentry.io/platforms/react-native/upload-debug/#uploading-source-context-with-xcode\" />\n              ),\n            }\n          )}\n        </p>\n      </Fragment>\n    ),\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithReactNative({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} {...props} />;\n}\n\nexport default GettingStartedWithReactNative;\n"],"names":["steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","_jsx","children","tct","expoLink","ExternalLink","href","configurations","language","code","additionalInfo","_jsxs","Fragment","wizardLink","setupManuallyLink","List","symbol","ListItem","t","gradLewCode","orgGradleCode","orgGradleCodeConfigureCode","CONFIGURE","touchEventTrakingLink","automaticPerformanceMonitoringLink","VERIFY","title","docLink","automaticSourceMapsUploadLink","guideLink","debugSymbolsLink","italic","sourceMapsGuideLink","uploadWithGradleLink","uploadWithXCodeLink","GettingStartedWithReactNative","_ref","props","Layout","displayName"],"sourceRoot":""}