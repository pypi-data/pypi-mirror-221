{"version":3,"file":"chunks/app_gettingStartedDocs_javascript_remix_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"mqBAQA,MAAMA,EAAqB,2BAIrBC,EAAqB,mWAMrBC,EAA0B,0UAY1BC,EAA0B,mHAK1BC,EAAgB,yDAITC,EAAQ,eAAC,kBACpBC,EAAiB,wBACjBC,GAIDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aAAaC,EAAAA,EAAAA,GACX,2EAEFC,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,uGAUb,CACEP,KAAMC,EAAAA,GAASO,UACfL,aAAaC,EAAAA,EAAAA,GACX,2FAEFC,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,2MAMHZ,4BAIN,CACEW,SAAU,aACVH,aACEM,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACE,iQACD,CACEC,QACEH,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,wDAErBC,QACEN,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,gEAM7BP,KAAO,cAEJX,GAA2B,IAAIE,OAAS,EACpC,wCACD,8FAMFF,GAAyBoB,KAAK,gCAIpC,CACEb,aAAaC,EAAAA,EAAAA,GACX,gIAEFE,SAAU,aACVC,KAAO,wdAkCb,CACEP,KAAMC,EAAAA,GAASgB,OACfd,aAAaC,EAAAA,EAAAA,GACX,4HAEFC,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,uGAMd,EAEYW,EAAY,CACvB,CACEC,GAAI,cACJC,MAAMhB,EAAAA,EAAAA,GAAE,eACRD,aAAaC,EAAAA,EAAAA,GAAE,oEACfiB,KAAM,wEAER,CACEF,GAAI,yBACJC,MAAMhB,EAAAA,EAAAA,GAAE,0BACRD,aAAaC,EAAAA,EAAAA,GACX,oIAEFiB,KAAM,yEAER,CACEF,GAAI,iBACJC,MAAMhB,EAAAA,EAAAA,GAAE,kBACRD,aAAaC,EAAAA,EAAAA,GACX,qKAEFiB,KAAM,6EAKH,SAASC,EAAuBC,GAIvB,IAJwB,IACtCC,EAAG,uBACHC,EAAyB,MACtBC,GACSH,EACZ,MAAMI,EAAyB,GACzBC,EAAyB,GAE/B,IAAIC,EAAe,IAAIX,GACvB,MAAMtB,EAAoC,CAAE,SAAQ4B,OAEhDC,EAAuBK,SAASC,EAAAA,EAAgBC,0BAClDL,EAAaM,KAAK1C,EAAuB2C,QACzCN,EAAaK,KAAKzC,EAAuB0C,QACzCtC,EAAwBqC,KAAKxC,EAAayC,QAC1CtC,EAAwBqC,KAAKzC,EAAuB0C,QACpDL,EAAeA,EAAaM,QAC1BC,GAAQA,EAAKjB,KAAOY,EAAAA,EAAgBC,0BAIpCP,EAAuBK,SAASC,EAAAA,EAAgBM,kBAClDV,EAAaM,KAAK5C,EAAkB6C,QACpCN,EAAaK,KAAK3C,EAAkB4C,QACpCL,EAAeA,EAAaM,QAC1BC,GAAQA,EAAKjB,KAAOY,EAAAA,EAAgBM,kBAIxC,IAAI1C,EAA8B,CAAE,SAAQ6B,OAU5C,OARIG,EAAa7B,OAAS,IACxBH,EAAoBA,EAAkB2C,OAAO,kBAAmBX,EAAc,OAG5EC,EAAa9B,OAAS,IACxBH,EAAoBA,EAAkB2C,OAAOV,KAI7CnB,EAAAA,EAAAA,IAAC8B,EAAAA,EAAM,CACL7C,MAAOA,EAAM,CACXC,kBAAmBA,EAAkBqB,KAAK,MAC1CpB,4BAEFsB,UAAWW,KACPH,GAGV,CAjDgBJ,EAAuBkB,YAAA,0BAmDvC,S","sources":["webpack:///./app/gettingStartedDocs/javascript/remix.tsx"],"sourcesContent":["import ExternalLink from 'sentry/components/links/externalLink';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {ProductSolution} from 'sentry/components/onboarding/productSelection';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nconst replayIntegration = `\nnew Sentry.Replay(),\n`;\n\nconst replayOtherConfig = `\n// Session Replay\nreplaysSessionSampleRate: 0.1, // This sets the sample rate at 10%. You may want to change it to 100% while in development and then sample at a lower rate in production.\nreplaysOnErrorSampleRate: 1.0, // If you're not already sampling the entire session, change the sample rate to 100% when sampling sessions where errors occur.\n`;\n\nconst performanceIntegration = `\nnew Sentry.BrowserTracing({\n  // Set 'tracePropagationTargets' to control for which URLs distributed tracing should be enabled\n  tracePropagationTargets: [\"localhost\", \"https:yourserver.io/api/\"],\n  routingInstrumentation: Sentry.remixRouterInstrumentation(\n    useEffect,\n    useLocation,\n    useMatches\n  ),\n}),\n`;\n\nconst performanceOtherConfig = `\n// Performance Monitoring\ntracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!\n`;\n\nconst prismaConfig = `\nnew Sentry.Integrations.Prisma({ client: prisma })\n`;\n\nexport const steps = ({\n  sentryInitContent,\n  sentryInitContentServer,\n}: {\n  sentryInitContent?: string;\n  sentryInitContentServer?: string[];\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: t(\n      'Sentry captures data by using an SDK within your applicationâ€™s runtime.'\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        code: `\n# Using yarn\nyarn add @sentry/remix\n\n# Using npm\nnpm install --save @sentry/remix\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: t(\n      'Import and initialize Sentry in your Remix entry points for both the client and server:'\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        import { useLocation, useMatches } from \"@remix-run/react\";\n        import * as Sentry from \"@sentry/remix\";\n        import { useEffect } from \"react\";\n\n        Sentry.init({\n          ${sentryInitContent}\n        });\n        `,\n      },\n      {\n        language: 'javascript',\n        description: (\n          <p>\n            {tct(\n              `Initialize Sentry in your entry point for the server to capture exceptions and get performance metrics for your [action] and [loader] functions. You can also initialize Sentry's database integrations, such as Prisma, to get spans for your database calls:`,\n              {\n                action: (\n                  <ExternalLink href=\"https://remix.run/docs/en/v1/api/conventions#action\" />\n                ),\n                loader: (\n                  <ExternalLink href=\"https://remix.run/docs/en/1.18.1/api/conventions#loader\" />\n                ),\n              }\n            )}\n          </p>\n        ),\n        code: `\n        ${\n          (sentryInitContentServer ?? []).length > 1\n            ? `import { prisma } from \"~/db.server\";`\n            : ''\n        }\n\n        import * as Sentry from \"@sentry/remix\";\n\n        Sentry.init({\n          ${sentryInitContentServer?.join('\\n')}\n        });\n        `,\n      },\n      {\n        description: t(\n          'Lastly, wrap your Remix root with \"withSentry\" to catch React component errors and to get parameterized router transactions:'\n        ),\n        language: 'javascript',\n        code: `\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nimport { withSentry } from \"@sentry/remix\";\n\nfunction App() {\n  return (\n    <html>\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n\nexport default withSentry(App);\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t(\n      \"This snippet contains an intentional error and can be used as a test to make sure that everything's working as expected.\"\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        return <button onClick={() => methodDoesNotExist()}>Break the world</button>;\n        `,\n      },\n    ],\n  },\n];\n\nexport const nextSteps = [\n  {\n    id: 'source-maps',\n    name: t('Source Maps'),\n    description: t('Learn how to enable readable stack traces in your Sentry errors.'),\n    link: 'https://docs.sentry.io/platforms/javascript/guides/remix/sourcemaps/',\n  },\n  {\n    id: 'performance-monitoring',\n    name: t('Performance Monitoring'),\n    description: t(\n      'Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n    ),\n    link: 'https://docs.sentry.io/platforms/javascript/guides/remix/performance/',\n  },\n  {\n    id: 'session-replay',\n    name: t('Session Replay'),\n    description: t(\n      'Get to the root cause of an error or latency issue faster by seeing all the technical details related to that issue in one visual replay on your web application.'\n    ),\n    link: 'https://docs.sentry.io/platforms/javascript/guides/remix/session-replay/',\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithRemix({\n  dsn,\n  activeProductSelection = [],\n  ...props\n}: ModuleProps) {\n  const integrations: string[] = [];\n  const otherConfigs: string[] = [];\n\n  let nextStepDocs = [...nextSteps];\n  const sentryInitContentServer: string[] = [`dsn: \"${dsn}\",`];\n\n  if (activeProductSelection.includes(ProductSolution.PERFORMANCE_MONITORING)) {\n    integrations.push(performanceIntegration.trim());\n    otherConfigs.push(performanceOtherConfig.trim());\n    sentryInitContentServer.push(prismaConfig.trim());\n    sentryInitContentServer.push(performanceOtherConfig.trim());\n    nextStepDocs = nextStepDocs.filter(\n      step => step.id !== ProductSolution.PERFORMANCE_MONITORING\n    );\n  }\n\n  if (activeProductSelection.includes(ProductSolution.SESSION_REPLAY)) {\n    integrations.push(replayIntegration.trim());\n    otherConfigs.push(replayOtherConfig.trim());\n    nextStepDocs = nextStepDocs.filter(\n      step => step.id !== ProductSolution.SESSION_REPLAY\n    );\n  }\n\n  let sentryInitContent: string[] = [`dsn: \"${dsn}\",`];\n\n  if (integrations.length > 0) {\n    sentryInitContent = sentryInitContent.concat('integrations: [', integrations, '],');\n  }\n\n  if (otherConfigs.length > 0) {\n    sentryInitContent = sentryInitContent.concat(otherConfigs);\n  }\n\n  return (\n    <Layout\n      steps={steps({\n        sentryInitContent: sentryInitContent.join('\\n'),\n        sentryInitContentServer,\n      })}\n      nextSteps={nextStepDocs}\n      {...props}\n    />\n  );\n}\n\nexport default GettingStartedWithRemix;\n"],"names":["replayIntegration","replayOtherConfig","performanceIntegration","performanceOtherConfig","prismaConfig","steps","sentryInitContent","sentryInitContentServer","arguments","length","undefined","type","StepType","INSTALL","description","t","configurations","language","code","CONFIGURE","_jsx","children","tct","action","ExternalLink","href","loader","join","VERIFY","nextSteps","id","name","link","GettingStartedWithRemix","_ref","dsn","activeProductSelection","props","integrations","otherConfigs","nextStepDocs","includes","ProductSolution","PERFORMANCE_MONITORING","push","trim","filter","step","SESSION_REPLAY","concat","Layout","displayName"],"sourceRoot":""}