{"version":3,"file":"chunks/app_views_settings_projectAlerts_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"iYAaA,SAASA,EAAaC,GAA2C,IAA1C,SAACC,EAAQ,aAAEC,EAAY,QAAEC,GAAeH,EAC7D,OACEI,EAAAA,EAAAA,IAACC,EAAAA,EAAM,CAACC,OAAQ,CAAC,iBAAkBH,QAASA,EAAQF,SACjDM,IAAA,IAAC,UAACC,GAAUD,EAAA,OACXH,EAAAA,EAAAA,IAACK,EAAAA,SAAQ,CAAAR,UACNS,EAAAA,EAAAA,gBAAeT,KACdU,EAAAA,EAAAA,cAAkBV,EAAU,CAC1BC,eACAU,YAAaJ,KAER,GAInB,CAdST,EAAac,YAAA,gBAgBtB,S","sources":["webpack:///./app/views/settings/projectAlerts/index.tsx"],"sourcesContent":["import {cloneElement, Fragment, isValidElement} from 'react';\nimport type {RouteComponentProps} from 'react-router';\n\nimport Access from 'sentry/components/acl/access';\nimport {Organization, Project} from 'sentry/types';\n\ninterface Props\n  extends RouteComponentProps<{organizationId: string; projectId: string}, {}> {\n  children: React.ReactNode;\n  organization: Organization;\n  project: Project;\n}\n\nfunction ProjectAlerts({children, organization, project}: Props) {\n  return (\n    <Access access={['project:write']} project={project}>\n      {({hasAccess}) => (\n        <Fragment>\n          {isValidElement(children) &&\n            cloneElement<any>(children, {\n              organization,\n              canEditRule: hasAccess,\n            })}\n        </Fragment>\n      )}\n    </Access>\n  );\n}\n\nexport default ProjectAlerts;\n"],"names":["ProjectAlerts","_ref","children","organization","project","_jsx","Access","access","_ref2","hasAccess","Fragment","isValidElement","cloneElement","canEditRule","displayName"],"sourceRoot":""}