{"version":3,"file":"chunks/app_components_modals_widgetBuilder_addToDashboardModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/widgetBuilder/addToDashboardModal.tsx","webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuery.tsx","webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums.tsx","webpack:///./app/utils/performance/contexts/metricsCardinality.tsx","webpack:///./app/views/performance/landing/metricsDataSwitcher.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location, Query} from 'history';\n\nimport {\n  fetchDashboard,\n  fetchDashboards,\n  updateDashboard,\n} from 'sentry/actionCreators/dashboards';\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {DateString, Organization, PageFilters, SelectValue} from 'sentry/types';\nimport {MetricsCardinalityProvider} from 'sentry/utils/performance/contexts/metricsCardinality';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport useApi from 'sentry/utils/useApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport {\n  DashboardDetails,\n  DashboardListItem,\n  DisplayType,\n  MAX_WIDGETS,\n  Widget,\n} from 'sentry/views/dashboards/types';\nimport {\n  eventViewFromWidget,\n  getDashboardFiltersFromURL,\n  getSavedFiltersAsPageFilters,\n  getSavedPageFilters,\n} from 'sentry/views/dashboards/utils';\nimport {NEW_DASHBOARD_ID} from 'sentry/views/dashboards/widgetBuilder/utils';\nimport WidgetCard from 'sentry/views/dashboards/widgetCard';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\nimport {MetricsDataSwitcher} from 'sentry/views/performance/landing/metricsDataSwitcher';\n\ntype WidgetAsQueryParams = Query<{\n  defaultTableColumns: string[];\n  defaultTitle: string;\n  defaultWidgetQuery: string;\n  displayType: DisplayType;\n  environment: string[];\n  project: number[];\n  source: string;\n  end?: DateString;\n  start?: DateString;\n  statsPeriod?: string | null;\n}>;\n\nexport type AddToDashboardModalProps = {\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widget: Widget;\n  widgetAsQueryParams: WidgetAsQueryParams;\n};\n\ntype Props = ModalRenderProps & AddToDashboardModalProps;\n\nconst SELECT_DASHBOARD_MESSAGE = t('Select a dashboard');\n\nfunction AddToDashboardModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  location,\n  organization,\n  router,\n  selection,\n  widget,\n  widgetAsQueryParams,\n}: Props) {\n  const api = useApi();\n  const [dashboards, setDashboards] = useState<DashboardListItem[] | null>(null);\n  const [selectedDashboard, setSelectedDashboard] = useState<DashboardDetails | null>(\n    null\n  );\n  const [selectedDashboardId, setSelectedDashboardId] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Track mounted state so we dont call setState on unmounted components\n    let unmounted = false;\n\n    fetchDashboards(api, organization.slug).then(response => {\n      // If component has unmounted, dont set state\n      if (unmounted) {\n        return;\n      }\n\n      setDashboards(response);\n    });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, organization.slug]);\n\n  useEffect(() => {\n    // Track mounted state so we dont call setState on unmounted components\n    let unmounted = false;\n\n    if (selectedDashboardId === NEW_DASHBOARD_ID || selectedDashboardId === null) {\n      setSelectedDashboard(null);\n    } else {\n      fetchDashboard(api, organization.slug, selectedDashboardId).then(response => {\n        // If component has unmounted, dont set state\n        if (unmounted) {\n          return;\n        }\n\n        setSelectedDashboard(response);\n      });\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, organization.slug, selectedDashboardId]);\n\n  function handleGoToBuilder() {\n    const pathname =\n      selectedDashboardId === NEW_DASHBOARD_ID\n        ? `/organizations/${organization.slug}/dashboards/new/widget/new/`\n        : `/organizations/${organization.slug}/dashboard/${selectedDashboardId}/widget/new/`;\n\n    router.push(\n      normalizeUrl({\n        pathname,\n        query: {\n          ...widgetAsQueryParams,\n          ...(selectedDashboard ? getSavedPageFilters(selectedDashboard) : {}),\n        },\n      })\n    );\n    closeModal();\n  }\n\n  async function handleAddAndStayInDiscover() {\n    if (selectedDashboard === null) {\n      return;\n    }\n\n    let orderby = widget.queries[0].orderby;\n    if (!(DisplayType.AREA && widget.queries[0].columns.length)) {\n      orderby = ''; // Clear orderby if its not a top n visualization.\n    }\n    const query = widget.queries[0];\n\n    const newWidget = {\n      ...widget,\n      title: widget.title === '' ? t('All Events') : widget.title,\n      queries: [{...query, orderby}],\n    };\n\n    const newDashboard = {\n      ...selectedDashboard,\n      widgets: [...selectedDashboard.widgets, newWidget],\n    };\n\n    await updateDashboard(api, organization.slug, newDashboard);\n\n    closeModal();\n    addSuccessMessage(t('Successfully added widget to dashboard'));\n  }\n\n  const canSubmit = selectedDashboardId !== null;\n\n  return (\n    <OrganizationContext.Provider value={organization}>\n      <Header closeButton>\n        <h4>{t('Add to Dashboard')}</h4>\n      </Header>\n      <Body>\n        <Wrapper>\n          <SelectControl\n            disabled={dashboards === null}\n            menuPlacement=\"auto\"\n            name=\"dashboard\"\n            placeholder={t('Select Dashboard')}\n            value={selectedDashboardId}\n            options={\n              dashboards && [\n                {label: t('+ Create New Dashboard'), value: 'new'},\n                ...dashboards.map(({title, id, widgetDisplay}) => ({\n                  label: title,\n                  value: id,\n                  disabled: widgetDisplay.length >= MAX_WIDGETS,\n                  tooltip:\n                    widgetDisplay.length >= MAX_WIDGETS &&\n                    tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n                      maxWidgets: MAX_WIDGETS,\n                    }),\n                  tooltipOptions: {position: 'right'},\n                })),\n              ]\n            }\n            onChange={(option: SelectValue<string>) => {\n              if (option.disabled) {\n                return;\n              }\n              setSelectedDashboardId(option.value);\n            }}\n          />\n        </Wrapper>\n        <Wrapper>\n          {t(\n            'Any conflicting filters from this query will be overridden by Dashboard filters. This is a preview of how the widget will appear in your dashboard.'\n          )}\n        </Wrapper>\n        <MetricsCardinalityProvider organization={organization} location={location}>\n          <MetricsDataSwitcher\n            organization={organization}\n            eventView={eventViewFromWidget(\n              widget.title,\n              widget.queries[0],\n              selection,\n              widget.displayType\n            )}\n            location={location}\n            hideLoadingIndicator\n          >\n            {metricsDataSide => (\n              <MEPSettingProvider\n                location={location}\n                forceTransactions={metricsDataSide.forceTransactionsOnly}\n              >\n                <WidgetCard\n                  organization={organization}\n                  isEditing={false}\n                  widgetLimitReached={false}\n                  selection={\n                    selectedDashboard\n                      ? getSavedFiltersAsPageFilters(selectedDashboard)\n                      : selection\n                  }\n                  dashboardFilters={\n                    getDashboardFiltersFromURL(location) ?? selectedDashboard?.filters\n                  }\n                  widget={widget}\n                  showStoredAlert\n                />\n              </MEPSettingProvider>\n            )}\n          </MetricsDataSwitcher>\n        </MetricsCardinalityProvider>\n      </Body>\n\n      <Footer>\n        <StyledButtonBar gap={1.5}>\n          <Button\n            onClick={handleAddAndStayInDiscover}\n            disabled={!canSubmit || selectedDashboardId === NEW_DASHBOARD_ID}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Add + Stay in Discover')}\n          </Button>\n          <Button\n            priority=\"primary\"\n            onClick={handleGoToBuilder}\n            disabled={!canSubmit}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Open in Widget Builder')}\n          </Button>\n        </StyledButtonBar>\n      </Footer>\n    </OrganizationContext.Provider>\n  );\n}\n\nexport default AddToDashboardModal;\n\nconst Wrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (max-width: ${props => props.theme.breakpoints.small}) {\n    grid-template-rows: repeat(2, 1fr);\n    gap: ${space(1.5)};\n    width: 100%;\n\n    > button {\n      width: 100%;\n    }\n  }\n`;\n\nexport const modalCss = css`\n  max-width: 700px;\n  margin: 70px auto;\n`;\n","import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nexport interface MetricsCompatibilityData {\n  compatible_projects?: number[];\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilityData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilityQuery({children, ...props}: QueryProps) {\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilityData, {}>\n      route=\"metrics-compatibility-sums\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nexport interface MetricsCompatibilitySumData {\n  sum: {\n    metrics?: number;\n    metrics_null?: number;\n    metrics_unparam?: number;\n  };\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilitySumData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilitySumsQuery({children, ...props}: QueryProps) {\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilitySumData, {}>\n      route=\"metrics-compatibility\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import {ComponentProps, Fragment, ReactNode, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport {parsePeriodToHours} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {canUseMetricsData} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport MetricsCompatibilityQuery, {\n  MetricsCompatibilityData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuery';\nimport MetricsCompatibilitySumsQuery, {\n  MetricsCompatibilitySumData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums';\n\nimport {createDefinedContext} from './utils';\n\nconst UNPARAM_THRESHOLD = 0.01;\nconst NULL_THRESHOLD = 0.01;\n\nexport interface MetricDataSwitcherOutcome {\n  forceTransactionsOnly: boolean;\n  compatibleProjects?: number[];\n  shouldNotifyUnnamedTransactions?: boolean;\n  shouldWarnIncompatibleSDK?: boolean;\n}\nexport interface MetricsCardinalityContext {\n  isLoading: boolean;\n  outcome?: MetricDataSwitcherOutcome;\n}\n\ntype MergedMetricsData = MetricsCompatibilityData & MetricsCompatibilitySumData;\n\nconst [_Provider, _useContext, _Context] =\n  createDefinedContext<MetricsCardinalityContext>({\n    name: 'MetricsCardinalityContext',\n    strict: false,\n  });\n\n/**\n * This provider determines whether the metrics data is storing performance information correctly before we\n * make dozens of requests on pages such as performance landing and dashboards.\n */\nexport function MetricsCardinalityProvider(props: {\n  children: ReactNode;\n  location: Location;\n  organization: Organization;\n  sendOutcomeAnalytics?: boolean;\n}) {\n  const isUsingMetrics = canUseMetricsData(props.organization);\n\n  if (!isUsingMetrics) {\n    return (\n      <_Provider\n        value={{\n          isLoading: false,\n          outcome: {\n            forceTransactionsOnly: true,\n          },\n        }}\n      >\n        {props.children}\n      </_Provider>\n    );\n  }\n\n  const baseDiscoverProps = {\n    location: props.location,\n    orgSlug: props.organization.slug,\n    cursor: '0:0:0',\n  };\n  const eventView = EventView.fromLocation(props.location);\n  eventView.fields = [{field: 'tpm()'}];\n  const _eventView = adjustEventViewTime(eventView);\n\n  return (\n    <Fragment>\n      <MetricsCompatibilityQuery eventView={_eventView} {...baseDiscoverProps}>\n        {compatabilityResult => (\n          <MetricsCompatibilitySumsQuery eventView={_eventView} {...baseDiscoverProps}>\n            {sumsResult => {\n              const isLoading = compatabilityResult.isLoading || sumsResult.isLoading;\n              const outcome =\n                compatabilityResult.isLoading || sumsResult.isLoading\n                  ? undefined\n                  : getMetricsOutcome(\n                      compatabilityResult.tableData && sumsResult.tableData\n                        ? {\n                            ...compatabilityResult.tableData,\n                            ...sumsResult.tableData,\n                          }\n                        : null,\n                      !!compatabilityResult.error && !!sumsResult.error,\n                      props.organization\n                    );\n\n              return (\n                <Provider\n                  sendOutcomeAnalytics={props.sendOutcomeAnalytics}\n                  organization={props.organization}\n                  value={{\n                    isLoading,\n                    outcome,\n                  }}\n                >\n                  {props.children}\n                </Provider>\n              );\n            }}\n          </MetricsCompatibilitySumsQuery>\n        )}\n      </MetricsCompatibilityQuery>\n    </Fragment>\n  );\n}\n\nfunction Provider(\n  props: ComponentProps<typeof _Provider> & {\n    organization: Organization;\n    sendOutcomeAnalytics?: boolean;\n  }\n) {\n  const fallbackFromNull = props.value.outcome?.shouldWarnIncompatibleSDK ?? false;\n  const fallbackFromUnparam =\n    props.value.outcome?.shouldNotifyUnnamedTransactions ?? false;\n  const isOnMetrics = !props.value.outcome?.forceTransactionsOnly;\n  useEffect(() => {\n    if (!props.value.isLoading && props.sendOutcomeAnalytics) {\n      trackAnalytics('performance_views.mep.metrics_outcome', {\n        organization: props.organization,\n        is_on_metrics: isOnMetrics,\n        fallback_from_null: fallbackFromNull,\n        fallback_from_unparam: fallbackFromUnparam,\n      });\n    }\n  }, [\n    props.organization,\n    props.value.isLoading,\n    isOnMetrics,\n    fallbackFromUnparam,\n    fallbackFromNull,\n    props.sendOutcomeAnalytics,\n  ]);\n  return <_Provider {...props}>{props.children}</_Provider>;\n}\n\nexport const MetricsCardinalityConsumer = _Context.Consumer;\n\nexport const useMetricsCardinalityContext = _useContext;\n\n/**\n * Logic for picking sides of metrics vs. transactions along with the associated warnings.\n */\nfunction getMetricsOutcome(\n  dataCounts: MergedMetricsData | null,\n  hasOtherFallbackCondition: boolean,\n  organization: Organization\n) {\n  const fallbackOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: true,\n  };\n  const successOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: false,\n  };\n  const isOnFallbackThresolds = organization.features.includes(\n    'performance-mep-bannerless-ui'\n  );\n\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n  const compatibleProjects = dataCounts.compatible_projects;\n\n  if (hasOtherFallbackCondition) {\n    return fallbackOutcome;\n  }\n\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n\n  if (checkNoDataFallback(dataCounts)) {\n    return fallbackOutcome;\n  }\n\n  if (checkIncompatibleData(dataCounts, isOnFallbackThresolds)) {\n    return {\n      shouldWarnIncompatibleSDK: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfAllOtherData(dataCounts)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfPartialOtherData(dataCounts, isOnFallbackThresolds)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      compatibleProjects,\n      forceTransactionsOnly: false,\n    };\n  }\n\n  return successOutcome;\n}\n\n/**\n * Fallback if no metrics found.\n */\nfunction checkNoDataFallback(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return !counts.metricsCount;\n}\n\n/**\n * Fallback and warn if incompatible data found (old specific SDKs).\n */\nfunction checkIncompatibleData(\n  dataCounts: MergedMetricsData,\n  isOnFallbackThresolds: boolean\n) {\n  const counts = normalizeCounts(dataCounts);\n  if (isOnFallbackThresolds) {\n    const ratio = counts.nullCount / counts.metricsCount;\n    return ratio > NULL_THRESHOLD;\n  }\n  return counts.nullCount > 0;\n}\n\n/**\n * Fallback and warn about unnamed transactions (specific SDKs).\n */\nfunction checkIfAllOtherData(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return counts.unparamCount >= counts.metricsCount;\n}\n\n/**\n * Show metrics but warn about unnamed transactions.\n */\nfunction checkIfPartialOtherData(\n  dataCounts: MergedMetricsData,\n  isOnFallbackThresolds: boolean\n) {\n  const counts = normalizeCounts(dataCounts);\n  if (isOnFallbackThresolds) {\n    const ratio = counts.unparamCount / counts.metricsCount;\n    return ratio > UNPARAM_THRESHOLD;\n  }\n  return counts.unparamCount > 0;\n}\n\n/**\n * Temporary function, can be removed after API changes.\n */\nfunction normalizeCounts({sum}: MergedMetricsData) {\n  try {\n    const metricsCount = Number(sum.metrics);\n    const unparamCount = Number(sum.metrics_unparam);\n    const nullCount = Number(sum.metrics_null);\n    return {\n      metricsCount,\n      unparamCount,\n      nullCount,\n    };\n  } catch (_) {\n    return {\n      metricsCount: 0,\n      unparamCount: 0,\n      nullCount: 0,\n    };\n  }\n}\n\n/**\n * Performance optimization to limit the amount of rows scanned before showing the landing page.\n */\nfunction adjustEventViewTime(eventView: EventView) {\n  const _eventView = eventView.clone();\n\n  if (!_eventView.start && !_eventView.end) {\n    if (!_eventView.statsPeriod) {\n      _eventView.statsPeriod = '1h';\n      _eventView.start = undefined;\n      _eventView.end = undefined;\n    } else {\n      const periodHours = parsePeriodToHours(_eventView.statsPeriod);\n      if (periodHours > 1) {\n        _eventView.statsPeriod = '1h';\n        _eventView.start = undefined;\n        _eventView.end = undefined;\n      }\n    }\n  }\n  return _eventView;\n}\n","import {Fragment, useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  MetricDataSwitcherOutcome,\n  useMetricsCardinalityContext,\n} from 'sentry/utils/performance/contexts/metricsCardinality';\nimport {\n  canUseMetricsData,\n  MEPState,\n  METRIC_SEARCH_SETTING_PARAM,\n} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\ninterface MetricDataSwitchProps {\n  children: (props: MetricDataSwitcherOutcome) => React.ReactNode;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  hideLoadingIndicator?: boolean;\n}\n\n/**\n * This component decides based on some stats about current projects whether to show certain views of the landing page.\n * It is primarily needed for the rollout during which time users, despite having the flag enabled,\n * may or may not have sampling rules, compatible sdk's etc. This can be simplified post rollout.\n */\nexport function MetricsDataSwitcher(props: MetricDataSwitchProps) {\n  const isUsingMetrics = canUseMetricsData(props.organization);\n  const metricsCardinality = useMetricsCardinalityContext();\n\n  if (!isUsingMetrics) {\n    return (\n      <Fragment>\n        {props.children({\n          forceTransactionsOnly: true,\n        })}\n      </Fragment>\n    );\n  }\n\n  if (metricsCardinality.isLoading && !props.hideLoadingIndicator) {\n    return (\n      <Fragment>\n        <LoadingContainer>\n          <LoadingIndicator />\n        </LoadingContainer>\n      </Fragment>\n    );\n  }\n\n  if (!metricsCardinality.outcome) {\n    return (\n      <Fragment>\n        {props.children({\n          forceTransactionsOnly: true,\n        })}\n      </Fragment>\n    );\n  }\n\n  return (\n    <Fragment>\n      <MetricsSwitchHandler\n        eventView={props.eventView}\n        location={props.location}\n        outcome={metricsCardinality.outcome}\n        switcherChildren={props.children}\n      />\n    </Fragment>\n  );\n}\n\ninterface SwitcherHandlerProps {\n  eventView: EventView;\n  location: Location;\n  outcome: MetricDataSwitcherOutcome;\n  switcherChildren: MetricDataSwitchProps['children'];\n}\n\nfunction MetricsSwitchHandler({\n  switcherChildren,\n  outcome,\n  location,\n  eventView,\n}: SwitcherHandlerProps) {\n  const {query} = location;\n  const mepSearchState = decodeScalar(query[METRIC_SEARCH_SETTING_PARAM], '');\n  const hasQuery = decodeScalar(query.query, '');\n  const queryIsTransactionsBased = mepSearchState === MEPState.TRANSACTIONS_ONLY;\n\n  const shouldAdjustQuery =\n    hasQuery && queryIsTransactionsBased && !outcome.forceTransactionsOnly;\n\n  useEffect(() => {\n    if (shouldAdjustQuery) {\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          cursor: undefined,\n          query: undefined,\n          [METRIC_SEARCH_SETTING_PARAM]: undefined,\n        },\n      });\n    }\n  }, [shouldAdjustQuery, location]);\n\n  if (hasQuery && queryIsTransactionsBased && !outcome.forceTransactionsOnly) {\n    eventView.query = ''; // TODO: Create switcher provider and move it to the route level to remove the need for this.\n  }\n\n  return <Fragment>{switcherChildren(outcome)}</Fragment>;\n}\n\nconst LoadingContainer = styled('div')`\n  display: flex;\n  justify-content: center;\n`;\n"],"names":["SELECT_DASHBOARD_MESSAGE","t","AddToDashboardModal","_ref","Header","Body","Footer","closeModal","location","organization","router","selection","widget","widgetAsQueryParams","api","useApi","dashboards","setDashboards","useState","selectedDashboard","setSelectedDashboard","selectedDashboardId","setSelectedDashboardId","useEffect","unmounted","fetchDashboards","slug","then","response","NEW_DASHBOARD_ID","fetchDashboard","canSubmit","_jsxs","OrganizationContext","Provider","value","children","_jsx","closeButton","Wrapper","SelectControl","disabled","menuPlacement","name","placeholder","options","label","map","_ref2","title","id","widgetDisplay","length","MAX_WIDGETS","tooltip","tct","maxWidgets","tooltipOptions","position","onChange","option","MetricsCardinalityProvider","MetricsDataSwitcher","eventView","eventViewFromWidget","queries","displayType","hideLoadingIndicator","metricsDataSide","MEPSettingProvider","forceTransactions","forceTransactionsOnly","WidgetCard","isEditing","widgetLimitReached","getSavedFiltersAsPageFilters","dashboardFilters","getDashboardFiltersFromURL","filters","showStoredAlert","StyledButtonBar","gap","Button","onClick","async","orderby","DisplayType","AREA","columns","query","newWidget","newDashboard","widgets","updateDashboard","addSuccessMessage","undefined","priority","pathname","push","normalizeUrl","getSavedPageFilters","displayName","_styled","target","space","ButtonBar","props","theme","breakpoints","small","modalCss","styles","getRequestPayload","omit","getEventsAPIPayload","MetricsCompatibilityQuery","GenericDiscoverQuery","route","_ref3","tableData","rest","MetricsCompatibilitySumsQuery","UNPARAM_THRESHOLD","NULL_THRESHOLD","_Provider","_useContext","_Context","createDefinedContext","strict","canUseMetricsData","isLoading","outcome","baseDiscoverProps","orgSlug","cursor","EventView","fromLocation","fields","field","_eventView","clone","start","end","statsPeriod","parsePeriodToHours","adjustEventViewTime","Fragment","compatabilityResult","sumsResult","dataCounts","hasOtherFallbackCondition","fallbackOutcome","isOnFallbackThresolds","features","includes","compatibleProjects","compatible_projects","normalizeCounts","metricsCount","checkNoDataFallback","counts","nullCount","checkIncompatibleData","shouldWarnIncompatibleSDK","unparamCount","checkIfAllOtherData","shouldNotifyUnnamedTransactions","checkIfPartialOtherData","getMetricsOutcome","error","sendOutcomeAnalytics","fallbackFromNull","fallbackFromUnparam","isOnMetrics","trackAnalytics","is_on_metrics","fallback_from_null","fallback_from_unparam","Consumer","useMetricsCardinalityContext","sum","Number","metrics","metrics_unparam","metrics_null","_","isUsingMetrics","metricsCardinality","LoadingContainer","LoadingIndicator","MetricsSwitchHandler","switcherChildren","mepSearchState","decodeScalar","METRIC_SEARCH_SETTING_PARAM","hasQuery","queryIsTransactionsBased","MEPState","TRANSACTIONS_ONLY","shouldAdjustQuery","browserHistory"],"sourceRoot":""}