{"version":3,"file":"chunks/app_views_settings_organizationAuditLog_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/activity/item/avatar.tsx","webpack:///./app/views/settings/organizationAuditLog/auditLogList.tsx","webpack:///./app/views/settings/organizationAuditLog/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconSentry} from 'sentry/icons';\nimport {AvatarUser} from 'sentry/types';\n\ntype Props = {\n  type: 'system' | 'user';\n  className?: string;\n  size?: number;\n  user?: AvatarUser;\n};\n\nfunction ActivityAvatar({className, type, user, size = 38}: Props) {\n  if (user) {\n    return <UserAvatar user={user} size={size} className={className} />;\n  }\n\n  if (type === 'system') {\n    // Return Sentry avatar\n    return (\n      <SystemAvatar className={className} size={size}>\n        <StyledIconSentry size=\"md\" />\n      </SystemAvatar>\n    );\n  }\n\n  return (\n    <Placeholder\n      className={className}\n      width={`${size}px`}\n      height={`${size}px`}\n      shape=\"circle\"\n    />\n  );\n}\n\nexport {ActivityAvatar};\n\ntype SystemAvatarProps = {\n  size: number;\n};\n\nconst SystemAvatar = styled('span')<SystemAvatarProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${p => p.size}px;\n  height: ${p => p.size}px;\n  background-color: ${p => p.theme.textColor};\n  color: ${p => p.theme.background};\n  border-radius: 50%;\n`;\n\nconst StyledIconSentry = styled(IconSentry)`\n  padding-bottom: 3px;\n`;\n\nconst DO_NOT_USE_ACTIVITY_AVATAR = ActivityAvatar;\n\nexport default DO_NOT_USE_ACTIVITY_AVATAR;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {ActivityAvatar} from 'sentry/components/activity/item/avatar';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport DateTime from 'sentry/components/dateTime';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport Link from 'sentry/components/links/link';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Tag from 'sentry/components/tag';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {AuditLog, Organization, User} from 'sentry/types';\nimport {shouldUse24Hours} from 'sentry/utils/dates';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport {\n  projectDetectorSettingsId,\n  retentionPrioritiesLabels,\n} from 'sentry/views/settings/projectPerformance/projectPerformance';\n\nconst avatarStyle = {\n  width: 36,\n  height: 36,\n  marginRight: 8,\n};\n\nconst getAvatarDisplay = (logEntryUser: User | undefined) => {\n  // Display Sentry's avatar for system or superuser-initiated events\n  if (\n    logEntryUser?.isSuperuser ||\n    (logEntryUser?.name === 'Sentry' && logEntryUser?.email === undefined)\n  ) {\n    return <SentryAvatar type=\"system\" size={36} />;\n  }\n  // Display user's avatar for non-superusers-initiated events\n  if (logEntryUser !== undefined) {\n    return <UserAvatar style={avatarStyle} user={logEntryUser} />;\n  }\n  return null;\n};\n\nconst addUsernameDisplay = (logEntryUser: User | undefined) => {\n  if (logEntryUser?.isSuperuser) {\n    return (\n      <Name data-test-id=\"actor-name\">\n        {logEntryUser.name}\n        <StaffTag>{t('Sentry Staff')}</StaffTag>\n      </Name>\n    );\n  }\n  if (logEntryUser !== undefined) {\n    return <Name data-test-id=\"actor-name\">{logEntryUser.name}</Name>;\n  }\n  return null;\n};\n\nconst getTypeDisplay = (event: string) => {\n  if (event.startsWith('rule.')) {\n    return event.replace('rule.', 'issue-alert.');\n  }\n  if (event.startsWith('alertrule.')) {\n    return event.replace('alertrule.', 'metric-alert.');\n  }\n  return event;\n};\n\nconst getEventOptions = (eventTypes: string[] | null) =>\n  eventTypes\n    ?.map(type => {\n      // Having both rule.x and alertrule.x may be confusing, so we'll replace their labels to be more descriptive.\n      // We need to maintain the values here so we still fetch the correct audit log events from the backend should we want\n      // to filter.\n      // See https://github.com/getsentry/sentry/issues/46997\n      if (type.startsWith('rule.')) {\n        return {\n          label: type.replace('rule.', 'issue-alert.'),\n          value: type,\n        };\n      }\n      if (type.startsWith('alertrule.')) {\n        return {\n          label: type.replace('alertrule.', 'metric-alert.'),\n          value: type,\n        };\n      }\n      return {\n        label: type,\n        value: type,\n      };\n    })\n    .sort((a, b) => a.label.localeCompare(b.label));\n\nfunction AuditNote({\n  entry,\n  orgSlug,\n}: {\n  entry: NonNullable<AuditLog>;\n  orgSlug: Organization['slug'];\n}) {\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === String(entry.data.id));\n\n  if (entry.event.startsWith('rule.')) {\n    return <Note>{entry.note.replace('rule', 'issue alert rule')}</Note>;\n  }\n\n  if (!project) {\n    return <Note>{entry.note}</Note>;\n  }\n\n  if (entry.event === 'project.create') {\n    return (\n      <Note>\n        {tct('Created project [projectSettingsLink]', {\n          projectSettingsLink: (\n            <Link to={`/settings/${orgSlug}/projects/${project.slug}/`}>\n              {entry.data.slug}\n            </Link>\n          ),\n        })}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'project.edit') {\n    if (entry.data.old_slug && entry.data.new_slug) {\n      return (\n        <Note>\n          {tct('Renamed project slug from [old-slug] to [new-slug]', {\n            'old-slug': entry.data.old_slug,\n            'new-slug': (\n              <Link to={`/settings/${orgSlug}/projects/${entry.data.new_slug}/`}>\n                {entry.data.new_slug}\n              </Link>\n            ),\n          })}\n        </Note>\n      );\n    }\n\n    return (\n      <Note>\n        {tct('Edited project [projectSettingsLink] [note]', {\n          projectSettingsLink: (\n            <Link to={`/settings/${orgSlug}/projects/${project.slug}/`}>\n              {entry.data.slug}\n            </Link>\n          ),\n          note: entry.note.replace('edited project settings ', ''),\n        })}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'project.change-performance-issue-detection') {\n    return (\n      <Note>\n        {tct('Edited project [projectSettingsLink] [note]', {\n          projectSettingsLink: (\n            <Link\n              to={`/settings/${orgSlug}/projects/${project.slug}/performance/#${projectDetectorSettingsId}`}\n            >\n              {entry.data.slug} performance issue detector settings\n            </Link>\n          ),\n          note: entry.note.replace(\n            'edited project performance issue detector settings ',\n            ''\n          ),\n        })}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'sampling_priority.enabled') {\n    return (\n      <Note>\n        {tct(\n          'Enabled retention priority \"[biasLabel]\" in project [samplingInProjectSettingsLink]',\n          {\n            samplingInProjectSettingsLink: (\n              <Link to={`/settings/${orgSlug}/projects/${project.slug}/performance/`}>\n                {entry.data.slug}\n              </Link>\n            ),\n            biasLabel: retentionPrioritiesLabels[entry.data.name],\n          }\n        )}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'sampling_priority.disabled') {\n    return (\n      <Note>\n        {tct(\n          'Disabled retention priority \"[biasLabel]\" in project [samplingInProjectSettingsLink]',\n          {\n            samplingInProjectSettingsLink: (\n              <Link to={`/settings/${orgSlug}/projects/${project.slug}/performance/`}>\n                {entry.data.slug}\n              </Link>\n            ),\n            biasLabel: retentionPrioritiesLabels[entry.data.name],\n          }\n        )}\n      </Note>\n    );\n  }\n\n  return <Note>{entry.note}</Note>;\n}\n\ntype Props = {\n  entries: AuditLog[] | null;\n  eventType: string | undefined;\n  eventTypes: string[] | null;\n  isLoading: boolean;\n  onCursor: CursorHandler | undefined;\n  onEventSelect: (value: string) => void;\n  pageLinks: string | null;\n};\n\nfunction AuditLogList({\n  isLoading,\n  pageLinks,\n  entries,\n  eventType,\n  eventTypes,\n  onCursor,\n  onEventSelect,\n}: Props) {\n  const is24Hours = shouldUse24Hours();\n  const organization = useOrganization();\n  const hasEntries = entries && entries.length > 0;\n  const ipv4Length = 15;\n\n  const action = (\n    <EventSelector\n      clearable\n      isDisabled={isLoading}\n      name=\"eventFilter\"\n      value={eventType}\n      placeholder={t('Select Action: ')}\n      options={getEventOptions(eventTypes)}\n      onChange={options => {\n        onEventSelect(options?.value);\n      }}\n    />\n  );\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('Audit Log')} action={action} />\n      <PanelTable\n        headers={[t('Member'), t('Action'), t('IP'), t('Time')]}\n        isEmpty={!hasEntries && entries?.length === 0}\n        emptyMessage={t('No audit entries available')}\n        isLoading={isLoading}\n      >\n        {(entries ?? []).map(entry => {\n          if (!entry) {\n            return null;\n          }\n          return (\n            <Fragment key={entry.id}>\n              <UserInfo>\n                <div>{getAvatarDisplay(entry.actor)}</div>\n                <NameContainer>\n                  {addUsernameDisplay(entry.actor)}\n                  <AuditNote entry={entry} orgSlug={organization.slug} />\n                </NameContainer>\n              </UserInfo>\n              <FlexCenter>\n                <MonoDetail>{getTypeDisplay(entry.event)}</MonoDetail>\n              </FlexCenter>\n              <FlexCenter>\n                {entry.ipAddress && (\n                  <IpAddressOverflow>\n                    <Tooltip\n                      title={entry.ipAddress}\n                      disabled={entry.ipAddress.length <= ipv4Length}\n                    >\n                      <MonoDetail>{entry.ipAddress}</MonoDetail>\n                    </Tooltip>\n                  </IpAddressOverflow>\n                )}\n              </FlexCenter>\n              <TimestampInfo>\n                <DateTime dateOnly date={entry.dateCreated} />\n                <DateTime\n                  timeOnly\n                  format={is24Hours ? 'HH:mm zz' : 'LT zz'}\n                  date={entry.dateCreated}\n                />\n              </TimestampInfo>\n            </Fragment>\n          );\n        })}\n      </PanelTable>\n      {pageLinks && <Pagination pageLinks={pageLinks} onCursor={onCursor} />}\n    </div>\n  );\n}\n\nconst SentryAvatar = styled(ActivityAvatar)`\n  margin-right: ${space(1)};\n`;\n\nconst Name = styled('strong')`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StaffTag = styled(Tag)`\n  padding: ${space(1)};\n`;\n\nconst EventSelector = styled(SelectControl)`\n  width: 250px;\n`;\n\nconst UserInfo = styled('div')`\n  display: flex;\n  align-items: center;\n  line-height: 1.2;\n  font-size: ${p => p.theme.fontSizeSmall};\n  min-width: 250px;\n`;\n\nconst NameContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst Note = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  word-break: break-word;\n  margin-top: ${space(0.5)};\n`;\n\nconst FlexCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IpAddressOverflow = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  min-width: 90px;\n`;\n\nconst MonoDetail = styled('code')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: no-wrap;\n`;\n\nconst TimestampInfo = styled('div')`\n  display: grid;\n  grid-template-rows: auto auto;\n  gap: ${space(1)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default AuditLogList;\n","import {Fragment, useCallback, useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {CursorHandler} from 'sentry/components/pagination';\nimport {AuditLog} from 'sentry/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport AuditLogList from './auditLogList';\n\ntype Props = {\n  location: Location;\n};\n\ntype State = {\n  entryList: AuditLog[] | null;\n  entryListPageLinks: string | null;\n  eventType: string | undefined;\n  eventTypes: string[] | null;\n  isLoading: boolean;\n  currentCursor?: string;\n};\n\nfunction OrganizationAuditLog({location}: Props) {\n  const [state, setState] = useState<State>({\n    entryList: [],\n    entryListPageLinks: null,\n    eventType: decodeScalar(location.query.event),\n    eventTypes: [],\n    isLoading: true,\n  });\n  const organization = useOrganization();\n  const api = useApi();\n\n  const handleCursor: CursorHandler = resultsCursor => {\n    setState(prevState => ({\n      ...prevState,\n      currentCursor: resultsCursor,\n    }));\n  };\n\n  useEffect(() => {\n    // Watch the location for changes so we can re-fetch data.\n    const eventType = decodeScalar(location.query.event);\n    setState(prevState => ({...prevState, eventType}));\n  }, [location.query]);\n\n  const fetchAuditLogData = useCallback(async () => {\n    setState(prevState => ({...prevState, isLoading: true}));\n\n    try {\n      const payload = {cursor: state.currentCursor, event: state.eventType};\n      if (!payload.cursor) {\n        delete payload.cursor;\n      }\n      if (!payload.event) {\n        delete payload.event;\n      }\n      setState(prevState => ({...prevState, isLoading: true}));\n      const [data, _, response] = await api.requestPromise(\n        `/organizations/${organization.slug}/audit-logs/`,\n        {\n          method: 'GET',\n          includeAllArgs: true,\n          query: payload,\n        }\n      );\n      setState(prevState => ({\n        ...prevState,\n        entryList: data.rows,\n        eventTypes: data.options,\n        isLoading: false,\n        entryListPageLinks: response?.getResponseHeader('Link') ?? null,\n      }));\n    } catch (err) {\n      if (err.status !== 401 && err.status !== 403) {\n        Sentry.captureException(err);\n      }\n      setState(prevState => ({\n        ...prevState,\n        isLoading: false,\n      }));\n      addErrorMessage('Unable to load audit logs.');\n    }\n  }, [api, organization.slug, state.currentCursor, state.eventType]);\n\n  useEffect(() => {\n    fetchAuditLogData();\n  }, [fetchAuditLogData]);\n\n  const handleEventSelect = (value: string) => {\n    setState(prevState => ({\n      ...prevState,\n      eventType: value,\n    }));\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {...location.query, event: value},\n    });\n  };\n\n  return (\n    <Fragment>\n      <AuditLogList\n        entries={state.entryList}\n        pageLinks={state.entryListPageLinks}\n        eventType={state.eventType}\n        eventTypes={state.eventTypes}\n        onEventSelect={handleEventSelect}\n        isLoading={state.isLoading}\n        onCursor={handleCursor}\n      />\n    </Fragment>\n  );\n}\n\nexport default OrganizationAuditLog;\n"],"names":["ActivityAvatar","_ref","className","type","user","size","_jsx","UserAvatar","SystemAvatar","children","StyledIconSentry","Placeholder","width","height","shape","displayName","_styled","target","p","theme","textColor","background","IconSentry","name","styles","avatarStyle","marginRight","addUsernameDisplay","logEntryUser","isSuperuser","_jsxs","Name","StaffTag","t","undefined","getEventOptions","eventTypes","map","startsWith","label","replace","value","sort","a","b","localeCompare","AuditNote","entry","orgSlug","projects","useProjects","project","find","id","String","data","event","Note","note","tct","projectSettingsLink","Link","to","slug","old_slug","new_slug","projectDetectorSettingsId","samplingInProjectSettingsLink","biasLabel","retentionPrioritiesLabels","AuditLogList","_ref2","isLoading","pageLinks","entries","eventType","onCursor","onEventSelect","is24Hours","shouldUse24Hours","organization","useOrganization","hasEntries","length","action","EventSelector","clearable","isDisabled","placeholder","options","onChange","SettingsPageHeader","title","PanelTable","headers","isEmpty","emptyMessage","Fragment","UserInfo","actor","email","SentryAvatar","style","NameContainer","FlexCenter","MonoDetail","ipAddress","IpAddressOverflow","Tooltip","disabled","TimestampInfo","DateTime","dateOnly","date","dateCreated","timeOnly","format","Pagination","space","fontSizeMedium","Tag","SelectControl","fontSizeSmall","overflowEllipsis","OrganizationAuditLog","location","state","setState","useState","entryList","entryListPageLinks","decodeScalar","query","api","useApi","useEffect","prevState","fetchAuditLogData","useCallback","async","payload","cursor","currentCursor","_","response","requestPromise","method","includeAllArgs","rows","getResponseHeader","err","status","Sentry","addErrorMessage","browserHistory","push","pathname","resultsCursor"],"sourceRoot":""}