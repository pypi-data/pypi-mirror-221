{"version":3,"file":"chunks/app_views_settings_organization_organizationSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"6sBAmBA,MAAMA,UAAuCC,EAAAA,UAAwBC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,aACpDC,KAAKC,aAWpBF,EAAAA,EAAAA,GAAA,mBAQcG,EAAAA,EAAUC,QACtB,CAACC,EAAoBC,KACnBL,KAAKM,YAAYF,EAAUC,EAAM,QAEnCE,GACD,CAtBDC,oBAEER,KAAKS,SAAST,KAAKC,WACrB,CAEAS,uBACEV,KAAKW,aACP,CAiBAV,WAEE,MAAM,aAACW,GAAgBZ,KAAKa,MAE5B,MAAO,CACLC,YAAaZ,EAAAA,EAAUa,IAAI,2CAA2CC,KAAIC,GACxEA,EAAGL,KAELP,MAAOH,EAAAA,EAAUa,IAAI,oCAAoCC,KAAIC,GAC3DA,EAAGL,KAGT,CAEAN,YAAYY,EAAgBb,GAC1B,MAAMc,EAAMnB,KAAKa,MAAMD,aACV,4CAATM,GAGJlB,KAAKS,SAAS,CAACK,YAAaT,EAAMW,KAAIC,GAAMA,EAAGE,MACjD,CAEAC,SACE,MAAM,MAACf,EAAK,YAAES,GAAed,KAAKqB,OAC5B,aAACT,GAAgBZ,KAAKa,MACtBS,EAAS,IAAIC,IAAIX,EAAaU,QAC9BE,EAAW,IAAID,IAAIX,EAAaY,UAEtC,OACEC,EAAAA,EAAAA,IAACC,EAAAA,EAAkB,CACjBC,kBAAmBC,EAAAA,EACnBN,OAAQA,EACRE,SAAUA,EACVZ,aAAcA,EACdP,MAAOA,EACPS,YAAaA,GAGnB,EAjEInB,EAA8BkC,YAAA,iCAoEpC,SAAeC,EAAAA,EAAAA,GAAiBnC,GC9EhC,SAASoC,EAA2BlB,GAClC,OACEY,EAAAA,EAAAA,IAACO,EAAAA,EAAc,IACTnB,EACJoB,iBAAkBA,KAAMR,EAAAA,EAAAA,IAAC9B,EAA8B,KAG7D,CAPSoC,EAA0BF,YAAA,6BASnC,S","sources":["webpack:///./app/views/settings/organization/organizationSettingsNavigation.tsx","webpack:///./app/views/settings/organization/organizationSettingsLayout.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {Organization} from 'sentry/types';\nimport {HookName, Hooks} from 'sentry/types/hooks';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsNavigation from 'sentry/views/settings/components/settingsNavigation';\nimport navigationConfiguration from 'sentry/views/settings/organization/navigationConfiguration';\nimport {NavigationSection} from 'sentry/views/settings/types';\n\ntype Props = {\n  organization: Organization;\n};\n\ntype State = {\n  hookConfigs: NavigationSection[];\n  hooks: React.ReactElement[];\n};\n\nclass OrganizationSettingsNavigation extends Component<Props, State> {\n  state: State = this.getHooks();\n\n  componentDidMount() {\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState(this.getHooks());\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  /**\n   * TODO(epurkhiser): Becase the settings organization navigation hooks\n   * do not conform to a normal component style hook, and take a single\n   * parameter 'organization', we cannot use the `Hook` component here,\n   * and must resort to using listening to the HookStore to retrieve hook data.\n   *\n   * We should update the hook interface for the two hooks used here\n   */\n  unsubscribe = HookStore.listen(\n    (hookName: HookName, hooks: Hooks['settings:organization-navigation-config'][]) => {\n      this.handleHooks(hookName, hooks);\n    },\n    undefined\n  );\n\n  getHooks() {\n    // Allow injection via getsentry et all\n    const {organization} = this.props as Props;\n\n    return {\n      hookConfigs: HookStore.get('settings:organization-navigation-config').map(cb =>\n        cb(organization)\n      ),\n      hooks: HookStore.get('settings:organization-navigation').map(cb =>\n        cb(organization)\n      ),\n    };\n  }\n\n  handleHooks(name: HookName, hooks: Hooks['settings:organization-navigation-config'][]) {\n    const org = this.props.organization;\n    if (name !== 'settings:organization-navigation-config') {\n      return;\n    }\n    this.setState({hookConfigs: hooks.map(cb => cb(org))});\n  }\n\n  render() {\n    const {hooks, hookConfigs} = this.state as State;\n    const {organization} = this.props as Props;\n    const access = new Set(organization.access);\n    const features = new Set(organization.features);\n\n    return (\n      <SettingsNavigation\n        navigationObjects={navigationConfiguration}\n        access={access}\n        features={features}\n        organization={organization}\n        hooks={hooks}\n        hookConfigs={hookConfigs}\n      />\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSettingsNavigation);\n","import {RouteComponentProps} from 'react-router';\n\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\nimport OrganizationSettingsNavigation from 'sentry/views/settings/organization/organizationSettingsNavigation';\n\ntype Props = RouteComponentProps<{}, {}> & {\n  children: React.ReactNode;\n};\n\nfunction OrganizationSettingsLayout(props: Props) {\n  return (\n    <SettingsLayout\n      {...props}\n      renderNavigation={() => <OrganizationSettingsNavigation />}\n    />\n  );\n}\n\nexport default OrganizationSettingsLayout;\n"],"names":["OrganizationSettingsNavigation","Component","constructor","arguments","_defineProperty","this","getHooks","HookStore","listen","hookName","hooks","handleHooks","undefined","componentDidMount","setState","componentWillUnmount","unsubscribe","organization","props","hookConfigs","get","map","cb","name","org","render","state","access","Set","features","_jsx","SettingsNavigation","navigationObjects","navigationConfiguration","displayName","withOrganization","OrganizationSettingsLayout","SettingsLayout","renderNavigation"],"sourceRoot":""}