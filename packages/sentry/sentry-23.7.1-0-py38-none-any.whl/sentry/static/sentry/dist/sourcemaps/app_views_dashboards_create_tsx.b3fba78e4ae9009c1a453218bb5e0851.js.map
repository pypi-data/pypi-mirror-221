{"version":3,"file":"chunks/app_views_dashboards_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"mvBAqBA,SAASA,EAAgBC,GACvB,MAAM,SAACC,GAAYD,GACb,WAACE,GAAcF,EAAMG,QACpBC,EAAWC,IAAgBC,EAAAA,EAAAA,YAS5BC,EAAWL,EACbM,EAAAA,GAAqBC,MAAKC,GAAqBA,EAAkBC,KAAOT,SACxEU,EACEC,EAAYN,GAAWO,EAAAA,EAAAA,IAAeP,IAAYO,EAAAA,EAAAA,IAAeC,EAAAA,IACjEC,EAAeT,EAAWU,EAAAA,GAAeC,QAAUD,EAAAA,GAAeE,OASxE,OARAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,GAAoBC,EAAAA,EAAAA,IAAyBrB,EAASsB,OAC5DlB,EAAagB,GACTA,GACFG,EAAAA,eAAeC,QAAQxB,EAASyB,SAClC,GACC,CAACzB,EAASyB,SAAUzB,EAASsB,SAG9BI,EAAAA,EAAAA,IAACC,EAAAA,EAAO,CACNC,SAAU,CAAC,mBACXC,aAAc9B,EAAM8B,aACpBC,eAzBJ,WACE,OACEJ,EAAAA,EAAAA,IAACK,EAAAA,GAAW,CAACC,aAAW,EAAAC,UACtBP,EAAAA,EAAAA,IAACQ,EAAAA,GAAK,CAACC,KAAK,UAASF,UAAEG,EAAAA,EAAAA,GAAE,4CAG/B,EAmBmCH,UAE/BP,EAAAA,EAAAA,IAACW,EAAAA,EAAa,CAAAJ,UACZP,EAAAA,EAAAA,IAACY,EAAAA,EAAe,IACVvC,EACJgB,aAAcA,EACdH,UAAWA,EACX2B,WAAY,GACZpC,UAAWA,EACXqC,eAAgBA,IAAMpC,OAAaO,QAK7C,CA3CSb,EAAe2C,YAAA,kBA6CxB,SAAeC,EAAAA,EAAAA,GAAiB5C,E","sources":["webpack:///./app/views/dashboards/create.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport {DASHBOARDS_TEMPLATES, EMPTY_DASHBOARD} from './data';\nimport DashboardDetail from './detail';\nimport {DashboardState, Widget} from './types';\nimport {cloneDashboard, constructWidgetFromQuery} from './utils';\n\ntype Props = RouteComponentProps<{templateId?: string; widgetId?: string}, {}> & {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nfunction CreateDashboard(props: Props) {\n  const {location} = props;\n  const {templateId} = props.params;\n  const [newWidget, setNewWidget] = useState<Widget | undefined>();\n  function renderDisabled() {\n    return (\n      <Layout.Page withPadding>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </Layout.Page>\n    );\n  }\n\n  const template = templateId\n    ? DASHBOARDS_TEMPLATES.find(dashboardTemplate => dashboardTemplate.id === templateId)\n    : undefined;\n  const dashboard = template ? cloneDashboard(template) : cloneDashboard(EMPTY_DASHBOARD);\n  const initialState = template ? DashboardState.PREVIEW : DashboardState.CREATE;\n  useEffect(() => {\n    const constructedWidget = constructWidgetFromQuery(location.query);\n    setNewWidget(constructedWidget);\n    if (constructedWidget) {\n      browserHistory.replace(location.pathname);\n    }\n  }, [location.pathname, location.query]);\n\n  return (\n    <Feature\n      features={['dashboards-edit']}\n      organization={props.organization}\n      renderDisabled={renderDisabled}\n    >\n      <ErrorBoundary>\n        <DashboardDetail\n          {...props}\n          initialState={initialState}\n          dashboard={dashboard}\n          dashboards={[]}\n          newWidget={newWidget}\n          onSetNewWidget={() => setNewWidget(undefined)}\n        />\n      </ErrorBoundary>\n    </Feature>\n  );\n}\n\nexport default withOrganization(CreateDashboard);\n"],"names":["CreateDashboard","props","location","templateId","params","newWidget","setNewWidget","useState","template","DASHBOARDS_TEMPLATES","find","dashboardTemplate","id","undefined","dashboard","cloneDashboard","EMPTY_DASHBOARD","initialState","DashboardState","PREVIEW","CREATE","useEffect","constructedWidget","constructWidgetFromQuery","query","browserHistory","replace","pathname","_jsx","Feature","features","organization","renderDisabled","Layout","withPadding","children","Alert","type","t","ErrorBoundary","DashboardDetail","dashboards","onSetNewWidget","displayName","withOrganization"],"sourceRoot":""}