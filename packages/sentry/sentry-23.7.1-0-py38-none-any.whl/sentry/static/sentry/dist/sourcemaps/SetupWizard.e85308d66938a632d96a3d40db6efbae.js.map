{"version":3,"file":"chunks/SetupWizard.xxxxxxxxxxxxxxxxxxxx.js","mappings":"moBAiBA,MAAMA,EAAsB,CAC1B,oBACE,oEACF,uBACE,uEACF,eAAgB,wDAChBC,QAAS,qEACT,sBACE,uEAGJ,SAASC,EAAWC,GAAuC,IAAtC,KAACC,GAAO,EAAK,cAAEC,GAAqBF,EACvD,MAAMG,GAAMC,EAAAA,EAAAA,KACNC,GAAkBC,EAAAA,EAAAA,aAA2BC,IAC5CC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GAInCC,GAAeC,EAAAA,EAAAA,UACnB,IAAiC,IAA1BV,GAAeW,OAAeX,EAAc,GAAK,MACxD,CAACA,IAGGY,EADY,IAAIC,gBAAgBC,SAASC,QACbC,IAAI,0BAAuBX,EAEvDY,GAAkBP,EAAAA,EAAAA,UACtB,KAAM,CACJD,eACAS,iBAAkBN,KAEpB,CAACH,EAAcG,IAIXO,GAAWT,EAAAA,EAAAA,UAAQ,IAChBf,EAAoBiB,GAAmB,KAAO,2BACpD,CAACA,KAEJQ,EAAAA,EAAAA,YAAU,IACD,KACDjB,EAAgBkB,SAClBC,OAAOC,aAAapB,EAAgBkB,QACtC,KAIJD,EAAAA,EAAAA,YAAU,IACD,KACLE,OAAOC,aAAapB,EAAgBkB,QAAQ,KAIhDD,EAAAA,EAAAA,YAAU,MACRI,EAAAA,EAAAA,IAAe,sBAAuBP,EAAgB,GACrD,CAACA,IAEJ,MAAMQ,GAAgBC,EAAAA,EAAAA,cAAYC,UAChC,IAAIrB,EAGJ,UACQL,EAAI2B,eAAgB,WAAU7B,KACtC,CAAE,MACAQ,GAAY,GACZe,OAAOC,aAAapB,EAAgBkB,SACpClB,EAAgBkB,QAAUC,OAAOO,YAAW,IAAMP,OAAOQ,SAAS,MAClEN,EAAAA,EAAAA,IAAe,wBAAyBP,EAC1C,IACC,CAAChB,EAAKF,EAAMkB,EAAiBX,IAOhC,OALAc,EAAAA,EAAAA,YAAU,KACR,MAAMW,EAAkBT,OAAOU,YAAYP,EAAe,KAC1D,MAAO,IAAMH,OAAOW,cAAcF,EAAgB,GACjD,CAACN,KAGFS,EAAAA,EAAAA,IAACC,EAAAA,EAAqB,CAAAC,UACpBF,EAAAA,EAAAA,IAAA,OAAKG,UAAU,YAAWD,SACtB9B,GAOAgC,EAAAA,EAAAA,IAAA,OAAKD,UAAU,MAAKD,SAAA,EAClBF,EAAAA,EAAAA,IAAA,MAAAE,UAAKG,EAAAA,EAAAA,GAAE,qDACPD,EAAAA,EAAAA,IAACE,EAAiB,CAACC,IAAK,EAAEL,SAAA,EACxBF,EAAAA,EAAAA,IAACQ,EAAAA,GAAM,CACLC,SAAS,UACTC,GAAG,IACHC,QAASA,KACPrB,EAAAA,EAAAA,IAAe,qCAAsCP,GACtDmB,UAEAG,EAAAA,EAAAA,GAAE,kBAELL,EAAAA,EAAAA,IAACQ,EAAAA,GAAM,CACLI,KAAM3B,EACN4B,UAAQ,EACRF,QAASA,KACPrB,EAAAA,EAAAA,IAAe,mCAAoCP,GACpDmB,UAEAG,EAAAA,EAAAA,GAAE,qBAzBTL,EAAAA,EAAAA,IAACc,EAAAA,EAAgB,CAACC,MAAO,CAACC,OAAQ,YAAYd,UAC5CF,EAAAA,EAAAA,IAAA,OAAKG,UAAU,MAAKD,UAClBF,EAAAA,EAAAA,IAAA,MAAAE,UAAKG,EAAAA,EAAAA,GAAE,0CA+BrB,CArGS1C,EAAWsD,YAAA,cAuGpB,MAAMX,GAAoBY,EAAAA,EAAAA,GAAOC,EAAAA,GAAS,CAAAC,OAAA,aAAhBF,CAAiB,CAAAG,KAAA,SAAAC,OAAA,sCAK3C,G","sources":["webpack:///./app/views/setupWizard/index.tsx"],"sourcesContent":["import {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {ThemeAndStyleProvider} from 'sentry/components/themeAndStyleProvider';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useApi from 'sentry/utils/useApi';\n\ntype Props = {\n  hash?: boolean | string;\n  organizations?: Organization[];\n};\n\nconst platformDocsMapping = {\n  'javascript-nextjs':\n    'https://docs.sentry.io/platforms/javascript/guides/nextjs/#verify',\n  'javascript-sveltekit':\n    'https://docs.sentry.io/platforms/javascript/guides/sveltekit/#verify',\n  'react-native': 'https://docs.sentry.io/platforms/react-native/#verify',\n  cordova: 'https://docs.sentry.io/platforms/javascript/guides/cordova/#verify',\n  'javascript-electron':\n    'https://docs.sentry.io/platforms/javascript/guides/electron/#verify',\n};\n\nfunction SetupWizard({hash = false, organizations}: Props) {\n  const api = useApi();\n  const closeTimeoutRef = useRef<number | undefined>(undefined);\n  const [finished, setFinished] = useState(false);\n\n  // if we have exactly one organization, we can use it for analytics\n  // otherwise we don't know which org the user is in\n  const organization = useMemo(\n    () => (organizations?.length === 1 ? organizations[0] : null),\n    [organizations]\n  );\n  const urlParams = new URLSearchParams(location.search);\n  const projectPlatform = urlParams.get('project_platform') ?? undefined;\n\n  const analyticsParams = useMemo(\n    () => ({\n      organization,\n      project_platform: projectPlatform,\n    }),\n    [organization, projectPlatform]\n  );\n\n  // outside of route context\n  const docsLink = useMemo(() => {\n    return platformDocsMapping[projectPlatform || ''] || 'https://docs.sentry.io/';\n  }, [projectPlatform]);\n\n  useEffect(() => {\n    return () => {\n      if (closeTimeoutRef.current) {\n        window.clearTimeout(closeTimeoutRef.current);\n      }\n    };\n  });\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(closeTimeoutRef.current);\n    };\n  });\n\n  useEffect(() => {\n    trackAnalytics('setup_wizard.viewed', analyticsParams);\n  }, [analyticsParams]);\n\n  const checkFinished = useCallback(async () => {\n    if (finished) {\n      return;\n    }\n    try {\n      await api.requestPromise(`/wizard/${hash}/`);\n    } catch {\n      setFinished(true);\n      window.clearTimeout(closeTimeoutRef.current);\n      closeTimeoutRef.current = window.setTimeout(() => window.close(), 10000);\n      trackAnalytics('setup_wizard.complete', analyticsParams);\n    }\n  }, [api, hash, analyticsParams, finished]);\n\n  useEffect(() => {\n    const pollingInterval = window.setInterval(checkFinished, 1000);\n    return () => window.clearInterval(pollingInterval);\n  }, [checkFinished]);\n\n  return (\n    <ThemeAndStyleProvider>\n      <div className=\"container\">\n        {!finished ? (\n          <LoadingIndicator style={{margin: '2em auto'}}>\n            <div className=\"row\">\n              <h5>{t('Waiting for wizard to connect')}</h5>\n            </div>\n          </LoadingIndicator>\n        ) : (\n          <div className=\"row\">\n            <h5>{t('Return to your terminal to complete your setup')}</h5>\n            <MinWidthButtonBar gap={1}>\n              <Button\n                priority=\"primary\"\n                to=\"/\"\n                onClick={() =>\n                  trackAnalytics('setup_wizard.clicked_viewed_issues', analyticsParams)\n                }\n              >\n                {t('View Issues')}\n              </Button>\n              <Button\n                href={docsLink}\n                external\n                onClick={() =>\n                  trackAnalytics('setup_wizard.clicked_viewed_docs', analyticsParams)\n                }\n              >\n                {t('See Docs')}\n              </Button>\n            </MinWidthButtonBar>\n          </div>\n        )}\n      </div>\n    </ThemeAndStyleProvider>\n  );\n}\n\nconst MinWidthButtonBar = styled(ButtonBar)`\n  width: min-content;\n  margin-top: 20px;\n`;\n\nexport default SetupWizard;\n"],"names":["platformDocsMapping","cordova","SetupWizard","_ref","hash","organizations","api","useApi","closeTimeoutRef","useRef","undefined","finished","setFinished","useState","organization","useMemo","length","projectPlatform","URLSearchParams","location","search","get","analyticsParams","project_platform","docsLink","useEffect","current","window","clearTimeout","trackAnalytics","checkFinished","useCallback","async","requestPromise","setTimeout","close","pollingInterval","setInterval","clearInterval","_jsx","ThemeAndStyleProvider","children","className","_jsxs","t","MinWidthButtonBar","gap","Button","priority","to","onClick","href","external","LoadingIndicator","style","margin","displayName","_styled","ButtonBar","target","name","styles"],"sourceRoot":""}