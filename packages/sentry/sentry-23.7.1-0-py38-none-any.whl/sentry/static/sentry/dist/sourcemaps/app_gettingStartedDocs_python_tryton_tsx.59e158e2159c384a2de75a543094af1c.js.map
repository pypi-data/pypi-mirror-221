{"version":3,"file":"chunks/app_gettingStartedDocs_python_tryton_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"giBAOA,MAAMA,GACJC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IAAI,8EAA+E,CAClFC,MAAMH,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,gCAKlBC,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,UACfC,aACEd,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,8FACA,CACEa,MAAMf,EAAAA,EAAAA,IAAA,eAKdgB,eAAgB,CACd,CACEC,SAAU,SACVF,KAAO,wGAMJR,iXAgBL,CACEO,aAAaI,EAAAA,EAAAA,GACX,6JAEFD,SAAU,SACVF,KAAO,kYAmBd,EAGM,SAASI,EAAwBC,GAA+B,IAA9B,IAACb,KAAQc,GAAmBD,EACnE,OAAOpB,EAAAA,EAAAA,IAACsB,EAAAA,EAAM,CAAChB,MAAOA,EAAM,CAACC,QAAOR,aAAcA,KAAkBsB,GACtE,CAFgBF,EAAwBI,YAAA,2BAIxC,S","sources":["webpack:///./app/gettingStartedDocs/python/tryton.tsx"],"sourcesContent":["import ExternalLink from 'sentry/components/links/externalLink';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nconst introduction = (\n  <p>\n    {tct('The Tryton integration adds support for the [link:Tryton Framework Server].', {\n      link: <ExternalLink href=\"https://www.tryton.org/\" />,\n    })}\n  </p>\n);\n\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          'To configure the SDK, initialize it with the integration in a custom [code:wsgi.py] script:',\n          {\n            code: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'python',\n        code: `\n# wsgi.py\nimport sentry_sdk\nimport sentry_sdk.integrations.trytond\n\nsentry_sdk.init(\n    dsn=\"${dsn}\",\n    integrations=[\n        sentry_sdk.integrations.trytond.TrytondWSGIIntegration(),\n    ],\n\n    # Set traces_sample_rate to 1.0 to capture 100%\n    # of transactions for performance monitoring.\n    # We recommend adjusting this value in production,\n    traces_sample_rate=1.0,\n)\n\nfrom trytond.application import app as application\n\n# ...\n        `,\n      },\n      {\n        description: t(\n          'In Tryton>=5.4 an error handler can be registered to respond the client with a custom error message including the Sentry event id instead of a traceback.'\n        ),\n        language: 'python',\n        code: `\n# wsgi.py\n# ...\n\nfrom trytond.exceptions import TrytonException\nfrom trytond.exceptions import UserError\n\n@application.error_handler\ndef _(app, request, e):\n  if isinstance(e, TrytonException):\n    return\n  else:\n    event_id = sentry_sdk.last_event_id()\n    data = UserError('Custom message', f'{event_id}{e}')\n    return app.make_response(request, data)\n        `,\n      },\n    ],\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithTryton({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} introduction={introduction} {...props} />;\n}\n\nexport default GettingStartedWithTryton;\n"],"names":["introduction","_jsx","children","tct","link","ExternalLink","href","steps","dsn","arguments","length","undefined","type","StepType","CONFIGURE","description","code","configurations","language","t","GettingStartedWithTryton","_ref","props","Layout","displayName"],"sourceRoot":""}