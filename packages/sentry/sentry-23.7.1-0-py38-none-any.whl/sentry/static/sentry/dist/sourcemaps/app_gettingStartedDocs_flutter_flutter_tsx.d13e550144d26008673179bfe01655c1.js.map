{"version":3,"file":"chunks/app_gettingStartedDocs_flutter_flutter_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"qiBAOO,MAAMA,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,4HACA,CACEC,SAASH,EAAAA,EAAAA,IAAA,eAKjBI,eAAgB,CACd,CACEC,SAAU,MACVC,KAAO,yDAOb,CACEV,KAAMC,EAAAA,GAASU,UACfR,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IAAI,2DAA4D,CAC/DM,eAAeR,EAAAA,EAAAA,IAAA,eAIrBI,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,qMAOQd,uVAWfiB,gBACET,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,+QACA,CACEQ,WAAWV,EAAAA,EAAAA,IAAA,WACXW,eAAeX,EAAAA,EAAAA,IAAA,WACfY,YAAYZ,EAAAA,EAAAA,IAAA,WACZa,WAAWb,EAAAA,EAAAA,IAAA,WACXc,YAAYd,EAAAA,EAAAA,IAAA,kBAQ1B,CACEJ,KAAMC,EAAAA,GAASkB,OACfhB,aAAaiB,EAAAA,EAAAA,GACX,4EAEFZ,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,kNAYPG,gBACET,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,6LACA,CACEe,OAAOjB,EAAAA,EAAAA,IAAA,gBAQrB,CACEkB,OAAOF,EAAAA,EAAAA,GAAE,eACTjB,aAAaiB,EAAAA,EAAAA,GACX,qFAEFZ,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,otBA4BPG,gBACET,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,mHACA,CACEiB,UACEnB,EAAAA,EAAAA,IAACoB,EAAAA,EAAY,CAACC,KAAK,iFASnC,CACEH,OAAOF,EAAAA,EAAAA,GAAE,iBACTZ,eAAgB,CACd,CACEL,aAAaiB,EAAAA,EAAAA,GACX,6IAGJ,CACEjB,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,uQACA,CACEoB,gBAAgBtB,EAAAA,EAAAA,IAAA,WAChBuB,WAAWvB,EAAAA,EAAAA,IAAA,WACXwB,oBACExB,EAAAA,EAAAA,IAACoB,EAAAA,EAAY,CAACC,KAAK,2DAErBI,SAASzB,EAAAA,EAAAA,IAAA,gBAMnB,CACED,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,kKACA,CACEwB,aACE1B,EAAAA,EAAAA,IAACoB,EAAAA,EAAY,CAACC,KAAK,2DAErBI,SAASzB,EAAAA,EAAAA,IAAA,kBAQvB,CACEkB,OAAOF,EAAAA,EAAAA,GAAE,kBACTZ,eAAgB,CACd,CACEL,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,8MACA,CACEyB,eAAe3B,EAAAA,EAAAA,IAAA,aAMzB,CACED,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,qLACA,CACEyB,eACE3B,EAAAA,EAAAA,IAACoB,EAAAA,EAAY,CAACC,KAAK,kIASpC,EAGM,SAASO,EAAyBC,GAA+B,IAA9B,IAACrC,KAAQsC,GAAmBD,EACpE,OAAO7B,EAAAA,EAAAA,IAAC+B,EAAAA,EAAM,CAACxC,MAAOA,EAAM,CAACC,WAAWsC,GAC1C,CAFgBF,EAAyBI,YAAA,4BAIzC,S","sources":["webpack:///./app/gettingStartedDocs/flutter/flutter.tsx"],"sourcesContent":["import ExternalLink from 'sentry/components/links/externalLink';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct(\n          'Sentry captures data by using an SDK within your applicationâ€™s runtime. Add the following to your [pubspec: pubspec.yaml]',\n          {\n            pubspec: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'yml',\n        code: `\ndependencies:\n  sentry_flutter: ^7.8.0\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct('Import [sentryFlutter: sentry_flutter] and initialize it', {\n          sentryFlutter: <code />,\n        })}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'dart',\n        code: `\nimport 'package:flutter/widgets.dart';\nimport 'package:sentry_flutter/sentry_flutter.dart';\n\nFuture<void> main() async {\n  await SentryFlutter.init(\n    (options) {\n      options.dsn = '${dsn}';\n      // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n      // We recommend adjusting this value in production.\n      options.tracesSampleRate = 1.0;\n    },\n    appRunner: () => runApp(MyApp()),\n  );\n\n  // or define SENTRY_DSN via Dart environment variable (--dart-define)\n}\n        `,\n        additionalInfo: (\n          <p>\n            {tct(\n              'You can configure the [sentryDsn: SENTRY_DSN], [sentryRelease: SENTRY_RELEASE], [sentryDist: SENTRY_DIST], and [sentryEnv: SENTRY_ENVIRONMENT] via the Dart environment variables passing the [dartDefine: --dart-define] flag to the compiler, as noted in the code sample.',\n              {\n                sentryDsn: <code />,\n                sentryRelease: <code />,\n                sentryDist: <code />,\n                sentryEnv: <code />,\n                dartDefine: <code />,\n              }\n            )}\n          </p>\n        ),\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t(\n      'Create an intentional error, so you can test that everything is working:'\n    ),\n    configurations: [\n      {\n        language: 'dart',\n        code: `\nimport 'package:sentry/sentry.dart';\n\ntry {\n  aMethodThatMightFail();\n} catch (exception, stackTrace) {\n  await Sentry.captureException(\n    exception,\n    stackTrace: stackTrace,\n  );\n}\n        `,\n        additionalInfo: (\n          <p>\n            {tct(\n              \"If you're new to Sentry, use the email alert to access your account and complete a product tour.[break] If you're an existing user and have disabled alerts, you won't receive this email.\",\n              {\n                break: <br />,\n              }\n            )}\n          </p>\n        ),\n      },\n    ],\n  },\n  {\n    title: t('Performance'),\n    description: t(\n      \"You'll be able to monitor the performance of your app using the SDK. For example:\"\n    ),\n    configurations: [\n      {\n        language: 'dart',\n        code: `\nimport 'package:sentry/sentry.dart';\n\nfinal transaction = Sentry.startTransaction('processOrderBatch()', 'task');\n\ntry {\n  await processOrderBatch(transaction);\n} catch (exception) {\n  transaction.throwable = exception;\n  transaction.status = SpanStatus.internalError();\n} finally {\n  await transaction.finish();\n}\n\nFuture<void> processOrderBatch(ISentrySpan span) async {\n  // span operation: task, span description: operation\n  final innerSpan = span.startChild('task', description: 'operation');\n\n  try {\n    // omitted code\n  } catch (exception) {\n    innerSpan.throwable = exception;\n    innerSpan.status = SpanStatus.notFound();\n  } finally {\n    await innerSpan.finish();\n  }\n}\n        `,\n        additionalInfo: (\n          <p>\n            {tct(\n              'To learn more about the API and automatic instrumentations, check out the [perfDocs: performance documentation].',\n              {\n                perfDocs: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/flutter/performance/instrumentation/\" />\n                ),\n              }\n            )}\n          </p>\n        ),\n      },\n    ],\n  },\n  {\n    title: t('Debug Symbols'),\n    configurations: [\n      {\n        description: t(\n          'We offer a range of methods to provide Sentry with debug symbols so that you can see symbolicated stack traces and triage issues faster.'\n        ),\n      },\n      {\n        description: (\n          <p>\n            {tct(\n              \"Complete stack traces will be shown for your Dart error by default, but if you use [splitDebugInfo: split-debug-info] and [obfuscate: obfuscate], you'll need to [uploadDebugSymbols: upload the debug information files] generated by the [flutter: flutter] build.\",\n              {\n                splitDebugInfo: <code />,\n                obfuscate: <code />,\n                uploadDebugSymbols: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/flutter/upload-debug/\" />\n                ),\n                flutter: <code />,\n              }\n            )}\n          </p>\n        ),\n      },\n      {\n        description: (\n          <p>\n            {tct(\n              \"You'll also need to [uploadDebug: upload the debug information files] generated by the [flutter: flutter] build for iOS, macOS, and Android NDK native crashes.\",\n              {\n                uploadDebug: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/flutter/upload-debug/\" />\n                ),\n                flutter: <code />,\n              }\n            )}\n          </p>\n        ),\n      },\n    ],\n  },\n  {\n    title: t('Source Context'),\n    configurations: [\n      {\n        description: (\n          <p>\n            {tct(\n              \"If Sentry has access to your application's source code, it can show snippets of code [sourceContext: source context] around the location of stack frames, which helps to quickly pinpoint problematic code.\",\n              {\n                sourceContext: <i />,\n              }\n            )}\n          </p>\n        ),\n      },\n      {\n        description: (\n          <p>\n            {tct(\n              \"To enable source context, you'll need to upload debug symbols to Sentry by following the [sourceContext: Uploading Source Code Context for Flutter Android, iOS, and macOS] guide.\",\n              {\n                sourceContext: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/flutter/upload-debug/#uploading-source-code-context-for-flutter-android-ios-and-macos\" />\n                ),\n              }\n            )}\n          </p>\n        ),\n      },\n    ],\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithFlutter({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} {...props} />;\n}\n\nexport default GettingStartedWithFlutter;\n"],"names":["steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","_jsx","children","tct","pubspec","configurations","language","code","CONFIGURE","sentryFlutter","additionalInfo","sentryDsn","sentryRelease","sentryDist","sentryEnv","dartDefine","VERIFY","t","break","title","perfDocs","ExternalLink","href","splitDebugInfo","obfuscate","uploadDebugSymbols","flutter","uploadDebug","sourceContext","GettingStartedWithFlutter","_ref","props","Layout","displayName"],"sourceRoot":""}