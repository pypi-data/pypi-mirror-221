{"version":3,"file":"chunks/app_components_forms_controls_radioGroup_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"imBA+CA,SAASA,EAAUC,GASI,IATe,MACpCC,EACAC,SAAUC,EAAa,gBACvBC,EAAkB,GAAE,QACpBC,EAAU,GAAE,MACZC,EAAK,SACLC,EAAQ,aACRC,KACGC,GACgBT,EACnB,OACEU,EAAAA,EAAAA,IAACC,EAAS,CACRH,aAAcA,KACVC,EACJG,KAAK,aACL,aAAYN,EAAMO,SAEjBR,EAAQS,KAAI,CAAAC,EAA0BC,KAAU,IAAlCC,EAAIC,EAAMC,GAAYJ,EACnC,MAAMK,EAAiBhB,EAAgBiB,MAAKC,IAAA,IAAEC,GAASD,EAAA,OAAKC,IAAaN,CAAE,IACrEO,EAAuBJ,IAAiB,GACxClB,IAAakB,GAAkBjB,EAOrC,OACEO,EAAAA,EAAAA,IAACe,EAAAA,EAAO,CAENvB,UAAWsB,EACXE,MAAOF,EAAqBX,UAE5Bc,EAAAA,EAAAA,IAACC,EAAa,CAACZ,MAAOA,EAAO,eAAcf,IAAUgB,EAAIf,SAAUA,EAASW,SAAA,EAC1EH,EAAAA,EAAAA,IAACmB,EAAAA,EAAK,CACJ,aAAYX,GAAMY,WAClB5B,SAAUA,EACV6B,QAAS9B,IAAUgB,EACnBV,SAAWyB,IACR9B,GAAYK,EAASU,EAAIe,MAG9BtB,EAAAA,EAAAA,IAACuB,EAAa,CAAC/B,SAAUA,EAASW,SAAEK,IACnCC,IACCQ,EAAAA,EAAAA,IAACO,EAAAA,SAAQ,CAAArB,SAAA,EAEPH,EAAAA,EAAAA,IAAA,WACAA,EAAAA,EAAAA,IAACyB,EAAW,CAAAtB,SAAEM,WAlBfH,EAsBG,KAKpB,CAxDSjB,EAAUqC,YAAA,aA0DnB,MAAMzB,GAAY0B,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,qBAEtBE,IAAKC,EAAAA,EAAAA,GAAMD,EAAE/B,aAAe,EAAI,IAAE,oBACvB+B,GAAMA,EAAE/B,aAAe,MAAQ,UAAS,KAGtDiC,EAAqBF,GACZ,iBAANA,IAAmB,CAAC,WAAY,WAAWG,SAASH,KAAMI,EAAAA,EAAAA,GAAYJ,GAElEX,GAAgBS,EAAAA,EAAAA,GAAO,QAAO,CAAGI,oBAAiBH,OAAA,aAAlCD,CAAoC,mGAQrDE,GAAMA,EAAErC,SAAW,UAAY,WAAU,8CAM/C+B,GAAgBI,EAAAA,EAAAA,GAAO,MAAK,CAAGI,oBAAiBH,OAAA,aAAhCD,CAAkC,YAC3CE,GAAMA,EAAErC,SAAW,GAAM,MAAK,KAGrCiC,GAAcE,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,UACtBE,GAAKA,EAAEK,MAAMC,SAAO,eAChBN,GAAKA,EAAEK,MAAME,uBAAqB,uBAIjD,G,6PChIA,MAUMjB,GAAQQ,EAAAA,EAAAA,GAAO,QAAO,CAAAC,OAAA,YAAdD,CAAe,iCAGlBE,GAAsB,UAAhBA,EAAEQ,UAAwB,OAAS,UAAS,YACjDR,GAAsB,UAAhBA,EAAEQ,UAAwB,OAAS,UAAS,oGAKxCR,GAAKA,EAAEK,MAAMI,QAAM,sBACnBT,GAAKA,EAAEK,MAAMK,kBAAgB,iJAW/BV,GAAKA,EAAEK,MAAMM,aAAW,gBAC1BX,GAAKA,EAAEK,MAAMM,aAAW,2CAKpCX,GArCaY,EAACZ,EAAiBK,KAAiBQ,EAAAA,EAAAA,IAAG,uBAE9B,UAAhBb,EAAEQ,UAAwB,SAAW,WAAU,WAC9B,UAAhBR,EAAEQ,UAAwB,SAAW,WAAU,uCAErCH,EAAMS,OAAM,mBACdC,EAAAA,GAAM,iBACbf,EAAErC,SAAW,GAAM,KAAI,QA8BzBiD,CAAWZ,EAAGA,EAAEK,QAAM,MAIjCf,EAAM0B,aAAe,CACnBC,KAAM,SAGR,S","sources":["webpack:///./app/components/forms/controls/radioGroup.tsx","webpack:///./app/components/radio.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport Radio from 'sentry/components/radio';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {space} from 'sentry/styles/space';\n\ninterface ContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  orientInline?: boolean;\n}\n\ninterface BaseRadioGroupProps<C extends string> {\n  /**\n   * The choices availiable in the group\n   */\n  choices: RadioOption<C>[];\n  /**\n   * Labels the radio group.\n   */\n  label: string;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n  value: string | number | null;\n  disabled?: boolean;\n  /**\n   * An array of [choice id, disabled reason]\n   */\n  disabledChoices?: [C, React.ReactNode?][];\n  /**\n   * Switch the radio items to flow left to right, instead of vertically.\n   */\n  orientInline?: boolean;\n}\n\n/**\n * A single option in a radio group\n */\nexport type RadioOption<C extends string = string> = [\n  id: C,\n  label: React.ReactNode,\n  description?: React.ReactNode\n];\n\nexport interface RadioGroupProps<C extends string = string>\n  extends BaseRadioGroupProps<C>,\n    Omit<ContainerProps, 'onChange'> {}\n\nfunction RadioGroup<C extends string>({\n  value,\n  disabled: groupDisabled,\n  disabledChoices = [],\n  choices = [],\n  label,\n  onChange,\n  orientInline,\n  ...props\n}: RadioGroupProps<C>) {\n  return (\n    <Container\n      orientInline={orientInline}\n      {...props}\n      role=\"radiogroup\"\n      aria-label={label}\n    >\n      {choices.map(([id, name, description], index) => {\n        const disabledChoice = disabledChoices.find(([choiceId]) => choiceId === id);\n        const disabledChoiceReason = disabledChoice?.[1];\n        const disabled = !!disabledChoice || groupDisabled;\n\n        // TODO(epurkhiser): There should be a `name` and `label` attribute in\n        // the options type to allow for the aria label to work correctly. For\n        // now we slap a `toString` on there, but it may sometimes return\n        // [object Object] if the name is a react node.\n\n        return (\n          <Tooltip\n            key={index}\n            disabled={!disabledChoiceReason}\n            title={disabledChoiceReason}\n          >\n            <RadioLineItem index={index} aria-checked={value === id} disabled={disabled}>\n              <Radio\n                aria-label={name?.toString()}\n                disabled={disabled}\n                checked={value === id}\n                onChange={(e: React.FormEvent<HTMLInputElement>) =>\n                  !disabled && onChange(id, e)\n                }\n              />\n              <RadioLineText disabled={disabled}>{name}</RadioLineText>\n              {description && (\n                <Fragment>\n                  {/* If there is a description then we want to have a 2x2 grid so the first column width aligns with Radio Button */}\n                  <div />\n                  <Description>{description}</Description>\n                </Fragment>\n              )}\n            </RadioLineItem>\n          </Tooltip>\n        );\n      })}\n    </Container>\n  );\n}\n\nconst Container = styled('div')<ContainerProps>`\n  display: flex;\n  gap: ${p => space(p.orientInline ? 3 : 1)};\n  flex-direction: ${p => (p.orientInline ? 'row' : 'column')};\n`;\n\nconst shouldForwardProp = (p: PropertyKey) =>\n  typeof p === 'string' && !['disabled', 'animate'].includes(p) && isPropValid(p);\n\nexport const RadioLineItem = styled('label', {shouldForwardProp})<{\n  index: number;\n  disabled?: boolean;\n}>`\n  display: grid;\n  gap: 0.25em 0.5em;\n  grid-template-columns: max-content auto;\n  align-items: center;\n  cursor: ${p => (p.disabled ? 'default' : 'pointer')};\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n`;\n\nconst RadioLineText = styled('div', {shouldForwardProp})<{disabled?: boolean}>`\n  opacity: ${p => (p.disabled ? 0.4 : null)};\n`;\n\nconst Description = styled('div')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  line-height: 1.4em;\n`;\n\nexport default RadioGroup;\n","import {css, Theme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {growIn} from 'sentry/styles/animations';\n\ninterface CheckedProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  disabled?: boolean;\n  radioSize?: 'small';\n}\n\nconst checkedCss = (p: CheckedProps, theme: Theme) => css`\n  display: block;\n  width: ${p.radioSize === 'small' ? '0.5rem' : '0.875rem'};\n  height: ${p.radioSize === 'small' ? '0.5rem' : '0.875rem'};\n  border-radius: 50%;\n  background-color: ${theme.active};\n  animation: 0.2s ${growIn} ease;\n  opacity: ${p.disabled ? 0.4 : null};\n`;\n\nconst Radio = styled('input')<CheckedProps>`\n  display: flex;\n  padding: 0;\n  width: ${p => (p.radioSize === 'small' ? '1rem' : '1.5rem')};\n  height: ${p => (p.radioSize === 'small' ? '1rem' : '1.5rem')};\n  position: relative;\n  border-radius: 50%;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid ${p => p.theme.border};\n  box-shadow: inset ${p => p.theme.dropShadowMedium};\n  background: none;\n  appearance: none;\n  transition: border 0.1s, box-shadow 0.1s;\n\n  /* TODO(bootstrap): Our bootstrap CSS adds this, we can remove when we remove that */\n  margin: 0 !important;\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    border-color: ${p => p.theme.focusBorder};\n    box-shadow: ${p => p.theme.focusBorder} 0 0 0 1px;\n  }\n\n  &:checked:after {\n    content: '';\n    ${p => checkedCss(p, p.theme)}\n  }\n`;\n\nRadio.defaultProps = {\n  type: 'radio',\n};\n\nexport default Radio;\n"],"names":["RadioGroup","_ref","value","disabled","groupDisabled","disabledChoices","choices","label","onChange","orientInline","props","_jsx","Container","role","children","map","_ref2","index","id","name","description","disabledChoice","find","_ref3","choiceId","disabledChoiceReason","Tooltip","title","_jsxs","RadioLineItem","Radio","toString","checked","e","RadioLineText","Fragment","Description","displayName","_styled","target","p","space","shouldForwardProp","includes","isPropValid","theme","gray300","fontSizeRelativeSmall","radioSize","border","dropShadowMedium","focusBorder","checkedCss","css","active","growIn","defaultProps","type"],"sourceRoot":""}