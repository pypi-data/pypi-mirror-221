{"version":3,"file":"chunks/app_views_settings_account_notifications_notificationSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/account/notifications/notificationSettings.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport AlertLink from 'sentry/components/alertLink';\nimport DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport {FieldObject} from 'sentry/components/forms/types';\nimport Link from 'sentry/components/links/link';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {IconMail} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport withOrganizations from 'sentry/utils/withOrganizations';\nimport {\n  CONFIRMATION_MESSAGE,\n  NOTIFICATION_FEATURE_MAP,\n  NOTIFICATION_SETTINGS_PATHNAMES,\n  NOTIFICATION_SETTINGS_TYPES,\n  NotificationSettingsObject,\n  SELF_NOTIFICATION_SETTINGS_TYPES,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {NOTIFICATION_SETTING_FIELDS} from 'sentry/views/settings/account/notifications/fields2';\nimport {\n  decideDefault,\n  getParentIds,\n  getStateToPutForDefault,\n  isSufficientlyComplex,\n  mergeNotificationSettings,\n} from 'sentry/views/settings/account/notifications/utils';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = DeprecatedAsyncComponent['props'] & {\n  organizations: Organization[];\n};\n\ntype State = {\n  legacyData: {[key: string]: string};\n  notificationSettings: NotificationSettingsObject;\n} & DeprecatedAsyncComponent['state'];\n\nclass NotificationSettings extends DeprecatedAsyncComponent<Props, State> {\n  model = new FormModel();\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      legacyData: {},\n    };\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncComponent['getEndpoints']> {\n    return [\n      ['notificationSettings', `/users/me/notification-settings/`, {v2: 'serializer'}],\n      ['legacyData', '/users/me/notifications/'],\n    ];\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    // only tied to a user\n    trackAnalytics('notification_settings.index_page_viewed', {\n      organization: null,\n    });\n  }\n\n  getStateToPutForDefault = (\n    changedData: {[key: string]: string},\n    notificationType: string\n  ) => {\n    /**\n     * Update the current providers' parent-independent notification settings\n     * with the new value. If the new value is \"never\", then also update all\n     * parent-specific notification settings to \"default\". If the previous value\n     * was \"never\", then assume providerList should be \"email\" only.\n     */\n\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  get notificationSettingsType() {\n    // filter out notification settings if the feature flag isn't set\n    return NOTIFICATION_SETTINGS_TYPES.filter(type => {\n      const notificationFlag = NOTIFICATION_FEATURE_MAP[type];\n      if (notificationFlag) {\n        return this.props.organizations.some(org =>\n          org.features?.includes(notificationFlag)\n        );\n      }\n      return true;\n    });\n  }\n\n  getInitialData(): {[key: string]: string} {\n    const {notificationSettings, legacyData} = this.state;\n\n    const notificationsInitialData = Object.fromEntries(\n      this.notificationSettingsType.map(notificationType => [\n        notificationType,\n        decideDefault(notificationType, notificationSettings),\n      ])\n    );\n\n    const allInitialData = {\n      ...notificationsInitialData,\n      ...legacyData,\n    };\n\n    return allInitialData;\n  }\n\n  getFields(): FieldObject[] {\n    const {notificationSettings} = this.state;\n\n    const fields: FieldObject[] = [];\n    const endOfFields: FieldObject[] = [];\n    for (const notificationType of this.notificationSettingsType) {\n      const field = Object.assign({}, NOTIFICATION_SETTING_FIELDS[notificationType], {\n        getData: data => this.getStateToPutForDefault(data, notificationType),\n        help: (\n          <Fragment>\n            <p>\n              {NOTIFICATION_SETTING_FIELDS[notificationType].help}\n              &nbsp;\n              <Link\n                data-test-id=\"fine-tuning\"\n                to={`/settings/account/notifications/${NOTIFICATION_SETTINGS_PATHNAMES[notificationType]}`}\n              >\n                Fine tune\n              </Link>\n            </p>\n          </Fragment>\n        ),\n      }) as any;\n\n      if (\n        isSufficientlyComplex(notificationType, notificationSettings) &&\n        typeof field !== 'function'\n      ) {\n        field.confirm = {never: CONFIRMATION_MESSAGE};\n      }\n      if (field.type === 'blank') {\n        endOfFields.push(field);\n      } else {\n        fields.push(field);\n      }\n    }\n\n    const legacyField = SELF_NOTIFICATION_SETTINGS_TYPES.map(\n      type => NOTIFICATION_SETTING_FIELDS[type] as FieldObject\n    );\n\n    fields.push(...legacyField);\n\n    const allFields = [...fields, ...endOfFields];\n\n    return allFields;\n  }\n\n  onFieldChange = (fieldName: string) => {\n    if (SELF_NOTIFICATION_SETTINGS_TYPES.includes(fieldName)) {\n      this.model.setFormOptions({apiEndpoint: '/users/me/notifications/'});\n    } else {\n      this.model.setFormOptions({apiEndpoint: '/users/me/notification-settings/'});\n    }\n  };\n\n  renderBody() {\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={t('Notifications')} />\n        <SettingsPageHeader title={t('Notifications')} />\n        <TextBlock>\n          {t('Personal notifications sent by email or an integration.')}\n        </TextBlock>\n        <Form\n          model={this.model}\n          saveOnBlur\n          apiMethod=\"PUT\"\n          onFieldChange={this.onFieldChange}\n          initialData={this.getInitialData()}\n        >\n          <JsonForm title={t('Notifications')} fields={this.getFields()} />\n        </Form>\n        <AlertLink to=\"/settings/account/emails\" icon={<IconMail />}>\n          {t('Looking to add or remove an email address? Use the emails panel.')}\n        </AlertLink>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettings);\n"],"names":["NotificationSettings","DeprecatedAsyncComponent","constructor","arguments","_defineProperty","FormModel","changedData","notificationType","notificationSettings","this","state","updatedNotificationSettings","getStateToPutForDefault","getParentIds","setState","mergeNotificationSettings","fieldName","SELF_NOTIFICATION_SETTINGS_TYPES","includes","model","setFormOptions","apiEndpoint","getDefaultState","super","legacyData","getEndpoints","v2","componentDidMount","trackAnalytics","organization","notificationSettingsType","NOTIFICATION_SETTINGS_TYPES","filter","type","notificationFlag","NOTIFICATION_FEATURE_MAP","props","organizations","some","org","features","getInitialData","Object","fromEntries","map","decideDefault","getFields","fields","endOfFields","field","assign","NOTIFICATION_SETTING_FIELDS","getData","data","help","_jsx","Fragment","children","_jsxs","Link","to","NOTIFICATION_SETTINGS_PATHNAMES","isSufficientlyComplex","confirm","never","CONFIRMATION_MESSAGE","push","legacyField","renderBody","SentryDocumentTitle","title","t","SettingsPageHeader","TextBlock","Form","saveOnBlur","apiMethod","onFieldChange","initialData","JsonForm","AlertLink","icon","IconMail","withOrganizations"],"sourceRoot":""}