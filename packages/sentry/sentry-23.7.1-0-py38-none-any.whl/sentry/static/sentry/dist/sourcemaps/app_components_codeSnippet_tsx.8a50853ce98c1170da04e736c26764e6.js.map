{"version":3,"file":"chunks/app_components_codeSnippet_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"wlBAwBO,SAASA,EAAWC,GASN,IATO,SAC1BC,EAAQ,SACRC,EAAQ,KACRC,EAAI,SACJC,EAAQ,eACRC,EAAc,OACdC,EAAM,UACNC,EAAS,gBACTC,GACiBR,EACjB,MAAMS,GAAMC,EAAAA,EAAAA,QAA8B,OAE1CC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAUH,EAAII,QACfD,IAIDV,KAAYY,IAAAA,UACdA,IAAAA,iBAAuBF,IAIzBG,EAAAA,EAAAA,GAAkBb,EAAU,CAACc,OAAQA,IAAMF,IAAAA,iBAAuBF,KAAU,GAC3E,CAACX,EAAUC,IAEd,MAAOe,EAAcC,IAAmBC,EAAAA,EAAAA,UAAsC,QAcxEC,EACa,SAAjBH,GACII,EAAAA,EAAAA,GAAE,QACe,WAAjBJ,GACAI,EAAAA,EAAAA,GAAE,WACFA,EAAAA,EAAAA,GAAE,kBAER,OACEC,EAAAA,EAAAA,IAACC,EAAO,CAAChB,UAAY,GAAEJ,EAAO,cAAgB,KAAKI,GAAa,KAAKN,SAAA,EACnEqB,EAAAA,EAAAA,IAACE,EAAM,CAACC,cAAerB,EAASH,SAAA,CAC7BG,IAAYsB,EAAAA,EAAAA,IAACC,EAAQ,CAAA1B,SAAEG,KACtBC,IACAqB,EAAAA,EAAAA,IAACE,EAAU,CACTC,KAAK,SACLC,KAAK,KACLC,mBAAiB,EACjBC,aAAc5B,EACd6B,QA7BSC,KACjBC,UAAUC,UACPC,UAAUpC,GACVqC,MAAK,KACJpB,EAAgB,SAAS,IAE1BqB,OAAM,KACLrB,EAAgB,QAAQ,IAE5BZ,IAASL,EAAS,EAqBVuC,MAAOpB,EACPqB,aAAc,CAACC,MAAO,EAAGC,aAAa,EAAOC,SAAU,QACvDC,aAAcA,IAAM3B,EAAgB,QAAQjB,UAE5CyB,EAAAA,EAAAA,IAACoB,EAAAA,GAAQ,CAAChB,KAAK,aAKrBJ,EAAAA,EAAAA,IAAA,OAAKnB,UAAY,YAAWwC,OAAO7C,KAAYD,UAC7CyB,EAAAA,EAAAA,IAAA,QACEjB,IAAKA,EACLF,UAAY,YAAWwC,OAAO7C,KAC9BI,OAAQE,EAAgBP,SAEvBA,QAKX,CA9EgBF,EAAWiD,YAAA,cAgF3B,MAAMzB,GAAU0B,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,iCAEbE,GAAKA,EAAEC,MAAMC,qBAAmB,mBAC7BF,GAAKA,EAAEC,MAAME,cAAY,mBAOtC9B,GAASyB,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,8EAKXE,GAAKA,EAAEC,MAAMG,KAAKC,YAAU,eAC9BL,GAAKA,EAAEC,MAAMK,cAAY,WAC7BN,GAAKA,EAAEC,MAAMM,cAAY,+BAIhCP,GACAA,EAAE1B,YACG,qBACQkC,EAAAA,EAAAA,GAAM,4BACLA,EAAAA,EAAAA,GAAM,UAAUA,EAAAA,EAAAA,GAAM,uCACPR,EAAEC,MAAMQ,qBAEhC,kMAQQD,EAAAA,EAAAA,GAAM,aAClB,KAGChC,GAAWsB,EAAAA,EAAAA,GAAO,IAAG,CAAAC,OAAA,YAAVD,EACbE,GAAKA,EAAEC,MAAMS,kBAAgB,cAI3BjC,GAAaqB,EAAAA,EAAAA,GAAOa,EAAAA,GAAM,CAAAZ,OAAA,YAAbD,CAAc,UACtBE,GAAKA,EAAEC,MAAMW,SAAO,8F","sources":["webpack:///./app/components/codeSnippet.tsx"],"sourcesContent":["import {useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\nimport Prism from 'prismjs';\n\nimport {Button} from 'sentry/components/button';\nimport {IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {loadPrismLanguage} from 'sentry/utils/loadPrismLanguage';\n\ninterface CodeSnippetProps {\n  children: string;\n  language: string;\n  className?: string;\n  dark?: boolean;\n  filename?: string;\n  hideCopyButton?: boolean;\n  onCopy?: (copiedCode: string) => void;\n  /**\n   * Fired when the user selects and copies code snippet manually\n   */\n  onSelectAndCopy?: () => void;\n}\n\nexport function CodeSnippet({\n  children,\n  language,\n  dark,\n  filename,\n  hideCopyButton,\n  onCopy,\n  className,\n  onSelectAndCopy,\n}: CodeSnippetProps) {\n  const ref = useRef<HTMLModElement | null>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) {\n      return;\n    }\n\n    if (language in Prism.languages) {\n      Prism.highlightElement(element);\n      return;\n    }\n\n    loadPrismLanguage(language, {onLoad: () => Prism.highlightElement(element)});\n  }, [children, language]);\n\n  const [tooltipState, setTooltipState] = useState<'copy' | 'copied' | 'error'>('copy');\n\n  const handleCopy = () => {\n    navigator.clipboard\n      .writeText(children)\n      .then(() => {\n        setTooltipState('copied');\n      })\n      .catch(() => {\n        setTooltipState('error');\n      });\n    onCopy?.(children);\n  };\n\n  const tooltipTitle =\n    tooltipState === 'copy'\n      ? t('Copy')\n      : tooltipState === 'copied'\n      ? t('Copied')\n      : t('Unable to copy');\n\n  return (\n    <Wrapper className={`${dark ? 'prism-dark ' : ''}${className ?? ''}`}>\n      <Header hasFileName={!!filename}>\n        {filename && <FileName>{filename}</FileName>}\n        {!hideCopyButton && (\n          <CopyButton\n            type=\"button\"\n            size=\"xs\"\n            translucentBorder\n            borderless={!!filename}\n            onClick={handleCopy}\n            title={tooltipTitle}\n            tooltipProps={{delay: 0, isHoverable: false, position: 'left'}}\n            onMouseLeave={() => setTooltipState('copy')}\n          >\n            <IconCopy size=\"xs\" />\n          </CopyButton>\n        )}\n      </Header>\n\n      <pre className={`language-${String(language)}`}>\n        <code\n          ref={ref}\n          className={`language-${String(language)}`}\n          onCopy={onSelectAndCopy}\n        >\n          {children}\n        </code>\n      </pre>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled('div')`\n  position: relative;\n  background: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n\n  pre {\n    margin: 0;\n  }\n`;\n\nconst Header = styled('div')<{hasFileName: boolean}>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  font-family: ${p => p.theme.text.familyMono};\n  font-size: ${p => p.theme.codeFontSize};\n  color: ${p => p.theme.headingColor};\n  font-weight: 600;\n  z-index: 2;\n\n  ${p =>\n    p.hasFileName\n      ? `\n      padding: ${space(0.5)} 0;\n      margin: 0 ${space(0.5)} 0 ${space(2)};\n      border-bottom: solid 1px ${p.theme.innerBorder};\n    `\n      : `\n      justify-content: flex-end;\n      position: absolute;\n      top: 0;\n      right: 0;\n      width: max-content;\n      height: max-content;\n      max-height: 100%;\n      padding: ${space(1)};\n    `}\n`;\n\nconst FileName = styled('p')`\n  ${p => p.theme.overflowEllipsis}\n  margin: 0;\n`;\n\nconst CopyButton = styled(Button)`\n  color: ${p => p.theme.subText};\n\n  transition: opacity 0.1s ease-out;\n  opacity: 0;\n\n  p + &, /* if preceded by FileName */\n  div:hover > div > &, /* if Wrapper is hovered */\n  &.focus-visible {\n    opacity: 1;\n  }\n`;\n"],"names":["CodeSnippet","_ref","children","language","dark","filename","hideCopyButton","onCopy","className","onSelectAndCopy","ref","useRef","useEffect","element","current","Prism","loadPrismLanguage","onLoad","tooltipState","setTooltipState","useState","tooltipTitle","t","_jsxs","Wrapper","Header","hasFileName","_jsx","FileName","CopyButton","type","size","translucentBorder","borderless","onClick","handleCopy","navigator","clipboard","writeText","then","catch","title","tooltipProps","delay","isHoverable","position","onMouseLeave","IconCopy","String","displayName","_styled","target","p","theme","backgroundSecondary","borderRadius","text","familyMono","codeFontSize","headingColor","space","innerBorder","overflowEllipsis","Button","subText"],"sourceRoot":""}