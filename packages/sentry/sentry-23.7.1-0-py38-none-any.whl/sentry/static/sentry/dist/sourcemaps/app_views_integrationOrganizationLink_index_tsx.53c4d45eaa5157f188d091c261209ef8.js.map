{"version":3,"file":"chunks/app_views_integrationOrganizationLink_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/narrowLayout.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/integrationOrganizationLink/index.tsx","webpack:///./app/views/settings/organizationIntegrations/addIntegration.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport styled from '@emotion/styled';\n\nimport {logout} from 'sentry/actionCreators/account';\nimport {IconSentry} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport useApi from 'sentry/utils/useApi';\n\ntype Props = {\n  children: React.ReactNode;\n  maxWidth?: string;\n  showLogout?: boolean;\n};\n\nfunction NarrowLayout({maxWidth, showLogout, children}: Props) {\n  const api = useApi();\n\n  useEffect(() => {\n    document.body.classList.add('narrow');\n\n    return () => document.body.classList.remove('narrow');\n  }, []);\n\n  async function handleLogout() {\n    await logout(api);\n    window.location.assign('/auth/login');\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"pattern-bg\" />\n      <div className=\"container\" style={{maxWidth}}>\n        <div className=\"box box-modal\">\n          <div className=\"box-header\">\n            <a href=\"/\">\n              <IconSentry size=\"lg\" />\n            </a>\n            {showLogout && (\n              <a className=\"logout pull-right\" onClick={handleLogout}>\n                <Logout>{t('Sign out')}</Logout>\n              </a>\n            )}\n          </div>\n          <div className=\"box-content with-padding\">{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Logout = styled('span')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nexport default NarrowLayout;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {urlEncode} from '@sentry/utils';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport IdBadge from 'sentry/components/idBadge';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NarrowLayout from 'sentry/components/narrowLayout';\nimport {t, tct} from 'sentry/locale';\nimport {Integration, IntegrationProvider, Organization} from 'sentry/types';\nimport {generateBaseControlSiloUrl} from 'sentry/utils';\nimport {IntegrationAnalyticsKey} from 'sentry/utils/analytics/integrations';\nimport {\n  getIntegrationFeatureGate,\n  trackIntegrationAnalytics,\n} from 'sentry/utils/integrationUtil';\nimport {singleLineRenderer} from 'sentry/utils/marked';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport AddIntegration from 'sentry/views/settings/organizationIntegrations/addIntegration';\n\n// installationId present for Github flow\ntype Props = RouteComponentProps<{integrationSlug: string; installationId?: string}, {}>;\n\ntype State = DeprecatedAsyncView['state'] & {\n  organization?: Organization;\n  provider?: IntegrationProvider;\n  selectedOrgSlug?: string;\n};\n\nexport default class IntegrationOrganizationLink extends DeprecatedAsyncView<\n  Props,\n  State\n> {\n  disableErrorReport = false;\n  controlSiloApi = new Client({baseUrl: generateBaseControlSiloUrl() + '/api/0'});\n\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    return [['organizations', '/organizations/']];\n  }\n\n  getTitle() {\n    return t('Choose Installation Organization');\n  }\n\n  trackIntegrationAnalytics = (\n    eventName: IntegrationAnalyticsKey,\n    startSession?: boolean\n  ) => {\n    const {organization, provider} = this.state;\n    // should have these set but need to make TS happy\n    if (!organization || !provider) {\n      return;\n    }\n\n    trackIntegrationAnalytics(\n      eventName,\n      {\n        integration_type: 'first_party',\n        integration: provider.key,\n        // We actually don't know if it's installed but neither does the user in the view and multiple installs is possible\n        already_installed: false,\n        view: 'external_install',\n        organization,\n      },\n      {startSession: !!startSession}\n    );\n  };\n\n  trackOpened() {\n    this.trackIntegrationAnalytics('integrations.integration_viewed', true);\n  }\n\n  trackInstallationStart() {\n    this.trackIntegrationAnalytics('integrations.installation_start');\n  }\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  get queryParams() {\n    return this.props.location.query;\n  }\n\n  getOrgBySlug = (orgSlug: string): Organization | undefined => {\n    return this.state.organizations.find((org: Organization) => org.slug === orgSlug);\n  };\n\n  onLoadAllEndpointsSuccess() {\n    // auto select the org if there is only one\n    const {organizations} = this.state;\n    if (organizations.length === 1) {\n      this.onSelectOrg({value: organizations[0].slug});\n    }\n  }\n\n  onSelectOrg = async ({value: orgSlug}: {value: string}) => {\n    this.setState({selectedOrgSlug: orgSlug, reloading: true, organization: undefined});\n\n    try {\n      const [organization, {providers}]: [\n        Organization,\n        {providers: IntegrationProvider[]}\n      ] = await Promise.all([\n        this.controlSiloApi.requestPromise(`/organizations/${orgSlug}/`),\n        this.controlSiloApi.requestPromise(\n          `/organizations/${orgSlug}/config/integrations/?provider_key=${this.integrationSlug}`\n        ),\n      ]);\n      // should never happen with a valid provider\n      if (providers.length === 0) {\n        throw new Error('Invalid provider');\n      }\n      this.setState(\n        {organization, reloading: false, provider: providers[0]},\n        this.trackOpened\n      );\n    } catch (_err) {\n      addErrorMessage(t('Failed to retrieve organization or integration details'));\n      this.setState({reloading: false});\n    }\n  };\n\n  hasAccess = () => {\n    const {organization} = this.state;\n    return organization?.access.includes('org:integrations');\n  };\n\n  // used with Github to redirect to the the integration detail\n  onInstallWithInstallationId = (data: Integration) => {\n    const {organization} = this.state;\n    const orgId = organization && organization.slug;\n    const normalizedUrl = normalizeUrl(\n      `/settings/${orgId}/integrations/${data.provider.key}/${data.id}/`\n    );\n    window.location.assign(\n      `${organization?.links.organizationUrl || ''}${normalizedUrl}`\n    );\n  };\n\n  // non-Github redirects to the extension view where the backend will finish the installation\n  finishInstallation = () => {\n    // add the selected org to the query parameters and then redirect back to configure\n    const {selectedOrgSlug, organization} = this.state;\n    const query = {orgSlug: selectedOrgSlug, ...this.queryParams};\n    this.trackInstallationStart();\n    // need to send to control silo to finish the installation\n    window.location.assign(\n      `${organization?.links.organizationUrl || ''}/extensions/${\n        this.integrationSlug\n      }/configure/?${urlEncode(query)}`\n    );\n  };\n\n  renderAddButton() {\n    const {installationId} = this.props.params;\n    const {organization, provider} = this.state;\n    // should never happen but we need this check for TS\n    if (!provider || !organization) {\n      return null;\n    }\n    const {features} = provider.metadata;\n\n    // Prepare the features list\n    const featuresComponents = features.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    const {IntegrationFeatures} = getIntegrationFeatureGate();\n\n    // Github uses a different installation flow with the installationId as a parameter\n    // We have to wrap our installation button with AddIntegration so we can get the\n    // addIntegrationWithInstallationId callback.\n    // if we don't hve an installationId, we need to use the finishInstallation callback.\n    return (\n      <IntegrationFeatures organization={organization} features={featuresComponents}>\n        {({disabled}) => (\n          <AddIntegration\n            provider={provider}\n            onInstall={this.onInstallWithInstallationId}\n            organization={organization}\n          >\n            {addIntegrationWithInstallationId => (\n              <ButtonWrapper>\n                <Button\n                  priority=\"primary\"\n                  disabled={!this.hasAccess() || disabled}\n                  onClick={() =>\n                    installationId\n                      ? addIntegrationWithInstallationId({\n                          installation_id: installationId,\n                        })\n                      : this.finishInstallation()\n                  }\n                >\n                  {t('Install %s', provider.name)}\n                </Button>\n              </ButtonWrapper>\n            )}\n          </AddIntegration>\n        )}\n      </IntegrationFeatures>\n    );\n  }\n\n  renderBottom() {\n    const {organization, selectedOrgSlug, provider, reloading} = this.state;\n    const {FeatureList} = getIntegrationFeatureGate();\n    if (reloading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <Fragment>\n        {selectedOrgSlug && organization && !this.hasAccess() && (\n          <Alert type=\"error\" showIcon>\n            <p>\n              {tct(\n                `You do not have permission to install integrations in\n                [organization]. Ask an organization owner or manager to\n                visit this page to finish installing this integration.`,\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <InstallLink>{window.location.href}</InstallLink>\n          </Alert>\n        )}\n\n        {provider && organization && this.hasAccess() && FeatureList && (\n          <Fragment>\n            <p>\n              {tct(\n                'The following features will be available for [organization] when installed.',\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <FeatureList\n              organization={organization}\n              features={provider.metadata.features}\n              provider={provider}\n            />\n          </Fragment>\n        )}\n\n        <div className=\"form-actions\">{this.renderAddButton()}</div>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {selectedOrgSlug} = this.state;\n    const options = this.state.organizations.map((org: Organization) => ({\n      value: org.slug,\n      label: (\n        <IdBadge\n          organization={org}\n          avatarSize={20}\n          displayName={org.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      ),\n    }));\n\n    return (\n      <NarrowLayout>\n        <h3>{t('Finish integration installation')}</h3>\n        <p>\n          {tct(\n            `Please pick a specific [organization:organization] to link with\n            your integration installation of [integation].`,\n            {\n              organization: <strong />,\n              integation: <strong>{this.integrationSlug}</strong>,\n            }\n          )}\n        </p>\n\n        <FieldGroup label={t('Organization')} inline={false} stacked required>\n          <SelectControl\n            onChange={this.onSelectOrg}\n            value={selectedOrgSlug}\n            placeholder={t('Select an organization')}\n            options={options}\n          />\n        </FieldGroup>\n        {this.renderBottom()}\n      </NarrowLayout>\n    );\n  }\n}\n\nconst InstallLink = styled('pre')`\n  margin-bottom: 0;\n  background: #fbe3e1;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst ButtonWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import {Component} from 'react';\nimport * as qs from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  onInstall: (data: IntegrationWithConfig) => void;\n  organization: Organization;\n  provider: IntegrationProvider;\n  account?: string; // for analytics\n  analyticsParams?: {\n    already_installed: boolean;\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog?.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {account, analyticsParams, modalParams, organization, provider} = this.props;\n\n    trackIntegrationAnalytics('integrations.installation_start', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (account) {\n      query.account = account;\n    }\n\n    if (modalParams) {\n      query = {...query, ...modalParams};\n    }\n\n    const installUrl = `${url}?${qs.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {analyticsParams, onInstall, organization, provider} = this.props;\n    const validOrigins = [\n      ConfigStore.get('links').sentryUrl,\n      ConfigStore.get('links').organizationUrl,\n      document.location.origin,\n    ];\n    if (!validOrigins.includes(message.origin)) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data?.error ?? t('An unknown error occurred'));\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.installation_complete', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    addSuccessMessage(t('%s added', provider.name));\n    onInstall(data);\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children(this.openDialog);\n  }\n}\n"],"names":["NarrowLayout","_ref","maxWidth","showLogout","children","api","useApi","useEffect","document","body","classList","add","remove","_jsxs","className","_jsx","style","href","IconSentry","size","onClick","async","logout","window","location","assign","Logout","t","displayName","_styled","target","p","theme","fontSizeLarge","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","IntegrationOrganizationLink","constructor","arguments","_defineProperty","Client","baseUrl","generateBaseControlSiloUrl","eventName","startSession","organization","provider","state","trackIntegrationAnalytics","integration_type","integration","key","already_installed","view","orgSlug","organizations","find","org","slug","value","setState","selectedOrgSlug","reloading","undefined","providers","Promise","all","controlSiloApi","requestPromise","integrationSlug","length","Error","trackOpened","_err","addErrorMessage","access","includes","data","orgId","normalizedUrl","normalizeUrl","id","links","organizationUrl","query","queryParams","trackInstallationStart","urlEncode","getEndpoints","props","params","onLoadAllEndpointsSuccess","onSelectOrg","renderAddButton","installationId","features","metadata","featuresComponents","map","f","featureGate","description","FeatureListItem","dangerouslySetInnerHTML","__html","singleLineRenderer","IntegrationFeatures","getIntegrationFeatureGate","_ref2","disabled","AddIntegration","onInstall","onInstallWithInstallationId","addIntegrationWithInstallationId","ButtonWrapper","Button","priority","hasAccess","installation_id","finishInstallation","name","renderBottom","FeatureList","LoadingIndicator","Fragment","Alert","type","showIcon","tct","InstallLink","renderBody","options","label","IdBadge","avatarSize","avatarProps","consistentWidth","integation","FieldGroup","inline","stacked","required","SelectControl","onChange","placeholder","styles","Component","urlParams","account","analyticsParams","modalParams","url","width","height","setupDialog","left","top","computeCenteredWindow","installUrl","qs","opts","dialog","open","focus","message","ConfigStore","get","sentryUrl","origin","source","success","addSuccessMessage","error","componentDidMount","addEventListener","didReceiveMessage","componentWillUnmount","removeEventListener","close","screenLeft","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","openDialog"],"sourceRoot":""}