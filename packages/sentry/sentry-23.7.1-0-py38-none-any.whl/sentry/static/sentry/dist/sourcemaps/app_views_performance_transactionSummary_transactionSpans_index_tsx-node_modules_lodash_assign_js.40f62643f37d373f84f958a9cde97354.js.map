{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionSpans_index_tsx-node_modules_lodash_assign_js.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/suspectSpans/spanOpsQuery.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/opsFilter.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/suspectSpansTable.tsx","webpack:///../node_modules/lodash/assign.js"],"sourcesContent":["import omit from 'lodash/omit';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nimport {SpanOps} from './types';\n\ntype SpanOpsProps = {};\n\ntype RequestProps = DiscoverQueryProps & SpanOpsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<SpanOpsProps>, 'tableData'> & {\n  spanOps: SpanOps | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction SpanOpsQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<SpanOps, SpanOpsProps>\n      route=\"events-span-ops\"\n      limit={20}\n      {...omit(props, 'children')}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({spanOps: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default SpanOpsQuery;\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {pickBarColor} from 'sentry/components/performance/waterfall/utils';\nimport {IconFilter, IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport SpanOpsQuery from 'sentry/utils/performance/suspectSpans/spanOpsQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\ntype Props = {\n  eventView: EventView;\n  handleOpChange: (op: string | undefined) => void;\n  location: Location;\n  organization: Organization;\n  transactionName: string;\n};\n\nfunction getMenuOptions({spanOps, isLoading, error}) {\n  if (isLoading) {\n    return [{value: 'isLoading', disabled: true, label: t('Loading…')}];\n  }\n\n  if (error) {\n    return [\n      {\n        value: 'error',\n        disabled: true,\n        label: t('Error loading operations'),\n        leadingItems: <IconWarning color=\"subText\" />,\n      },\n    ];\n  }\n\n  return spanOps.map(spanOp => ({\n    value: spanOp.op,\n    label: spanOp.op,\n    leadingItems: <OperationDot backgroundColor={pickBarColor(spanOp.op)} />,\n  }));\n}\n\nexport default function OpsFilter(props: Props) {\n  const {location, eventView, organization, handleOpChange, transactionName} = props;\n\n  // clear out the query string from the event view\n  // as we want to restrict queries to the op names\n  const conditions = new MutableSearch('');\n  conditions\n    .setFilterValues('event.type', ['transaction'])\n    .setFilterValues('transaction', [transactionName]);\n  const opsFilterEventView = eventView.clone();\n  opsFilterEventView.query = conditions.formatString();\n\n  const currentOp = decodeScalar(location.query.spanOp);\n\n  return (\n    <SpanOpsQuery\n      location={location}\n      orgSlug={organization.slug}\n      eventView={opsFilterEventView}\n      cursor=\"0:0:1\"\n      noPagination\n    >\n      {results => (\n        <CompactSelect\n          clearable\n          maxMenuWidth=\"24rem\"\n          disallowEmptySelection={false}\n          menuTitle={t('Filter by operation')}\n          options={getMenuOptions(results)}\n          onChange={opt => handleOpChange(opt?.value)}\n          value={currentOp}\n          triggerLabel={currentOp ?? t('Filter')}\n          triggerProps={{icon: <IconFilter />}}\n        />\n      )}\n    </SpanOpsQuery>\n  );\n}\n\nconst OperationDot = styled('div')<{backgroundColor: string}>`\n  display: block;\n  width: ${space(1)};\n  height: ${space(1)};\n  border-radius: 100%;\n  background-color: ${p => p.backgroundColor};\n`;\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport Pagination from 'sentry/components/pagination';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport SuspectSpansQuery from 'sentry/utils/performance/suspectSpans/suspectSpansQuery';\nimport {VisuallyCompleteWithData} from 'sentry/utils/performanceForSentry';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useProjects from 'sentry/utils/useProjects';\n\nimport {SetStateAction} from '../types';\n\nimport OpsFilter from './opsFilter';\nimport SuspectSpansTable from './suspectSpansTable';\nimport {SpanSort, SpansTotalValues} from './types';\nimport {\n  getSuspectSpanSortFromEventView,\n  getTotalsView,\n  SPAN_RELATIVE_PERIODS,\n  SPAN_RETENTION_DAYS,\n  SPAN_SORT_OPTIONS,\n  SPAN_SORT_TO_FIELDS,\n} from './utils';\n\nconst ANALYTICS_VALUES = {\n  spanOp: (organization: Organization, value: string | undefined) =>\n    trackAnalytics('performance_views.spans.change_op', {\n      organization,\n      operation_name: value,\n    }),\n  sort: (organization: Organization, value: string | undefined) =>\n    trackAnalytics('performance_views.spans.change_sort', {\n      organization,\n      sort_column: value,\n    }),\n};\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projectId: string;\n  setError: SetStateAction<string | undefined>;\n  transactionName: string;\n};\n\nfunction SpansContent(props: Props) {\n  const {location, organization, eventView, projectId, transactionName} = props;\n  const query = decodeScalar(location.query.query, '');\n\n  function handleChange(key: string) {\n    return function (value: string | undefined) {\n      ANALYTICS_VALUES[key]?.(organization, value);\n\n      const queryParams = normalizeDateTimeParams({\n        ...(location.query || {}),\n        [key]: value,\n      });\n\n      // do not propagate pagination when making a new search\n      const toOmit = ['cursor'];\n      if (!defined(value)) {\n        toOmit.push(key);\n      }\n      const searchQueryParams = omit(queryParams, toOmit);\n\n      browserHistory.push({\n        ...location,\n        query: searchQueryParams,\n      });\n    };\n  }\n\n  const spanOp = decodeScalar(location.query.spanOp);\n  const spanGroup = decodeScalar(location.query.spanGroup);\n  const sort = getSuspectSpanSortFromEventView(eventView);\n  const spansView = getSpansEventView(eventView, sort.field);\n  const totalsView = getTotalsView(eventView);\n\n  const {projects} = useProjects();\n\n  return (\n    <Layout.Main fullWidth>\n      <FilterActions>\n        <OpsFilter\n          location={location}\n          eventView={eventView}\n          organization={organization}\n          handleOpChange={handleChange('spanOp')}\n          transactionName={transactionName}\n        />\n        <PageFilterBar condensed>\n          <EnvironmentPageFilter />\n          <DatePageFilter\n            alignDropdown=\"left\"\n            maxPickableDays={SPAN_RETENTION_DAYS}\n            relativeOptions={SPAN_RELATIVE_PERIODS}\n          />\n        </PageFilterBar>\n        <StyledSearchBar\n          organization={organization}\n          projectIds={eventView.project}\n          query={query}\n          fields={eventView.fields}\n          onSearch={handleChange('query')}\n        />\n        <CompactSelect\n          value={sort.field}\n          options={SPAN_SORT_OPTIONS.map(opt => ({value: opt.field, label: opt.label}))}\n          onChange={opt => handleChange('sort')(opt.value)}\n          triggerProps={{prefix: sort.prefix}}\n          triggerLabel={sort.label}\n        />\n      </FilterActions>\n      <DiscoverQuery\n        eventView={totalsView}\n        orgSlug={organization.slug}\n        location={location}\n        referrer=\"api.performance.transaction-spans\"\n        cursor=\"0:0:1\"\n        noPagination\n      >\n        {({tableData}) => {\n          const totals: SpansTotalValues | null =\n            (tableData?.data?.[0] as SpansTotalValues | undefined) ?? null;\n          return (\n            <SuspectSpansQuery\n              location={location}\n              orgSlug={organization.slug}\n              eventView={spansView}\n              limit={10}\n              perSuspect={0}\n              spanOps={defined(spanOp) ? [spanOp] : []}\n              spanGroups={defined(spanGroup) ? [spanGroup] : []}\n            >\n              {({suspectSpans, isLoading, pageLinks}) => (\n                <Fragment>\n                  <VisuallyCompleteWithData\n                    id=\"TransactionSpans-SuspectSpansTable\"\n                    hasData={!!suspectSpans?.length}\n                    isLoading={isLoading}\n                  >\n                    <SuspectSpansTable\n                      location={location}\n                      organization={organization}\n                      transactionName={transactionName}\n                      project={projects.find(p => p.id === projectId)}\n                      isLoading={isLoading}\n                      suspectSpans={suspectSpans ?? []}\n                      totals={totals}\n                      sort={sort.field}\n                    />\n                  </VisuallyCompleteWithData>\n                  <Pagination pageLinks={pageLinks ?? null} />\n                </Fragment>\n              )}\n            </SuspectSpansQuery>\n          );\n        }}\n      </DiscoverQuery>\n    </Layout.Main>\n  );\n}\n\nfunction getSpansEventView(eventView: EventView, sort: SpanSort): EventView {\n  eventView = eventView.clone();\n  const fields = SPAN_SORT_TO_FIELDS[sort];\n  eventView.fields = fields ? fields.map(field => ({field})) : [];\n  return eventView;\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(3, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto auto 1fr auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nexport default SpansContent;\n","import {Location} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport PageLayout from '../pageLayout';\nimport Tab from '../tabs';\n\nimport SpansContent from './content';\nimport {generateSpansEventView} from './utils';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n};\n\nfunction TransactionSpans(props: Props) {\n  const {location, organization, projects} = props;\n\n  return (\n    <PageLayout\n      location={location}\n      organization={organization}\n      projects={projects}\n      tab={Tab.SPANS}\n      getDocumentTitle={getDocumentTitle}\n      generateEventView={generateSpansEventView}\n      childComponent={SpansContent}\n    />\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Performance')].join(' - ');\n  }\n\n  return [t('Summary'), t('Performance')].join(' - ');\n}\n\nexport default withProjects(withOrganization(TransactionSpans));\n","import {ReactNode} from 'react';\nimport {Location} from 'history';\n\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {ColumnType, fieldAlignment} from 'sentry/utils/discover/fields';\nimport {Container as TableCellContainer} from 'sentry/utils/discover/styles';\nimport {SuspectSpans} from 'sentry/utils/performance/suspectSpans/types';\n\nimport {spanDetailsRouteWithQuery} from './spanDetails/utils';\nimport {SpanSort, SpanSortOthers, SpanSortPercentiles, SpansTotalValues} from './types';\n\ntype Props = {\n  isLoading: boolean;\n  location: Location;\n  organization: Organization;\n  sort: SpanSort;\n  suspectSpans: SuspectSpans;\n  totals: SpansTotalValues | null;\n  transactionName: string;\n  project?: Project;\n};\n\nexport default function SuspectSpansTable(props: Props) {\n  const {\n    location,\n    organization,\n    transactionName,\n    isLoading,\n    suspectSpans,\n    totals,\n    sort,\n    project,\n  } = props;\n\n  const data: TableDataRowWithExtras[] = suspectSpans.map(suspectSpan => ({\n    operation: suspectSpan.op,\n    group: suspectSpan.group,\n    description: suspectSpan.description,\n    frequency:\n      // Frequency is computed using the `uniq` function in ClickHouse.\n      // Because it is an approximation, it can occasionally exceed the number of events.\n      defined(suspectSpan.frequency) && defined(totals?.['count()'])\n        ? Math.min(1, suspectSpan.frequency / totals!['count()'])\n        : null,\n    avgOccurrences: suspectSpan.avgOccurrences,\n    p50ExclusiveTime: suspectSpan.p50ExclusiveTime,\n    p75ExclusiveTime: suspectSpan.p75ExclusiveTime,\n    p95ExclusiveTime: suspectSpan.p95ExclusiveTime,\n    p99ExclusiveTime: suspectSpan.p99ExclusiveTime,\n    sumExclusiveTime: suspectSpan.sumExclusiveTime,\n  }));\n\n  return (\n    <GridEditable\n      isLoading={isLoading}\n      data={data}\n      columnOrder={COLUMN_ORDER[sort].map(column => COLUMNS[column])}\n      columnSortBy={[]}\n      grid={{\n        renderHeadCell,\n        renderBodyCell: renderBodyCellWithMeta(\n          location,\n          organization,\n          transactionName,\n          project\n        ),\n      }}\n      location={location}\n    />\n  );\n}\n\nfunction renderHeadCell(column: TableColumn, _index: number): ReactNode {\n  const align = fieldAlignment(column.key, COLUMN_TYPE[column.key]);\n  return (\n    <SortLink\n      title={column.name}\n      align={align}\n      direction={undefined}\n      canSort={false}\n      generateSortLink={() => undefined}\n    />\n  );\n}\n\nfunction renderBodyCellWithMeta(\n  location: Location,\n  organization: Organization,\n  transactionName: string,\n  project?: Project\n) {\n  return function (\n    column: TableColumn,\n    dataRow: TableDataRowWithExtras\n  ): React.ReactNode {\n    const fieldRenderer = getFieldRenderer(column.key, COLUMN_TYPE);\n\n    if (column.key === 'description') {\n      const target = spanDetailsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        query: location.query,\n        spanSlug: {op: dataRow.operation, group: dataRow.group},\n        projectID: project?.id,\n      });\n      return (\n        <TableCellContainer>\n          <Link to={target}>{dataRow[column.key] ?? t('(unnamed span)')}</Link>\n        </TableCellContainer>\n      );\n    }\n\n    return fieldRenderer(dataRow, {location, organization});\n  };\n}\n\ntype TableColumnKey =\n  | 'operation'\n  | 'description'\n  | 'frequency'\n  | 'avgOccurrences'\n  | 'p50ExclusiveTime'\n  | 'p75ExclusiveTime'\n  | 'p95ExclusiveTime'\n  | 'p99ExclusiveTime'\n  | 'sumExclusiveTime';\n\ntype TableColumn = GridColumnOrder<TableColumnKey>;\n\ntype TableDataRow = Record<TableColumnKey, any>;\n\ntype TableDataRowWithExtras = TableDataRow & {\n  group: string;\n};\n\nconst COLUMN_ORDER: Record<SpanSort, TableColumnKey[]> = {\n  [SpanSortOthers.AVG_OCCURRENCE]: [\n    'operation',\n    'description',\n    'avgOccurrences',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortOthers.SUM_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P50_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'frequency',\n    'p50ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P75_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P95_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'frequency',\n    'p95ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P99_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'frequency',\n    'p99ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n};\n\nconst COLUMNS: Record<TableColumnKey, TableColumn> = {\n  operation: {\n    key: 'operation',\n    name: t('Span Operation'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  description: {\n    key: 'description',\n    name: t('Span Name'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  frequency: {\n    key: 'frequency',\n    name: t('Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  avgOccurrences: {\n    key: 'avgOccurrences',\n    name: t('Average Occurrences'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p50ExclusiveTime: {\n    key: 'p50ExclusiveTime',\n    name: t('P50 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p75ExclusiveTime: {\n    key: 'p75ExclusiveTime',\n    name: t('P75 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p95ExclusiveTime: {\n    key: 'p95ExclusiveTime',\n    name: t('P95 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p99ExclusiveTime: {\n    key: 'p99ExclusiveTime',\n    name: t('P99 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  sumExclusiveTime: {\n    key: 'sumExclusiveTime',\n    name: t('Total Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n};\n\nconst COLUMN_TYPE: Record<TableColumnKey, ColumnType> = {\n  operation: 'string',\n  description: 'string',\n  frequency: 'percentage',\n  avgOccurrences: 'number',\n  p50ExclusiveTime: 'duration',\n  p75ExclusiveTime: 'duration',\n  p95ExclusiveTime: 'duration',\n  p99ExclusiveTime: 'duration',\n  sumExclusiveTime: 'duration',\n};\n","var assignValue = require('./_assignValue'),\n    copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    isArrayLike = require('./isArrayLike'),\n    isPrototype = require('./_isPrototype'),\n    keys = require('./keys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nmodule.exports = assign;\n"],"names":["SpanOpsQuery","props","_jsx","GenericDiscoverQuery","route","limit","omit","children","_ref","tableData","rest","spanOps","displayName","getMenuOptions","isLoading","error","value","disabled","label","t","leadingItems","IconWarning","color","map","spanOp","op","OperationDot","backgroundColor","pickBarColor","OpsFilter","location","eventView","organization","handleOpChange","transactionName","conditions","MutableSearch","setFilterValues","opsFilterEventView","clone","query","formatString","currentOp","decodeScalar","orgSlug","slug","cursor","noPagination","results","CompactSelect","clearable","maxMenuWidth","disallowEmptySelection","menuTitle","options","onChange","opt","triggerLabel","triggerProps","icon","IconFilter","_styled","target","space","p","ANALYTICS_VALUES","trackAnalytics","operation_name","sort","sort_column","SpansContent","projectId","handleChange","key","queryParams","normalizeDateTimeParams","toOmit","defined","push","searchQueryParams","browserHistory","spanGroup","getSuspectSpanSortFromEventView","spansView","fields","SPAN_SORT_TO_FIELDS","field","getSpansEventView","totalsView","getTotalsView","projects","useProjects","_jsxs","Layout","fullWidth","FilterActions","PageFilterBar","condensed","EnvironmentPageFilter","DatePageFilter","alignDropdown","maxPickableDays","SPAN_RETENTION_DAYS","relativeOptions","SPAN_RELATIVE_PERIODS","StyledSearchBar","projectIds","project","onSearch","SPAN_SORT_OPTIONS","prefix","DiscoverQuery","referrer","totals","data","SuspectSpansQuery","perSuspect","spanGroups","_ref2","suspectSpans","pageLinks","Fragment","VisuallyCompleteWithData","id","hasData","length","SuspectSpansTable","find","Pagination","theme","breakpoints","small","xlarge","SearchBar","TransactionSpans","PageLayout","tab","Tab","SPANS","getDocumentTitle","generateEventView","generateSpansEventView","childComponent","String","trim","join","withProjects","withOrganization","suspectSpan","operation","group","description","frequency","Math","min","avgOccurrences","p50ExclusiveTime","p75ExclusiveTime","p95ExclusiveTime","p99ExclusiveTime","sumExclusiveTime","GridEditable","columnOrder","COLUMN_ORDER","column","COLUMNS","columnSortBy","grid","renderHeadCell","renderBodyCell","renderBodyCellWithMeta","_index","align","fieldAlignment","COLUMN_TYPE","SortLink","title","name","direction","undefined","canSort","generateSortLink","dataRow","fieldRenderer","getFieldRenderer","spanDetailsRouteWithQuery","transaction","spanSlug","projectID","TableCellContainer","Link","to","SpanSortOthers","AVG_OCCURRENCE","SUM_EXCLUSIVE_TIME","SpanSortPercentiles","P50_EXCLUSIVE_TIME","P75_EXCLUSIVE_TIME","P95_EXCLUSIVE_TIME","P99_EXCLUSIVE_TIME","width","COL_WIDTH_UNDEFINED","assignValue","copyObject","createAssigner","isArrayLike","isPrototype","keys","hasOwnProperty","Object","prototype","assign","object","source","call","module","exports"],"sourceRoot":""}