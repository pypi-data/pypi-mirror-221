{"version":3,"file":"chunks/app_views_settings_organizationProjects_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/components/settingsProjectItem.tsx","webpack:///./app/views/settings/organizationProjects/createProjectButton.tsx","webpack:///./app/views/settings/organizationProjects/projectStatsGraph.tsx","webpack:///./app/views/settings/organizationProjects/index.tsx"],"sourcesContent":["import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport BookmarkStar from 'sentry/components/projects/bookmarkStar';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nfunction ProjectItem({project, organization}: Props) {\n  return (\n    <Wrapper>\n      <BookmarkStar organization={organization} project={project} />\n      <ProjectBadge\n        to={`/settings/${organization.slug}/projects/${project.slug}/`}\n        avatarSize={18}\n        project={project}\n      />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  align-items: center;\n  gap: ${space(1.5)};\n`;\n\nexport default ProjectItem;\n","import {Button} from 'sentry/components/button';\nimport {useProjectCreationAccess} from 'sentry/components/projects/useProjectCreationAccess';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useTeams} from 'sentry/utils/useTeams';\n\nexport default function CreateProjectButton() {\n  const organization = useOrganization();\n  const {teams, initiallyLoaded} = useTeams();\n  const {canCreateProject} = useProjectCreationAccess({organization, teams});\n\n  return (\n    <Button\n      priority=\"primary\"\n      size=\"sm\"\n      disabled={!initiallyLoaded || !canCreateProject}\n      title={\n        !canCreateProject ? t('You do not have permission to create projects') : undefined\n      }\n      to={`/organizations/${organization.slug}/projects/new/`}\n      icon={<IconAdd size=\"xs\" isCircled />}\n    >\n      {t('Create Project')}\n    </Button>\n  );\n}\n","import {Fragment} from 'react';\nimport LazyLoad from 'react-lazyload';\n\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\n\ntype Props = {\n  project: Project;\n  stats?: Project['stats'];\n};\n\nfunction ProjectStatsGraph({project, stats}: Props) {\n  stats = stats || project.stats || [];\n  const series: Series[] = [\n    {\n      seriesName: t('Events'),\n      data: stats.map(point => ({name: point[0] * 1000, value: point[1]})),\n    },\n  ];\n\n  return (\n    <Fragment>\n      {series && (\n        <LazyLoad height={25} debounce={50}>\n          <MiniBarChart isGroupedByDate showTimeInTooltip series={series} height={25} />\n        </LazyLoad>\n      )}\n    </Fragment>\n  );\n}\n\nexport default ProjectStatsGraph;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport Placeholder from 'sentry/components/placeholder';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {sortProjects} from 'sentry/utils';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport DeprecatedAsyncView, {AsyncViewState} from 'sentry/views/deprecatedAsyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ProjectListItem from 'sentry/views/settings/components/settingsProjectItem';\nimport CreateProjectButton from 'sentry/views/settings/organizationProjects/createProjectButton';\n\nimport ProjectStatsGraph from './projectStatsGraph';\n\nconst ITEMS_PER_PAGE = 50;\n\ninterface Props extends RouteComponentProps<{}, {}> {\n  location: Location;\n  organization: Organization;\n}\n\ntype ProjectStats = Record<string, Required<Project['stats']>>;\n\ninterface State extends AsyncViewState {\n  projectList: Project[] | null;\n  projectListPageLinks: string | null;\n  projectStats: ProjectStats | null;\n}\n\nclass OrganizationProjects extends DeprecatedAsyncView<Props, State> {\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {location, organization} = this.props;\n    const query = decodeScalar(location.query.query);\n    return [\n      [\n        'projectList',\n        `/organizations/${organization.slug}/projects/`,\n        {\n          query: {\n            query,\n            per_page: ITEMS_PER_PAGE,\n          },\n        },\n      ],\n      [\n        'projectStats',\n        `/organizations/${organization.slug}/stats/`,\n        {\n          query: {\n            since: new Date().getTime() / 1000 - 3600 * 24,\n            stat: 'generated',\n            group: 'project',\n            per_page: ITEMS_PER_PAGE,\n          },\n        },\n      ],\n    ];\n  }\n\n  getTitle(): string {\n    const {organization} = this.props;\n    return routeTitleGen(t('Projects'), organization.slug, false);\n  }\n\n  renderLoading(): React.ReactNode {\n    return this.renderBody();\n  }\n\n  renderBody(): React.ReactNode {\n    const {projectList, projectListPageLinks, projectStats} = this.state;\n    const {organization} = this.props;\n\n    const action = <CreateProjectButton />;\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Projects\" action={action} />\n        <SearchWrapper>\n          {this.renderSearchInput({\n            updateRoute: true,\n            placeholder: t('Search Projects'),\n            className: 'search',\n          })}\n        </SearchWrapper>\n        <Panel>\n          <PanelHeader>{t('Projects')}</PanelHeader>\n          <PanelBody>\n            {projectList ? (\n              sortProjects(projectList).map(project => (\n                <GridPanelItem key={project.id}>\n                  <ProjectListItemWrapper>\n                    <ProjectListItem project={project} organization={organization} />\n                  </ProjectListItemWrapper>\n                  <ProjectStatsGraphWrapper>\n                    {projectStats ? (\n                      <ProjectStatsGraph\n                        key={project.id}\n                        project={project}\n                        stats={projectStats[project.id]}\n                      />\n                    ) : (\n                      <Placeholder height=\"25px\" />\n                    )}\n                  </ProjectStatsGraphWrapper>\n                </GridPanelItem>\n              ))\n            ) : (\n              <LoadingIndicator />\n            )}\n            {projectList && projectList.length === 0 && (\n              <EmptyMessage>{t('No projects found.')}</EmptyMessage>\n            )}\n          </PanelBody>\n        </Panel>\n        {projectListPageLinks && (\n          <Pagination pageLinks={projectListPageLinks} {...this.props} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationProjects);\n\nconst SearchWrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst GridPanelItem = styled(PanelItem)`\n  display: flex;\n  align-items: center;\n  padding: 0;\n`;\n\nconst ProjectListItemWrapper = styled('div')`\n  padding: ${space(2)};\n  flex: 1;\n`;\n\nconst ProjectStatsGraphWrapper = styled('div')`\n  padding: ${space(2)};\n  width: 25%;\n  margin-left: ${space(2)};\n`;\n"],"names":["getPadding","_ref","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","routeName","orgSlug","projectSlug","arguments","length","undefined","tmplBase","tmpl","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","render","_jsx","SentryDocumentTitle","title","this","children","renderComponent","displayName","ProjectItem","project","organization","_jsxs","Wrapper","BookmarkStar","ProjectBadge","to","slug","avatarSize","CreateProjectButton","useOrganization","teams","initiallyLoaded","useTeams","canCreateProject","useProjectCreationAccess","Button","priority","size","disabled","t","icon","IconAdd","isCircled","ProjectStatsGraph","stats","series","seriesName","data","map","point","name","value","Fragment","LazyLoad","height","debounce","MiniBarChart","isGroupedByDate","showTimeInTooltip","OrganizationProjects","getEndpoints","location","props","query","decodeScalar","per_page","since","Date","getTime","stat","group","routeTitleGen","renderLoading","renderBody","projectList","projectListPageLinks","projectStats","state","action","SettingsPageHeader","SearchWrapper","renderSearchInput","updateRoute","placeholder","className","Panel","PanelHeader","PanelBody","sortProjects","GridPanelItem","ProjectListItemWrapper","ProjectListItem","ProjectStatsGraphWrapper","id","Placeholder","LoadingIndicator","EmptyMessage","Pagination","pageLinks","withOrganization","PanelItem","styles"],"sourceRoot":""}