{"version":3,"file":"chunks/app_views_sharedGroupDetails_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/errorLevel.tsx","webpack:///./app/components/events/eventEntries.tsx","webpack:///./app/components/events/eventMessage.tsx","webpack:///./app/views/sharedGroupDetails/sharedGroupHeader.tsx","webpack:///./app/views/sharedGroupDetails/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Level} from 'sentry/types';\n\nconst DEFAULT_SIZE = '13px';\n\ntype Props = {\n  level?: Level;\n  size?: string;\n};\n\nconst ErrorLevel = styled('span')<Props>`\n  padding: 0;\n  position: relative;\n  width: ${p => p.size || DEFAULT_SIZE};\n  height: ${p => p.size || DEFAULT_SIZE};\n  text-indent: -9999em;\n  display: inline-block;\n  border-radius: 50%;\n  flex-shrink: 0;\n  background-color: ${p => (p.level ? p.theme.level[p.level] : p.theme.level.error)};\n`;\n\nexport default ErrorLevel;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {CommitRow} from 'sentry/components/commitRow';\nimport {EventEvidence} from 'sentry/components/events/eventEvidence';\nimport EventReplay from 'sentry/components/events/eventReplay';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {\n  Entry,\n  EntryType,\n  Event,\n  Group,\n  Organization,\n  Project,\n  SharedViewOrganization,\n} from 'sentry/types';\nimport {isNotSharedOrganization} from 'sentry/types/utils';\nimport {objectIsEmpty} from 'sentry/utils';\n\nimport {EventContexts} from './contexts';\nimport {EventDevice} from './device';\nimport {EventAttachments} from './eventAttachments';\nimport {EventCause} from './eventCause';\nimport {EventDataSection} from './eventDataSection';\nimport {EventEntry} from './eventEntry';\nimport {EventErrors} from './eventErrors';\nimport {EventExtraData} from './eventExtraData';\nimport {EventSdk} from './eventSdk';\nimport {EventTagsAndScreenshot} from './eventTagsAndScreenshot';\nimport {EventViewHierarchy} from './eventViewHierarchy';\nimport {EventGroupingInfo} from './groupingInfo';\nimport {EventPackageData} from './packageData';\nimport {EventRRWebIntegration} from './rrwebIntegration';\nimport {DataSection} from './styles';\nimport {EventUserFeedback} from './userFeedback';\n\ntype Props = {\n  location: Location;\n  /**\n   * The organization can be the shared view on a public issue view.\n   */\n  organization: Organization | SharedViewOrganization;\n  project: Project;\n  className?: string;\n  event?: Event;\n  group?: Group;\n  isShare?: boolean;\n  showTagSummary?: boolean;\n};\n\nfunction EventEntries({\n  organization,\n  project,\n  location,\n  event,\n  group,\n  className,\n  isShare = false,\n  showTagSummary = true,\n}: Props) {\n  const orgSlug = organization.slug;\n  const projectSlug = project.slug;\n  const orgFeatures = organization?.features ?? [];\n\n  if (!event) {\n    return (\n      <LatestEventNotAvailable>\n        <h3>{t('Latest Event Not Available')}</h3>\n      </LatestEventNotAvailable>\n    );\n  }\n\n  const hasContext = !objectIsEmpty(event.user ?? {}) || !objectIsEmpty(event.contexts);\n\n  return (\n    <div className={className}>\n      <EventErrors event={event} project={project} isShare={isShare} />\n      {!isShare && isNotSharedOrganization(organization) && (\n        <EventCause\n          project={project}\n          eventId={event.id}\n          group={group}\n          commitRow={CommitRow}\n        />\n      )}\n      {event.userReport && group && (\n        <EventDataSection title=\"User Feedback\" type=\"user-feedback\">\n          <EventUserFeedback\n            report={event.userReport}\n            orgId={orgSlug}\n            issueId={group.id}\n          />\n        </EventDataSection>\n      )}\n      {showTagSummary && (\n        <EventTagsAndScreenshot\n          event={event}\n          organization={organization as Organization}\n          projectSlug={projectSlug}\n          location={location}\n          isShare={isShare}\n        />\n      )}\n      <EventEvidence event={event} projectSlug={project.slug} />\n      <Entries\n        definedEvent={event}\n        projectSlug={projectSlug}\n        group={group}\n        organization={organization}\n        isShare={isShare}\n      />\n      {hasContext && <EventContexts group={group} event={event} />}\n      <EventExtraData event={event} />\n      <EventPackageData event={event} />\n      <EventDevice event={event} />\n      {!isShare && <EventViewHierarchy event={event} project={project} />}\n      {!isShare && <EventAttachments event={event} projectSlug={projectSlug} />}\n      <EventSdk sdk={event.sdk} meta={event._meta?.sdk} />\n      {!isShare && event.groupID && (\n        <EventGroupingInfo\n          projectSlug={projectSlug}\n          event={event}\n          showGroupingConfig={\n            orgFeatures.includes('set-grouping-config') && 'groupingConfig' in event\n          }\n          group={group}\n        />\n      )}\n      {!isShare && (\n        <EventRRWebIntegration event={event} orgId={orgSlug} projectSlug={projectSlug} />\n      )}\n    </div>\n  );\n}\n\n// The ordering for event entries is owned by the interface serializers on the backend.\n// Because replays are not an interface, we need to manually insert the replay section\n// into the array of entries. The long-term solution here is to move the ordering\n// logic to this component, similar to how GroupEventDetailsContent works.\nfunction partitionEntriesForReplay(entries: Entry[]) {\n  let replayIndex = 0;\n\n  for (const [i, entry] of entries.entries()) {\n    if (\n      [\n        // The following entry types should be placed before the replay\n        // This is similar to the ordering in GroupEventDetailsContent\n        EntryType.MESSAGE,\n        EntryType.STACKTRACE,\n        EntryType.EXCEPTION,\n        EntryType.THREADS,\n        EntryType.SPANS,\n      ].includes(entry.type)\n    ) {\n      replayIndex = i + 1;\n    }\n  }\n\n  return [entries.slice(0, replayIndex), entries.slice(replayIndex)];\n}\n\nfunction Entries({\n  definedEvent,\n  projectSlug,\n  isShare,\n  group,\n  organization,\n}: {\n  definedEvent: Event;\n  projectSlug: string;\n  isShare?: boolean;\n} & Pick<Props, 'group' | 'organization'>) {\n  if (!Array.isArray(definedEvent.entries)) {\n    return null;\n  }\n\n  const [beforeReplayEntries, afterReplayEntries] = partitionEntriesForReplay(\n    definedEvent.entries\n  );\n\n  const eventEntryProps = {\n    projectSlug,\n    group,\n    organization,\n    event: definedEvent,\n    isShare,\n  };\n\n  return (\n    <Fragment>\n      {beforeReplayEntries.map((entry, entryIdx) => (\n        <EventEntry key={entryIdx} entry={entry} {...eventEntryProps} />\n      ))}\n      {!isShare && <EventReplay {...eventEntryProps} />}\n      {afterReplayEntries.map((entry, entryIdx) => (\n        <EventEntry key={entryIdx} entry={entry} {...eventEntryProps} />\n      ))}\n    </Fragment>\n  );\n}\n\nconst LatestEventNotAvailable = styled('div')`\n  padding: ${space(2)} ${space(4)};\n`;\n\nconst BorderlessEventEntries = styled(EventEntries)`\n  & ${DataSection} {\n    margin-left: 0 !important;\n    margin-right: 0 !important;\n    padding: ${space(3)} 0 0 0;\n  }\n  & ${DataSection}:first-child {\n    padding-top: 0;\n    border-top: 0;\n  }\n`;\n\nexport {EventEntries, BorderlessEventEntries};\n","import styled from '@emotion/styled';\n\nimport ErrorLevel from 'sentry/components/events/errorLevel';\nimport {space} from 'sentry/styles/space';\nimport {Level} from 'sentry/types';\n\ntype Props = {\n  annotations?: React.ReactNode;\n  className?: string;\n  hasGuideAnchor?: boolean;\n  level?: Level;\n  levelIndicatorSize?: string;\n  message?: React.ReactNode;\n};\n\nconst EventMessage = styled(\n  ({className, level, levelIndicatorSize, message, annotations}: Props) => (\n    <div className={className}>\n      {level && (\n        <ErrorLevel size={levelIndicatorSize} level={level}>\n          {level}\n        </ErrorLevel>\n      )}\n\n      {message && <Message>{message}</Message>}\n\n      {annotations}\n    </div>\n  )\n)`\n  display: flex;\n  gap: ${space(1)};\n  align-items: center;\n  position: relative;\n  line-height: 1.2;\n  overflow: hidden;\n`;\n\nconst Message = styled('span')`\n  ${p => p.theme.overflowEllipsis}\n  width: auto;\n  max-height: 38px;\n`;\n\nexport default EventMessage;\n","import styled from '@emotion/styled';\n\nimport EventMessage from 'sentry/components/events/eventMessage';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport ShortId from 'sentry/components/shortId';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Group, IssueCategory} from 'sentry/types';\n\nimport UnhandledTag, {TagAndMessageWrapper} from '../issueDetails/unhandledTag';\n\ntype Props = {\n  group: Group;\n};\n\nfunction SharedGroupHeader({group}: Props) {\n  return (\n    <Wrapper>\n      <Details>\n        <TitleWrap>\n          <Title>{group.title}</Title>\n          <ShortIdWrapper>\n            <ShortId\n              shortId={group.shortId}\n              avatar={<ProjectBadge project={group.project} avatarSize={20} hideName />}\n            />\n            {group.issueCategory === IssueCategory.PERFORMANCE && (\n              <FeatureBadge\n                type=\"beta\"\n                title={t(\n                  'Not all features have been implemented for shared Performance Issues and these issues may be missing context.'\n                )}\n              />\n            )}\n          </ShortIdWrapper>\n        </TitleWrap>\n\n        <TagAndMessageWrapper>\n          {group.isUnhandled && <UnhandledTag />}\n          <EventMessage message={group.culprit} />\n        </TagAndMessageWrapper>\n      </Details>\n    </Wrapper>\n  );\n}\n\nexport default SharedGroupHeader;\n\nconst Wrapper = styled('div')`\n  padding: ${space(3)} ${space(4)} ${space(3)} ${space(4)};\n  border-bottom: 1px solid ${p => p.theme.border};\n  position: relative;\n`;\n\nconst Details = styled('div')`\n  max-width: 960px;\n  margin: 0 auto;\n`;\n\nconst ShortIdWrapper = styled('div')`\n  display: flex;\n`;\n\nconst TitleWrap = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  align-items: center;\n  margin-bottom: ${space(1)};\n`;\n\nconst Title = styled('h3')`\n  color: ${p => p.theme.headingColor};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  line-height: ${p => p.theme.text.lineHeightHeading};\n  margin-right: ${space(2)};\n  margin-bottom: 0;\n  ${p => p.theme.overflowEllipsis};\n\n  @media (min-width: ${props => props.theme.breakpoints.small}) {\n    font-size: ${p => p.theme.headerFontSize};\n  }\n`;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport NotFound from 'sentry/components/errors/notFound';\nimport {BorderlessEventEntries} from 'sentry/components/events/eventEntries';\nimport Footer from 'sentry/components/footer';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport SentryTypes from 'sentry/sentryTypes';\nimport {space} from 'sentry/styles/space';\nimport {Group} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\nimport {OrganizationContext} from '../organizationContext';\n\nimport SharedGroupHeader from './sharedGroupHeader';\n\ntype Props = RouteComponentProps<{shareId: string; orgId?: string}, {}> & {\n  api: Client;\n};\n\ntype State = {\n  error: boolean;\n  group: Group | null;\n  loading: boolean;\n};\n\nclass SharedGroupDetails extends Component<Props, State> {\n  static childContextTypes = {\n    group: SentryTypes.Group,\n  };\n\n  state: State = this.getInitialState();\n\n  getInitialState() {\n    return {\n      group: null,\n      loading: true,\n      error: false,\n    };\n  }\n\n  getChildContext() {\n    return {\n      group: this.state.group,\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    document.body.classList.add('shared-group');\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    document.body.classList.remove('shared-group');\n  }\n\n  orgSlug(): string | null {\n    const {params} = this.props;\n    if (params.orgId) {\n      return params.orgId;\n    }\n    const {customerDomain} = window.__initialData || {};\n    if (customerDomain?.subdomain) {\n      return customerDomain.subdomain;\n    }\n    return null;\n  }\n\n  async fetchData() {\n    const {params, api} = this.props;\n    const {shareId} = params;\n    const orgSlug = this.orgSlug();\n    try {\n      if (orgSlug) {\n        const group = await api.requestPromise(\n          `/organizations/${orgSlug}/shared/issues/${shareId}/`\n        );\n        this.setState({loading: false, group});\n      } else {\n        const group = await api.requestPromise(`/shared/issues/${shareId}/`);\n        this.setState({loading: false, group});\n      }\n    } catch {\n      this.setState({loading: false, error: true});\n    }\n  }\n\n  handleRetry = () => {\n    this.setState(this.getInitialState());\n    this.fetchData();\n  };\n\n  getTitle() {\n    const {group} = this.state;\n\n    return group?.title ?? 'Sentry';\n  }\n\n  render() {\n    const {group, loading, error} = this.state;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!group) {\n      return <NotFound />;\n    }\n\n    if (error) {\n      return <LoadingError onRetry={this.handleRetry} />;\n    }\n\n    const {location} = this.props;\n    const {permalink, latestEvent, project} = group;\n    const title = this.getTitle();\n    // project.organization is not a real organization, it's just the slug and name\n    // Add the features array to avoid errors when using OrganizationContext\n    const org = {...project.organization, features: []};\n\n    return (\n      <SentryDocumentTitle noSuffix title={title}>\n        <OrganizationContext.Provider value={org}>\n          <div className=\"app\">\n            <div className=\"pattern-bg\" />\n            <div className=\"container\">\n              <div className=\"box box-modal\">\n                <div className=\"box-header\">\n                  <Link className=\"logo\" to=\"/\">\n                    <span className=\"icon-sentry-logo-full\" />\n                  </Link>\n                  {permalink && (\n                    <Link className=\"details\" to={permalink}>\n                      {t('Details')}\n                    </Link>\n                  )}\n                </div>\n                <div className=\"box-content\">\n                  <SharedGroupHeader group={group} />\n                  <Container className=\"group-overview event-details-container\">\n                    <BorderlessEventEntries\n                      location={location}\n                      organization={org}\n                      group={group}\n                      event={latestEvent}\n                      project={project}\n                      isShare\n                    />\n                  </Container>\n                  <Footer />\n                </div>\n              </div>\n            </div>\n          </div>\n        </OrganizationContext.Provider>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nconst Container = styled('div')`\n  padding: ${space(4)};\n`;\n\nexport {SharedGroupDetails};\nexport default withApi(SharedGroupDetails);\n"],"names":["DEFAULT_SIZE","_styled","target","p","size","level","theme","error","EventEntries","_ref","organization","project","location","event","group","className","isShare","showTagSummary","orgSlug","slug","projectSlug","orgFeatures","features","_jsx","LatestEventNotAvailable","children","t","hasContext","objectIsEmpty","user","contexts","_jsxs","EventErrors","isNotSharedOrganization","EventCause","eventId","id","commitRow","CommitRow","userReport","EventDataSection","title","type","EventUserFeedback","report","orgId","issueId","EventTagsAndScreenshot","EventEvidence","Entries","definedEvent","EventContexts","EventExtraData","EventPackageData","EventDevice","EventViewHierarchy","EventAttachments","EventSdk","sdk","meta","_meta","groupID","EventGroupingInfo","showGroupingConfig","includes","EventRRWebIntegration","_ref2","Array","isArray","entries","beforeReplayEntries","afterReplayEntries","replayIndex","i","entry","EntryType","MESSAGE","STACKTRACE","EXCEPTION","THREADS","SPANS","slice","partitionEntriesForReplay","eventEntryProps","Fragment","map","entryIdx","EventEntry","EventReplay","displayName","space","BorderlessEventEntries","DataSection","EventMessage","levelIndicatorSize","message","annotations","ErrorLevel","Message","overflowEllipsis","SharedGroupHeader","Wrapper","Details","TitleWrap","Title","ShortIdWrapper","ShortId","shortId","avatar","ProjectBadge","avatarSize","hideName","issueCategory","IssueCategory","PERFORMANCE","FeatureBadge","TagAndMessageWrapper","isUnhandled","UnhandledTag","culprit","border","name","styles","headingColor","fontSizeExtraLarge","text","lineHeightHeading","props","breakpoints","small","headerFontSize","SharedGroupDetails","Component","constructor","arguments","_defineProperty","this","getInitialState","setState","fetchData","loading","getChildContext","state","UNSAFE_componentWillMount","document","body","classList","add","componentDidMount","componentWillUnmount","remove","params","customerDomain","window","__initialData","subdomain","async","api","shareId","requestPromise","getTitle","render","LoadingIndicator","NotFound","LoadingError","onRetry","handleRetry","permalink","latestEvent","org","SentryDocumentTitle","noSuffix","OrganizationContext","Provider","value","Link","to","Container","Footer","SentryTypes","Group","withApi"],"sourceRoot":""}