{"version":3,"file":"chunks/app_views_settings_projectSecurityHeaders_expectCt_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/components/previewFeature.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/projectSecurityHeaders/expectCt.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.tsx"],"sourcesContent":["import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import type {AlertProps} from 'sentry/components/alert';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  type?: AlertProps['type'];\n};\n\nfunction PreviewFeature({type = 'info'}: Props) {\n  return (\n    <Alert type={type} showIcon>\n      {t(\n        'This feature is a preview and may change in the future. Thanks for being an early adopter!'\n      )}\n    </Alert>\n  );\n}\n\nexport default PreviewFeature;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport PreviewFeature from 'sentry/components/previewFeature';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, ProjectKey} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ReportUri, {\n  getSecurityDsn,\n} from 'sentry/views/settings/projectSecurityHeaders/reportUri';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  keyList: null | ProjectKey[];\n} & DeprecatedAsyncView['state'];\n\nclass ProjectExpectCtReports extends DeprecatedAsyncView<Props, State> {\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n    return [['keyList', `/projects/${organization.slug}/${projectId}/keys/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Certificate Transparency (Expect-CT)'), projectId, false);\n  }\n\n  getInstructions(keyList: ProjectKey[]) {\n    return `Expect-CT: report-uri=\"${getSecurityDsn(keyList)}\"`;\n  }\n\n  renderBody() {\n    const {organization, params} = this.props;\n    const {keyList} = this.state;\n    if (!keyList) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Certificate Transparency')} />\n\n        <PreviewFeature />\n\n        <ReportUri\n          keyList={keyList}\n          orgId={organization.slug}\n          projectId={params.projectId}\n        />\n\n        <Panel>\n          <PanelHeader>{t('About')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                `[link:Certificate Transparency]\n      (CT) is a security standard which helps track and identify valid certificates, allowing identification of maliciously issued certificates`,\n                {\n                  link: (\n                    <ExternalLink href=\"https://en.wikipedia.org/wiki/Certificate_Transparency\" />\n                  ),\n                }\n              )}\n            </p>\n            <p>\n              {tct(\n                \"To configure reports in Sentry, you'll need to configure the [header] a header from your server:\",\n                {\n                  header: <code>Expect-CT</code>,\n                }\n              )}\n            </p>\n\n            <pre>{this.getInstructions(keyList)}</pre>\n\n            <p>\n              {tct('For more information, see [link:the article on MDN].', {\n                link: (\n                  <ExternalLink href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT\" />\n                ),\n              })}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(ProjectExpectCtReports);\n","import FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Link from 'sentry/components/links/link';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelAlert from 'sentry/components/panels/panelAlert';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {ProjectKey} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport function getSecurityDsn(keyList: ProjectKey[]) {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n}\n\ntype Props = {\n  keyList: ProjectKey[];\n  orgId: string;\n  projectId: string;\n};\n\nexport default function ReportUri({keyList, orgId, projectId}: Props) {\n  return (\n    <Panel>\n      <PanelHeader>{t('Report URI')}</PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\">\n          {tct(\n            \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n            {\n              link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n            }\n          )}\n        </PanelAlert>\n        <FieldGroup inline={false} flexibleControlStateSize>\n          <TextCopyInput>{getSecurityDsn(keyList)}</TextCopyInput>\n        </FieldGroup>\n      </PanelBody>\n    </Panel>\n  );\n}\n"],"names":["getPadding","_ref","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","PreviewFeature","type","_jsx","Alert","showIcon","children","t","displayName","routeName","orgSlug","projectSlug","arguments","length","undefined","tmplBase","tmpl","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","ProjectExpectCtReports","getEndpoints","organization","props","projectId","params","slug","routeTitleGen","getInstructions","keyList","getSecurityDsn","renderBody","state","_jsxs","SettingsPageHeader","ReportUri","orgId","Panel","PanelHeader","PanelBody","withPadding","tct","link","ExternalLink","href","header","withOrganization","DEFAULT_ENDPOINT","endpoint","dsn","security","getDynamicText","value","fixed","PanelAlert","Link","to","FieldGroup","inline","flexibleControlStateSize","TextCopyInput"],"sourceRoot":""}