{"version":3,"file":"chunks/app_gettingStartedDocs_javascript_angular_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboarding/gettingStartedDoc/utils.tsx","webpack:///./app/gettingStartedDocs/javascript/angular.tsx"],"sourcesContent":["import ExternalLink from 'sentry/components/links/externalLink';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\n\ntype Props = {\n  guideLink: string;\n  newOrg?: boolean;\n  organization?: Organization;\n  platformKey?: PlatformKey;\n  projectId?: string;\n};\n\nexport function getUploadSourceMapsStep({\n  guideLink,\n  organization,\n  platformKey,\n  projectId,\n  newOrg,\n}: Props) {\n  return {\n    title: t('Upload Source Maps'),\n    description: (\n      <p>\n        {tct(\n          'Automatically upload your source maps to enable readable stack traces for Errors. If you prefer to manually set up source maps, please follow [guideLink:this guide].',\n          {\n            guideLink: <ExternalLink href={guideLink} />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        code: `npx @sentry/wizard@latest -i sourcemaps`,\n        onCopy: () => {\n          if (!organization || !projectId || !platformKey) {\n            return;\n          }\n\n          trackAnalytics(\n            newOrg\n              ? 'onboarding.source_maps_wizard_button_copy_clicked'\n              : 'project_creation.source_maps_wizard_button_copy_clicked',\n            {\n              project_id: projectId,\n              platform: platformKey,\n              organization,\n            }\n          );\n        },\n        onSelectAndCopy: () => {\n          if (!organization || !projectId || !platformKey) {\n            return;\n          }\n\n          trackAnalytics(\n            newOrg\n              ? 'onboarding.source_maps_wizard_selected_and_copied'\n              : 'project_creation.source_maps_wizard_selected_and_copied',\n            {\n              project_id: projectId,\n              platform: platformKey,\n              organization,\n            }\n          );\n        },\n      },\n    ],\n  };\n}\n","import styled from '@emotion/styled';\n\nimport List from 'sentry/components/list/';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {getUploadSourceMapsStep} from 'sentry/components/onboarding/gettingStartedDoc/utils';\nimport {ProductSolution} from 'sentry/components/onboarding/productSelection';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport type {Organization} from 'sentry/types';\n\ntype StepProps = {\n  errorHandlerProviders: string;\n  newOrg: boolean;\n  organization: Organization;\n  platformKey: PlatformKey;\n  projectId: string;\n  sentryInitContent: string;\n};\n\n// Configuration Start\nconst replayIntegration = `\nnew Sentry.Replay(),\n`;\n\nconst replayOtherConfig = `\n// Session Replay\nreplaysSessionSampleRate: 0.1, // This sets the sample rate at 10%. You may want to change it to 100% while in development and then sample at a lower rate in production.\nreplaysOnErrorSampleRate: 1.0, // If you're not already sampling the entire session, change the sample rate to 100% when sampling sessions where errors occur.\n`;\n\nconst performanceIntegration = `\nnew Sentry.BrowserTracing({\n  // Set 'tracePropagationTargets' to control for which URLs distributed tracing should be enabled\n  tracePropagationTargets: [\"localhost\", \"https:yourserver.io/api/\"],\n  routingInstrumentation: Sentry.routingInstrumentation,\n}),\n`;\n\nconst performanceOtherConfig = `\n// Performance Monitoring\ntracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!\n`;\n\nconst performanceErrorHandler = `\n{\n  provide: Sentry.TraceService,\n  deps: [Router],\n},\n{\n  provide: APP_INITIALIZER,\n  useFactory: () => () => {},\n  deps: [Sentry.TraceService],\n  multi: true,\n},\n`;\n\nexport const steps = ({\n  sentryInitContent,\n  errorHandlerProviders,\n  ...props\n}: Partial<StepProps> = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <InstallDescription>\n        <p>\n          {tct(\n            \"To use Sentry with your Angular application, you'll need [sentryAngularIvyCode:@sentry/angular-ivy] or [sentryAngularCode:@sentry/angular], Sentryâ€™s Browser Angular SDKs:\",\n            {\n              sentryAngularIvyCode: <code />,\n              sentryAngularCode: <code />,\n            }\n          )}\n        </p>\n        <List symbol=\"bullet\">\n          <ListItem>\n            {tct(\"If you're using Angular 12 or newer, use [code:@sentry/angular-ivy]\", {\n              code: <code />,\n            })}\n          </ListItem>\n          <ListItem>\n            {tct(\"If you're using Angular 10 or 11, use [code:@sentry/angular]\", {\n              code: <code />,\n            })}\n          </ListItem>\n        </List>\n        <p>\n          {tct('Add the Sentry SDK as a dependency using [code:yarn] or [code:npm]:', {\n            code: <code />,\n          })}\n        </p>\n      </InstallDescription>\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        code: `\n# Using yarn (Angular 12+)\nyarn add @sentry/angular-ivy\n# Using yarn (Angular 10 and 11)\nyarn add @sentry/angular\n\n# Using npm (Angular 12+)\nnpm install --save @sentry/angular-ivy\n# Using npm (Angular 10 and 11)\nnpm install --save @sentry/angular\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: t(\n      'You should init the Sentry browser SDK in your main.ts file as soon as possible during application load up, before initializing Angular:'\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        import { enableProdMode } from \"@angular/core\";\n        import { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n        // import * as Sentry from \"@sentry/angular\" // for Angular 10/11 instead\n        import * as Sentry from \"@sentry/angular-ivy\";\n\n        import { AppModule } from \"./app/app.module\";\n\n        Sentry.init({\n          ${sentryInitContent}\n        });\n\n        enableProdMode();\n        platformBrowserDynamic()\n          .bootstrapModule(AppModule)\n          .then((success) => console.log('Bootstrap success'))\n          .catch((err) => console.error(err));\n        `,\n      },\n      {\n        description: t(\n          \"The Sentry Angular SDK exports a function to instantiate ErrorHandler provider that will automatically send JavaScript errors captured by the Angular's error handler.\"\n        ),\n        language: 'javascript',\n        code: `\n        import { APP_INITIALIZER, ErrorHandler, NgModule } from \"@angular/core\";\n        import { Router } from \"@angular/router\";\n        // import * as Sentry from \"@sentry/angular\" // for Angular 10/11 instead\n        import * as Sentry from \"@sentry/angular-ivy\";\n\n        @NgModule({\n          // ...\n          providers: [\n            {\n              provide: ErrorHandler,\n              useValue: Sentry.createErrorHandler({\n                showDialog: true,\n              }),\n            },${errorHandlerProviders}\n          ],\n          // ...\n        })\n        export class AppModule {}\n        `,\n      },\n    ],\n  },\n  getUploadSourceMapsStep({\n    guideLink: 'https://docs.sentry.io/platforms/javascript/guides/angular/sourcemaps/',\n    ...props,\n  }),\n  {\n    type: StepType.VERIFY,\n    description: t(\n      \"This snippet contains an intentional error and can be used as a test to make sure that everything's working as expected.\"\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `myUndefinedFunction();`,\n      },\n    ],\n  },\n];\n\nexport const nextSteps = [\n  {\n    id: 'angular-features',\n    name: t('Angular Features'),\n    description: t('Learn about our first class integration with the Angular framework.'),\n    link: 'https://docs.sentry.io/platforms/javascript/guides/angular/features/',\n  },\n  {\n    id: 'performance-monitoring',\n    name: t('Performance Monitoring'),\n    description: t(\n      'Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n    ),\n    link: 'https://docs.sentry.io/platforms/javascript/guides/angular/performance/',\n  },\n  {\n    id: 'session-replay',\n    name: t('Session Replay'),\n    description: t(\n      'Get to the root cause of an error or latency issue faster by seeing all the technical details related to that issue in one visual replay on your web application.'\n    ),\n    link: 'https://docs.sentry.io/platforms/javascript/guides/angular/session-replay/',\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithAngular({\n  dsn,\n  activeProductSelection = [],\n  organization,\n  newOrg,\n  platformKey,\n  projectId,\n}: ModuleProps) {\n  const integrations: string[] = [];\n  const otherConfigs: string[] = [];\n\n  let nextStepDocs = [...nextSteps];\n  const errorHandlerProviders: string[] = [];\n\n  if (activeProductSelection.includes(ProductSolution.PERFORMANCE_MONITORING)) {\n    integrations.push(performanceIntegration.trim());\n    otherConfigs.push(performanceOtherConfig.trim());\n    errorHandlerProviders.push(performanceErrorHandler.trim());\n    nextStepDocs = nextStepDocs.filter(\n      step => step.id !== ProductSolution.PERFORMANCE_MONITORING\n    );\n  }\n\n  if (activeProductSelection.includes(ProductSolution.SESSION_REPLAY)) {\n    integrations.push(replayIntegration.trim());\n    otherConfigs.push(replayOtherConfig.trim());\n    nextStepDocs = nextStepDocs.filter(\n      step => step.id !== ProductSolution.SESSION_REPLAY\n    );\n  }\n\n  let sentryInitContent: string[] = [`dsn: \"${dsn}\",`];\n\n  if (integrations.length > 0) {\n    sentryInitContent = sentryInitContent.concat('integrations: [', integrations, '],');\n  }\n\n  if (otherConfigs.length > 0) {\n    sentryInitContent = sentryInitContent.concat(otherConfigs);\n  }\n\n  return (\n    <Layout\n      steps={steps({\n        sentryInitContent: sentryInitContent.join('\\n'),\n        errorHandlerProviders: errorHandlerProviders.join('\\n'),\n        organization,\n        newOrg,\n        platformKey,\n        projectId,\n      })}\n      nextSteps={nextStepDocs}\n      newOrg={newOrg}\n      platformKey={platformKey}\n    />\n  );\n}\n\nexport default GettingStartedWithAngular;\n\nconst InstallDescription = styled('div')`\n  display: flex;\n  flex-direction: column;\n  gap: ${space(1)};\n`;\n"],"names":["getUploadSourceMapsStep","_ref","guideLink","organization","platformKey","projectId","newOrg","title","t","description","_jsx","children","tct","ExternalLink","href","configurations","language","code","onCopy","trackAnalytics","project_id","platform","onSelectAndCopy","replayIntegration","replayOtherConfig","performanceIntegration","performanceOtherConfig","performanceErrorHandler","steps","sentryInitContent","errorHandlerProviders","props","arguments","length","undefined","type","StepType","INSTALL","_jsxs","InstallDescription","sentryAngularIvyCode","sentryAngularCode","List","symbol","ListItem","CONFIGURE","VERIFY","nextSteps","id","name","link","GettingStartedWithAngular","dsn","activeProductSelection","integrations","otherConfigs","nextStepDocs","includes","ProductSolution","PERFORMANCE_MONITORING","push","trim","filter","step","SESSION_REPLAY","concat","Layout","join","displayName","_styled","target","space"],"sourceRoot":""}