{"version":3,"file":"chunks/app_gettingStartedDocs_php_symfony_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/gettingStartedDocs/php/symfony.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nconst introduction = tct(\n  'Symfony is supported via the [code:sentry-symfony] package as a native bundle.',\n  {code: <code />}\n);\n\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    configurations: [\n      {\n        language: 'bash',\n        description: (\n          <p>\n            {tct('Install the [code:sentry/sentry-symfony] bundle:', {code: <code />})}\n          </p>\n        ),\n        code: 'composer require sentry/sentry-symfony',\n      },\n      {\n        language: 'yaml',\n        description: (\n          <p>\n            {tct(\n              'Due to a bug in all versions below \"6.0\" of the [sensioFrameworkExtraBundleCode:SensioFrameworkExtraBundle] bundle, you will likely receive an error during the execution of the command above related to the missing [nyholmPsr7FactoryPsr17FactoryCode:NyholmPsr7FactoryPsr17Factory] class. To workaround the issue, if you are not using the PSR-7 bridge, please change the configuration of that bundle as follows:',\n              {\n                sensioFrameworkExtraBundleCode: <code />,\n                nyholmPsr7FactoryPsr17FactoryCode: <code />,\n              }\n            )}\n          </p>\n        ),\n        code: `\nsensio_framework_extra:\n  psr_message:\n  enabled: false\n        `,\n        additionalInfo: (\n          <p>\n            {tct(\n              'For more details about the issue see [link:https://github.com/sensiolabs/SensioFrameworkExtraBundle/pull/710].',\n              {\n                link: (\n                  <ExternalLink href=\"https://github.com/sensiolabs/SensioFrameworkExtraBundle/pull/710\" />\n                ),\n              }\n            )}\n          </p>\n        ),\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    configurations: [\n      {\n        description: (\n          <p>\n            {tct('Add your DSN to [code:config/packages/sentry.yaml]:', {code: <code />})}\n          </p>\n        ),\n        language: 'php',\n        code: `\nsentry:\n  dsn: \"%env(${dsn})%\"\n        `,\n      },\n      {\n        description: <p>{tct('And in your [code:.env] file:', {code: <code />})}</p>,\n        language: 'plain',\n        code: `\n###> sentry/sentry-symfony ###\nSENTRY_DSN=\"${dsn}\"\n###< sentry/sentry-symfony ###\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: (\n      <p>\n        {tct(\n          'To test that both logger error and exception are correctly sent to [sentryLink:sentry.io], you can create the following controller:',\n          {\n            sentryLink: <ExternalLink href=\"https://sentry.io\" />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'php',\n        code: `\n<?php\n\nnamespace App\\\\Controller;\n\nuse Psr\\\\Log\\\\LoggerInterface;\nuse Symfony\\\\Bundle\\\\FrameworkBundle\\\\Controller\\\\AbstractController;\nuse Symfony\\\\Component\\\\Routing\\\\Annotation\\\\Route;\n\nclass SentryTestController extends AbstractController {\n  /**\n   * @var LoggerInterface\n   */\n  private $logger;\n\n  public function __construct(LoggerInterface $logger)\n  {\n    $this->logger = $logger;\n  }\n\n  /**\n   * @Route(name=\"sentry_test\", path=\"/_sentry-test\")\n   */\n  public function testLog()\n  {\n    // the following code will test if monolog integration logs to sentry\n    $this->logger->error('My custom logged error.');\n\n    // the following code will test if an uncaught exception logs to sentry\n    throw new \\\\RuntimeException('Example exception.');\n  }\n}\n        `,\n      },\n    ],\n    additionalInfo: (\n      <p>\n        {tct(\n          \"After you visit the [code:/_sentry-test page], you can view and resolve the recorded error by logging into [sentryLink:sentry.io] and opening your project. Clicking on the error's title will open a page where you can see detailed information and mark it as resolved.\",\n          {sentryLink: <ExternalLink href=\"https://sentry.io\" />, code: <code />}\n        )}\n      </p>\n    ),\n  },\n  {\n    title: t('Performance monitoring'),\n    description: (\n      <Fragment>\n        {t('Performance monitoring integrations to support tracing')}\n        <p>\n          {t(\n            'The process of logging the events that took place during a request, often across multiple services are enabled by default. To use them, update to the latest version of the SDK.'\n          )}\n        </p>\n        <p>\n          {tct(\n            'These integrations hook into critical paths of the framework and of the vendors. As a result, there may be a performance penalty. To disable tracing, please see the [integrationDocumentationLink:Integrations documentation].',\n            {\n              integrationDocumentationLink: (\n                <ExternalLink href=\"https://docs.sentry.io/platforms/php/guides/symfony/performance/instrumentation/automatic-instrumentation/\" />\n              ),\n            }\n          )}\n        </p>\n      </Fragment>\n    ),\n    configurations: [\n      {\n        description: (\n          <p>\n            {tct(\n              \"If you [strong:are not] using Symfony Flex, you'll also need to enable the bundle in [code:config/bundles.php]:\",\n              {\n                code: <code />,\n                strong: <strong />,\n              }\n            )}\n          </p>\n        ),\n        language: 'php',\n        code: `\n<?php\n\n  return [\n    // ...\n    Sentry\\\\SentryBundle\\\\SentryBundle::class => ['all' => true],\n  ];\n        `,\n      },\n    ],\n  },\n  {\n    title: t('Monolog Integration'),\n    configurations: [\n      {\n        description: (\n          <p>\n            {tct(\n              'If you are using [monologLink:Monolog] to report events instead of the typical error listener approach, you need this additional configuration to log the errors correctly:',\n              {\n                monologLink: <ExternalLink href=\"https://github.com/Seldaek/monolog\" />,\n              }\n            )}\n          </p>\n        ),\n        language: 'yaml',\n        code: `\nsentry:\n  register_error_listener: false # Disables the ErrorListener to avoid duplicated log in sentry\n  register_error_handler: false # Disables the ErrorListener, ExceptionListener and FatalErrorListener integrations of the base PHP SDK\n\nmonolog:\n  handlers:\n    sentry:\n      type: sentry\n      level: !php/const Monolog\\\\Logger::ERROR\n      hub_id: Sentry\\\\State\\\\HubInterface\n        `,\n      },\n      {\n        description: (\n          <p>\n            {tct(\n              'f you are using a version of [monologBundleLink:MonologBundle] prior to [code:3.7], you need to configure the handler as a service instead:',\n              {\n                monologBundleLink: (\n                  <ExternalLink href=\"https://github.com/symfony/monolog-bundle\" />\n                ),\n                code: <code />,\n              }\n            )}\n          </p>\n        ),\n        language: 'yaml',\n        code: `\nmonolog:\n  handlers:\n    sentry:\n      type: service\n      id: Sentry\\\\Monolog\\\\Handler\n\nservices:\n  Sentry\\\\Monolog\\\\Handler:\n    arguments:\n      $hub: '@Sentry\\\\State\\\\HubInterface'\n      $level: !php/const Monolog\\\\Logger::ERROR\n        `,\n      },\n      {\n        description: (\n          <p>\n            {tct(\n              'Additionally, you can register the [code:PsrLogMessageProcessor] to resolve PSR-3 placeholders in reported messages:',\n              {\n                code: <code />,\n              }\n            )}\n          </p>\n        ),\n        language: 'yaml',\n        code: `\nservices:\n  Monolog\\\\Processor\\\\PsrLogMessageProcessor:\n    tags: { name: monolog.processor, handler: sentry }\n        `,\n      },\n    ],\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithSymfony({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} introduction={introduction} {...props} />;\n}\n\nexport default GettingStartedWithSymfony;\n"],"names":["introduction","tct","code","_jsx","steps","dsn","arguments","length","undefined","type","StepType","INSTALL","configurations","language","description","children","sensioFrameworkExtraBundleCode","nyholmPsr7FactoryPsr17FactoryCode","additionalInfo","link","ExternalLink","href","CONFIGURE","VERIFY","sentryLink","title","t","_jsxs","Fragment","integrationDocumentationLink","strong","monologLink","monologBundleLink","GettingStartedWithSymfony","_ref","props","Layout","displayName"],"sourceRoot":""}