{"version":3,"file":"chunks/app_gettingStartedDocs_dotnet_awslambda_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"2kBASA,MAAMA,GACJC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,kHACA,CACEC,MAAMH,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,yDAKpBC,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aAAaC,EAAAA,EAAAA,GAAE,8BACfC,eAAgB,CACd,CACEC,SAAU,aACVC,KAAM,qDAER,CACED,SAAU,QACVC,KAAM,mDAGVC,gBACEnB,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,wOACA,CAACkB,QAAQpB,EAAAA,EAAAA,IAAA,kBAKjB,CACEW,KAAMC,EAAAA,GAASS,UACfP,aACEQ,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAtB,SAAA,EACPD,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,0GACA,CACEgB,MAAMlB,EAAAA,EAAAA,IAAA,gBAIZA,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,mRACA,CACEgB,MAAMlB,EAAAA,EAAAA,IAAA,kBAMhBgB,eAAgB,CACd,CACEC,SAAU,SACVC,KAAO,iRASUX,qgBAgBvB,CACEI,KAAMC,EAAAA,GAASY,OACfV,aAAaC,EAAAA,EAAAA,GAAE,uEACfC,eAAgB,CACd,CACEC,SAAU,SACVC,KAAO,gIAST,CACED,SAAU,QACVH,aAAaC,EAAAA,EAAAA,GAAE,sCACfG,KAAM,qDAGVC,gBACEnB,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,0FACA,CACEC,MACEH,EAAAA,EAAAA,IAACI,EAAAA,EAAY,CAACC,KAAK,oEAOhC,EAGM,SAASoB,EAAuBC,GAA+B,IAA9B,IAACnB,KAAQoB,GAAmBD,EAClE,OAAO1B,EAAAA,EAAAA,IAAC4B,EAAAA,EAAM,CAACtB,MAAOA,EAAM,CAACC,QAAOR,aAAcA,KAAkB4B,GACtE,CAFgBF,EAAuBI,YAAA,0BAIvC,S","sources":["webpack:///./app/gettingStartedDocs/dotnet/awslambda.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nconst introduction = (\n  <p>\n    {tct(\n      'Sentry provides an integration with AWS Lambda ASP.NET Core Server through the Sentry.AspNetCore NuGet package.',\n      {\n        link: <ExternalLink href=\"https://www.nuget.org/packages/Sentry.AspNetCore\" />,\n      }\n    )}\n  </p>\n);\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: t('Add the Sentry dependency:'),\n    configurations: [\n      {\n        language: 'powershell',\n        code: 'Install-Package Sentry.AspNetCore -Version 3.34.0',\n      },\n      {\n        language: 'shell',\n        code: 'dotnet add package Sentry.AspNetCore -v 3.34.0',\n      },\n    ],\n    additionalInfo: (\n      <p>\n        {tct(\n          'You can combine this integration with a logging library like [strong:log4net, NLog, or Serilog] to include both request data as well as your logs as breadcrumbs. The logging ingrations also capture events when an error is logged.',\n          {strong: <strong />}\n        )}\n      </p>\n    ),\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <Fragment>\n        <p>\n          {tct(\n            'All [code:ASP.NET Core] configurations are valid here. But one configuration in particular is relevant.',\n            {\n              code: <code />,\n            }\n          )}\n        </p>\n        <p>\n          {tct(\n            '[code:FlushOnCompletedRequest] ensures all events are flushed out. This is because the general ASP.NET Core hooks for when the process is exiting are not guaranteed to run in a serverless environment. This setting ensures that no event is lost if AWS recycles the process.',\n            {\n              code: <code />,\n            }\n          )}\n        </p>\n      </Fragment>\n    ),\n    configurations: [\n      {\n        language: 'csharp',\n        code: `\npublic class LambdaEntryPoint : Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction\n{\n    protected override void Init(IWebHostBuilder builder)\n    {\n        builder\n            // Add Sentry\n            .UseSentry(o =>\n            {\n              o.Dsn = \"${dsn}\";\n              // When configuring for the first time, to see what the SDK is doing:\n              o.Debug = true;\n              // Required in Serverless environments\n              o.FlushOnCompletedRequest = true;\n              // Set TracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n                // We recommend adjusting this value in production.\n              o.TracesSampleRate = 1.0;\n            })\n            .UseStartup<Startup>();\n    }\n}\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t('You can verify your setup by throwing an exception from a function:'),\n    configurations: [\n      {\n        language: 'csharp',\n        code: `\n[Route(\"api/[controller]\")]\npublic class BadController\n{\n  [HttpGet]\n  public string Get() => throw null;\n}\n        `,\n      },\n      {\n        language: 'shell',\n        description: t('And make a request to that lambda:'),\n        code: 'curl -X GET -I https://url.of.server.aws/api/bad',\n      },\n    ],\n    additionalInfo: (\n      <p>\n        {tct(\n          'Check out the [link:Sentry ASP.NET Core] documentation for the complete set of options.',\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/dotnet/guides/aspnetcore/\" />\n            ),\n          }\n        )}\n      </p>\n    ),\n  },\n];\n// Configuration End\n\nexport function GettingStartedAwsLambda({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} introduction={introduction} {...props} />;\n}\n\nexport default GettingStartedAwsLambda;\n"],"names":["introduction","_jsx","children","tct","link","ExternalLink","href","steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","t","configurations","language","code","additionalInfo","strong","CONFIGURE","_jsxs","Fragment","VERIFY","GettingStartedAwsLambda","_ref","props","Layout","displayName"],"sourceRoot":""}