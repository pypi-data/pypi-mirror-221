{"version":3,"file":"chunks/app_views_settings_projectPlugins_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/projectPlugins/details.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends Component<Omit<P, 'plugins'> & WithPluginProps, State> {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {disablePlugin, enablePlugin} from 'sentry/actionCreators/plugins';\nimport {Button} from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PluginConfig from 'sentry/components/pluginConfig';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype Props = {\n  organization: Organization;\n  plugins: {\n    plugins: Plugin[];\n  };\n  project: Project;\n} & RouteComponentProps<{pluginId: string; projectId: string}, {}>;\n\ntype State = {\n  pluginDetails?: Plugin;\n} & DeprecatedAsyncView['state'];\n\n/**\n * There are currently two sources of truths for plugin details:\n *\n * 1) PluginsStore has a list of plugins, and this is where ENABLED state lives\n * 2) We fetch \"plugin details\" via API and save it to local state as `pluginDetails`.\n *    This is because \"details\" call contains form `config` and the \"list\" endpoint does not.\n *    The more correct way would be to pass `config` to PluginConfig and use plugin from\n *    PluginsStore\n */\nclass ProjectPluginDetails extends DeprecatedAsyncView<Props, State> {\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    super.componentDidUpdate(prevProps, prevState);\n    if (prevProps.params.pluginId !== this.props.params.pluginId) {\n      this.recordDetailsViewed();\n    }\n  }\n  componentDidMount() {\n    super.componentDidMount();\n    this.recordDetailsViewed();\n  }\n\n  recordDetailsViewed() {\n    const {pluginId} = this.props.params;\n\n    trackIntegrationAnalytics('integrations.details_viewed', {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n  }\n\n  getTitle() {\n    const {plugin} = this.state;\n    if (plugin && plugin.name) {\n      return plugin.name;\n    }\n    return 'Sentry';\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId, pluginId} = this.props.params;\n    return [\n      [\n        'pluginDetails',\n        `/projects/${organization.slug}/${projectId}/plugins/${pluginId}/`,\n      ],\n    ];\n  }\n\n  trimSchema(value) {\n    return value.split('//')[1];\n  }\n\n  handleReset = () => {\n    const {organization} = this.props;\n    const {projectId, pluginId} = this.props.params;\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n    trackIntegrationAnalytics('integrations.uninstall_clicked', {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n\n    this.api.request(`/projects/${organization.slug}/${projectId}/plugins/${pluginId}/`, {\n      method: 'POST',\n      data: {reset: true},\n      success: pluginDetails => {\n        this.setState({pluginDetails});\n        addSuccessMessage(t('Plugin was reset'));\n        trackIntegrationAnalytics('integrations.uninstall_completed', {\n          integration: pluginId,\n          integration_type: 'plugin',\n          view: 'plugin_details',\n          organization: this.props.organization,\n        });\n      },\n      error: () => {\n        addErrorMessage(t('An error occurred'));\n      },\n    });\n  };\n\n  handleEnable = () => {\n    const {organization, params} = this.props;\n    enablePlugin({...params, orgId: organization.slug});\n    this.analyticsChangeEnableStatus(true);\n  };\n\n  handleDisable = () => {\n    const {organization, params} = this.props;\n    disablePlugin({...params, orgId: organization.slug});\n    this.analyticsChangeEnableStatus(false);\n  };\n\n  analyticsChangeEnableStatus = (enabled: boolean) => {\n    const {pluginId} = this.props.params;\n    const eventKey = enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationAnalytics(eventKey, {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n  };\n\n  // Enabled state is handled via PluginsStore and not via plugins detail\n  getEnabled() {\n    const {pluginDetails} = this.state;\n    const {plugins} = this.props;\n\n    const plugin =\n      plugins &&\n      plugins.plugins &&\n      plugins.plugins.find(({slug}) => slug === this.props.params.pluginId);\n\n    return plugin ? plugin.enabled : pluginDetails && pluginDetails.enabled;\n  }\n\n  renderActions() {\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n    const enabled = this.getEnabled();\n\n    const enable = (\n      <StyledButton size=\"sm\" onClick={this.handleEnable}>\n        {t('Enable Plugin')}\n      </StyledButton>\n    );\n\n    const disable = (\n      <StyledButton size=\"sm\" priority=\"danger\" onClick={this.handleDisable}>\n        {t('Disable Plugin')}\n      </StyledButton>\n    );\n\n    const toggleEnable = enabled ? disable : enable;\n\n    return (\n      <div className=\"pull-right\">\n        {pluginDetails.canDisable && toggleEnable}\n        <Button size=\"sm\" onClick={this.handleReset}>\n          {t('Reset Configuration')}\n        </Button>\n      </div>\n    );\n  }\n\n  renderBody() {\n    const {organization, project} = this.props;\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={pluginDetails.name} action={this.renderActions()} />\n        <div className=\"row\">\n          <div className=\"col-md-7\">\n            <PluginConfig\n              organization={organization}\n              project={project}\n              data={pluginDetails}\n              enabled={this.getEnabled()}\n              onDisablePlugin={this.handleDisable}\n            />\n          </div>\n          <div className=\"col-md-4 col-md-offset-1\">\n            <div className=\"pluginDetails-meta\">\n              <h4>{t('Plugin Information')}</h4>\n\n              <dl className=\"flat\">\n                <dt>{t('Name')}</dt>\n                <dd>{pluginDetails.name}</dd>\n                <dt>{t('Author')}</dt>\n                <dd>{pluginDetails.author?.name}</dd>\n                {pluginDetails.author?.url && (\n                  <div>\n                    <dt>{t('URL')}</dt>\n                    <dd>\n                      <ExternalLink href={pluginDetails.author.url}>\n                        {this.trimSchema(pluginDetails.author.url)}\n                      </ExternalLink>\n                    </dd>\n                  </div>\n                )}\n                <dt>{t('Version')}</dt>\n                <dd>\n                  {getDynamicText({\n                    value: pluginDetails.version,\n                    fixed: '1.0.0',\n                  })}\n                </dd>\n              </dl>\n\n              {pluginDetails.description && (\n                <div>\n                  <h4>{t('Description')}</h4>\n                  <p className=\"description\">{pluginDetails.description}</p>\n                </div>\n              )}\n\n              {pluginDetails.resourceLinks && (\n                <div>\n                  <h4>{t('Resources')}</h4>\n                  <dl className=\"flat\">\n                    {pluginDetails.resourceLinks.map(({title, url}) => (\n                      <dd key={url}>\n                        <ExternalLink href={url}>{title}</ExternalLink>\n                      </dd>\n                    ))}\n                  </dl>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {ProjectPluginDetails};\n\nexport default withPlugins(ProjectPluginDetails);\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(0.75)};\n`;\n"],"names":["WrappedComponent","WithPlugins","Component","constructor","arguments","_defineProperty","plugins","loading","PluginsStore","listen","_ref","this","setState","undefined","componentDidMount","fetchPlugins","componentDidUpdate","prevProps","_prevState","prevContext","organization","project","props","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","componentWillUnmount","unsubscribe","projectId","orgId","render","_jsx","state","displayName","getDisplayName","withOrganization","withProject","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","SentryDocumentTitle","title","children","renderComponent","ProjectPluginDetails","pluginId","params","addLoadingMessage","t","trackIntegrationAnalytics","integration","integration_type","view","api","request","method","data","reset","success","pluginDetails","addSuccessMessage","error","addErrorMessage","enablePlugin","analyticsChangeEnableStatus","disablePlugin","enabled","eventKey","prevState","super","recordDetailsViewed","plugin","name","getEndpoints","trimSchema","value","split","getEnabled","find","renderActions","enable","StyledButton","size","onClick","handleEnable","disable","priority","handleDisable","toggleEnable","_jsxs","className","canDisable","Button","handleReset","renderBody","SettingsPageHeader","action","PluginConfig","onDisablePlugin","author","url","ExternalLink","href","getDynamicText","version","fixed","description","resourceLinks","map","_ref2","withPlugins","_styled","target","space"],"sourceRoot":""}