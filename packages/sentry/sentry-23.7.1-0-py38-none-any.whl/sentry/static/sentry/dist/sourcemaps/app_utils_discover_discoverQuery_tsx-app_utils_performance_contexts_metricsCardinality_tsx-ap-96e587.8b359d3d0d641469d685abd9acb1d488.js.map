{"version":3,"file":"chunks/app_utils_discover_discoverQuery_tsx-app_utils_performance_contexts_metricsCardinality_tsx-ap-96e587.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuery.tsx","webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums.tsx","webpack:///./app/utils/performance/contexts/metricsCardinality.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdModal.tsx"],"sourcesContent":["import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n  useGenericDiscoverQuery,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\nexport type DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\nexport type DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route=\"events\"\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport function useDiscoverQuery(props: Omit<DiscoverQueryComponentProps, 'children'>) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n\n  const res = useGenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>({\n    route: 'events',\n    shouldRefetchData,\n    afterFetch,\n    ...props,\n  });\n\n  const pageLinks = res.response?.getResponseHeader('Link') ?? undefined;\n\n  return {...res, pageLinks};\n}\n\nexport default DiscoverQuery;\n","import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nexport interface MetricsCompatibilityData {\n  compatible_projects?: number[];\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilityData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilityQuery({children, ...props}: QueryProps) {\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilityData, {}>\n      route=\"metrics-compatibility-sums\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nexport interface MetricsCompatibilitySumData {\n  sum: {\n    metrics?: number;\n    metrics_null?: number;\n    metrics_unparam?: number;\n  };\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilitySumData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilitySumsQuery({children, ...props}: QueryProps) {\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilitySumData, {}>\n      route=\"metrics-compatibility\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import {ComponentProps, Fragment, ReactNode, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport {parsePeriodToHours} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {canUseMetricsData} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport MetricsCompatibilityQuery, {\n  MetricsCompatibilityData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuery';\nimport MetricsCompatibilitySumsQuery, {\n  MetricsCompatibilitySumData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums';\n\nimport {createDefinedContext} from './utils';\n\nconst UNPARAM_THRESHOLD = 0.01;\nconst NULL_THRESHOLD = 0.01;\n\nexport interface MetricDataSwitcherOutcome {\n  forceTransactionsOnly: boolean;\n  compatibleProjects?: number[];\n  shouldNotifyUnnamedTransactions?: boolean;\n  shouldWarnIncompatibleSDK?: boolean;\n}\nexport interface MetricsCardinalityContext {\n  isLoading: boolean;\n  outcome?: MetricDataSwitcherOutcome;\n}\n\ntype MergedMetricsData = MetricsCompatibilityData & MetricsCompatibilitySumData;\n\nconst [_Provider, _useContext, _Context] =\n  createDefinedContext<MetricsCardinalityContext>({\n    name: 'MetricsCardinalityContext',\n    strict: false,\n  });\n\n/**\n * This provider determines whether the metrics data is storing performance information correctly before we\n * make dozens of requests on pages such as performance landing and dashboards.\n */\nexport function MetricsCardinalityProvider(props: {\n  children: ReactNode;\n  location: Location;\n  organization: Organization;\n  sendOutcomeAnalytics?: boolean;\n}) {\n  const isUsingMetrics = canUseMetricsData(props.organization);\n\n  if (!isUsingMetrics) {\n    return (\n      <_Provider\n        value={{\n          isLoading: false,\n          outcome: {\n            forceTransactionsOnly: true,\n          },\n        }}\n      >\n        {props.children}\n      </_Provider>\n    );\n  }\n\n  const baseDiscoverProps = {\n    location: props.location,\n    orgSlug: props.organization.slug,\n    cursor: '0:0:0',\n  };\n  const eventView = EventView.fromLocation(props.location);\n  eventView.fields = [{field: 'tpm()'}];\n  const _eventView = adjustEventViewTime(eventView);\n\n  return (\n    <Fragment>\n      <MetricsCompatibilityQuery eventView={_eventView} {...baseDiscoverProps}>\n        {compatabilityResult => (\n          <MetricsCompatibilitySumsQuery eventView={_eventView} {...baseDiscoverProps}>\n            {sumsResult => {\n              const isLoading = compatabilityResult.isLoading || sumsResult.isLoading;\n              const outcome =\n                compatabilityResult.isLoading || sumsResult.isLoading\n                  ? undefined\n                  : getMetricsOutcome(\n                      compatabilityResult.tableData && sumsResult.tableData\n                        ? {\n                            ...compatabilityResult.tableData,\n                            ...sumsResult.tableData,\n                          }\n                        : null,\n                      !!compatabilityResult.error && !!sumsResult.error,\n                      props.organization\n                    );\n\n              return (\n                <Provider\n                  sendOutcomeAnalytics={props.sendOutcomeAnalytics}\n                  organization={props.organization}\n                  value={{\n                    isLoading,\n                    outcome,\n                  }}\n                >\n                  {props.children}\n                </Provider>\n              );\n            }}\n          </MetricsCompatibilitySumsQuery>\n        )}\n      </MetricsCompatibilityQuery>\n    </Fragment>\n  );\n}\n\nfunction Provider(\n  props: ComponentProps<typeof _Provider> & {\n    organization: Organization;\n    sendOutcomeAnalytics?: boolean;\n  }\n) {\n  const fallbackFromNull = props.value.outcome?.shouldWarnIncompatibleSDK ?? false;\n  const fallbackFromUnparam =\n    props.value.outcome?.shouldNotifyUnnamedTransactions ?? false;\n  const isOnMetrics = !props.value.outcome?.forceTransactionsOnly;\n  useEffect(() => {\n    if (!props.value.isLoading && props.sendOutcomeAnalytics) {\n      trackAnalytics('performance_views.mep.metrics_outcome', {\n        organization: props.organization,\n        is_on_metrics: isOnMetrics,\n        fallback_from_null: fallbackFromNull,\n        fallback_from_unparam: fallbackFromUnparam,\n      });\n    }\n  }, [\n    props.organization,\n    props.value.isLoading,\n    isOnMetrics,\n    fallbackFromUnparam,\n    fallbackFromNull,\n    props.sendOutcomeAnalytics,\n  ]);\n  return <_Provider {...props}>{props.children}</_Provider>;\n}\n\nexport const MetricsCardinalityConsumer = _Context.Consumer;\n\nexport const useMetricsCardinalityContext = _useContext;\n\n/**\n * Logic for picking sides of metrics vs. transactions along with the associated warnings.\n */\nfunction getMetricsOutcome(\n  dataCounts: MergedMetricsData | null,\n  hasOtherFallbackCondition: boolean,\n  organization: Organization\n) {\n  const fallbackOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: true,\n  };\n  const successOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: false,\n  };\n  const isOnFallbackThresolds = organization.features.includes(\n    'performance-mep-bannerless-ui'\n  );\n\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n  const compatibleProjects = dataCounts.compatible_projects;\n\n  if (hasOtherFallbackCondition) {\n    return fallbackOutcome;\n  }\n\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n\n  if (checkNoDataFallback(dataCounts)) {\n    return fallbackOutcome;\n  }\n\n  if (checkIncompatibleData(dataCounts, isOnFallbackThresolds)) {\n    return {\n      shouldWarnIncompatibleSDK: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfAllOtherData(dataCounts)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfPartialOtherData(dataCounts, isOnFallbackThresolds)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      compatibleProjects,\n      forceTransactionsOnly: false,\n    };\n  }\n\n  return successOutcome;\n}\n\n/**\n * Fallback if no metrics found.\n */\nfunction checkNoDataFallback(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return !counts.metricsCount;\n}\n\n/**\n * Fallback and warn if incompatible data found (old specific SDKs).\n */\nfunction checkIncompatibleData(\n  dataCounts: MergedMetricsData,\n  isOnFallbackThresolds: boolean\n) {\n  const counts = normalizeCounts(dataCounts);\n  if (isOnFallbackThresolds) {\n    const ratio = counts.nullCount / counts.metricsCount;\n    return ratio > NULL_THRESHOLD;\n  }\n  return counts.nullCount > 0;\n}\n\n/**\n * Fallback and warn about unnamed transactions (specific SDKs).\n */\nfunction checkIfAllOtherData(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return counts.unparamCount >= counts.metricsCount;\n}\n\n/**\n * Show metrics but warn about unnamed transactions.\n */\nfunction checkIfPartialOtherData(\n  dataCounts: MergedMetricsData,\n  isOnFallbackThresolds: boolean\n) {\n  const counts = normalizeCounts(dataCounts);\n  if (isOnFallbackThresolds) {\n    const ratio = counts.unparamCount / counts.metricsCount;\n    return ratio > UNPARAM_THRESHOLD;\n  }\n  return counts.unparamCount > 0;\n}\n\n/**\n * Temporary function, can be removed after API changes.\n */\nfunction normalizeCounts({sum}: MergedMetricsData) {\n  try {\n    const metricsCount = Number(sum.metrics);\n    const unparamCount = Number(sum.metrics_unparam);\n    const nullCount = Number(sum.metrics_null);\n    return {\n      metricsCount,\n      unparamCount,\n      nullCount,\n    };\n  } catch (_) {\n    return {\n      metricsCount: 0,\n      unparamCount: 0,\n      nullCount: 0,\n    };\n  }\n}\n\n/**\n * Performance optimization to limit the amount of rows scanned before showing the landing page.\n */\nfunction adjustEventViewTime(eventView: EventView) {\n  const _eventView = eventView.clone();\n\n  if (!_eventView.start && !_eventView.end) {\n    if (!_eventView.statsPeriod) {\n      _eventView.statsPeriod = '1h';\n      _eventView.start = undefined;\n      _eventView.end = undefined;\n    } else {\n      const periodHours = parsePeriodToHours(_eventView.statsPeriod);\n      if (periodHours > 1) {\n        _eventView.statsPeriod = '1h';\n        _eventView.start = undefined;\n        _eventView.end = undefined;\n      }\n    }\n  }\n  return _eventView;\n}\n","import {Component, Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Input from 'sentry/components/input';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {transactionSummaryRouteWithQuery} from './utils';\n\nexport enum TransactionThresholdMetric {\n  TRANSACTION_DURATION = 'duration',\n  LARGEST_CONTENTFUL_PAINT = 'lcp',\n}\n\nexport const METRIC_CHOICES = [\n  {label: t('Transaction Duration'), value: 'duration'},\n  {label: t('Largest Contentful Paint'), value: 'lcp'},\n];\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n  onApply?: (threshold, metric) => void;\n  project?: string;\n} & ModalRenderProps;\n\ntype State = {\n  error: string | null;\n  metric: TransactionThresholdMetric | undefined;\n  threshold: number | undefined;\n};\n\nclass TransactionThresholdModal extends Component<Props, State> {\n  state: State = {\n    threshold: this.props.transactionThreshold,\n    metric: this.props.transactionThresholdMetric,\n    error: null,\n  };\n\n  getProject() {\n    const {projects, eventView, project} = this.props;\n\n    if (defined(project)) {\n      return projects.find(proj => proj.id === project);\n    }\n    const projectId = String(eventView.project[0]);\n    return projects.find(proj => proj.id === projectId);\n  }\n\n  handleApply = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'POST',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n          threshold: this.state.threshold,\n          metric: this.state.metric,\n        },\n      })\n      .then(() => {\n        closeModal();\n        if (onApply) {\n          onApply(this.state.threshold, this.state.metric);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n        const errorMessage =\n          err.responseJSON?.threshold ?? err.responseJSON?.non_field_errors ?? null;\n        addErrorMessage(errorMessage);\n      });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleReset = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'DELETE',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n        },\n      })\n      .then(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              threshold: data.threshold,\n              metric: data.metric,\n            });\n            closeModal();\n            if (onApply) {\n              onApply(this.state.threshold, this.state.metric);\n            }\n          })\n          .catch(err => {\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n      });\n  };\n\n  renderModalFields() {\n    return (\n      <Fragment>\n        <FieldGroup\n          data-test-id=\"response-metric\"\n          label={t('Calculation Method')}\n          inline={false}\n          help={t(\n            'This determines which duration metric is used for the Response Time Threshold.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <SelectControl\n            required\n            options={METRIC_CHOICES.slice()}\n            name=\"responseMetric\"\n            label={t('Calculation Method')}\n            value={this.state.metric}\n            onChange={(option: {label: string; value: string}) => {\n              this.handleFieldChange('metric')(option.value);\n            }}\n          />\n        </FieldGroup>\n        <FieldGroup\n          data-test-id=\"response-time-threshold\"\n          label={t('Response Time Threshold (ms)')}\n          inline={false}\n          help={t(\n            'The satisfactory response time for the calculation method defined above. This is used to calculate Apdex and User Misery scores.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <Input\n            type=\"number\"\n            name=\"threshold\"\n            required\n            pattern=\"[0-9]*(\\.[0-9]*)?\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.handleFieldChange('threshold')(event.target.value);\n            }}\n            value={this.state.threshold}\n            step={100}\n            min={100}\n          />\n        </FieldGroup>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body, Footer, organization, transactionName, eventView} = this.props;\n\n    const project = this.getProject();\n\n    const summaryView = eventView.clone();\n    summaryView.query = summaryView.getQueryWithAdditionalConditions();\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      query: summaryView.generateQueryStringObject(),\n      projectID: project?.id,\n    });\n\n    return (\n      <Fragment>\n        <Header closeButton>\n          <h4>{t('Transaction Settings')}</h4>\n        </Header>\n        <Body>\n          <Instruction>\n            {tct(\n              'The changes below will only be applied to [transaction]. To set it at a more global level, go to [projectSettings: Project Settings].',\n              {\n                transaction: <Link to={target}>{transactionName}</Link>,\n                projectSettings: (\n                  <Link\n                    to={`/settings/${organization.slug}/projects/${project?.slug}/performance/`}\n                  />\n                ),\n              }\n            )}\n          </Instruction>\n          {this.renderModalFields()}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              priority=\"default\"\n              onClick={this.handleReset}\n              data-test-id=\"reset-all\"\n            >\n              {t('Reset All')}\n            </Button>\n            <Button\n              aria-label={t('Apply')}\n              priority=\"primary\"\n              onClick={this.handleApply}\n              data-test-id=\"apply-threshold\"\n            >\n              {t('Apply')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n`;\n\nexport default withApi(withProjects(TransactionThresholdModal));\n"],"names":["shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","props","_jsx","GenericDiscoverQuery","route","afterFetch","data","_","fields","otherMeta","meta","useDiscoverQuery","res","useGenericDiscoverQuery","pageLinks","response","getResponseHeader","undefined","displayName","getRequestPayload","_ref","eventView","location","omit","getEventsAPIPayload","MetricsCompatibilityQuery","_ref2","children","_ref3","tableData","rest","MetricsCompatibilitySumsQuery","UNPARAM_THRESHOLD","NULL_THRESHOLD","_Provider","_useContext","_Context","createDefinedContext","name","strict","MetricsCardinalityProvider","canUseMetricsData","organization","value","isLoading","outcome","forceTransactionsOnly","baseDiscoverProps","orgSlug","slug","cursor","EventView","fromLocation","field","_eventView","clone","start","end","statsPeriod","parsePeriodToHours","adjustEventViewTime","Fragment","compatabilityResult","sumsResult","dataCounts","hasOtherFallbackCondition","fallbackOutcome","isOnFallbackThresolds","features","includes","compatibleProjects","compatible_projects","normalizeCounts","metricsCount","checkNoDataFallback","counts","nullCount","checkIncompatibleData","shouldWarnIncompatibleSDK","unparamCount","checkIfAllOtherData","shouldNotifyUnnamedTransactions","checkIfPartialOtherData","getMetricsOutcome","error","Provider","sendOutcomeAnalytics","fallbackFromNull","fallbackFromUnparam","isOnMetrics","useEffect","trackAnalytics","is_on_metrics","fallback_from_null","fallback_from_unparam","Consumer","useMetricsCardinalityContext","sum","Number","metrics","metrics_unparam","metrics_null","TransactionThresholdMetric","METRIC_CHOICES","label","t","TransactionThresholdModal","Component","constructor","arguments","_defineProperty","threshold","this","metric","event","preventDefault","api","closeModal","onApply","project","getProject","defined","transactionThresholdUrl","requestPromise","method","includeAllArgs","query","id","transaction","state","then","catch","err","setState","errorMessage","responseJSON","non_field_errors","addErrorMessage","prevState","newState","cloneDeep","set","errors","projectThresholdUrl","projects","find","proj","projectId","String","renderModalFields","_jsxs","FieldGroup","inline","help","showHelpInTooltip","flexibleControlStateSize","stacked","required","SelectControl","options","slice","onChange","option","handleFieldChange","Input","type","pattern","target","step","min","render","Header","Body","Footer","summaryView","getQueryWithAdditionalConditions","transactionSummaryRouteWithQuery","generateQueryStringObject","projectID","closeButton","Instruction","tct","Link","to","projectSettings","ButtonBar","gap","Button","priority","onClick","handleReset","handleApply","_styled","space","modalCss","styles","withApi","withProjects"],"sourceRoot":""}