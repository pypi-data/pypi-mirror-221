{"version":3,"file":"chunks/app_components_forms_apiForm_tsx-app_components_forms_controls_multipleCheckbox_tsx-app_compo-143bd5.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/apiForm.tsx","webpack:///./app/components/forms/controls/multipleCheckbox.tsx","webpack:///./app/components/panels/panelHeader.tsx"],"sourcesContent":["import {useCallback} from 'react';\n\nimport {addLoadingMessage, clearIndicators} from 'sentry/actionCreators/indicator';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport {t} from 'sentry/locale';\nimport useApi from 'sentry/utils/useApi';\n\ntype Props = FormProps & {\n  apiEndpoint: string;\n  apiMethod: string;\n  onSubmit?: (data: Record<string, any>) => any | void;\n};\n\nfunction ApiForm({onSubmit, apiMethod, apiEndpoint, ...otherProps}: Props) {\n  const api = useApi();\n\n  const handleSubmit = useCallback(\n    (\n      data: Record<string, any>,\n      onSuccess: (response: Record<string, any>) => void,\n      onError: (error: any) => void\n    ) => {\n      const transformed = onSubmit?.(data);\n      addLoadingMessage(t('Saving changes\\u2026'));\n      api.request(apiEndpoint, {\n        method: apiMethod,\n        data: transformed ?? data,\n        success: response => {\n          clearIndicators();\n          onSuccess(response);\n        },\n        error: error => {\n          clearIndicators();\n          onError(error);\n        },\n      });\n    },\n    [api, onSubmit, apiMethod, apiEndpoint]\n  );\n\n  return <Form onSubmit={handleSubmit} {...otherProps} />;\n}\n\nexport default ApiForm;\n","import React, {createContext, ReactNode, useCallback, useContext, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport noop from 'lodash/noop';\n\nimport Checkbox from 'sentry/components/checkbox';\nimport {space} from 'sentry/styles/space';\n\ntype CheckboxValue = string | number;\n\ntype SelectedValue = CheckboxValue[];\n\ntype Props = {\n  children: ReactNode;\n  name: string;\n  value: (string | number)[];\n  disabled?: boolean;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype CheckboxItemProps = {\n  children: ReactNode;\n  value: string | number;\n  disabled?: boolean;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype MultipleCheckboxContextValue = {\n  disabled: Props['disabled'];\n  handleChange: (\n    itemValue: CheckboxValue,\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => void;\n  name: string;\n  value: Props['value'];\n};\n\nconst MultipleCheckboxContext = createContext<MultipleCheckboxContextValue>({\n  handleChange: noop,\n  value: [],\n  name: '',\n  disabled: false,\n});\n\nfunction MultipleCheckbox({children, value, disabled, onChange, name}: Props) {\n  const handleChange = useCallback(\n    (itemValue: CheckboxValue, e: React.ChangeEvent<HTMLInputElement>) => {\n      if (typeof onChange !== 'function') {\n        return;\n      }\n\n      const newValue = e.target.checked\n        ? [...value, itemValue]\n        : value.filter(v => v !== itemValue);\n\n      onChange(newValue, e);\n    },\n    [value, onChange]\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      value,\n      handleChange,\n      name,\n      disabled,\n    }),\n    [disabled, handleChange, name, value]\n  );\n\n  return (\n    <MultipleCheckboxContext.Provider value={contextValue}>\n      <MultipleCheckboxWrapper>{children}</MultipleCheckboxWrapper>\n    </MultipleCheckboxContext.Provider>\n  );\n}\n\nfunction Item({\n  value: itemValue,\n  children,\n  disabled: itemDisabled,\n  onChange,\n}: CheckboxItemProps) {\n  const {disabled, value, handleChange, name} = useContext(MultipleCheckboxContext);\n\n  return (\n    <LabelContainer>\n      <Label>\n        <Checkbox\n          name={name}\n          checked={value.includes(itemValue)}\n          disabled={disabled || itemDisabled}\n          onChange={e => {\n            handleChange(itemValue, e);\n            onChange?.(e);\n          }}\n          value={value.toString()}\n        />\n        <CheckboxLabel>{children}</CheckboxLabel>\n      </Label>\n    </LabelContainer>\n  );\n}\n\nMultipleCheckbox.Item = Item;\n\nexport default MultipleCheckbox;\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  display: inline-flex;\n  align-items: center;\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: ${space(1)};\n`;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 25%;\n  }\n`;\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n"],"names":["ApiForm","_ref","onSubmit","apiMethod","apiEndpoint","otherProps","api","useApi","handleSubmit","useCallback","data","onSuccess","onError","transformed","addLoadingMessage","t","request","method","success","response","clearIndicators","error","_jsx","Form","displayName","MultipleCheckboxContext","createContext","handleChange","noop","value","name","disabled","MultipleCheckbox","children","onChange","itemValue","e","newValue","target","checked","filter","v","contextValue","useMemo","Provider","MultipleCheckboxWrapper","Item","_ref2","itemDisabled","useContext","LabelContainer","_jsxs","Label","Checkbox","includes","toString","CheckboxLabel","_styled","styles","space","p","theme","breakpoints","small","medium","large","getPadding","disablePadding","hasButtons","css","lightText","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary"],"sourceRoot":""}