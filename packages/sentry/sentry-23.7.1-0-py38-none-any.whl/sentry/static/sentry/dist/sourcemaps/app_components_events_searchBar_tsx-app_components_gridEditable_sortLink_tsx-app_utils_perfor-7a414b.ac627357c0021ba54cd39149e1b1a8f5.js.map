{"version":3,"file":"chunks/app_components_events_searchBar_tsx-app_components_gridEditable_sortLink_tsx-app_utils_perfor-7a414b.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/components/gridEditable/sortLink.tsx","webpack:///./app/utils/performance/suspectSpans/suspectSpansQuery.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/spanDetails/utils.tsx"],"sourcesContent":["import {useEffect, useMemo} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {CustomMeasurementCollection} from 'sentry/utils/customMeasurements/customMeasurements';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {\n  DEVICE_CLASS_TAG_VALUES,\n  FieldKey,\n  FieldKind,\n  isDeviceClass,\n} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\nimport {isCustomMeasurement} from 'sentry/views/dashboards/utils';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst STATIC_FIELD_TAGS_SET = new Set(Object.keys(FIELD_TAGS));\nconst getFunctionTags = (fields: Readonly<Field[]> | undefined) => {\n  if (!fields?.length) {\n    return [];\n  }\n  return fields.reduce((acc, item) => {\n    if (\n      !STATIC_FIELD_TAGS_SET.has(item.field) &&\n      !isEquation(item.field) &&\n      !isCustomMeasurement(item.field)\n    ) {\n      acc[item.field] = {key: item.field, name: item.field, kind: FieldKind.FUNCTION};\n    }\n\n    return acc;\n  }, {});\n};\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements'],\n  customMeasurements:\n    | Parameters<React.ComponentProps<typeof Measurements>['children']>[0]['measurements']\n    | undefined\n) => {\n  const measurementsWithKind = Object.keys(measurements).reduce((tags, key) => {\n    tags[key] = {\n      ...measurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, {});\n\n  if (!customMeasurements) {\n    return measurementsWithKind;\n  }\n\n  return Object.keys(customMeasurements).reduce((tags, key) => {\n    tags[key] = {\n      ...customMeasurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, measurementsWithKind);\n};\n\nconst STATIC_FIELD_TAGS = Object.keys(FIELD_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...FIELD_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nconst STATIC_FIELD_TAGS_WITHOUT_TRACING = omit(STATIC_FIELD_TAGS, TRACING_FIELDS);\n\nconst STATIC_SPAN_TAGS = SPAN_OP_BREAKDOWN_FIELDS.reduce((tags, key) => {\n  tags[key] = {name: key, kind: FieldKind.METRICS};\n  return tags;\n}, {});\n\nconst STATIC_SEMVER_TAGS = Object.keys(SEMVER_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...SEMVER_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  customMeasurements?: CustomMeasurementCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n    customMeasurements,\n  } = props;\n\n  const api = useApi();\n\n  const functionTags = useMemo(() => getFunctionTags(fields), [fields]);\n  const tagsWithKind = useMemo(() => {\n    return Object.keys(tags).reduce((acc, key) => {\n      acc[key] = {\n        ...tags[key],\n        kind: FieldKind.TAG,\n      };\n      return acc;\n    }, {});\n  }, [tags]);\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      // device.class is stored as \"numbers\" in snuba, but we want to suggest high, medium,\n      // and low search filter values because discover maps device.class to these values.\n      if (isDeviceClass(tag.key)) {\n        return Promise.resolve(DEVICE_CLASS_TAG_VALUES);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: query,\n        projectIds: projectIdStrings,\n        endpointParams,\n        // allows searching for tags on transactions as well\n        includeTransactions: true,\n        // allows searching for tags on sessions as well\n        includeSessions: includeSessionTagsValues,\n      }).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const measurementsWithKind = getMeasurementTags(measurements, customMeasurements);\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: TagCollection = orgHasPerformanceView\n      ? Object.assign(\n          {},\n          measurementsWithKind,\n          functionTags,\n          STATIC_SPAN_TAGS,\n          STATIC_FIELD_TAGS\n        )\n      : Object.assign({}, STATIC_FIELD_TAGS_WITHOUT_TRACING);\n\n    assign(combinedTags, tagsWithKind, STATIC_FIELD_TAGS, STATIC_SEMVER_TAGS);\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: Object.keys(combinedTags).sort((a, b) => {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      }),\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    const list =\n      omitTags && omitTags.length > 0 ? omit(combinedTags, omitTags) : combinedTags;\n    return list;\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludedTags={[FieldKey.ENVIRONMENT, FieldKey.TOTAL_COUNT]}\n          maxMenuHeight={maxMenuHeight ?? 300}\n          customPerformanceMetrics={customMeasurements}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\n\nimport Link from 'sentry/components/links/link';\nimport {IconArrow} from 'sentry/icons';\n\nexport type Alignments = 'left' | 'right' | undefined;\nexport type Directions = 'desc' | 'asc' | undefined;\n\ntype Props = {\n  align: Alignments;\n  canSort: boolean;\n  direction: Directions;\n  generateSortLink: () => LocationDescriptorObject | undefined;\n  title: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n  replace?: boolean;\n};\n\nfunction SortLink({\n  align,\n  title,\n  canSort,\n  generateSortLink,\n  onClick,\n  direction,\n  replace,\n}: Props) {\n  const target = generateSortLink();\n\n  if (!target || !canSort) {\n    return <StyledNonLink align={align}>{title}</StyledNonLink>;\n  }\n\n  const arrow = !direction ? null : (\n    <StyledIconArrow size=\"xs\" direction={direction === 'desc' ? 'down' : 'up'} />\n  );\n\n  const handleOnClick: React.MouseEventHandler<HTMLAnchorElement> = e => {\n    if (replace) {\n      e.preventDefault();\n      browserHistory.replace(target);\n    }\n    onClick?.(e);\n  };\n\n  return (\n    <StyledLink align={align} to={target} onClick={handleOnClick}>\n      {title} {arrow}\n    </StyledLink>\n  );\n}\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\ntype StyledLinkProps = LinkProps & {align: Alignments};\n\nconst StyledLink = styled((props: StyledLinkProps) => {\n  // @ts-expect-error It doesn't look like the `css` property is a part of the props,\n  // but prior to this style of destructure-omitting it, it was being omitted\n  // with lodash.omit. I mean keeping it omitted here just in case.\n  const {align: _align, css: _css, ...forwardProps} = props;\n  return <Link {...forwardProps} />;\n})`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  color: inherit;\n\n  &:hover,\n  &:active,\n  &:focus,\n  &:visited {\n    color: inherit;\n  }\n\n  ${(p: StyledLinkProps) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  vertical-align: top;\n`;\n\nexport default SortLink;\n","import omit from 'lodash/omit';\n\nimport {defined} from 'sentry/utils';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nimport {SuspectSpans} from './types';\n\ntype SuspectSpansProps = {\n  maxExclusiveTime?: string;\n  minExclusiveTime?: string;\n  perSuspect?: number;\n  spanGroups?: string[];\n  spanOps?: string[];\n};\n\ntype RequestProps = DiscoverQueryProps & SuspectSpansProps;\n\nexport type ChildrenProps = Omit<GenericChildrenProps<SuspectSpansProps>, 'tableData'> & {\n  suspectSpans: SuspectSpans | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getSuspectSpanPayload(props: RequestProps) {\n  const {perSuspect, spanOps, spanGroups, minExclusiveTime, maxExclusiveTime} = props;\n  const payload = {\n    perSuspect,\n    spanOp: spanOps,\n    spanGroup: spanGroups,\n    min_exclusive_time: minExclusiveTime,\n    max_exclusive_time: maxExclusiveTime,\n  };\n  if (!defined(payload.perSuspect)) {\n    delete payload.perSuspect;\n  }\n  if (!defined(payload.spanOp)) {\n    delete payload.spanOp;\n  }\n  if (!defined(payload.spanGroup)) {\n    delete payload.spanGroup;\n  }\n  const additionalPayload = props.eventView.getEventsAPIPayload(props.location);\n  return {\n    ...payload,\n    ...additionalPayload,\n  };\n}\n\nfunction SuspectSpansQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<SuspectSpans, SuspectSpansProps>\n      route=\"events-spans-performance\"\n      getRequestPayload={getSuspectSpanPayload}\n      {...omit(props, 'children')}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({suspectSpans: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default SuspectSpansQuery;\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getState(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Query} from 'history';\n\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\n\nexport function generateSpanDetailsRoute({\n  orgSlug,\n  spanSlug,\n}: {\n  orgSlug: string;\n  spanSlug: SpanSlug;\n}): string {\n  const spanComponent = `${encodeURIComponent(spanSlug.op)}:${spanSlug.group}`;\n  return `/organizations/${orgSlug}/performance/summary/spans/${spanComponent}/`;\n}\n\nexport function spanDetailsRouteWithQuery({\n  orgSlug,\n  transaction,\n  query,\n  spanSlug,\n  projectID,\n}: {\n  orgSlug: string;\n  query: Query;\n  spanSlug: SpanSlug;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateSpanDetailsRoute({\n    orgSlug,\n    spanSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport enum ZoomKeys {\n  MIN = 'min',\n  MAX = 'max',\n}\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","STATIC_FIELD_TAGS_SET","Set","Object","keys","FIELD_TAGS","STATIC_FIELD_TAGS","reduce","tags","key","kind","FieldKind","FIELD","STATIC_FIELD_TAGS_WITHOUT_TRACING","omit","TRACING_FIELDS","STATIC_SPAN_TAGS","SPAN_OP_BREAKDOWN_FIELDS","name","METRICS","STATIC_SEMVER_TAGS","SEMVER_TAGS","SearchBar","props","maxSearchItems","organization","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","customMeasurements","api","useApi","functionTags","useMemo","length","acc","item","has","field","isEquation","isCustomMeasurement","FUNCTION","getFunctionTags","tagsWithKind","TAG","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","isMeasurement","Promise","resolve","isDeviceClass","DEVICE_CLASS_TAG_VALUES","fetchTagValues","orgSlug","slug","tagKey","search","includeTransactions","includeSessions","then","results","flatten","filter","_ref","defined","_ref2","Error","_ref3","getTagList","measurements","measurementsWithKind","getMeasurementTags","MEASUREMENT","combinedTags","features","includes","assign","FieldKey","HAS","values","sort","a","b","toLowerCase","localeCompare","predefined","_jsx","Measurements","children","_ref4","SmartSearchBar","hasRecentSearches","savedSearchType","SavedSearchType","EVENT","onGetTagValues","supportedTags","prepareQuery","replace","excludedTags","ENVIRONMENT","TOTAL_COUNT","customPerformanceMetrics","displayName","withTags","SortLink","align","title","canSort","generateSortLink","onClick","direction","target","StyledNonLink","arrow","StyledIconArrow","size","_jsxs","StyledLink","to","e","preventDefault","browserHistory","_styled","_align","css","_css","forwardProps","Link","p","IconArrow","styles","getSuspectSpanPayload","perSuspect","spanOps","spanGroups","minExclusiveTime","maxExclusiveTime","payload","spanOp","spanGroup","min_exclusive_time","max_exclusive_time","additionalPayload","eventView","getEventsAPIPayload","location","SuspectSpansQuery","GenericDiscoverQuery","route","getRequestPayload","tableData","rest","suspectSpans","WrappedComponent","WithTags","Component","constructor","arguments","_defineProperty","TagStore","getState","listen","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","spanDetailsRouteWithQuery","transaction","spanSlug","projectID","pathname","encodeURIComponent","op","group","generateSpanDetailsRoute","project","environment","statsPeriod","start","end","ZoomKeys"],"sourceRoot":""}