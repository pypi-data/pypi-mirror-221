{"version":3,"file":"chunks/app_views_starfish_colours_tsx-app_views_starfish_components_datePicker_tsx-app_views_starfis-07794e.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/gridEditable/sortLink.tsx","webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/views/starfish/colours.tsx","webpack:///./app/views/starfish/components/datePicker.tsx","webpack:///./app/views/starfish/components/starfishPageFiltersContainer.tsx","webpack:///./app/views/starfish/components/tableCells/renderHeadCell.tsx","webpack:///./app/views/starfish/utils/chartValueFormatters/formatThroughput.ts","webpack:///./app/views/starfish/utils/constants.tsx","webpack:///./app/views/starfish/utils/retryHandlers.tsx","webpack:///./app/views/starfish/utils/useSpansQuery.tsx","webpack:///./app/views/starfish/utils/trackResponse.tsx","webpack:///./app/views/starfish/views/queryParameters.tsx"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\n\nimport Link from 'sentry/components/links/link';\nimport {IconArrow} from 'sentry/icons';\n\nexport type Alignments = 'left' | 'right' | undefined;\nexport type Directions = 'desc' | 'asc' | undefined;\n\ntype Props = {\n  align: Alignments;\n  canSort: boolean;\n  direction: Directions;\n  generateSortLink: () => LocationDescriptorObject | undefined;\n  title: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n  replace?: boolean;\n};\n\nfunction SortLink({\n  align,\n  title,\n  canSort,\n  generateSortLink,\n  onClick,\n  direction,\n  replace,\n}: Props) {\n  const target = generateSortLink();\n\n  if (!target || !canSort) {\n    return <StyledNonLink align={align}>{title}</StyledNonLink>;\n  }\n\n  const arrow = !direction ? null : (\n    <StyledIconArrow size=\"xs\" direction={direction === 'desc' ? 'down' : 'up'} />\n  );\n\n  const handleOnClick: React.MouseEventHandler<HTMLAnchorElement> = e => {\n    if (replace) {\n      e.preventDefault();\n      browserHistory.replace(target);\n    }\n    onClick?.(e);\n  };\n\n  return (\n    <StyledLink align={align} to={target} onClick={handleOnClick}>\n      {title} {arrow}\n    </StyledLink>\n  );\n}\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\ntype StyledLinkProps = LinkProps & {align: Alignments};\n\nconst StyledLink = styled((props: StyledLinkProps) => {\n  // @ts-expect-error It doesn't look like the `css` property is a part of the props,\n  // but prior to this style of destructure-omitting it, it was being omitted\n  // with lodash.omit. I mean keeping it omitted here just in case.\n  const {align: _align, css: _css, ...forwardProps} = props;\n  return <Link {...forwardProps} />;\n})`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  color: inherit;\n\n  &:hover,\n  &:active,\n  &:focus,\n  &:visited {\n    color: inherit;\n  }\n\n  ${(p: StyledLinkProps) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  vertical-align: top;\n`;\n\nexport default SortLink;\n","import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n  useGenericDiscoverQuery,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\nexport type DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\nexport type DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route=\"events\"\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport function useDiscoverQuery(props: Omit<DiscoverQueryComponentProps, 'children'>) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n\n  const res = useGenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>({\n    route: 'events',\n    shouldRefetchData,\n    afterFetch,\n    ...props,\n  });\n\n  const pageLinks = res.response?.getResponseHeader('Link') ?? undefined;\n\n  return {...res, pageLinks};\n}\n\nexport default DiscoverQuery;\n","import {CHART_PALETTE} from 'sentry/constants/chartPalette';\n\nexport const THROUGHPUT_COLOR = CHART_PALETTE[3][3];\nexport const P50_COLOR = CHART_PALETTE[3][1];\nexport const P95_COLOR = CHART_PALETTE[0][0];\nexport const AVG_COLOR = CHART_PALETTE[0][0];\nexport const ERRORS_COLOR = CHART_PALETTE[5][3];\n","import DatePageFilter from 'sentry/components/datePageFilter';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nfunction StarfishDatePicker() {\n  const organization = useOrganization();\n  return (\n    <DatePageFilter\n      defaultPeriod=\"24h\"\n      alignDropdown=\"left\"\n      onChange={({start, end, relative}) => {\n        trackAnalytics('starfish.page_filter.data_change', {\n          organization,\n          start,\n          end,\n          relative,\n        });\n      }}\n    />\n  );\n}\n\nexport default StarfishDatePicker;\n","import PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport function StarfishPageFiltersContainer({children}: Props) {\n  return (\n    <PageFiltersContainer skipLoadLastUsedEnvironment>{children}</PageFiltersContainer>\n  );\n}\n","import {Location} from 'history';\n\nimport {GridColumnHeader} from 'sentry/components/gridEditable';\nimport SortLink, {Alignments} from 'sentry/components/gridEditable/sortLink';\nimport {\n  aggregateFunctionOutputType,\n  fieldAlignment,\n  parseFunction,\n  Sort,\n} from 'sentry/utils/discover/fields';\nimport {SpanMetricsFields} from 'sentry/views/starfish/types';\nimport {QueryParameterNames} from 'sentry/views/starfish/views/queryParameters';\n\ntype Options = {\n  column: GridColumnHeader<string>;\n  location?: Location;\n  sort?: Sort;\n};\n\nconst {SPAN_SELF_TIME} = SpanMetricsFields;\n\nexport const SORTABLE_FIELDS = new Set([\n  `avg(${SPAN_SELF_TIME})`,\n  `p95(${SPAN_SELF_TIME})`,\n  'sps()',\n  'time_spent_percentage()',\n  'http_error_count()',\n]);\n\nexport const renderHeadCell = ({column, location, sort}: Options) => {\n  const {key, name} = column;\n  const alignment = getAlignment(key);\n\n  let newSortDirection: Sort['kind'] = 'desc';\n  if (sort?.field === column.key) {\n    if (sort.kind === 'desc') {\n      newSortDirection = 'asc';\n    }\n  }\n\n  const newSort = `${newSortDirection === 'desc' ? '-' : ''}${key}`;\n\n  return (\n    <SortLink\n      align={alignment}\n      canSort={Boolean(location && sort && SORTABLE_FIELDS.has(key))}\n      direction={sort?.field === column.key ? sort.kind : undefined}\n      title={name}\n      generateSortLink={() => {\n        return {\n          ...location,\n          query: {\n            ...location?.query,\n            [QueryParameterNames.SORT]: newSort,\n          },\n        };\n      }}\n    />\n  );\n};\n\nexport const getAlignment = (key: string): Alignments => {\n  const result = parseFunction(key);\n  if (result) {\n    const outputType = aggregateFunctionOutputType(result.name, result.arguments[0]);\n    if (outputType) {\n      return fieldAlignment(key, outputType);\n    }\n  }\n  return 'left';\n};\n","import {t} from 'sentry/locale';\n\nconst formatThroughput = (throughputPerSecond: number = -1) => {\n  const throughput = throughputPerSecond === -1 ? '--' : throughputPerSecond.toFixed(2);\n  return `${throughput} / ${t('s')}`;\n};\n\nexport default formatThroughput;\n","// This constant is to be used as an arg for `getInterval`.\n// 'metrics' fidelity is intended to match the granularities of stored metrics.\n// This gives us the best/highest fidelity of data for minimum amount of work (don't need to merge buckets).\nexport const STARFISH_CHART_INTERVAL_FIDELITY = 'metrics';\n","export function shouldRetryHandler(failureCount: number, error: Error) {\n  return failureCount < 3 && error.message.includes('429');\n}\n\nexport function getRetryDelay(attempt: number) {\n  return 1000 * Math.pow(3, attempt);\n}\n","import moment from 'moment';\n\nimport {TableData, useDiscoverQuery} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {\n  encodeSort,\n  EventsMetaType,\n  MetaType,\n} from 'sentry/utils/discover/eventView';\nimport {\n  DiscoverQueryProps,\n  useGenericDiscoverQuery,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {StarfishType} from 'sentry/views/starfish/types';\nimport {\n  getRetryDelay,\n  shouldRetryHandler,\n} from 'sentry/views/starfish/utils/retryHandlers';\nimport {TrackResponse} from 'sentry/views/starfish/utils/trackResponse';\n\nexport const DATE_FORMAT = 'YYYY-MM-DDTHH:mm:ssZ';\n\nexport function useSpansQuery<T = any[]>({\n  eventView,\n  initialData,\n  limit,\n  enabled,\n  referrer = 'use-spans-query',\n  cursor,\n  view = StarfishType.BACKEND,\n}: {\n  cursor?: string;\n  enabled?: boolean;\n  eventView?: EventView;\n  initialData?: T;\n  limit?: number;\n  referrer?: string;\n  view?: StarfishType;\n}) {\n  const isTimeseriesQuery = (eventView?.yAxis?.length ?? 0) > 0;\n  const queryFunction = isTimeseriesQuery\n    ? useWrappedDiscoverTimeseriesQuery\n    : useWrappedDiscoverQuery;\n\n  const {isReady: pageFiltersReady} = usePageFilters();\n\n  if (eventView) {\n    const newEventView = eventView.clone();\n    // We can also add `if (view == 'mobile') -> 'transaction.op:ui.load'` here in the future\n    if (view === StarfishType.BACKEND) {\n      newEventView.query = `${eventView.query} transaction.op:http.server`;\n    }\n    const response = queryFunction<T>({\n      eventView: newEventView,\n      initialData,\n      limit,\n      // We always want to wait until the pageFilters are ready to prevent clobbering requests\n      enabled: (enabled || enabled === undefined) && pageFiltersReady,\n      referrer,\n      cursor,\n    });\n\n    TrackResponse(eventView, response);\n\n    return response;\n  }\n\n  throw new Error('eventView argument must be defined when Starfish useDiscover is true');\n}\n\nfunction useWrappedDiscoverTimeseriesQuery<T>({\n  eventView,\n  enabled,\n  initialData,\n  referrer,\n  cursor,\n}: {\n  eventView: EventView;\n  cursor?: string;\n  enabled?: boolean;\n  initialData?: any;\n  referrer?: string;\n}) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {isReady: pageFiltersReady} = usePageFilters();\n  const result = useGenericDiscoverQuery<\n    {\n      data: any[];\n      meta: MetaType;\n    },\n    DiscoverQueryProps\n  >({\n    route: 'events-stats',\n    eventView,\n    location,\n    orgSlug: organization.slug,\n    getRequestPayload: () => ({\n      ...eventView.getEventsAPIPayload(location),\n      yAxis: eventView.yAxis,\n      topEvents: eventView.topEvents,\n      excludeOther: 0,\n      partial: 1,\n      orderby: eventView.sorts?.[0] ? encodeSort(eventView.sorts?.[0]) : undefined,\n      interval: eventView.interval,\n      cursor,\n    }),\n    options: {\n      enabled: enabled && pageFiltersReady,\n      refetchOnWindowFocus: false,\n      retry: shouldRetryHandler,\n      retryDelay: getRetryDelay,\n      staleTime: Infinity,\n    },\n    referrer,\n  });\n\n  const isFetchingOrLoading = result.isLoading || result.isFetching;\n  const defaultData = initialData ?? undefined;\n\n  const data: T = isFetchingOrLoading\n    ? defaultData\n    : processDiscoverTimeseriesResult(result.data, eventView);\n\n  return {\n    ...result,\n    data,\n    meta: result.data?.meta,\n  };\n}\n\nexport function useWrappedDiscoverQuery<T>({\n  eventView,\n  initialData,\n  enabled,\n  referrer,\n  limit,\n  cursor,\n}: {\n  eventView: EventView;\n  cursor?: string;\n  enabled?: boolean;\n  initialData?: T;\n  limit?: number;\n  referrer?: string;\n}) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {isReady: pageFiltersReady} = usePageFilters();\n  const result = useDiscoverQuery({\n    eventView,\n    orgSlug: organization.slug,\n    location,\n    referrer,\n    cursor,\n    limit,\n    options: {\n      enabled: enabled && pageFiltersReady,\n      refetchOnWindowFocus: false,\n      retry: shouldRetryHandler,\n      retryDelay: getRetryDelay,\n      staleTime: Infinity,\n    },\n  });\n\n  // TODO: useDiscoverQuery incorrectly states that it returns MetaType, but it\n  // does not!\n  const meta = result.data?.meta as EventsMetaType | undefined;\n\n  const data =\n    result.isLoading && initialData ? initialData : (result.data?.data as T | undefined);\n\n  return {\n    ...result,\n    data,\n    meta,\n  };\n}\n\ntype Interval = {interval: string; group?: string};\n\nfunction processDiscoverTimeseriesResult(\n  result: TableData | undefined,\n  eventView: EventView\n) {\n  if (!result) {\n    return undefined;\n  }\n  if (!eventView.yAxis) {\n    return [];\n  }\n  let intervals = [] as Interval[];\n  const singleYAxis =\n    eventView.yAxis &&\n    (typeof eventView.yAxis === 'string' || eventView.yAxis.length === 1);\n  const firstYAxis =\n    typeof eventView.yAxis === 'string' ? eventView.yAxis : eventView.yAxis[0];\n  if (result.data) {\n    const timeSeriesResult: Interval[] = processSingleDiscoverTimeseriesResult(\n      result,\n      singleYAxis ? firstYAxis : 'count'\n    ).map(data => ({\n      interval: moment(parseInt(data.interval, 10) * 1000).format(DATE_FORMAT),\n      [firstYAxis]: data[firstYAxis],\n      group: data.group,\n    }));\n    return timeSeriesResult;\n  }\n  Object.keys(result).forEach(key => {\n    if (result[key].data) {\n      intervals = mergeIntervals(\n        intervals,\n        processSingleDiscoverTimeseriesResult(result[key], singleYAxis ? firstYAxis : key)\n      );\n    } else {\n      Object.keys(result[key]).forEach(innerKey => {\n        if (innerKey !== 'order') {\n          intervals = mergeIntervals(\n            intervals,\n            processSingleDiscoverTimeseriesResult(result[key][innerKey], innerKey, key)\n          );\n        }\n      });\n    }\n  });\n\n  const processed = intervals.map(interval => ({\n    ...interval,\n    interval: moment(parseInt(interval.interval, 10) * 1000).format(DATE_FORMAT),\n  }));\n  return processed;\n}\n\nfunction processSingleDiscoverTimeseriesResult(result, key: string, group?: string) {\n  const intervals = [] as Interval[];\n  result.data.forEach(([timestamp, [{count: value}]]) => {\n    const existingInterval = intervals.find(\n      interval =>\n        interval.interval === timestamp && (group ? interval.group === group : true)\n    );\n    if (existingInterval) {\n      existingInterval[key] = value;\n      return;\n    }\n    intervals.push({\n      interval: timestamp,\n      [key]: value,\n      group,\n    });\n  });\n  return intervals;\n}\n\nfunction mergeIntervals(first: Interval[], second: Interval[]) {\n  const target: Interval[] = JSON.parse(JSON.stringify(first));\n  second.forEach(({interval: timestamp, group, ...rest}) => {\n    const existingInterval = target.find(\n      interval =>\n        interval.interval === timestamp && (group ? interval.group === group : true)\n    );\n    if (existingInterval) {\n      Object.keys(rest).forEach(key => {\n        existingInterval[key] = rest[key];\n      });\n      return;\n    }\n    target.push({interval: timestamp, group, ...rest});\n  });\n  return target;\n}\n","import {useEffect, useState} from 'react';\n\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nexport function TrackResponse(\n  eventView: EventView,\n  {isLoading, statusCode}: {isLoading: boolean; statusCode?: string}\n) {\n  // Get current timestamp\n  const [startTimestamp, setStartTimestamp] = useState<number | null>(null);\n  const [initiallyLoaded, setInitiallyLoaded] = useState(false);\n  const organization = useOrganization();\n\n  useEffect(() => {\n    if (isLoading) {\n      if (startTimestamp === null) {\n        setStartTimestamp(Date.now());\n        setInitiallyLoaded(false);\n      }\n      return;\n    }\n    if (initiallyLoaded) {\n      return;\n    }\n\n    setInitiallyLoaded(true);\n    if (startTimestamp) {\n      const now = Date.now();\n      trackAnalytics('starfish.request', {\n        organization,\n        duration: now - startTimestamp,\n        statusCode,\n      });\n      setStartTimestamp(null);\n    }\n  }, [initiallyLoaded, eventView, startTimestamp, organization, isLoading, statusCode]);\n}\n","export enum QueryParameterNames {\n  CURSOR = 'spansCursor',\n  SORT = 'spansSort',\n}\n"],"names":["SortLink","_ref","align","title","canSort","generateSortLink","onClick","direction","replace","target","_jsx","StyledNonLink","children","arrow","StyledIconArrow","size","_jsxs","StyledLink","to","e","preventDefault","browserHistory","displayName","_styled","props","_align","css","_css","forwardProps","Link","p","IconArrow","name","styles","shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","GenericDiscoverQuery","route","afterFetch","data","_","fields","otherMeta","meta","useDiscoverQuery","res","useGenericDiscoverQuery","pageLinks","response","getResponseHeader","undefined","THROUGHPUT_COLOR","CHART_PALETTE","P95_COLOR","AVG_COLOR","ERRORS_COLOR","StarfishDatePicker","organization","useOrganization","DatePageFilter","defaultPeriod","alignDropdown","onChange","start","end","relative","trackAnalytics","StarfishPageFiltersContainer","PageFiltersContainer","skipLoadLastUsedEnvironment","SPAN_SELF_TIME","SpanMetricsFields","SORTABLE_FIELDS","Set","renderHeadCell","column","location","sort","key","alignment","getAlignment","newSortDirection","field","kind","newSort","Boolean","has","query","QueryParameterNames","SORT","result","parseFunction","outputType","aggregateFunctionOutputType","arguments","fieldAlignment","throughputPerSecond","length","toFixed","t","STARFISH_CHART_INTERVAL_FIDELITY","shouldRetryHandler","failureCount","error","message","includes","getRetryDelay","attempt","Math","pow","DATE_FORMAT","useSpansQuery","eventView","initialData","limit","enabled","referrer","cursor","view","StarfishType","BACKEND","queryFunction","yAxis","useWrappedDiscoverTimeseriesQuery","useWrappedDiscoverQuery","isReady","pageFiltersReady","usePageFilters","newEventView","clone","isLoading","statusCode","startTimestamp","setStartTimestamp","useState","initiallyLoaded","setInitiallyLoaded","useEffect","Date","now","duration","TrackResponse","Error","_ref2","useLocation","orgSlug","slug","getRequestPayload","getEventsAPIPayload","topEvents","excludeOther","partial","orderby","sorts","encodeSort","interval","options","refetchOnWindowFocus","retry","retryDelay","staleTime","Infinity","isFetching","intervals","singleYAxis","firstYAxis","timeSeriesResult","processSingleDiscoverTimeseriesResult","map","moment","parseInt","format","group","Object","keys","forEach","mergeIntervals","innerKey","processDiscoverTimeseriesResult","_ref3","_ref4","timestamp","count","value","existingInterval","find","push","first","second","JSON","parse","stringify","_ref5","rest"],"sourceRoot":""}