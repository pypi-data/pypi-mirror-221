{"version":3,"file":"chunks/app_gettingStartedDocs_node_gcpfunctions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"4ZAcO,SAASA,EAAuBC,GAM7B,IAN8B,UACtCC,EAAS,aACTC,EAAY,YACZC,EAAW,UACXC,EAAS,OACTC,GACML,EACN,MAAO,CACLM,OAAOC,EAAAA,EAAAA,GAAE,sBACTC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,wKACA,CACEV,WAAWQ,EAAAA,EAAAA,IAACG,EAAAA,EAAY,CAACC,KAAMZ,QAKvCa,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,0CACPC,OAAQA,KACDf,GAAiBE,GAAcD,IAIpCe,EAAAA,EAAAA,IACEb,EACI,oDACA,0DACJ,CACEc,WAAYf,EACZgB,SAAUjB,EACVD,gBAEH,EAEHmB,gBAAiBA,KACVnB,GAAiBE,GAAcD,IAIpCe,EAAAA,EAAAA,IACEb,EACI,oDACA,0DACJ,CACEc,WAAYf,EACZgB,SAAUjB,EACVD,gBAEH,IAKX,C,qcCxDA,MAAMoB,EAA0B,+GAGnBC,EAAQ,eAAC,kBACpBC,KACGC,GACgBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CACnD,CACEG,KAAMC,EAAAA,GAASC,QACfvB,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,6EACA,CAACK,MAAMP,EAAAA,EAAAA,IAAA,eAIbK,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,2EASb,CACEV,OAAOC,EAAAA,EAAAA,GAAE,oCACTC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IAAI,0DAA2D,CAC9DK,MAAMP,EAAAA,EAAAA,IAAA,eAIZK,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,2GAIHQ,kKAUV,CACElB,OAAOC,EAAAA,EAAAA,GAAE,0CACTC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IAAI,iEAAkE,CACrEK,MAAMP,EAAAA,EAAAA,IAAA,eAIZK,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,2GAIHQ,8MAYV,CACElB,OAAOC,EAAAA,EAAAA,GAAE,0CACTC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IAAI,sEAAuE,CAC1EK,MAAMP,EAAAA,EAAAA,IAAA,eAIZK,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,2GAIHQ,8MAYVzB,EAAAA,EAAAA,GAAwB,CACtBE,UAAW,sEACRwB,IAEL,CACEI,KAAMC,EAAAA,GAASE,OACfxB,aAAaD,EAAAA,EAAAA,GACX,4HAEFO,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,8JAQd,EAEM,SAASiB,EAA8BjC,GAM9B,IAN+B,IAC7CkC,EAAG,aACHhC,EAAY,OACZG,EAAM,YACNF,EAAW,UACXC,GACYJ,EACRwB,EAA8B,CAAE,SAAQU,OAE5C,MAAMC,EAAe,CAACb,GAMtB,OAJIa,EAAaR,OAAS,IACxBH,EAAoBA,EAAkBY,OAAOD,KAI7C1B,EAAAA,EAAAA,IAAC4B,EAAAA,EAAM,CACLd,MAAOA,EAAM,CACXC,kBAAmBA,EAAkBc,KAAK,MAC1CpC,eACAG,SACAF,cACAC,cAEFC,OAAQA,EACRF,YAAaA,GAGnB,CA5BgB8B,EAA8BM,YAAA,iCA8B9C,S","sources":["webpack:///./app/components/onboarding/gettingStartedDoc/utils.tsx","webpack:///./app/gettingStartedDocs/node/gcpfunctions.tsx"],"sourcesContent":["import ExternalLink from 'sentry/components/links/externalLink';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\n\ntype Props = {\n  guideLink: string;\n  newOrg?: boolean;\n  organization?: Organization;\n  platformKey?: PlatformKey;\n  projectId?: string;\n};\n\nexport function getUploadSourceMapsStep({\n  guideLink,\n  organization,\n  platformKey,\n  projectId,\n  newOrg,\n}: Props) {\n  return {\n    title: t('Upload Source Maps'),\n    description: (\n      <p>\n        {tct(\n          'Automatically upload your source maps to enable readable stack traces for Errors. If you prefer to manually set up source maps, please follow [guideLink:this guide].',\n          {\n            guideLink: <ExternalLink href={guideLink} />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        code: `npx @sentry/wizard@latest -i sourcemaps`,\n        onCopy: () => {\n          if (!organization || !projectId || !platformKey) {\n            return;\n          }\n\n          trackAnalytics(\n            newOrg\n              ? 'onboarding.source_maps_wizard_button_copy_clicked'\n              : 'project_creation.source_maps_wizard_button_copy_clicked',\n            {\n              project_id: projectId,\n              platform: platformKey,\n              organization,\n            }\n          );\n        },\n        onSelectAndCopy: () => {\n          if (!organization || !projectId || !platformKey) {\n            return;\n          }\n\n          trackAnalytics(\n            newOrg\n              ? 'onboarding.source_maps_wizard_selected_and_copied'\n              : 'project_creation.source_maps_wizard_selected_and_copied',\n            {\n              project_id: projectId,\n              platform: platformKey,\n              organization,\n            }\n          );\n        },\n      },\n    ],\n  };\n}\n","import {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {getUploadSourceMapsStep} from 'sentry/components/onboarding/gettingStartedDoc/utils';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\n\ntype StepProps = {\n  newOrg: boolean;\n  organization: Organization;\n  platformKey: PlatformKey;\n  projectId: string;\n  sentryInitContent: string;\n};\n\nconst performanceOtherConfig = `// Performance Monitoring\ntracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!`;\n\nexport const steps = ({\n  sentryInitContent,\n  ...props\n}: Partial<StepProps> = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct(\n          'Add the Sentry Serverless SDK as a dependency to your [code:package.json]:',\n          {code: <code />}\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'json',\n        code: `\ndependencies: {\n  //...\n  \"@sentry/serverless\": \"^7\"\n}\n        `,\n      },\n    ],\n  },\n  {\n    title: t('Configure SDK for Http Functions'),\n    description: (\n      <p>\n        {tct('Use [code:wrapHttpFunction] to wrap your http function:', {\n          code: <code />,\n        })}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        const Sentry = require(\"@sentry/serverless\");\n\n        Sentry.GCPFunction.init({\n          ${sentryInitContent}\n        });\n\n        exports.helloHttp = Sentry.GCPFunction.wrapHttpFunction((req, res) => {\n          /* Your function code */\n        });\n        `,\n      },\n    ],\n  },\n  {\n    title: t('Configure SDK for Background Functions'),\n    description: (\n      <p>\n        {tct('Use [code:wrapEventFunction] to wrap your background function:', {\n          code: <code />,\n        })}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        const Sentry = require(\"@sentry/serverless\");\n\n        Sentry.GCPFunction.init({\n          ${sentryInitContent}\n        });\n\n        exports.helloEvents = Sentry.GCPFunction.wrapEventFunction(\n          (data, context, callback) => {\n            /* Your function code */\n          }\n        );\n        `,\n      },\n    ],\n  },\n  {\n    title: t('Configure SDK for CloudEvent Functions'),\n    description: (\n      <p>\n        {tct('Use [code:wrapCloudEventFunction] to wrap your CloudEvent function:', {\n          code: <code />,\n        })}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        const Sentry = require(\"@sentry/serverless\");\n\n        Sentry.GCPFunction.init({\n          ${sentryInitContent}\n        });\n\n        exports.helloEvents = Sentry.GCPFunction.wrapCloudEventFunction(\n          (context, callback) => {\n            /* Your function code */\n          }\n        );\n        `,\n      },\n    ],\n  },\n  getUploadSourceMapsStep({\n    guideLink: 'https://docs.sentry.io/platforms/node/guides/express/sourcemaps/',\n    ...props,\n  }),\n  {\n    type: StepType.VERIFY,\n    description: t(\n      \"This snippet contains an intentional error and can be used as a test to make sure that everything's working as expected.\"\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        exports.helloHttp = Sentry.GCPFunction.wrapHttpFunction((req, res) => {\n          throw new Error(\"oh, hello there!\");\n        });\n        `,\n      },\n    ],\n  },\n];\n\nexport function GettingStartedWithGCPFunctions({\n  dsn,\n  organization,\n  newOrg,\n  platformKey,\n  projectId,\n}: ModuleProps) {\n  let sentryInitContent: string[] = [`dsn: \"${dsn}\",`];\n\n  const otherConfigs = [performanceOtherConfig];\n\n  if (otherConfigs.length > 0) {\n    sentryInitContent = sentryInitContent.concat(otherConfigs);\n  }\n\n  return (\n    <Layout\n      steps={steps({\n        sentryInitContent: sentryInitContent.join('\\n'),\n        organization,\n        newOrg,\n        platformKey,\n        projectId,\n      })}\n      newOrg={newOrg}\n      platformKey={platformKey}\n    />\n  );\n}\n\nexport default GettingStartedWithGCPFunctions;\n"],"names":["getUploadSourceMapsStep","_ref","guideLink","organization","platformKey","projectId","newOrg","title","t","description","_jsx","children","tct","ExternalLink","href","configurations","language","code","onCopy","trackAnalytics","project_id","platform","onSelectAndCopy","performanceOtherConfig","steps","sentryInitContent","props","arguments","length","undefined","type","StepType","INSTALL","VERIFY","GettingStartedWithGCPFunctions","dsn","otherConfigs","concat","Layout","join","displayName"],"sourceRoot":""}