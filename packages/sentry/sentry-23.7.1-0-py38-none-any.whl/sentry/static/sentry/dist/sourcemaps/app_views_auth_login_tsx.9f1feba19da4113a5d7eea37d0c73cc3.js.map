{"version":3,"file":"chunks/app_views_auth_login_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/fields/radioField.tsx","webpack:///./app/components/forms/fields/secretField.tsx","webpack:///./app/views/auth/loginForm.tsx","webpack:///./app/views/auth/registerForm.tsx","webpack:///./app/views/auth/ssoForm.tsx","webpack:///./app/views/auth/login.tsx"],"sourcesContent":["import RadioGroup, {RadioGroupProps} from 'sentry/components/forms/controls/radioGroup';\nimport FormField from 'sentry/components/forms/formField';\n\n// XXX(epurkhiser): This is wrong, it should not be inheriting these props\nimport {InputFieldProps, OnEvent} from './inputField';\n\nexport interface RadioFieldProps extends Omit<InputFieldProps, 'type'> {\n  choices?: RadioGroupProps<any>['choices'];\n  orientInline?: RadioGroupProps<any>['orientInline'];\n}\n\nfunction handleChange(\n  id: string,\n  onChange: OnEvent,\n  onBlur: OnEvent,\n  e: React.FormEvent<HTMLInputElement>\n) {\n  onChange(id, e);\n  onBlur(id, e);\n}\n\nfunction RadioField(props: RadioFieldProps) {\n  return (\n    <FormField {...props}>\n      {({id, onChange, onBlur, value, disabled, orientInline, ...fieldProps}) => (\n        // XXX: The label must be present on the role=\"radiogroup\" element. The\n        // `htmlFor` attribute on the Field label does NOT link to the group.\n        <RadioGroup\n          id={id}\n          choices={fieldProps.choices}\n          disabled={disabled}\n          orientInline={orientInline}\n          label={fieldProps.label}\n          value={value === '' ? null : value}\n          onChange={(v, e) => handleChange(v, onChange, onBlur, e)}\n        />\n      )}\n    </FormField>\n  );\n}\n\nexport default RadioField;\n","import InputField, {InputFieldProps} from './inputField';\n\nexport interface SecretFieldProps extends Omit<InputFieldProps, 'type'> {}\n\nfunction SecretField(props: SecretFieldProps) {\n  // XXX: We explicitly give the password field a aria textbox role. This field\n  // does not typically have a role, but for testability reasons it's preferred\n  // for it to have a role. See [0]\n  //\n  // [0]: https://github.com/testing-library/dom-testing-library/issues/567\n  return <InputField {...props} type=\"password\" role=\"textbox\" />;\n}\n\nexport default SecretField;\n","import {useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport SecretField from 'sentry/components/forms/fields/secretField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form from 'sentry/components/forms/form';\nimport Link from 'sentry/components/links/link';\nimport {IconGithub, IconGoogle, IconVsts} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {space} from 'sentry/styles/space';\nimport {AuthConfig} from 'sentry/types';\n\ntype LoginProvidersProps = Partial<\n  Pick<AuthConfig, 'vstsLoginLink' | 'githubLoginLink' | 'googleLoginLink'>\n>;\n\n// TODO(epurkhiser): The abstraction here would be much nicer if we just\n// exposed a configuration object telling us what auth providers there are.\nfunction LoginProviders({\n  vstsLoginLink,\n  githubLoginLink,\n  googleLoginLink,\n}: LoginProvidersProps) {\n  return (\n    <ProviderWrapper>\n      <ProviderHeading>{t('External Account Login')}</ProviderHeading>\n      {googleLoginLink && (\n        <Button size=\"sm\" icon={<IconGoogle size=\"xs\" />} href={googleLoginLink}>\n          {t('Sign in with Google')}\n        </Button>\n      )}\n      {githubLoginLink && (\n        <Button size=\"sm\" icon={<IconGithub size=\"xs\" />} href={githubLoginLink}>\n          {t('Sign in with GitHub')}\n        </Button>\n      )}\n      {vstsLoginLink && (\n        <Button size=\"sm\" icon={<IconVsts size=\"xs\" />} href={vstsLoginLink}>\n          {t('Sign in with Azure DevOps')}\n        </Button>\n      )}\n    </ProviderWrapper>\n  );\n}\n\ntype Props = {\n  authConfig: AuthConfig;\n};\n\nfunction LoginForm({authConfig}: Props) {\n  const [error, setError] = useState('');\n\n  const {githubLoginLink, vstsLoginLink} = authConfig;\n  const hasLoginProvider = !!(githubLoginLink || vstsLoginLink);\n\n  return (\n    <FormWrapper hasLoginProvider={hasLoginProvider}>\n      <Form\n        submitLabel={t('Continue')}\n        apiEndpoint=\"/auth/login/\"\n        apiMethod=\"POST\"\n        onSubmitSuccess={response => {\n          // TODO(epurkhiser): There is likely more that needs to happen to update\n          // the application state after user login.\n\n          ConfigStore.set('user', response.user);\n\n          // TODO(epurkhiser): Reconfigure sentry SDK identity\n\n          browserHistory.push({pathname: response.nextUri});\n        }}\n        onSubmitError={response => {\n          // TODO(epurkhiser): Need much better error handling here\n\n          setError(response.responseJSON.errors.__all__);\n        }}\n        footerStyle={{\n          borderTop: 'none',\n          alignItems: 'center',\n          marginBottom: 0,\n          padding: 0,\n        }}\n        extraButton={\n          <LostPasswordLink to=\"/account/recover/\">\n            {t('Lost your password?')}\n          </LostPasswordLink>\n        }\n      >\n        {error && <Alert type=\"error\">{error}</Alert>}\n        <TextField\n          name=\"username\"\n          placeholder={t('username or email')}\n          label={t('Account')}\n          stacked\n          inline={false}\n          hideControlState\n          required\n        />\n        <SecretField\n          name=\"password\"\n          placeholder={t('password')}\n          label={t('Password')}\n          stacked\n          inline={false}\n          hideControlState\n          required\n        />\n      </Form>\n      {hasLoginProvider && <LoginProviders {...{vstsLoginLink, githubLoginLink}} />}\n    </FormWrapper>\n  );\n}\n\nconst FormWrapper = styled('div')<{hasLoginProvider: boolean}>`\n  display: grid;\n  gap: 60px;\n  grid-template-columns: ${p => (p.hasLoginProvider ? '1fr 0.8fr' : '1fr')};\n`;\n\nconst ProviderHeading = styled('div')`\n  margin: 0;\n  font-size: 15px;\n  font-weight: bold;\n  line-height: 24px;\n`;\n\nconst ProviderWrapper = styled('div')`\n  position: relative;\n  display: grid;\n  grid-auto-rows: max-content;\n  gap: ${space(1.5)};\n\n  &:before {\n    position: absolute;\n    display: block;\n    content: '';\n    top: 0;\n    bottom: 0;\n    left: -30px;\n    border-left: 1px solid ${p => p.theme.border};\n  }\n`;\n\nconst LostPasswordLink = styled(Link)`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default LoginForm;\n","import {useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport RadioBooleanField from 'sentry/components/forms/fields/radioField';\nimport SecretField from 'sentry/components/forms/fields/secretField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form from 'sentry/components/forms/form';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {AuthConfig} from 'sentry/types';\n\ntype Props = {\n  authConfig: AuthConfig;\n};\n\nfunction RegisterForm({authConfig}: Props) {\n  const {hasNewsletter} = authConfig;\n\n  const [error, setError] = useState('');\n\n  return (\n    <Form\n      apiMethod=\"POST\"\n      apiEndpoint=\"/auth/register/\"\n      initialData={{subscribe: true}}\n      submitLabel={t('Continue')}\n      onSubmitSuccess={response => {\n        ConfigStore.set('user', response.user);\n        browserHistory.push({pathname: response.nextUri});\n      }}\n      onSubmitError={response => {\n        setError(response.responseJSON.detail);\n      }}\n      extraButton={\n        <PrivacyPolicyLink href=\"https://sentry.io/privacy/\">\n          {t('Privacy Policy')}\n        </PrivacyPolicyLink>\n      }\n    >\n      {error && <Alert type=\"error\">{error}</Alert>}\n      <TextField\n        name=\"name\"\n        placeholder={t('Jane Bloggs')}\n        label={t('Name')}\n        stacked\n        inline={false}\n        required\n      />\n      <TextField\n        name=\"username\"\n        placeholder={t('you@example.com')}\n        label={t('Email')}\n        stacked\n        inline={false}\n        required\n      />\n      <SecretField\n        name=\"password\"\n        placeholder={t('something super secret')}\n        label={t('Password')}\n        stacked\n        inline={false}\n        required\n      />\n      {hasNewsletter && (\n        <RadioBooleanField\n          name=\"subscribe\"\n          choices={[\n            ['true', t('Yes, I would like to receive updates via email')],\n            ['flase', t(\"No, I'd prefer not to receive these updates\")],\n          ]}\n          help={tct(\n            `We'd love to keep you updated via email with product and feature\n           announcements, promotions, educational materials, and events. Our\n           updates focus on relevant information, and we'll never sell your data\n           to third parties. See our [link] for more details.`,\n            {\n              link: <a href=\"https://sentry.io/privacy/\">Privacy Policy</a>,\n            }\n          )}\n          stacked\n          inline={false}\n        />\n      )}\n    </Form>\n  );\n}\n\nconst PrivacyPolicyLink = styled(ExternalLink)`\n  color: ${p => p.theme.gray300};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default RegisterForm;\n","import {useState} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {Alert} from 'sentry/components/alert';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form from 'sentry/components/forms/form';\nimport {t, tct} from 'sentry/locale';\nimport {AuthConfig} from 'sentry/types';\n\ntype Props = {\n  authConfig: AuthConfig;\n};\n\nfunction SsoForm({authConfig}: Props) {\n  const [error, setError] = useState('');\n\n  const {serverHostname} = authConfig;\n\n  return (\n    <Form\n      apiMethod=\"POST\"\n      apiEndpoint=\"/auth/sso-locate/\"\n      onSubmitSuccess={response => {\n        browserHistory.push({pathname: response.nextUri});\n      }}\n      onSubmitError={response => {\n        setError(response.responseJSON.detail);\n      }}\n      submitLabel={t('Continue')}\n      footerStyle={{\n        borderTop: 'none',\n        alignItems: 'center',\n        marginBottom: 0,\n        padding: 0,\n      }}\n    >\n      {error && <Alert type=\"error\">{error}</Alert>}\n      <TextField\n        name=\"organization\"\n        placeholder=\"acme\"\n        label={t('Organization ID')}\n        required\n        stacked\n        inline={false}\n        hideControlState\n        help={tct('Your ID is the slug after the hostname. e.g. [example] is [slug].', {\n          slug: <strong>acme</strong>,\n          example: <SlugExample slug=\"acme\" hostname={serverHostname} />,\n        })}\n      />\n    </Form>\n  );\n}\n\ntype SlugExampleProps = {\n  hostname: string;\n  slug: string;\n};\n\nfunction SlugExample({hostname, slug}: SlugExampleProps) {\n  return (\n    <code>\n      {hostname}/<strong>{slug}</strong>\n    </code>\n  );\n}\n\nexport default SsoForm;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {AuthConfig} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\nimport LoginForm from './loginForm';\nimport RegisterForm from './registerForm';\nimport SsoForm from './ssoForm';\n\nconst FORM_COMPONENTS = {\n  login: LoginForm,\n  register: RegisterForm,\n  sso: SsoForm,\n} as const;\n\ntype ActiveTab = keyof typeof FORM_COMPONENTS;\n\ntype TabConfig = [key: ActiveTab, label: string, disabled?: boolean];\n\ntype Props = RouteComponentProps<{orgId?: string}, {}> & {\n  api: Client;\n};\n\ntype State = {\n  activeTab: ActiveTab;\n  authConfig: null | AuthConfig;\n  error: null | boolean;\n  loading: boolean;\n};\n\nclass Login extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: null,\n    activeTab: 'login',\n    authConfig: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  handleSetTab = (activeTab: ActiveTab, event: React.MouseEvent) => {\n    this.setState({activeTab});\n    event.preventDefault();\n  };\n\n  fetchData = async () => {\n    const {api} = this.props;\n    try {\n      const response = await api.requestPromise('/auth/config/');\n\n      const {vsts_login_link, github_login_link, google_login_link, ...config} = response;\n      const authConfig = {\n        ...config,\n        vstsLoginLink: vsts_login_link,\n        githubLoginLink: github_login_link,\n        googleLoginLink: google_login_link,\n      };\n\n      this.setState({authConfig});\n    } catch (e) {\n      this.setState({error: true});\n    }\n\n    this.setState({loading: false});\n  };\n\n  get hasAuthProviders() {\n    if (this.state.authConfig === null) {\n      return false;\n    }\n\n    const {githubLoginLink, googleLoginLink, vstsLoginLink} = this.state.authConfig;\n    return !!(githubLoginLink || vstsLoginLink || googleLoginLink);\n  }\n\n  render() {\n    const {loading, error, activeTab, authConfig} = this.state;\n\n    const FormComponent = FORM_COMPONENTS[activeTab];\n\n    const tabs: TabConfig[] = [\n      ['login', t('Login')],\n      ['sso', t('Single Sign-On')],\n      ['register', t('Register'), !authConfig?.canRegister],\n    ];\n\n    const renderTab = ([key, label, disabled]: TabConfig) =>\n      !disabled && (\n        <li key={key} className={activeTab === key ? 'active' : ''}>\n          <a href=\"#\" onClick={e => this.handleSetTab(key, e)}>\n            {label}\n          </a>\n        </li>\n      );\n\n    const {orgId} = this.props.params;\n\n    return (\n      <Fragment>\n        <Header>\n          <Heading>{t('Sign in to continue')}</Heading>\n          <AuthNavTabs>{tabs.map(renderTab)}</AuthNavTabs>\n        </Header>\n        {loading && <LoadingIndicator />}\n\n        {error && (\n          <StyledLoadingError\n            message={t('Unable to load authentication configuration')}\n            onRetry={this.fetchData}\n          />\n        )}\n        {!loading && authConfig !== null && !error && (\n          <FormWrapper hasAuthProviders={this.hasAuthProviders}>\n            {orgId !== undefined && (\n              <Alert\n                type=\"warning\"\n                trailingItems={\n                  <Button to=\"/\" size=\"xs\">\n                    Reload\n                  </Button>\n                }\n              >\n                {tct(\n                  \"Experimental SPA mode does not currently support SSO style login. To develop against the [org] you'll need to copy your production session cookie.\",\n                  {org: this.props.params.orgId}\n                )}\n              </Alert>\n            )}\n            <FormComponent {...{authConfig}} />\n          </FormWrapper>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst StyledLoadingError = styled(LoadingError)`\n  margin: ${space(2)};\n`;\n\nconst Header = styled('div')`\n  border-bottom: 1px solid ${p => p.theme.border};\n  padding: 20px 40px 0;\n`;\n\nconst Heading = styled('h3')`\n  font-size: 24px;\n  margin: 0 0 20px 0;\n`;\n\nconst AuthNavTabs = styled(NavTabs)`\n  margin: 0;\n`;\n\nconst FormWrapper = styled('div')<{hasAuthProviders: boolean}>`\n  padding: 35px;\n  width: ${p => (p.hasAuthProviders ? '600px' : '490px')};\n`;\n\nexport default withApi(Login);\n"],"names":["RadioField","props","_jsx","FormField","children","_ref","id","onChange","onBlur","value","disabled","orientInline","fieldProps","RadioGroup","choices","label","v","e","handleChange","displayName","SecretField","InputField","type","role","LoginProviders","vstsLoginLink","githubLoginLink","googleLoginLink","_jsxs","ProviderWrapper","ProviderHeading","t","Button","size","icon","IconGoogle","href","IconGithub","IconVsts","LoginForm","_ref2","authConfig","error","setError","useState","hasLoginProvider","FormWrapper","Form","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","response","ConfigStore","set","user","browserHistory","push","pathname","nextUri","onSubmitError","responseJSON","errors","__all__","footerStyle","borderTop","alignItems","marginBottom","padding","extraButton","LostPasswordLink","to","Alert","TextField","name","placeholder","stacked","inline","hideControlState","required","_styled","target","p","styles","space","theme","border","Link","gray300","fontSizeMedium","textColor","RegisterForm","hasNewsletter","initialData","subscribe","detail","PrivacyPolicyLink","RadioBooleanField","help","tct","link","ExternalLink","SsoForm","serverHostname","slug","example","SlugExample","hostname","FORM_COMPONENTS","login","register","sso","Login","Component","constructor","arguments","_defineProperty","loading","activeTab","event","this","setState","preventDefault","async","api","requestPromise","vsts_login_link","github_login_link","google_login_link","config","componentDidMount","fetchData","hasAuthProviders","state","render","FormComponent","tabs","canRegister","orgId","params","Fragment","Header","Heading","AuthNavTabs","map","key","className","onClick","handleSetTab","LoadingIndicator","StyledLoadingError","message","onRetry","undefined","trailingItems","org","LoadingError","NavTabs","withApi"],"sourceRoot":""}