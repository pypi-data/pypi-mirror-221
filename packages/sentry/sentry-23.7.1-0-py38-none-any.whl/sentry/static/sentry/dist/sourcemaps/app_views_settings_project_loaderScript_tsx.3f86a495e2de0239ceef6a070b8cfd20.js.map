{"version":3,"file":"chunks/app_views_settings_project_loaderScript_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"skCAqBO,SAASA,EAAmBC,GAAgC,IAA/B,QAACC,GAA4BD,EAC/D,MAAME,GAAeC,EAAAA,EAAAA,KACfC,EAAe,aAAYF,EAAaG,QAAQJ,EAAQI,cACvDC,EAAoBC,IAAyBC,EAAAA,EAAAA,UAAuB,KAGzEC,KAAMC,EAAW,UACjBC,EAAS,MACTC,EACAC,QAASC,IACPC,EAAAA,EAAAA,IAA0B,CAACX,GAAc,CAC3CY,UAAW,IAGPC,GAAyBC,EAAAA,EAAAA,cAC5BC,IACC,MAAMC,EAAuBd,EAAmBe,WAC9CC,GAAOA,EAAIC,KAAOJ,EAAWI,KAEzBC,EACJJ,GAAwB,EACpB,IAAId,GAAoBmB,KAAI,CAACC,EAAmBC,IACvCA,IAAUP,EAAuBD,EAAaO,IAEvD,IAAIpB,EAAoBa,GAE9BZ,EAAsBiB,EAAsB,GAE9C,CAAClB,IAGH,OACEsB,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,IAACC,EAAAA,EAAkB,CAACC,OAAOC,EAAAA,EAAAA,GAAE,oBAE7BH,EAAAA,EAAAA,IAACI,EAAAA,EAAS,CAAAL,UACPM,EAAAA,EAAAA,IACC,0WACA,CACEC,UACEN,EAAAA,EAAAA,IAACO,EAAAA,EAAY,CAACC,KAAK,gEAErBC,gBACET,EAAAA,EAAAA,IAACU,EAAAA,EAAI,CACHC,GAAK,aAAYxC,EAAaG,iBAAiBJ,EAAQI,mBAOhEM,IAAaoB,EAAAA,EAAAA,IAACY,EAAAA,EAAgB,MAC5B/B,IACDmB,EAAAA,EAAAA,IAACa,EAAAA,EAAY,CACXC,SAASX,EAAAA,EAAAA,GAAE,gCACXY,QAAShC,KAGXH,IAAcC,IAAUF,GAAaqC,SACrChB,EAAAA,EAAAA,IAACiB,EAAAA,EAAY,CAACf,OAAOC,EAAAA,EAAAA,GAAE,gDAGxBxB,GAAae,KAAIH,IAChB,MAAM2B,EACJ3C,EAAmB4C,MAAKC,GAAcA,EAAW5B,KAAOD,EAAIC,MAAOD,EACrE,OACES,EAAAA,EAAAA,IAACqB,EAAU,CAETlD,aAAcA,EACdD,QAASA,EACTkB,WAAY8B,EACZI,mBAAoBpC,GAJfgC,EAAU1B,GAKf,MAKZ,CAEA,SAAS6B,EAAUE,GAUhB,IAViB,aAClBpD,EAAY,QACZD,EAAO,WACPkB,EAAU,mBACVkC,GAMDC,EACC,OACE1B,EAAAA,EAAAA,IAAC2B,EAAAA,EAAK,CAAAzB,SAAA,EACJF,EAAAA,EAAAA,IAAC4B,EAAAA,EAAW,CAACC,YAAU,EAAA3B,SAAA,EACpBM,EAAAA,EAAAA,IAAI,qBAAsB,CAACsB,KAAMvC,EAAWuC,QAE7C3B,EAAAA,EAAAA,IAAC4B,EAAAA,GAAU,CACTjB,GAAK,aAAYxC,EAAaG,iBAAiBJ,EAAQI,aAAac,EAAWI,MAAMO,UAEpFI,EAAAA,EAAAA,GAAE,0BAGPN,EAAAA,EAAAA,IAACgC,EAAAA,EAAS,CAAA9B,SAAA,EACRC,EAAAA,EAAAA,IAAC8B,EAAAA,EAAU,CAACC,KAAK,OAAOC,UAAQ,EAAAjC,UAC7BI,EAAAA,EAAAA,GAAE,0EAGLH,EAAAA,EAAAA,IAACiC,EAAAA,EAAc,CACbC,QAAS/D,EAAaG,KACtB6D,MAAO/C,EAAWI,GAClBtB,QAASA,EACTQ,KAAMU,EACNgD,WAAYd,SAKtB,CApHgBtD,EAAmBqE,YAAA,sBA+E1BhB,EAAUgB,YAAA,aAuCnB,S","sources":["webpack:///./app/views/settings/project/loaderScript.tsx"],"sourcesContent":["import {Fragment, useCallback, useState} from 'react';\n\nimport {LinkButton} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelAlert from 'sentry/components/panels/panelAlert';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {useApiQuery} from 'sentry/utils/queryClient';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {LoaderSettings} from 'sentry/views/settings/project/projectKeys/details/loaderSettings';\nimport {ProjectKey} from 'sentry/views/settings/project/projectKeys/types';\n\nexport function ProjectLoaderScript({project}: {project: Project}) {\n  const organization = useOrganization();\n  const apiEndpoint = `/projects/${organization.slug}/${project.slug}/keys/`;\n  const [updatedProjectKeys, setUpdatedProjectKeys] = useState<ProjectKey[]>([]);\n\n  const {\n    data: projectKeys,\n    isLoading,\n    error,\n    refetch: refetchProjectKeys,\n  } = useApiQuery<ProjectKey[]>([apiEndpoint], {\n    staleTime: 0,\n  });\n\n  const handleUpdateProjectKey = useCallback(\n    (projectKey: ProjectKey) => {\n      const existingProjectIndex = updatedProjectKeys.findIndex(\n        key => key.id === projectKey.id\n      );\n      const newUpdatedProjectKeys =\n        existingProjectIndex > -1\n          ? [...updatedProjectKeys].map((updatedProjectKey, index) => {\n              return index === existingProjectIndex ? projectKey : updatedProjectKey;\n            })\n          : [...updatedProjectKeys, projectKey];\n\n      setUpdatedProjectKeys(newUpdatedProjectKeys);\n    },\n    [updatedProjectKeys]\n  );\n\n  return (\n    <Fragment>\n      <SettingsPageHeader title={t('Loader Script')} />\n\n      <TextBlock>\n        {tct(\n          'The Loader Script is the easiest way to initialize the Sentry SDK. The Loader Script automatically keeps your Sentry SDK up to date and offers configuration for different Sentry features. [docsLink:Learn more about the Loader Script]. Note: The Loader Script is bound to a Client Key (DSN), to create a new Script, go to the [clientKeysLink:Client Keys page].',\n          {\n            docsLink: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/javascript/install/loader/\" />\n            ),\n            clientKeysLink: (\n              <Link\n                to={`/settings/${organization.slug}/projects/${project.slug}/keys/`}\n              />\n            ),\n          }\n        )}\n      </TextBlock>\n\n      {isLoading && <LoadingIndicator />}\n      {!!error && (\n        <LoadingError\n          message={t('Failed to load project keys.')}\n          onRetry={refetchProjectKeys}\n        />\n      )}\n      {!isLoading && !error && !projectKeys?.length && (\n        <EmptyMessage title={t('There are no keys active for this project.')} />\n      )}\n\n      {projectKeys?.map(key => {\n        const actualKey =\n          updatedProjectKeys.find(updatedKey => updatedKey.id === key.id) ?? key;\n        return (\n          <LoaderItem\n            key={actualKey.id}\n            organization={organization}\n            project={project}\n            projectKey={actualKey}\n            onUpdateProjectKey={handleUpdateProjectKey}\n          />\n        );\n      })}\n    </Fragment>\n  );\n}\n\nfunction LoaderItem({\n  organization,\n  project,\n  projectKey,\n  onUpdateProjectKey,\n}: {\n  onUpdateProjectKey: (projectKey: ProjectKey) => void;\n  organization: Organization;\n  project: Project;\n  projectKey: ProjectKey;\n}) {\n  return (\n    <Panel>\n      <PanelHeader hasButtons>\n        {tct('Client Key: [name]', {name: projectKey.name})}\n\n        <LinkButton\n          to={`/settings/${organization.slug}/projects/${project.slug}/keys/${projectKey.id}/`}\n        >\n          {t('View Key Details')}\n        </LinkButton>\n      </PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"info\" showIcon>\n          {t('Note that it can take a few minutes until changed options are live.')}\n        </PanelAlert>\n\n        <LoaderSettings\n          orgSlug={organization.slug}\n          keyId={projectKey.id}\n          project={project}\n          data={projectKey}\n          updateData={onUpdateProjectKey}\n        />\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default ProjectLoaderScript;\n"],"names":["ProjectLoaderScript","_ref","project","organization","useOrganization","apiEndpoint","slug","updatedProjectKeys","setUpdatedProjectKeys","useState","data","projectKeys","isLoading","error","refetch","refetchProjectKeys","useApiQuery","staleTime","handleUpdateProjectKey","useCallback","projectKey","existingProjectIndex","findIndex","key","id","newUpdatedProjectKeys","map","updatedProjectKey","index","_jsxs","Fragment","children","_jsx","SettingsPageHeader","title","t","TextBlock","tct","docsLink","ExternalLink","href","clientKeysLink","Link","to","LoadingIndicator","LoadingError","message","onRetry","length","EmptyMessage","actualKey","find","updatedKey","LoaderItem","onUpdateProjectKey","_ref2","Panel","PanelHeader","hasButtons","name","LinkButton","PanelBody","PanelAlert","type","showIcon","LoaderSettings","orgSlug","keyId","updateData","displayName"],"sourceRoot":""}