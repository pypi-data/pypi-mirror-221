{"version":3,"file":"chunks/app_views_profiling_profilesProvider_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/profiling/profilingBreadcrumbs.tsx","webpack:///./app/utils/profiling/guards/profile.tsx","webpack:///./app/components/profiling/profileHeader.tsx","webpack:///./app/views/profiling/profilesProvider.tsx","webpack:///./app/utils/profiling/hooks/useSentryEvent.tsx"],"sourcesContent":["import {useMemo} from 'react';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport _Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {\n  generateProfileFlamechartRouteWithQuery,\n  generateProfileSummaryRouteWithQuery,\n  generateProfilingRouteWithQuery,\n} from 'sentry/utils/profiling/routes';\n\nexport interface ProfilingBreadcrumbsProps {\n  organization: Organization;\n  trails: Trail[];\n}\n\nfunction ProfilingBreadcrumbs({organization, trails}: ProfilingBreadcrumbsProps) {\n  const crumbs = useMemo(\n    () => trails.map(trail => trailToCrumb(trail, {organization})),\n    [organization, trails]\n  );\n  return <_Breadcrumbs crumbs={crumbs} />;\n}\n\nfunction trailToCrumb(\n  trail: Trail,\n  {\n    organization,\n  }: {\n    organization: Organization;\n  }\n): Crumb {\n  switch (trail.type) {\n    case 'landing': {\n      return {\n        to: generateProfilingRouteWithQuery({\n          // cursor and query are not used in the landing page\n          // and break the API call as the qs gets forwarded to the API\n          query: omit(trail.payload.query, ['cursor', 'query']),\n          orgSlug: organization.slug,\n        }),\n        label: t('Profiling'),\n        preservePageFilters: true,\n      };\n    }\n    case 'profile summary': {\n      return {\n        to: generateProfileSummaryRouteWithQuery({\n          // cursor and query are not used in the summary page\n          // and break the API call as the qs gets forwarded to the API\n          query: omit(trail.payload.query, ['cursor', 'query']),\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          transaction: trail.payload.transaction,\n        }),\n        label: t('Profile Summary'),\n        preservePageFilters: true,\n      };\n    }\n    case 'flamechart': {\n      return {\n        to: generateProfileFlamechartRouteWithQuery({\n          query: trail.payload.query,\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          profileId: trail.payload.profileId,\n        }),\n        label: trail.payload.transaction,\n        preservePageFilters: true,\n      };\n    }\n    default:\n      throw new Error(`Unknown breadcrumb type: ${JSON.stringify(trail)}`);\n  }\n}\n\ntype ProfilingTrail = {\n  payload: {\n    query: Location['query'];\n  };\n  type: 'landing';\n};\n\ntype ProfileSummaryTrail = {\n  payload: {\n    projectSlug: Project['slug'];\n    query: Location['query'];\n    transaction: string;\n  };\n  type: 'profile summary';\n};\n\ntype FlamegraphTrail = {\n  payload: {\n    profileId: string;\n    projectSlug: string;\n    query: Location['query'];\n    transaction: string;\n  };\n  type: 'flamechart';\n};\n\ntype Trail = ProfilingTrail | ProfileSummaryTrail | FlamegraphTrail;\n\nexport {ProfilingBreadcrumbs};\n","export function isSchema(input: any): input is Profiling.Schema {\n  return (\n    typeof input === 'object' &&\n    // 'metadata' in input &&\n    'profiles' in input &&\n    Array.isArray(input.profiles) &&\n    'shared' in input\n  );\n}\n\nexport function isEventedProfile(profile: any): profile is Profiling.EventedProfile {\n  return 'type' in profile && profile.type === 'evented';\n}\n\nexport function isSampledProfile(profile: any): profile is Profiling.SampledProfile {\n  return 'type' in profile && profile.type === 'sampled';\n}\n\nexport function isJSProfile(profile: any): profile is JSSelfProfiling.Trace {\n  return !('type' in profile) && Array.isArray(profile.resources);\n}\n\nexport function isSentrySampledProfile(\n  profile: any\n): profile is Profiling.SentrySampledProfile {\n  return (\n    'profile' in profile &&\n    'samples' in profile.profile &&\n    'stacks' in profile.profile &&\n    'frames' in profile.profile\n  );\n}\n","import {useCallback, useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {\n  ProfilingBreadcrumbs,\n  ProfilingBreadcrumbsProps,\n} from 'sentry/components/profiling/profilingBreadcrumbs';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Event} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {isSchema, isSentrySampledProfile} from 'sentry/utils/profiling/guards/profile';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useProfiles} from 'sentry/views/profiling/profilesProvider';\n\nfunction getTransactionName(input: Profiling.ProfileInput): string {\n  if (isSchema(input)) {\n    return input.metadata.transactionName;\n  }\n  if (isSentrySampledProfile(input)) {\n    return input.transaction.name || t('Unknown Transaction');\n  }\n\n  return t('Unknown Transaction');\n}\n\ninterface ProfileHeaderProps {\n  eventId: string;\n  projectId: string;\n  transaction: Event | null;\n}\n\nfunction ProfileHeader({transaction, projectId, eventId}: ProfileHeaderProps) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const profiles = useProfiles();\n\n  const transactionName =\n    profiles.type === 'resolved' ? getTransactionName(profiles.data) : '';\n  const profileId = eventId ?? '';\n  const projectSlug = projectId ?? '';\n\n  const transactionTarget = transaction?.id\n    ? getTransactionDetailsUrl(organization.slug, `${projectSlug}:${transaction.id}`)\n    : null;\n\n  const handleGoToTransaction = useCallback(() => {\n    trackAnalytics('profiling_views.go_to_transaction', {\n      organization,\n      source: 'transaction_details',\n    });\n  }, [organization]);\n\n  const breadcrumbTrails: ProfilingBreadcrumbsProps['trails'] = useMemo(() => {\n    return [\n      {type: 'landing', payload: {query: location.query}},\n      {\n        type: 'profile summary',\n        payload: {\n          projectSlug,\n          transaction: transactionName,\n          query: location.query,\n        },\n      },\n      {\n        type: 'flamechart',\n        payload: {\n          transaction: transactionName,\n          profileId,\n          projectSlug,\n          query: location.query,\n        },\n      },\n    ];\n  }, [location, projectSlug, transactionName, profileId]);\n\n  return (\n    <SmallerLayoutHeader>\n      <SmallerHeaderContent>\n        <SmallerProfilingBreadcrumbsWrapper>\n          <ProfilingBreadcrumbs organization={organization} trails={breadcrumbTrails} />\n        </SmallerProfilingBreadcrumbsWrapper>\n      </SmallerHeaderContent>\n      <Layout.HeaderActions>\n        {transactionTarget && (\n          <Button size=\"sm\" onClick={handleGoToTransaction} to={transactionTarget}>\n            {t('Go to Transaction')}\n          </Button>\n        )}\n      </Layout.HeaderActions>\n    </SmallerLayoutHeader>\n  );\n}\n\nconst SmallerHeaderContent = styled(Layout.HeaderContent)`\n  margin-bottom: ${space(1.5)};\n`;\n\nconst SmallerProfilingBreadcrumbsWrapper = styled('div')`\n  nav {\n    padding-bottom: ${space(1)};\n  }\n`;\n\nconst SmallerLayoutHeader = styled(Layout.Header)`\n  padding: ${space(1)} ${space(2)} ${space(0)} ${space(2)} !important;\n`;\n\nexport {ProfileHeader};\n","import {createContext, useContext, useEffect, useState} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {Client} from 'sentry/api';\nimport {ProfileHeader} from 'sentry/components/profiling/profileHeader';\nimport {t} from 'sentry/locale';\nimport type {EventTransaction, Organization, Project} from 'sentry/types';\nimport {RequestState} from 'sentry/types/core';\nimport {isSchema, isSentrySampledProfile} from 'sentry/utils/profiling/guards/profile';\nimport {useSentryEvent} from 'sentry/utils/profiling/hooks/useSentryEvent';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useParams} from 'sentry/utils/useParams';\n\nfunction fetchFlamegraphs(\n  api: Client,\n  eventId: string,\n  projectSlug: Project['slug'],\n  orgSlug: Organization['slug']\n): Promise<Profiling.ProfileInput> {\n  return api\n    .requestPromise(\n      `/projects/${orgSlug}/${projectSlug}/profiling/profiles/${eventId}/`,\n      {\n        method: 'GET',\n        includeAllArgs: true,\n      }\n    )\n    .then(([data]) => data);\n}\n\nfunction getTransactionId(input: Profiling.ProfileInput): string | null {\n  if (isSchema(input)) {\n    return input.metadata.transactionID;\n  }\n  if (isSentrySampledProfile(input)) {\n    return input.transaction.id;\n  }\n  return null;\n}\n\ninterface FlamegraphViewProps {\n  children: React.ReactNode;\n}\n\ntype ProfileProviderValue = RequestState<Profiling.ProfileInput>;\ntype SetProfileProviderValue = React.Dispatch<\n  React.SetStateAction<RequestState<Profiling.ProfileInput>>\n>;\nexport const ProfileContext = createContext<ProfileProviderValue | null>(null);\nconst SetProfileProvider = createContext<SetProfileProviderValue | null>(null);\n\nexport function useProfiles() {\n  const context = useContext(ProfileContext);\n  if (!context) {\n    throw new Error('useProfiles was called outside of ProfileProvider');\n  }\n  return context;\n}\n\nexport function useSetProfiles() {\n  const context = useContext(SetProfileProvider);\n  if (!context) {\n    throw new Error('useSetProfiles was called outside of SetProfileProvider');\n  }\n  return context;\n}\n\nexport const ProfileTransactionContext =\n  createContext<RequestState<EventTransaction | null> | null>(null);\n\nexport function useProfileTransaction() {\n  const context = useContext(ProfileTransactionContext);\n  if (!context) {\n    throw new Error(\n      'useProfileTransaction was called outside of ProfileTransactionContext'\n    );\n  }\n  return context;\n}\n\nfunction ProfilesAndTransactionProvider(props: FlamegraphViewProps): React.ReactElement {\n  const organization = useOrganization();\n  const params = useParams();\n\n  const [profiles, setProfiles] = useState<RequestState<Profiling.ProfileInput>>({\n    type: 'initial',\n  });\n\n  const profileTransaction = useSentryEvent<EventTransaction>(\n    organization.slug,\n    params.projectId,\n    profiles.type === 'resolved' ? getTransactionId(profiles.data) : null\n  );\n\n  return (\n    <ProfilesProvider\n      onUpdateProfiles={setProfiles}\n      orgSlug={organization.slug}\n      profileId={params.eventId}\n      projectSlug={params.projectId}\n    >\n      <SetProfileProvider.Provider value={setProfiles}>\n        <ProfileTransactionContext.Provider value={profileTransaction}>\n          <ProfileHeader\n            eventId={params.eventId}\n            projectId={params.projectId}\n            transaction={\n              profileTransaction.type === 'resolved' ? profileTransaction.data : null\n            }\n          />\n          {props.children}\n        </ProfileTransactionContext.Provider>\n      </SetProfileProvider.Provider>\n    </ProfilesProvider>\n  );\n}\n\ninterface ProfilesProviderProps {\n  children: React.ReactNode;\n  orgSlug: Organization['slug'];\n  profileId: string;\n  projectSlug: Project['slug'];\n  onUpdateProfiles?: (any) => void;\n}\n\nexport function ProfilesProvider({\n  children,\n  onUpdateProfiles,\n  orgSlug,\n  projectSlug,\n  profileId,\n}: ProfilesProviderProps) {\n  const api = useApi();\n\n  const [profiles, setProfiles] = useState<RequestState<Profiling.ProfileInput>>({\n    type: 'initial',\n  });\n\n  useEffect(() => {\n    if (!profileId || !projectSlug || !orgSlug) {\n      return undefined;\n    }\n\n    setProfiles({type: 'loading'});\n\n    fetchFlamegraphs(api, profileId, projectSlug, orgSlug)\n      .then(p => {\n        setProfiles({type: 'resolved', data: p});\n        onUpdateProfiles?.({type: 'resolved', data: p});\n      })\n      .catch(err => {\n        // XXX: our API client mock implementation does not mimick the real\n        // implementation, so we need to check for an empty object here. #sad\n        const isEmptyObject = err.toString() === '[object Object]';\n        const message = isEmptyObject\n          ? t('Error: Unable to load profiles')\n          : err.toString();\n\n        setProfiles({type: 'errored', error: message});\n        onUpdateProfiles?.({type: 'errored', error: message});\n        Sentry.captureException(err);\n      });\n\n    return () => {\n      api.clear();\n    };\n  }, [api, onUpdateProfiles, orgSlug, projectSlug, profileId]);\n\n  return <ProfileContext.Provider value={profiles}>{children}</ProfileContext.Provider>;\n}\n\nexport default ProfilesAndTransactionProvider;\n","import {useEffect, useState} from 'react';\n\nimport {Client} from 'sentry/api';\nimport {Event, RequestState} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\n\nfunction fetchSentryEvent<T extends Event>(\n  api: Client,\n  organizationSlug: string,\n  projectSlug: string,\n  eventId: string\n): Promise<T> {\n  return api.requestPromise(\n    `/projects/${organizationSlug}/${projectSlug}/events/${eventId}/`\n  );\n}\n\nexport function useSentryEvent<T extends Event>(\n  organizationSlug: string,\n  projectSlug: string,\n  eventId: string | null\n): RequestState<T> {\n  const api = useApi();\n  const [requestState, setRequestState] = useState<RequestState<T>>({\n    type: 'initial',\n  });\n\n  useEffect(() => {\n    if (eventId === null) {\n      return undefined;\n    }\n\n    setRequestState({type: 'loading'});\n\n    fetchSentryEvent<T>(api, organizationSlug, projectSlug, eventId)\n      .then(event => {\n        setRequestState({\n          type: 'resolved',\n          data: event,\n        });\n      })\n      .catch(err => {\n        setRequestState({type: 'errored', error: err});\n      });\n\n    return () => {\n      api.clear();\n    };\n  }, [api, organizationSlug, projectSlug, eventId]);\n\n  return requestState;\n}\n"],"names":["ProfilingBreadcrumbs","_ref","organization","trails","crumbs","useMemo","map","trail","_ref2","type","to","generateProfilingRouteWithQuery","query","omit","payload","orgSlug","slug","label","t","preservePageFilters","generateProfileSummaryRouteWithQuery","projectSlug","transaction","generateProfileFlamechartRouteWithQuery","profileId","Error","JSON","stringify","trailToCrumb","_jsx","_Breadcrumbs","displayName","isSchema","input","Array","isArray","profiles","isEventedProfile","profile","isSampledProfile","isJSProfile","resources","isSentrySampledProfile","ProfileHeader","projectId","eventId","location","useLocation","useOrganization","useProfiles","transactionName","data","metadata","name","transactionTarget","id","getTransactionDetailsUrl","handleGoToTransaction","useCallback","trackAnalytics","source","breadcrumbTrails","_jsxs","SmallerLayoutHeader","children","SmallerHeaderContent","SmallerProfilingBreadcrumbsWrapper","Layout","Button","size","onClick","_styled","target","space","ProfileContext","createContext","SetProfileProvider","context","useContext","useSetProfiles","ProfileTransactionContext","useProfileTransaction","ProfilesAndTransactionProvider","props","params","useParams","setProfiles","useState","profileTransaction","organizationSlug","api","useApi","requestState","setRequestState","useEffect","requestPromise","fetchSentryEvent","then","event","catch","err","error","clear","useSentryEvent","transactionID","ProfilesProvider","onUpdateProfiles","Provider","value","method","includeAllArgs","fetchFlamegraphs","p","message","toString","Sentry"],"sourceRoot":""}