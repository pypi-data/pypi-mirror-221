{"version":3,"file":"chunks/app_components_events_eventCustomPerformanceMetrics_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/eventCustomPerformanceMetrics.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport {DropdownMenu} from 'sentry/components/dropdownMenu';\nimport Panel from 'sentry/components/panels/panel';\nimport {IconEllipsis} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  DURATION_UNITS,\n  FIELD_FORMATTERS,\n  PERCENTAGE_UNITS,\n  SIZE_UNITS,\n} from 'sentry/utils/discover/fieldRenderers';\nimport {isCustomMeasurement} from 'sentry/views/dashboards/utils';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nexport enum EventDetailPageSource {\n  PERFORMANCE = 'performance',\n  DISCOVER = 'discover',\n}\n\ntype Props = {\n  event: Event;\n  location: Location;\n  organization: Organization;\n  isHomepage?: boolean;\n  source?: EventDetailPageSource;\n};\n\nfunction isNotMarkMeasurement(field: string) {\n  return !field.startsWith('mark.');\n}\n\nexport default function EventCustomPerformanceMetrics({\n  event,\n  location,\n  organization,\n  source,\n  isHomepage,\n}: Props) {\n  const measurementNames = Object.keys(event.measurements ?? {})\n    .filter(name => isCustomMeasurement(`measurements.${name}`))\n    .filter(isNotMarkMeasurement)\n    .sort();\n\n  if (measurementNames.length === 0) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <SectionHeading>{t('Custom Performance Metrics')}</SectionHeading>\n      <Measurements>\n        {measurementNames.map(name => {\n          return (\n            <EventCustomPerformanceMetric\n              key={name}\n              event={event}\n              name={name}\n              location={location}\n              organization={organization}\n              source={source}\n              isHomepage={isHomepage}\n            />\n          );\n        })}\n      </Measurements>\n    </Container>\n  );\n}\n\ntype EventCustomPerformanceMetricProps = Props & {\n  name: string;\n};\n\nexport function getFieldTypeFromUnit(unit) {\n  if (unit) {\n    if (DURATION_UNITS[unit]) {\n      return 'duration';\n    }\n    if (SIZE_UNITS[unit]) {\n      return 'size';\n    }\n    if (PERCENTAGE_UNITS.includes(unit)) {\n      return 'percentage';\n    }\n    if (unit === 'none') {\n      return 'integer';\n    }\n    return 'string';\n  }\n  return 'number';\n}\n\nfunction EventCustomPerformanceMetric({\n  event,\n  name,\n  location,\n  organization,\n  source,\n  isHomepage,\n}: EventCustomPerformanceMetricProps) {\n  const {value, unit} = event.measurements?.[name] ?? {};\n  if (value === null) {\n    return null;\n  }\n\n  const fieldType = getFieldTypeFromUnit(unit);\n  const renderValue = fieldType === 'string' ? `${value} ${unit}` : value;\n  const rendered = fieldType\n    ? FIELD_FORMATTERS[fieldType].renderFunc(\n        name,\n        {[name]: renderValue},\n        {location, organization, unit}\n      )\n    : renderValue;\n\n  function generateLinkWithQuery(query: string) {\n    const eventView = EventView.fromLocation(location);\n    eventView.query = query;\n    switch (source) {\n      case EventDetailPageSource.PERFORMANCE:\n        return transactionSummaryRouteWithQuery({\n          orgSlug: organization.slug,\n          transaction: event.title,\n          projectID: event.projectID,\n          query: {query},\n        });\n      case EventDetailPageSource.DISCOVER:\n      default:\n        return eventView.getResultsViewUrlTarget(organization.slug, isHomepage);\n    }\n  }\n\n  // Some custom perf metrics have units.\n  // These custom perf metrics need to be adjusted to the correct value.\n  let customMetricValue = value;\n  if (typeof value === 'number' && unit && customMetricValue) {\n    if (Object.keys(SIZE_UNITS).includes(unit)) {\n      customMetricValue *= SIZE_UNITS[unit];\n    } else if (Object.keys(DURATION_UNITS).includes(unit)) {\n      customMetricValue *= DURATION_UNITS[unit];\n    }\n  }\n  return (\n    <StyledPanel>\n      <div>\n        <div>{name}</div>\n        <ValueRow>\n          <Value>{rendered}</Value>\n        </ValueRow>\n      </div>\n      <StyledDropdownMenuControl\n        items={[\n          {\n            key: 'includeEvents',\n            label: t('Show events with this value'),\n            to: generateLinkWithQuery(`measurements.${name}:${customMetricValue}`),\n          },\n          {\n            key: 'excludeEvents',\n            label: t('Hide events with this value'),\n            to: generateLinkWithQuery(`!measurements.${name}:${customMetricValue}`),\n          },\n          {\n            key: 'includeGreaterThanEvents',\n            label: t('Show events with values greater than'),\n            to: generateLinkWithQuery(`measurements.${name}:>${customMetricValue}`),\n          },\n          {\n            key: 'includeLessThanEvents',\n            label: t('Show events with values less than'),\n            to: generateLinkWithQuery(`measurements.${name}:<${customMetricValue}`),\n          },\n        ]}\n        triggerProps={{\n          'aria-label': t('Widget actions'),\n          size: 'xs',\n          borderless: true,\n          showChevron: false,\n          icon: <IconEllipsis direction=\"down\" size=\"sm\" />,\n        }}\n        position=\"bottom-end\"\n      />\n    </StyledPanel>\n  );\n}\n\nconst Measurements = styled('div')`\n  display: grid;\n  grid-column-gap: ${space(1)};\n`;\n\nconst Container = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst StyledPanel = styled(Panel)`\n  padding: ${space(1)} ${space(1.5)};\n  margin-bottom: ${space(1)};\n  display: flex;\n`;\n\nconst ValueRow = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Value = styled('span')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nconst StyledDropdownMenuControl = styled(DropdownMenu)`\n  margin-left: auto;\n`;\n"],"names":["EventDetailPageSource","isNotMarkMeasurement","field","startsWith","EventCustomPerformanceMetrics","_ref","event","location","organization","source","isHomepage","measurementNames","Object","keys","measurements","filter","name","isCustomMeasurement","sort","length","_jsxs","Container","children","_jsx","SectionHeading","t","Measurements","map","EventCustomPerformanceMetric","getFieldTypeFromUnit","unit","DURATION_UNITS","SIZE_UNITS","PERCENTAGE_UNITS","includes","_ref2","value","fieldType","renderValue","rendered","FIELD_FORMATTERS","renderFunc","generateLinkWithQuery","query","eventView","EventView","fromLocation","PERFORMANCE","transactionSummaryRouteWithQuery","orgSlug","slug","transaction","title","projectID","DISCOVER","getResultsViewUrlTarget","customMetricValue","StyledPanel","ValueRow","Value","StyledDropdownMenuControl","items","key","label","to","triggerProps","size","borderless","showChevron","icon","IconEllipsis","direction","position","displayName","_styled","target","space","p","theme","fontSizeMedium","Panel","styles","fontSizeExtraLarge","DropdownMenu"],"sourceRoot":""}