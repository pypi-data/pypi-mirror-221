{"version":3,"file":"chunks/app_views_settings_projectIssueGrouping_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/formPanel.tsx","webpack:///./app/components/forms/jsonForm.tsx","webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectIssueGrouping/upgradeGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/utils.tsx","webpack:///./app/views/settings/projectIssueGrouping/index.tsx"],"sourcesContent":["import {useCallback, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport {IconChevron} from 'sentry/icons';\nimport {Scope} from 'sentry/types';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n\nimport {FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n  access?: Set<Scope>;\n  additionalFieldProps?: {[key: string]: any};\n  /**\n   * Can the PanelBody be hidden with a click?\n   */\n  collapsible?: boolean;\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n  features?: Record<string, any>;\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n  initiallyCollapsed?: boolean;\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n};\n\nfunction FormPanel({\n  additionalFieldProps = {},\n  title,\n  fields,\n  access,\n  disabled,\n  renderFooter,\n  renderHeader,\n  collapsible,\n  initiallyCollapsed = false,\n  ...otherProps\n}: Props) {\n  const [collapsed, setCollapse] = useState(initiallyCollapsed);\n  const handleCollapseToggle = useCallback(() => setCollapse(current => !current), []);\n\n  return (\n    <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n      {title && (\n        <PanelHeader>\n          {title}\n          {collapsible && (\n            <Collapse onClick={handleCollapseToggle}>\n              <IconChevron\n                data-test-id=\"form-panel-collapse-chevron\"\n                direction={collapsed ? 'down' : 'up'}\n                size=\"xs\"\n              />\n            </Collapse>\n          )}\n        </PanelHeader>\n      )}\n      <PanelBody hidden={collapsed}>\n        {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n        {fields.map(field => {\n          if (typeof field === 'function') {\n            return field();\n          }\n\n          const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n          // Allow the form panel disabled prop to override the fields\n          // disabled prop, with fallback to the fields disabled state.\n          if (disabled === true) {\n            fieldWithoutDefaultValue.disabled = true;\n            fieldWithoutDefaultValue.disabledReason = undefined;\n          }\n\n          return (\n            <FieldFromConfig\n              access={access}\n              disabled={disabled}\n              key={field.name}\n              {...otherProps}\n              {...additionalFieldProps}\n              field={fieldWithoutDefaultValue}\n              highlighted={otherProps.highlighted === `#${field.name}`}\n            />\n          );\n        })}\n        {typeof renderFooter === 'function' && renderFooter({title, fields})}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default FormPanel;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import {Component, Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'sentry/utils';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  additionalFieldProps?: {[key: string]: any};\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.hash !== prevProps.location.hash) {\n      const hash = this.props.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      initiallyCollapsed,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      params: _params,\n      router: _router,\n      routes: _routes,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n      initiallyCollapsed,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <Fragment key={i}>{this.renderForm({formPanelProps, ...formGroup})}</Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withSentryRouter(JsonForm);\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {Fragment, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport {addLoadingMessage, clearIndicators} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport {openConfirmModal} from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {EventGroupingConfig, Organization, Project} from 'sentry/types';\nimport {handleXhrErrorResponse} from 'sentry/utils/handleXhrErrorResponse';\nimport marked from 'sentry/utils/marked';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport {getGroupingChanges, getGroupingRisk} from './utils';\n\nconst upgradeGroupingId = 'upgrade-grouping';\n\ntype Props = {\n  api: Client;\n  groupingConfigs: EventGroupingConfig[];\n  location: Location;\n  onUpgrade: () => void;\n  organization: Organization;\n  project: Project;\n  projectId: string;\n};\n\nfunction UpgradeGrouping({\n  groupingConfigs,\n  organization,\n  projectId,\n  project,\n  onUpgrade,\n  api,\n  location,\n}: Props) {\n  const hasProjectWriteAccess = organization.access.includes('project:write');\n  const {updateNotes, riskLevel, latestGroupingConfig} = getGroupingChanges(\n    project,\n    groupingConfigs\n  );\n  const {riskNote, alertType} = getGroupingRisk(riskLevel);\n  const noUpdates = project.groupingAutoUpdate || !latestGroupingConfig;\n  const priority = riskLevel >= 2 ? 'danger' : 'primary';\n\n  useEffect(() => {\n    if (\n      location.hash !== `#${upgradeGroupingId}` ||\n      noUpdates ||\n      !groupingConfigs ||\n      !hasProjectWriteAccess\n    ) {\n      return;\n    }\n    handleOpenConfirmModal();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.hash]);\n\n  if (!groupingConfigs) {\n    return null;\n  }\n\n  async function handleConfirmUpgrade() {\n    const newData: Record<string, string | number> = {};\n\n    if (latestGroupingConfig) {\n      const now = Math.floor(new Date().getTime() / 1000);\n      const ninety_days = 3600 * 24 * 90;\n\n      newData.groupingConfig = latestGroupingConfig.id;\n      newData.secondaryGroupingConfig = project.groupingConfig;\n      newData.secondaryGroupingExpiry = now + ninety_days;\n    }\n\n    addLoadingMessage(t('Changing grouping\\u2026'));\n    try {\n      const response = await api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/`,\n        {\n          method: 'PUT',\n          data: newData,\n        }\n      );\n      clearIndicators();\n      ProjectsStore.onUpdateSuccess(response);\n      onUpgrade();\n    } catch (err) {\n      handleXhrErrorResponse('Unable to upgrade config', err);\n    }\n  }\n\n  function handleOpenConfirmModal() {\n    openConfirmModal({\n      confirmText: t('Upgrade'),\n      priority,\n      onConfirm: handleConfirmUpgrade,\n      message: (\n        <Fragment>\n          <TextBlock>\n            <strong>{t('Upgrade Grouping Strategy')}</strong>\n          </TextBlock>\n          <TextBlock>\n            {t(\n              'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'\n            )}\n          </TextBlock>\n          <TextBlock>\n            <strong>{t('New Behavior')}</strong>\n            <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />\n          </TextBlock>\n          <TextBlock>\n            <Alert type={alertType}>{riskNote}</Alert>\n          </TextBlock>\n        </Fragment>\n      ),\n    });\n  }\n\n  function getButtonTitle() {\n    if (project.groupingAutoUpdate) {\n      return t('Disabled because automatic upgrading is enabled');\n    }\n\n    if (!hasProjectWriteAccess) {\n      return t('You do not have sufficient permissions to do this');\n    }\n\n    if (noUpdates) {\n      return t('You are already on the latest version');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <Panel id={upgradeGroupingId}>\n      <PanelHeader>{t('Upgrade Grouping')}</PanelHeader>\n      <PanelBody>\n        <FieldGroup\n          label={t('Upgrade Grouping Strategy')}\n          help={tct(\n            'If the project uses an old grouping strategy an update is possible.[linebreak]Doing so will cause new events to group differently.',\n            {\n              linebreak: <br />,\n            }\n          )}\n          disabled\n        >\n          <div>\n            <Button\n              onClick={handleOpenConfirmModal}\n              disabled={!hasProjectWriteAccess || noUpdates}\n              title={getButtonTitle()}\n              priority={priority}\n            >\n              {t('Upgrade Grouping Strategy')}\n            </Button>\n          </div>\n        </FieldGroup>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default UpgradeGrouping;\n","import type {AlertProps} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {EventGroupingConfig, Project} from 'sentry/types';\n\nexport function getGroupingChanges(\n  project: Project,\n  groupingConfigs: EventGroupingConfig[]\n): {\n  latestGroupingConfig: EventGroupingConfig | null;\n  riskLevel: number;\n  updateNotes: string;\n} {\n  const byId: Record<string, EventGroupingConfig> = {};\n  let updateNotes: string = '';\n  let riskLevel: number = 0;\n  let latestGroupingConfig: EventGroupingConfig | null = null;\n\n  groupingConfigs.forEach(cfg => {\n    byId[cfg.id] = cfg;\n    if (cfg.latest && project.groupingConfig !== cfg.id) {\n      updateNotes = cfg.changelog;\n      latestGroupingConfig = cfg;\n      riskLevel = cfg.risk;\n    }\n  });\n\n  if (latestGroupingConfig) {\n    let next = (latestGroupingConfig as EventGroupingConfig).base ?? '';\n    while (next !== project.groupingConfig) {\n      const cfg = byId[next];\n      if (!cfg) {\n        break;\n      }\n      riskLevel = Math.max(riskLevel, cfg.risk);\n      updateNotes = cfg.changelog + '\\n' + updateNotes;\n      next = cfg.base ?? '';\n    }\n  }\n\n  return {updateNotes, riskLevel, latestGroupingConfig};\n}\n\nexport function getGroupingRisk(riskLevel: number): {\n  alertType: AlertProps['type'];\n  riskNote: React.ReactNode;\n} {\n  switch (riskLevel) {\n    case 0:\n      return {\n        riskNote: t('This upgrade has the chance to create some new issues.'),\n        alertType: 'info',\n      };\n    case 1:\n      return {\n        riskNote: t('This upgrade will create some new issues.'),\n        alertType: 'warning',\n      };\n    case 2:\n      return {\n        riskNote: (\n          <strong>\n            {t(\n              'The new grouping strategy is incompatible with the current and will create entirely new issues.'\n            )}\n          </strong>\n        ),\n        alertType: 'error',\n      };\n    default:\n      return {riskNote: undefined, alertType: undefined};\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport Feature from 'sentry/components/acl/feature';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {fields} from 'sentry/data/forms/projectIssueGrouping';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {EventGroupingConfig, Organization, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\nimport UpgradeGrouping from './upgradeGrouping';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  groupingConfigs: EventGroupingConfig[] | null;\n} & DeprecatedAsyncView['state'];\n\nclass ProjectIssueGrouping extends DeprecatedAsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Issue Grouping'), projectId, false);\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      groupingConfigs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {organization, project} = this.props;\n    return [\n      [\n        'groupingConfigs',\n        `/projects/${organization.slug}/${project.slug}/grouping-configs/`,\n      ],\n    ];\n  }\n\n  handleSubmit = (response: Project) => {\n    // This will update our project context\n    ProjectsStore.onUpdateSuccess(response);\n  };\n\n  renderBody() {\n    const {groupingConfigs} = this.state;\n    const {organization, project, params, location} = this.props;\n    const endpoint = `/projects/${organization.slug}/${project.slug}/`;\n\n    const access = new Set(organization.access.concat(project.access));\n    const hasAccess = hasEveryAccess(['project:write'], {organization, project});\n\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n        groupingConfigs,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !hasAccess,\n    };\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Issue Grouping')} />\n\n        <TextBlock>\n          {tct(\n            `All events have a fingerprint. Events with the same fingerprint are grouped together into an issue. To learn more about issue grouping, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <PermissionAlert project={project} />\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={project}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleSubmit}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Fingerprint Rules')}\n            fields={[fields.fingerprintingRules]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Stack Trace Rules')}\n            fields={[fields.groupingEnhancements]}\n          />\n\n          <Feature features={['set-grouping-config']} organization={organization}>\n            <JsonForm\n              {...jsonFormProps}\n              title={t('Change defaults')}\n              fields={[\n                fields.groupingConfig,\n                fields.secondaryGroupingConfig,\n                fields.secondaryGroupingExpiry,\n              ]}\n            />\n          </Feature>\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Automatic Grouping Updates')}\n            fields={[fields.groupingAutoUpdate]}\n          />\n\n          <UpgradeGrouping\n            groupingConfigs={groupingConfigs ?? []}\n            organization={organization}\n            projectId={params.projectId}\n            project={project}\n            api={this.api}\n            onUpgrade={this.fetchData}\n            location={location}\n          />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nexport default ProjectIssueGrouping;\n"],"names":["FormPanel","_ref","additionalFieldProps","title","fields","access","disabled","renderFooter","renderHeader","collapsible","initiallyCollapsed","otherProps","collapsed","setCollapse","useState","handleCollapseToggle","useCallback","current","_jsxs","Panel","id","sanitizeQuerySelector","undefined","children","PanelHeader","_jsx","Collapse","onClick","IconChevron","direction","size","PanelBody","hidden","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","FieldFromConfig","highlighted","name","displayName","_styled","target","styles","JsonForm","Component","constructor","arguments","_defineProperty","this","props","location","hash","componentDidMount","scrollToHash","componentDidUpdate","prevProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","render","forms","features","_location","params","_params","router","_router","routes","_routes","state","formGroup","i","Fragment","withSentryRouter","getPadding","disablePadding","hasButtons","css","space","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","routeName","orgSlug","projectSlug","tmplBase","tmpl","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","SentryDocumentTitle","renderComponent","permissionAlertText","t","PermissionAlert","project","team","Access","_ref2","hasAccess","Alert","type","upgradeGroupingId","UpgradeGrouping","groupingConfigs","organization","projectId","onUpgrade","api","hasProjectWriteAccess","includes","updateNotes","riskLevel","latestGroupingConfig","byId","forEach","cfg","latest","groupingConfig","changelog","risk","next","base","Math","max","getGroupingChanges","riskNote","alertType","getGroupingRisk","noUpdates","groupingAutoUpdate","priority","useEffect","handleOpenConfirmModal","async","handleConfirmUpgrade","newData","now","floor","Date","getTime","ninety_days","secondaryGroupingConfig","secondaryGroupingExpiry","addLoadingMessage","response","requestPromise","slug","method","data","clearIndicators","ProjectsStore","onUpdateSuccess","handleXhrErrorResponse","openConfirmModal","confirmText","onConfirm","message","TextBlock","dangerouslySetInnerHTML","__html","marked","FieldGroup","label","help","tct","linebreak","Button","ProjectIssueGrouping","routeTitleGen","getDefaultState","super","getEndpoints","renderBody","endpoint","Set","concat","hasEveryAccess","jsonFormProps","SettingsPageHeader","link","ExternalLink","href","Form","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","handleSubmit","fingerprintingRules","groupingEnhancements","Feature","fetchData"],"sourceRoot":""}