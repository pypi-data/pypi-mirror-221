{"version":3,"file":"chunks/app_gettingStartedDocs_node_express_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"uZAcO,SAASA,EAAuBC,GAM7B,IAN8B,UACtCC,EAAS,aACTC,EAAY,YACZC,EAAW,UACXC,EAAS,OACTC,GACML,EACN,MAAO,CACLM,OAAOC,EAAAA,EAAAA,GAAE,sBACTC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,wKACA,CACEV,WAAWQ,EAAAA,EAAAA,IAACG,EAAAA,EAAY,CAACC,KAAMZ,QAKvCa,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,0CACPC,OAAQA,KACDf,GAAiBE,GAAcD,IAIpCe,EAAAA,EAAAA,IACEb,EACI,oDACA,0DACJ,CACEc,WAAYf,EACZgB,SAAUjB,EACVD,gBAEH,EAEHmB,gBAAiBA,KACVnB,GAAiBE,GAAcD,IAIpCe,EAAAA,EAAAA,IACEb,EACI,oDACA,0DACJ,CACEc,WAAYf,EACZgB,SAAUjB,EACVD,gBAEH,IAKX,C,2bCxDA,MAAMoB,EAAoC,CACvC,iFAEA,sFAIGC,EAA0B,+GAGnBC,EAAQ,eAAC,kBACpBC,KACGC,GACgBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CACnD,CACEG,KAAMC,EAAAA,GAASC,QACfxB,aAAaD,EAAAA,EAAAA,GAAE,4CACfO,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,qGAUb,CACEc,KAAMC,EAAAA,GAASE,UACfzB,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,8HACA,CAACK,MAAMP,EAAAA,EAAAA,IAAA,eAIbK,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,uSAWHS,g1BA4BV1B,EAAAA,EAAAA,GAAwB,CACtBE,UAAW,sEACRyB,IAEL,CACEI,KAAMC,EAAAA,GAASG,OACf1B,aAAaD,EAAAA,EAAAA,GACX,4HAEFO,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,sJAQd,EAEM,SAASmB,EAAyBnC,GAMzB,IAN0B,IACxCoC,EAAG,aACHlC,EAAY,OACZG,EAAM,YACNF,EAAW,UACXC,GACYJ,EACRyB,EAA8B,CAAE,SAAQW,OAE5C,MAAMC,EAAe,IAAIf,GACnBgB,EAAe,CAACf,GAUtB,OARIc,EAAaT,OAAS,IACxBH,EAAoBA,EAAkBc,OAAO,kBAAmBF,EAAc,OAG5EC,EAAaV,OAAS,IACxBH,EAAoBA,EAAkBc,OAAOD,KAI7C7B,EAAAA,EAAAA,IAAC+B,EAAAA,EAAM,CACLhB,MAAOA,EAAM,CACXC,kBAAmBA,EAAkBgB,KAAK,MAC1CvC,eACAG,SACAF,cACAC,cAEFC,OAAQA,EACRF,YAAaA,GAGnB,CAjCgBgC,EAAyBO,YAAA,4BAmCzC,S","sources":["webpack:///./app/components/onboarding/gettingStartedDoc/utils.tsx","webpack:///./app/gettingStartedDocs/node/express.tsx"],"sourcesContent":["import ExternalLink from 'sentry/components/links/externalLink';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\n\ntype Props = {\n  guideLink: string;\n  newOrg?: boolean;\n  organization?: Organization;\n  platformKey?: PlatformKey;\n  projectId?: string;\n};\n\nexport function getUploadSourceMapsStep({\n  guideLink,\n  organization,\n  platformKey,\n  projectId,\n  newOrg,\n}: Props) {\n  return {\n    title: t('Upload Source Maps'),\n    description: (\n      <p>\n        {tct(\n          'Automatically upload your source maps to enable readable stack traces for Errors. If you prefer to manually set up source maps, please follow [guideLink:this guide].',\n          {\n            guideLink: <ExternalLink href={guideLink} />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        code: `npx @sentry/wizard@latest -i sourcemaps`,\n        onCopy: () => {\n          if (!organization || !projectId || !platformKey) {\n            return;\n          }\n\n          trackAnalytics(\n            newOrg\n              ? 'onboarding.source_maps_wizard_button_copy_clicked'\n              : 'project_creation.source_maps_wizard_button_copy_clicked',\n            {\n              project_id: projectId,\n              platform: platformKey,\n              organization,\n            }\n          );\n        },\n        onSelectAndCopy: () => {\n          if (!organization || !projectId || !platformKey) {\n            return;\n          }\n\n          trackAnalytics(\n            newOrg\n              ? 'onboarding.source_maps_wizard_selected_and_copied'\n              : 'project_creation.source_maps_wizard_selected_and_copied',\n            {\n              project_id: projectId,\n              platform: platformKey,\n              organization,\n            }\n          );\n        },\n      },\n    ],\n  };\n}\n","import {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {getUploadSourceMapsStep} from 'sentry/components/onboarding/gettingStartedDoc/utils';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\n\ntype StepProps = {\n  newOrg: boolean;\n  organization: Organization;\n  platformKey: PlatformKey;\n  projectId: string;\n  sentryInitContent: string;\n};\n\nconst performanceIntegrations: string[] = [\n  `// enable HTTP calls tracing\nnew Sentry.Integrations.Http({ tracing: true }),`,\n  `// enable Express.js middleware tracing\nnew Sentry.Integrations.Express({ app }),`,\n];\n\nconst performanceOtherConfig = `// Performance Monitoring\ntracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!`;\n\nexport const steps = ({\n  sentryInitContent,\n  ...props\n}: Partial<StepProps> = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: t('Add the Sentry Node SDK as a dependency:'),\n    configurations: [\n      {\n        language: 'bash',\n        code: `\n# Using yarn\nyarn add @sentry/node\n\n# Using npm\nnpm install --save @sentry/node\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          \"Initialize Sentry as early as possible in your application's lifecycle, for example in your [code:index.ts/js] entry point:\",\n          {code: <code />}\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        import * as Sentry from \"@sentry/node\";\n        import express from \"express\";\n\n        // or using CommonJS\n        // const Sentry = require('@sentry/node');\n        // const express = require('express');\n\n        const app = express();\n\n        Sentry.init({\n          ${sentryInitContent},\n        });\n\n        // Trace incoming requests\n        app.use(Sentry.Handlers.requestHandler());\n        app.use(Sentry.Handlers.tracingHandler());\n\n        // All your controllers should live here\n        app.get(\"/\", function rootHandler(req, res) {\n          res.end(\"Hello world!\");\n        });\n\n        // The error handler must be registered before any other error middleware and after all controllers\n        app.use(Sentry.Handlers.errorHandler());\n\n        // Optional fallthrough error handler\n        app.use(function onError(err, req, res, next) {\n          // The error id is attached to \\`res.sentry\\` to be returned\n          // and optionally displayed to the user for support.\n          res.statusCode = 500;\n          res.end(res.sentry + \"\\\\n\");\n        });\n\n        app.listen(3000);\n        `,\n      },\n    ],\n  },\n  getUploadSourceMapsStep({\n    guideLink: 'https://docs.sentry.io/platforms/node/guides/express/sourcemaps/',\n    ...props,\n  }),\n  {\n    type: StepType.VERIFY,\n    description: t(\n      \"This snippet contains an intentional error and can be used as a test to make sure that everything's working as expected.\"\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        app.get(\"/debug-sentry\", function mainHandler(req, res) {\n          throw new Error(\"My first Sentry error!\");\n        });\n        `,\n      },\n    ],\n  },\n];\n\nexport function GettingStartedWithExpress({\n  dsn,\n  organization,\n  newOrg,\n  platformKey,\n  projectId,\n}: ModuleProps) {\n  let sentryInitContent: string[] = [`dsn: \"${dsn}\",`];\n\n  const integrations = [...performanceIntegrations];\n  const otherConfigs = [performanceOtherConfig];\n\n  if (integrations.length > 0) {\n    sentryInitContent = sentryInitContent.concat('integrations: [', integrations, '],');\n  }\n\n  if (otherConfigs.length > 0) {\n    sentryInitContent = sentryInitContent.concat(otherConfigs);\n  }\n\n  return (\n    <Layout\n      steps={steps({\n        sentryInitContent: sentryInitContent.join('\\n'),\n        organization,\n        newOrg,\n        platformKey,\n        projectId,\n      })}\n      newOrg={newOrg}\n      platformKey={platformKey}\n    />\n  );\n}\n\nexport default GettingStartedWithExpress;\n"],"names":["getUploadSourceMapsStep","_ref","guideLink","organization","platformKey","projectId","newOrg","title","t","description","_jsx","children","tct","ExternalLink","href","configurations","language","code","onCopy","trackAnalytics","project_id","platform","onSelectAndCopy","performanceIntegrations","performanceOtherConfig","steps","sentryInitContent","props","arguments","length","undefined","type","StepType","INSTALL","CONFIGURE","VERIFY","GettingStartedWithExpress","dsn","integrations","otherConfigs","concat","Layout","join","displayName"],"sourceRoot":""}