{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamProjects_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"uYAsBA,MAAMA,EAAaC,IAAA,IAAC,eAACC,EAAc,WAAEC,GAAkBF,EAAA,OAAKG,EAAAA,EAAAA,IAAG,WAClDD,GAAaE,EAAAA,EAAAA,GAAM,IAAKA,EAAAA,EAAAA,GAAM,GAAE,IAAIH,EAAiB,GAAIG,EAAAA,EAAAA,GAAM,GAAE,SAoB9E,GAjBoBC,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,wEAItBE,GAAMA,EAAEC,UAAYD,EAAEE,MAAMC,QAAUH,EAAEE,MAAME,SAAQ,eAClDJ,GAAKA,EAAEE,MAAMG,eAAa,sEAGZL,GAAKA,EAAEE,MAAMI,QAAM,wBACxBN,GAAKA,EAAEE,MAAMK,mBAAiB,iBAC3CP,GAAKA,EAAEE,MAAMK,mBAAiB,2BACzBP,GAAKA,EAAEE,MAAMM,qBAAmB,oCAG5ChB,EAAU,I,gZC5Bd,SAASiB,EAAWhB,GAAiC,IAAhC,QAACiB,EAAO,aAAEC,GAAoBlB,EACjD,OACEmB,EAAAA,EAAAA,IAACC,EAAO,CAAAC,SAAA,EACNC,EAAAA,EAAAA,IAACC,EAAAA,EAAY,CAACL,aAAcA,EAAcD,QAASA,KACnDK,EAAAA,EAAAA,IAACE,EAAAA,EAAY,CACXC,GAAK,aAAYP,EAAaQ,iBAAiBT,EAAQS,QACvDC,WAAY,GACZV,QAASA,MAIjB,CAXSD,EAAWY,YAAA,cAapB,MAAMR,GAAUf,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,8EAIpBD,EAAAA,EAAAA,GAAM,KAAI,KAGnB,G,m3CCgBA,MAAMyB,UAAqBC,EAAAA,UAAwBC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,aAClC,CACbC,OAAO,EACPC,SAAS,EACTC,UAAW,KACXC,iBAAkB,GAClBC,eAAgB,MACjBL,EAAAA,EAAAA,GAAA,iBAmBU,KACTM,KAAKC,oBACLD,KAAKE,uBAAuB,KAC7BR,EAAAA,EAAAA,GAAA,0BAiDmB,CAAChB,EAAkByB,KACrC,MAAM,aAACxB,GAAgBqB,KAAKI,OACtB,OAACC,GAAUL,KAAKI,MAAME,OAC5BN,KAAKI,MAAMG,IAAIC,QACZ,aAAY7B,EAAaQ,QAAQT,EAAQS,cAAckB,KACxD,CACEI,OAAmB,QAAXN,EAAmB,OAAS,SACpCO,QAASC,IACPX,KAAKY,WACLC,EAAAA,EAAcC,gBAAgBH,IAC9BI,EAAAA,EAAAA,IACa,QAAXZ,GACIa,EAAAA,EAAAA,GAAE,wCACFA,EAAAA,EAAAA,GAAE,0CACP,EAEHrB,MAAOA,MACLsB,EAAAA,EAAAA,KAAgBD,EAAAA,EAAAA,GAAE,8CAA8C,GAGrE,KACFtB,EAAAA,EAAAA,GAAA,8BAEwBwB,IACvB,MAAMxC,EAAUsB,KAAKmB,MAAMrB,iBAAiBsB,MAAKpD,GAAKA,EAAEqD,KAAOH,EAAUI,QACrE5C,GACFsB,KAAKuB,kBAAkB7C,EAAS,MAClC,KACDgB,EAAAA,EAAAA,GAAA,0BAEoB8B,IACnBxB,KAAKE,sBAAsBsB,EAAIzD,OAAOuD,MAAM,GAC7C,CArGDG,oBACEzB,KAAKY,UACP,CAEAc,mBAAmBC,GAEfA,EAAUhD,aAAaQ,OAASa,KAAKI,MAAMzB,aAAaQ,MACxDwC,EAAUrB,OAAOD,SAAWL,KAAKI,MAAME,OAAOD,QAE9CL,KAAKY,WAGHe,EAAUC,WAAa5B,KAAKI,MAAMwB,UACpC5B,KAAKC,mBAET,CAOAA,oBACE,MAAM,SACJ2B,EAAQ,aACRjD,EACA2B,QAAQ,OAACD,IACPL,KAAKI,MAETJ,KAAK6B,SAAS,CAACjC,SAAS,IAExBI,KAAKI,MAAMG,IACRuB,eAAgB,kBAAiBnD,EAAaQ,iBAAkB,CAC/D4C,MAAO,CACLA,MAAQ,QAAO1B,IACf2B,OAAQJ,EAASG,MAAMC,QAAU,IAEnCC,gBAAgB,IAEjBC,MAAKzE,IAA+B,IAA7BsC,EAAgBoC,EAAGxB,GAAKlD,EAC9BuC,KAAK6B,SAAS,CACZjC,SAAS,EACTD,OAAO,EACPI,iBACAF,UAAWc,GAAMyB,kBAAkB,SAAW,MAC9C,IAEHC,OAAM,KACLrC,KAAK6B,SAAS,CAACjC,SAAS,EAAOD,OAAO,GAAM,GAElD,CAEAO,wBAAkC,IAAZ6B,EAAKtC,UAAA6C,OAAA,QAAAC,IAAA9C,UAAA,GAAAA,UAAA,GAAG,GAC5B,MAAM,aACJd,EACA2B,QAAQ,OAACD,IACPL,KAAKI,MAETJ,KAAKI,MAAMG,IACRuB,eAAgB,kBAAiBnD,EAAaQ,iBAAkB,CAC/D4C,MAAO,CACLA,MAAOA,EAAS,SAAQ1B,KAAU0B,IAAW,SAAQ1B,OAGxD6B,MAAKpC,IACJE,KAAK6B,SAAS,CAAC/B,oBAAkB,GAEvC,CAoCA0C,qBAAqBC,GACnB,MAAM,aAAC9D,EAAY,KAAE+D,GAAQ1C,KAAKI,MAC5BuC,GAAiBC,EAAAA,EAAAA,GAAe,CAAC,cAAe,CAACjE,eAAc+D,SAErE,OAAOD,EAASH,QACdO,EAAAA,EAAAA,IAAaJ,GAAUK,KAAIpE,IACzBE,EAAAA,EAAAA,IAACmE,EAAe,CAAAjE,SAAA,EACdC,EAAAA,EAAAA,IAACiE,EAAAA,EAAe,CAACtE,QAASA,EAASC,aAAcA,KACjDI,EAAAA,EAAAA,IAACkE,EAAAA,EAAO,CACNC,SAAUP,EACVQ,OAAOnC,EAAAA,EAAAA,GAAE,oEAAoElC,UAE7EC,EAAAA,EAAAA,IAACqE,EAAAA,GAAM,CACLC,KAAK,KACLH,UAAWP,EACXW,MAAMvE,EAAAA,EAAAA,IAACwE,EAAAA,GAAY,CAACC,WAAS,EAACH,KAAK,OACnC,cAAYrC,EAAAA,EAAAA,GAAE,UACdyC,QAASA,KACPzD,KAAKuB,kBAAkB7C,EAAS,SAAS,EACzCI,UAEDkC,EAAAA,EAAAA,GAAE,gBAfatC,EAAQ2C,OAqBhCtC,EAAAA,EAAAA,IAAC2E,EAAAA,EAAY,CAACL,KAAK,QAAQC,MAAMvE,EAAAA,EAAAA,IAAC4E,EAAAA,GAAQ,CAACN,KAAK,OAAQvE,UACrDkC,EAAAA,EAAAA,GAAE,mDAGT,CAEA4C,SACE,MAAM,aAACjF,EAAY,KAAE+D,GAAQ1C,KAAKI,OAC5B,eAACL,EAAc,iBAAED,EAAgB,MAAEH,EAAK,QAAEC,GAAWI,KAAKmB,MAEhE,GAAIxB,EACF,OAAOZ,EAAAA,EAAAA,IAAC8E,EAAAA,EAAY,CAACC,QAASA,IAAM9D,KAAKY,aAG3C,GAAIhB,EACF,OAAOb,EAAAA,EAAAA,IAACgF,EAAAA,EAAgB,IAG1B,MAAMpB,GAAiBC,EAAAA,EAAAA,GAAe,CAAC,cAAe,CAACjE,eAAc+D,SAC/DsB,EAAgBlE,EACnBmE,QAAOjG,GAAKA,EAAEkG,OAAOC,SAAS,mBAC9BrB,KAAI9E,IAAK,CACRsD,MAAOtD,EAAEqD,GACT+C,UAAWpG,EAAEmB,KACbkF,OAAOtF,EAAAA,EAAAA,IAACuF,EAAkB,CAAAxF,SAAEd,EAAEmB,WAGlC,OACEP,EAAAA,EAAAA,IAAC2F,EAAAA,SAAQ,CAAAzF,SAAA,EACPC,EAAAA,EAAAA,IAACyF,EAAAA,EAAS,CAAA1F,UACPkC,EAAAA,EAAAA,GACC,oGAGJjC,EAAAA,EAAAA,IAAC0F,EAAAA,EAAe,CAACP,OAAQ,CAAC,cAAexB,KAAMA,KAE/C9D,EAAAA,EAAAA,IAAC8F,EAAAA,EAAK,CAAA5F,SAAA,EACJF,EAAAA,EAAAA,IAAC+F,EAAAA,EAAW,CAAChH,YAAU,EAAAmB,SAAA,EACrBC,EAAAA,EAAAA,IAAA,OAAAD,UAAMkC,EAAAA,EAAAA,GAAE,eACRjC,EAAAA,EAAAA,IAAA,OAAK6F,MAAO,CAACC,cAAe,QAAQ/F,SAChC6D,GASA5D,EAAAA,EAAAA,IAAC+F,EAAAA,EAAoB,CACnBC,MAAOf,EACPgB,SAAUhF,KAAKiF,kBACfC,SAAUlF,KAAKmF,sBACfC,cAAcpE,EAAAA,EAAAA,GAAE,+CAChBqE,UAAU,QAAOvG,SAEhBwG,IAAA,IAAC,OAACC,GAAOD,EAAA,OACRvG,EAAAA,EAAAA,IAACyG,EAAAA,EAAc,CAACD,OAAQA,EAAQlC,KAAK,KAAIvE,UACtCkC,EAAAA,EAAAA,GAAE,gBACY,KAlBrBjC,EAAAA,EAAAA,IAACyG,EAAAA,EAAc,CACbtC,UAAQ,EACRC,OAAOnC,EAAAA,EAAAA,GAAE,6DACTqC,KAAK,KAAIvE,UAERkC,EAAAA,EAAAA,GAAE,uBAmBXjC,EAAAA,EAAAA,IAAC0G,EAAAA,EAAS,CAAA3G,SAAEkB,KAAKwC,qBAAqBzC,SAExChB,EAAAA,EAAAA,IAAC2G,EAAAA,EAAU,CAAC7F,UAAWG,KAAKmB,MAAMtB,aAAeG,KAAKI,UAG5D,EAjNId,EAAYD,YAAA,eAoNlB,MAAM0D,GAAkBjF,EAAAA,EAAAA,GAAO6H,EAAAA,EAAS,CAAA5H,OAAA,YAAhBD,CAAiB,0EAI5BD,EAAAA,EAAAA,GAAM,GAAE,KAGfyG,GAAqBxG,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,YAC3BD,EAAAA,EAAAA,GAAM,KAAK,OAKxB,GAAe+H,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,GAAiBvG,G,qRCtQjC,MAAMwG,GAAsB9E,EAAAA,EAAAA,GACjC,qHAGF,SAASyD,EAAehH,GAA+D,IAA9D,OAACyG,EAAS,CAAC,iBAAgB,QAAExF,EAAO,KAAEgE,KAAStC,GAAa3C,EACnF,OACEsB,EAAAA,EAAAA,IAACgH,EAAAA,EAAM,CAAC7B,OAAQA,EAAQxF,QAASA,EAASgE,KAAMA,EAAK5D,SAClDwG,IAAA,IAAC,UAACU,GAAUV,EAAA,OACVU,IACCjH,EAAAA,EAAAA,IAACkH,EAAAA,GAAK,CAAC,eAAa,2BAA2BC,KAAK,aAAc9F,EAAKtB,SACpEgH,GAEJ,GAIT,CAZSrB,EAAepF,YAAA,kBAcxB,S","sources":["webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/views/settings/components/settingsProjectItem.tsx","webpack:///./app/views/settings/organizationTeams/teamProjects.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx"],"sourcesContent":["import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import styled from '@emotion/styled';\n\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport BookmarkStar from 'sentry/components/projects/bookmarkStar';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nfunction ProjectItem({project, organization}: Props) {\n  return (\n    <Wrapper>\n      <BookmarkStar organization={organization} project={project} />\n      <ProjectBadge\n        to={`/settings/${organization.slug}/projects/${project.slug}/`}\n        avatarSize={18}\n        project={project}\n      />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  align-items: center;\n  gap: ${space(1.5)};\n`;\n\nexport default ProjectItem;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport {Button} from 'sentry/components/button';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconFlag, IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project, Team} from 'sentry/types';\nimport {sortProjects} from 'sentry/utils';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport ProjectListItem from 'sentry/views/settings/components/settingsProjectItem';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  team: Team;\n} & RouteComponentProps<{teamId: string}, {}>;\n\ntype State = {\n  error: boolean;\n  linkedProjects: Project[];\n  loading: boolean;\n  pageLinks: null | string;\n  unlinkedProjects: Project[];\n};\n\ntype DropdownAutoCompleteProps = React.ComponentProps<typeof DropdownAutoComplete>;\ntype Item = Parameters<NonNullable<DropdownAutoCompleteProps['onSelect']>>[0];\n\nclass TeamProjects extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    pageLinks: null,\n    unlinkedProjects: [],\n    linkedProjects: [],\n  };\n\n  componentDidMount() {\n    this.fetchAll();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.organization.slug !== this.props.organization.slug ||\n      prevProps.params.teamId !== this.props.params.teamId\n    ) {\n      this.fetchAll();\n    }\n\n    if (prevProps.location !== this.props.location) {\n      this.fetchTeamProjects();\n    }\n  }\n\n  fetchAll = () => {\n    this.fetchTeamProjects();\n    this.fetchUnlinkedProjects();\n  };\n\n  fetchTeamProjects() {\n    const {\n      location,\n      organization,\n      params: {teamId},\n    } = this.props;\n\n    this.setState({loading: true});\n\n    this.props.api\n      .requestPromise(`/organizations/${organization.slug}/projects/`, {\n        query: {\n          query: `team:${teamId}`,\n          cursor: location.query.cursor || '',\n        },\n        includeAllArgs: true,\n      })\n      .then(([linkedProjects, _, resp]) => {\n        this.setState({\n          loading: false,\n          error: false,\n          linkedProjects,\n          pageLinks: resp?.getResponseHeader('Link') ?? null,\n        });\n      })\n      .catch(() => {\n        this.setState({loading: false, error: true});\n      });\n  }\n\n  fetchUnlinkedProjects(query = '') {\n    const {\n      organization,\n      params: {teamId},\n    } = this.props;\n\n    this.props.api\n      .requestPromise(`/organizations/${organization.slug}/projects/`, {\n        query: {\n          query: query ? `!team:${teamId} ${query}` : `!team:${teamId}`,\n        },\n      })\n      .then(unlinkedProjects => {\n        this.setState({unlinkedProjects});\n      });\n  }\n\n  handleLinkProject = (project: Project, action: string) => {\n    const {organization} = this.props;\n    const {teamId} = this.props.params;\n    this.props.api.request(\n      `/projects/${organization.slug}/${project.slug}/teams/${teamId}/`,\n      {\n        method: action === 'add' ? 'POST' : 'DELETE',\n        success: resp => {\n          this.fetchAll();\n          ProjectsStore.onUpdateSuccess(resp);\n          addSuccessMessage(\n            action === 'add'\n              ? t('Successfully added project to team.')\n              : t('Successfully removed project from team')\n          );\n        },\n        error: () => {\n          addErrorMessage(t(\"Wasn't able to change project association.\"));\n        },\n      }\n    );\n  };\n\n  handleProjectSelected = (selection: Item) => {\n    const project = this.state.unlinkedProjects.find(p => p.id === selection.value);\n    if (project) {\n      this.handleLinkProject(project, 'add');\n    }\n  };\n\n  handleQueryUpdate = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.fetchUnlinkedProjects(evt.target.value);\n  };\n\n  projectPanelContents(projects: Project[]) {\n    const {organization, team} = this.props;\n    const hasWriteAccess = hasEveryAccess(['team:write'], {organization, team});\n\n    return projects.length ? (\n      sortProjects(projects).map(project => (\n        <StyledPanelItem key={project.id}>\n          <ProjectListItem project={project} organization={organization} />\n          <Tooltip\n            disabled={hasWriteAccess}\n            title={t('You do not have enough permission to change project association.')}\n          >\n            <Button\n              size=\"sm\"\n              disabled={!hasWriteAccess}\n              icon={<IconSubtract isCircled size=\"xs\" />}\n              aria-label={t('Remove')}\n              onClick={() => {\n                this.handleLinkProject(project, 'remove');\n              }}\n            >\n              {t('Remove')}\n            </Button>\n          </Tooltip>\n        </StyledPanelItem>\n      ))\n    ) : (\n      <EmptyMessage size=\"large\" icon={<IconFlag size=\"xl\" />}>\n        {t(\"This team doesn't have access to any projects.\")}\n      </EmptyMessage>\n    );\n  }\n\n  render() {\n    const {organization, team} = this.props;\n    const {linkedProjects, unlinkedProjects, error, loading} = this.state;\n\n    if (error) {\n      return <LoadingError onRetry={() => this.fetchAll()} />;\n    }\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    const hasWriteAccess = hasEveryAccess(['team:write'], {organization, team});\n    const otherProjects = unlinkedProjects\n      .filter(p => p.access.includes('project:write'))\n      .map(p => ({\n        value: p.id,\n        searchKey: p.slug,\n        label: <ProjectListElement>{p.slug}</ProjectListElement>,\n      }));\n\n    return (\n      <Fragment>\n        <TextBlock>\n          {t(\n            'If you have Team Admin permissions for other projects, you can associate them with this team.'\n          )}\n        </TextBlock>\n        <PermissionAlert access={['team:write']} team={team} />\n\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Projects')}</div>\n            <div style={{textTransform: 'none'}}>\n              {!hasWriteAccess ? (\n                <DropdownButton\n                  disabled\n                  title={t('You do not have enough permission to associate a project.')}\n                  size=\"xs\"\n                >\n                  {t('Add Project')}\n                </DropdownButton>\n              ) : (\n                <DropdownAutoComplete\n                  items={otherProjects}\n                  onChange={this.handleQueryUpdate}\n                  onSelect={this.handleProjectSelected}\n                  emptyMessage={t('You are not an admin for any other projects')}\n                  alignMenu=\"right\"\n                >\n                  {({isOpen}) => (\n                    <DropdownButton isOpen={isOpen} size=\"xs\">\n                      {t('Add Project')}\n                    </DropdownButton>\n                  )}\n                </DropdownAutoComplete>\n              )}\n            </div>\n          </PanelHeader>\n          <PanelBody>{this.projectPanelContents(linkedProjects)}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n      </Fragment>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${space(2)};\n`;\n\nconst ProjectListElement = styled('div')`\n  padding: ${space(0.25)} 0;\n`;\n\nexport {TeamProjects};\n\nexport default withApi(withOrganization(TeamProjects));\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n"],"names":["getPadding","_ref","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","ProjectItem","project","organization","_jsxs","Wrapper","children","_jsx","BookmarkStar","ProjectBadge","to","slug","avatarSize","displayName","TeamProjects","Component","constructor","arguments","_defineProperty","error","loading","pageLinks","unlinkedProjects","linkedProjects","this","fetchTeamProjects","fetchUnlinkedProjects","action","props","teamId","params","api","request","method","success","resp","fetchAll","ProjectsStore","onUpdateSuccess","addSuccessMessage","t","addErrorMessage","selection","state","find","id","value","handleLinkProject","evt","componentDidMount","componentDidUpdate","prevProps","location","setState","requestPromise","query","cursor","includeAllArgs","then","_","getResponseHeader","catch","length","undefined","projectPanelContents","projects","team","hasWriteAccess","hasEveryAccess","sortProjects","map","StyledPanelItem","ProjectListItem","Tooltip","disabled","title","Button","size","icon","IconSubtract","isCircled","onClick","EmptyMessage","IconFlag","render","LoadingError","onRetry","LoadingIndicator","otherProjects","filter","access","includes","searchKey","label","ProjectListElement","Fragment","TextBlock","PermissionAlert","Panel","PanelHeader","style","textTransform","DropdownAutoComplete","items","onChange","handleQueryUpdate","onSelect","handleProjectSelected","emptyMessage","alignMenu","_ref2","isOpen","DropdownButton","PanelBody","Pagination","PanelItem","withApi","withOrganization","permissionAlertText","Access","hasAccess","Alert","type"],"sourceRoot":""}