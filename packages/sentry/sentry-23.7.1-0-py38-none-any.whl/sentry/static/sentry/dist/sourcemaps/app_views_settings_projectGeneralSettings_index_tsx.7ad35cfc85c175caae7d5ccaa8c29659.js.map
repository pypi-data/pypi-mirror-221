{"version":3,"file":"chunks/app_views_settings_projectGeneralSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/formPanel.tsx","webpack:///./app/components/forms/jsonForm.tsx","webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectGeneralSettings/index.tsx"],"sourcesContent":["import {useCallback, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport {IconChevron} from 'sentry/icons';\nimport {Scope} from 'sentry/types';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n\nimport {FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n  access?: Set<Scope>;\n  additionalFieldProps?: {[key: string]: any};\n  /**\n   * Can the PanelBody be hidden with a click?\n   */\n  collapsible?: boolean;\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n  features?: Record<string, any>;\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n  initiallyCollapsed?: boolean;\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n};\n\nfunction FormPanel({\n  additionalFieldProps = {},\n  title,\n  fields,\n  access,\n  disabled,\n  renderFooter,\n  renderHeader,\n  collapsible,\n  initiallyCollapsed = false,\n  ...otherProps\n}: Props) {\n  const [collapsed, setCollapse] = useState(initiallyCollapsed);\n  const handleCollapseToggle = useCallback(() => setCollapse(current => !current), []);\n\n  return (\n    <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n      {title && (\n        <PanelHeader>\n          {title}\n          {collapsible && (\n            <Collapse onClick={handleCollapseToggle}>\n              <IconChevron\n                data-test-id=\"form-panel-collapse-chevron\"\n                direction={collapsed ? 'down' : 'up'}\n                size=\"xs\"\n              />\n            </Collapse>\n          )}\n        </PanelHeader>\n      )}\n      <PanelBody hidden={collapsed}>\n        {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n        {fields.map(field => {\n          if (typeof field === 'function') {\n            return field();\n          }\n\n          const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n          // Allow the form panel disabled prop to override the fields\n          // disabled prop, with fallback to the fields disabled state.\n          if (disabled === true) {\n            fieldWithoutDefaultValue.disabled = true;\n            fieldWithoutDefaultValue.disabledReason = undefined;\n          }\n\n          return (\n            <FieldFromConfig\n              access={access}\n              disabled={disabled}\n              key={field.name}\n              {...otherProps}\n              {...additionalFieldProps}\n              field={fieldWithoutDefaultValue}\n              highlighted={otherProps.highlighted === `#${field.name}`}\n            />\n          );\n        })}\n        {typeof renderFooter === 'function' && renderFooter({title, fields})}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default FormPanel;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import {Component, Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'sentry/utils';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  additionalFieldProps?: {[key: string]: any};\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.hash !== prevProps.location.hash) {\n      const hash = this.props.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      initiallyCollapsed,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      params: _params,\n      router: _router,\n      routes: _routes,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n      initiallyCollapsed,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <Fragment key={i}>{this.renderForm({formPanelProps, ...formGroup})}</Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withSentryRouter(JsonForm);\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {Component} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  changeProjectSlug,\n  removeProject,\n  transferProject,\n} from 'sentry/actionCreators/projects';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {FieldValue} from 'sentry/components/forms/model';\nimport Hook from 'sentry/components/hook';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {removePageFiltersStorage} from 'sentry/components/organizations/pageFilters/persistence';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelAlert from 'sentry/components/panels/panelAlert';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport {fields} from 'sentry/data/forms/projectGeneralSettings';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {Organization, Project} from 'sentry/types';\nimport {handleXhrErrorResponse} from 'sentry/utils/handleXhrErrorResponse';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport RequestError from 'sentry/utils/requestError/requestError';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = DeprecatedAsyncView['props'] &\n  RouteComponentProps<{projectId: string}, {}> & {\n    onChangeSlug: (slug: string) => void;\n    organization: Organization;\n  };\n\ntype State = DeprecatedAsyncView['state'] & {\n  data: Project;\n};\n\nclass ProjectGeneralSettings extends DeprecatedAsyncView<Props, State> {\n  private _form: Record<string, FieldValue> = {};\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Project Settings'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    const {projectId} = this.props.params;\n\n    return [['data', `/projects/${organization.slug}/${projectId}/`]];\n  }\n\n  handleTransferFieldChange = (id: string, value: FieldValue) => {\n    this._form[id] = value;\n  };\n\n  handleRemoveProject = () => {\n    const {organization} = this.props;\n    const project = this.state.data;\n\n    removePageFiltersStorage(organization.slug);\n\n    if (!project) {\n      return;\n    }\n\n    removeProject({\n      api: this.api,\n      orgSlug: organization.slug,\n      projectSlug: project.slug,\n      origin: 'settings',\n    })\n      .then(\n        () => {\n          addSuccessMessage(\n            tct('[project] was successfully removed', {project: project.slug})\n          );\n        },\n        err => {\n          addErrorMessage(tct('Error removing [project]', {project: project.slug}));\n          throw err;\n        }\n      )\n      .then(\n        () => {\n          // Need to hard reload because lots of components do not listen to Projects Store\n          window.location.assign('/');\n        },\n        (err: RequestError) => handleXhrErrorResponse('Unable to remove project', err)\n      );\n  };\n\n  handleTransferProject = async () => {\n    const {organization} = this.props;\n    const project = this.state.data;\n    if (!project) {\n      return;\n    }\n    if (typeof this._form.email !== 'string' || this._form.email.length < 1) {\n      return;\n    }\n\n    try {\n      await transferProject(this.api, organization.slug, project, this._form.email);\n      // Need to hard reload because lots of components do not listen to Projects Store\n      window.location.assign('/');\n    } catch (err) {\n      if (err.status >= 500) {\n        handleXhrErrorResponse('Unable to transfer project', err);\n      }\n    }\n  };\n\n  isProjectAdmin = () =>\n    hasEveryAccess(['project:admin'], {\n      organization: this.props.organization,\n      project: this.state.data,\n    });\n\n  renderRemoveProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <FieldGroup\n        label={t('Remove Project')}\n        help={tct(\n          'Remove the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to remove this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be removed. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleRemoveProject}\n            priority=\"danger\"\n            confirmText={t('Remove Project')}\n            message={\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Removing this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t('This will also remove all associated event data.')}\n                </TextBlock>\n              </div>\n            }\n          >\n            <div>\n              <Button priority=\"danger\">{t('Remove Project')}</Button>\n            </div>\n          </Confirm>\n        )}\n      </FieldGroup>\n    );\n  }\n\n  renderTransferProject() {\n    const project = this.state.data;\n    const {isInternal} = project;\n    const isOrgOwner = hasEveryAccess(['org:admin'], {\n      organization: this.props.organization,\n    });\n\n    return (\n      <FieldGroup\n        label={t('Transfer Project')}\n        help={tct(\n          'Transfer the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isOrgOwner &&\n          t('You do not have the required permission to transfer this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be transferred. It is used internally by the Sentry server.'\n          )}\n\n        {isOrgOwner && !isInternal && (\n          <Confirm\n            onConfirm={this.handleTransferProject}\n            priority=\"danger\"\n            confirmText={t('Transfer project')}\n            renderMessage={({confirm}) => (\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Transferring this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t(\n                    'Please enter the email of an organization owner to whom you would like to transfer this project.'\n                  )}\n                </TextBlock>\n                <Panel>\n                  <Form\n                    hideFooter\n                    onFieldChange={this.handleTransferFieldChange}\n                    onSubmit={(_data, _onSuccess, _onError, e) => {\n                      e.stopPropagation();\n                      confirm();\n                    }}\n                  >\n                    <TextField\n                      name=\"email\"\n                      label={t('Organization Owner')}\n                      placeholder=\"admin@example.com\"\n                      required\n                      help={t(\n                        'A request will be emailed to this address, asking the organization owner to accept the project transfer.'\n                      )}\n                    />\n                  </Form>\n                </Panel>\n              </div>\n            )}\n          >\n            <div>\n              <Button priority=\"danger\">{t('Transfer Project')}</Button>\n            </div>\n          </Confirm>\n        )}\n      </FieldGroup>\n    );\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const project = this.state.data;\n    const {projectId} = this.props.params;\n    const endpoint = `/projects/${organization.slug}/${projectId}/`;\n    const access = new Set(organization.access.concat(project.access));\n\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !hasEveryAccess(['project:write'], {organization, project}),\n    };\n\n    const team = project.teams.length ? project.teams?.[0] : undefined;\n\n    /*\n    HACK: The <Form /> component applies its props to its children meaning the hooked component\n          would need to conform to the form settings applied in a separate repository. This is\n          not feasible to maintain and may introduce compatability errors if something changes\n          in either repository. For that reason, the Form component is split in two, since the\n          fields do not depend on one another, allowing for the Hook to manage it's own state.\n    */\n    const formProps: FormProps = {\n      saveOnBlur: true,\n      allowUndo: true,\n      initialData: {\n        ...project,\n        team,\n      },\n      apiMethod: 'PUT' as const,\n      apiEndpoint: endpoint,\n      onSubmitSuccess: resp => {\n        this.setState({data: resp});\n        if (projectId !== resp.slug) {\n          changeProjectSlug(projectId, resp.slug);\n          // Container will redirect after stores get updated with new slug\n          this.props.onChangeSlug(resp.slug);\n        }\n        // This will update our project context\n        ProjectsStore.onUpdateSuccess(resp);\n      },\n    };\n\n    const hasRecapServerFeature = project.features.includes('recap-server');\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Project Settings')} />\n        <PermissionAlert project={project} />\n\n        <Form {...formProps}>\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Project Details')}\n            // TODO(recap): Move this to a separate page or debug files one, not general settings\n            fields={[\n              fields.name,\n              fields.platform,\n              {\n                ...fields.recapServerUrl,\n                visible: hasRecapServerFeature,\n              },\n              {\n                ...fields.recapServerToken,\n                visible: hasRecapServerFeature,\n              },\n            ]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Email')}\n            fields={[fields.subjectPrefix]}\n          />\n        </Form>\n        <Hook\n          name=\"spend-visibility:spike-protection-project-settings\"\n          project={project}\n        />\n        <Form {...formProps}>\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Event Settings')}\n            fields={[fields.resolveAge]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Client Security')}\n            fields={[\n              fields.allowedDomains,\n              fields.scrapeJavaScript,\n              fields.securityToken,\n              fields.securityTokenHeader,\n              fields.verifySSL,\n            ]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                <TextBlock noMargin>\n                  {tct(\n                    'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',\n                    {\n                      link: (\n                        <ExternalLink href=\"https://github.com/getsentry/sentry-javascript\">\n                          sentry-javascript\n                        </ExternalLink>\n                      ),\n                    }\n                  )}{' '}\n                  {tct(\n                    'This will restrict requests based on the [Origin] and [Referer] headers.',\n                    {\n                      Origin: <code>Origin</code>,\n                      Referer: <code>Referer</code>,\n                    }\n                  )}\n                </TextBlock>\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Project Administration')}</PanelHeader>\n          {this.renderRemoveProject()}\n          {this.renderTransferProject()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype ContainerProps = {\n  organization: Organization;\n} & RouteComponentProps<{projectId: string}, {}>;\n\nclass ProjectGeneralSettingsContainer extends Component<ContainerProps> {\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  changedSlug: string | undefined = undefined;\n  unsubscribe = ProjectsStore.listen(() => this.onProjectsUpdate(), undefined);\n\n  onProjectsUpdate() {\n    if (!this.changedSlug) {\n      return;\n    }\n    const project = ProjectsStore.getBySlug(this.changedSlug);\n\n    if (!project) {\n      return;\n    }\n\n    browserHistory.replace(\n      recreateRoute('', {\n        ...this.props,\n        params: {\n          ...this.props.params,\n          projectId: this.changedSlug,\n        },\n      })\n    );\n  }\n\n  render() {\n    return (\n      <ProjectGeneralSettings\n        onChangeSlug={(newSlug: string) => (this.changedSlug = newSlug)}\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(ProjectGeneralSettingsContainer);\n"],"names":["FormPanel","_ref","additionalFieldProps","title","fields","access","disabled","renderFooter","renderHeader","collapsible","initiallyCollapsed","otherProps","collapsed","setCollapse","useState","handleCollapseToggle","useCallback","current","_jsxs","Panel","id","sanitizeQuerySelector","undefined","children","PanelHeader","_jsx","Collapse","onClick","IconChevron","direction","size","PanelBody","hidden","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","FieldFromConfig","highlighted","name","displayName","_styled","target","styles","JsonForm","Component","constructor","arguments","_defineProperty","this","props","location","hash","componentDidMount","scrollToHash","componentDidUpdate","prevProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","render","forms","features","_location","params","_params","router","_router","routes","_routes","state","formGroup","i","Fragment","withSentryRouter","getPadding","disablePadding","hasButtons","css","space","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","routeName","orgSlug","projectSlug","tmplBase","tmpl","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","SentryDocumentTitle","renderComponent","permissionAlertText","t","PermissionAlert","project","team","Access","_ref2","hasAccess","Alert","type","ProjectGeneralSettings","value","_form","organization","data","removePageFiltersStorage","slug","removeProject","api","origin","then","addSuccessMessage","tct","addErrorMessage","window","assign","handleXhrErrorResponse","async","email","transferProject","status","hasEveryAccess","projectId","routeTitleGen","getEndpoints","renderRemoveProject","isProjectAdmin","isInternal","FieldGroup","label","help","linebreak","Confirm","onConfirm","handleRemoveProject","priority","confirmText","message","TextBlock","Button","renderTransferProject","isOrgOwner","handleTransferProject","renderMessage","confirm","Form","hideFooter","onFieldChange","handleTransferFieldChange","onSubmit","_data","_onSuccess","_onError","e","stopPropagation","TextField","placeholder","required","renderBody","endpoint","Set","concat","jsonFormProps","teams","formProps","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","resp","changeProjectSlug","onChangeSlug","ProjectsStore","onUpdateSuccess","hasRecapServerFeature","includes","SettingsPageHeader","platform","recapServerUrl","recapServerToken","subjectPrefix","Hook","resolveAge","allowedDomains","scrapeJavaScript","securityToken","securityTokenHeader","verifySSL","PanelAlert","noMargin","link","ExternalLink","href","Origin","Referer","ProjectGeneralSettingsContainer","listen","onProjectsUpdate","componentWillUnmount","unsubscribe","changedSlug","getBySlug","browserHistory","replace","recreateRoute","newSlug","withOrganization"],"sourceRoot":""}