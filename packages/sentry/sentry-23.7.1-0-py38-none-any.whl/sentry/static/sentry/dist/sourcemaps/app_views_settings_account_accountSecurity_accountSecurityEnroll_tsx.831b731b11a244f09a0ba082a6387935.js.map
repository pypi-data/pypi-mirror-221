{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_accountSecurityEnroll_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/u2f/webAuthnHelper.tsx","webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityEnroll.tsx"],"sourcesContent":["// Copyright (c) 2019 GitHub, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\n// below is from https://github.com/github/webauthn-json/tree/66322fc5c12184c5269691ab5abaac79545a3916\n\nexport function base64urlToBuffer(baseurl64String: string): ArrayBuffer {\n  // Base64url to Base64\n  const padding = '=='.slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String = baseurl64String.replace(/-/g, '+').replace(/_/g, '/') + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): string {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = '';\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n  return base64urlString;\n}\n","import {Component} from 'react';\nimport * as Sentry from '@sentry/react';\nimport * as cbor from 'cbor-web';\n\nimport {base64urlToBuffer, bufferToBase64url} from 'sentry/components/u2f/webAuthnHelper';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {ChallengeData, Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype TapParams = {\n  challenge: string;\n  response: string;\n  isSuperuserModal?: boolean;\n  superuserAccessCategory?: string;\n  superuserReason?: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  onTap: ({\n    response,\n    challenge,\n    isSuperuserModal,\n    superuserAccessCategory,\n    superuserReason,\n  }: TapParams) => Promise<void>;\n  organization: Organization;\n  silentIfUnsupported: boolean;\n  children?: React.ReactNode;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  challengeElement: HTMLInputElement | null;\n  deviceFailure: string | null;\n  failCount: number;\n  formElement: HTMLFormElement | null;\n  hasBeenTapped: boolean;\n  isSafari: boolean;\n  isSupported: boolean | null;\n  responseElement: HTMLInputElement | null;\n};\n\nclass U2fInterface extends Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n    isSafari: false,\n    failCount: 0,\n  };\n\n  componentDidMount() {\n    const supported = !!window.PublicKeyCredential;\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    const isSafari =\n      navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n\n    if (isSafari) {\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        deviceFailure: 'safari: requires interaction',\n        isSafari,\n        hasBeenTapped: false,\n      });\n    }\n\n    if (supported && !isSafari) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  getU2FResponse(data) {\n    if (!data.response) {\n      return JSON.stringify(data);\n    }\n\n    if (this.props.flowMode === 'sign') {\n      const authenticatorData = {\n        keyHandle: data.id,\n        clientData: bufferToBase64url(data.response.clientDataJSON),\n        signatureData: bufferToBase64url(data.response.signature),\n        authenticatorData: bufferToBase64url(data.response.authenticatorData),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n    if (this.props.flowMode === 'enroll') {\n      const authenticatorData = {\n        id: data.id,\n        rawId: bufferToBase64url(data.rawId),\n        response: {\n          attestationObject: bufferToBase64url(data.response.attestationObject),\n          clientDataJSON: bufferToBase64url(data.response.clientDataJSON),\n        },\n        type: bufferToBase64url(data.type),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n\n    throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n  }\n\n  submitU2fResponse(promise) {\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = this.getU2FResponse(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n          failCount: this.state.failCount + 1,\n        });\n      });\n  }\n\n  webAuthnSignIn(publicKeyCredentialRequestOptions) {\n    const promise = navigator.credentials.get({\n      publicKey: publicKeyCredentialRequestOptions,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  webAuthnRegister(publicKey) {\n    const promise = navigator.credentials.create({\n      publicKey,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  invokeU2fFlow() {\n    if (this.props.flowMode === 'sign') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnAuthenticationData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      challenge\n        .then(data => {\n          this.webAuthnSignIn(data);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else if (this.props.flowMode === 'enroll') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnRegisterData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      // challenge contains a PublicKeyCredentialRequestOptions object for webauthn registration\n      challenge\n        .then(data => {\n          this.webAuthnRegister(data.publicKey);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderSafariWebAuthn = () => {\n    return (\n      <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n        {this.props.flowMode === 'enroll'\n          ? t('Enroll with WebAuthn')\n          : t('Sign in with WebAuthn')}\n      </a>\n    );\n  };\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    if (this.state.isSafari && this.state.failCount === 0) {\n      return this.renderSafariWebAuthn();\n    }\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already registered with Sentry.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                `[p1:The Sentry server administrator modified the device\n                 registrations.] [p2:You need to remove and re-add the device to continue using\n                 your U2F device. Use a different sign-in method or contact [support] for\n                 assistance.]`,\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure\n            ? this.state.failCount === 0 && this.state.isSafari\n              ? ' loading-dots'\n              : ' device-failure'\n            : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default withOrganization(U2fInterface);\n","import {t} from 'sentry/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = React.ComponentProps<typeof U2fInterface>;\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode?: 'signin' | 'enroll' | 'sudo';\n};\n\nfunction U2fSign({displayMode = 'signin', ...props}: Props) {\n  const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n\n  return (\n    <U2fInterface\n      {...props}\n      silentIfUnsupported={displayMode === 'sudo'}\n      flowMode={flowMode}\n    >\n      <p>{MESSAGES[displayMode] ?? null}</p>\n    </U2fInterface>\n  );\n}\n\nexport default U2fSign;\n","import {Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {QRCodeCanvas} from 'qrcode.react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {openRecoveryOptions} from 'sentry/actionCreators/modal';\nimport {fetchOrganizationByMember} from 'sentry/actionCreators/organizations';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport {FieldObject} from 'sentry/components/forms/types';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport U2fsign from 'sentry/components/u2f/u2fsign';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Authenticator} from 'sentry/types';\nimport getPendingInvite from 'sentry/utils/getPendingInvite';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport RemoveConfirm from 'sentry/views/settings/account/accountSecurity/components/removeConfirm';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype GetFieldsOpts = {\n  authenticator: Authenticator;\n  /**\n   * Flag to track if totp has been sent\n   */\n  hasSentCode: boolean;\n  /**\n   * Callback to reset SMS 2fa enrollment\n   */\n  onSmsReset: () => void;\n  /**\n   * Callback when u2f device is activated\n   */\n  onU2fTap: React.ComponentProps<typeof U2fsign>['onTap'];\n  /**\n   * Flag to track if we are currently sending the otp code\n   */\n  sendingCode: boolean;\n};\n\n/**\n * Retrieve additional form fields (or modify ones) based on 2fa method\n */\nconst getFields = ({\n  authenticator,\n  hasSentCode,\n  sendingCode,\n  onSmsReset,\n  onU2fTap,\n}: GetFieldsOpts): null | FieldObject[] => {\n  const {form} = authenticator;\n\n  if (!form) {\n    return null;\n  }\n\n  if (authenticator.id === 'totp') {\n    return [\n      () => (\n        <CodeContainer key=\"qrcode\">\n          <StyledQRCode\n            aria-label={t('Enrollment QR Code')}\n            value={authenticator.qrcode}\n            size={228}\n          />\n        </CodeContainer>\n      ),\n      () => (\n        <FieldGroup key=\"secret\" label={t('Authenticator secret')}>\n          <TextCopyInput>{authenticator.secret ?? ''}</TextCopyInput>\n        </FieldGroup>\n      ),\n      ...form,\n      () => (\n        <Actions key=\"confirm\">\n          <Button priority=\"primary\" type=\"submit\">\n            {t('Confirm')}\n          </Button>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Sms Form needs a start over button + confirm button\n  // Also inputs being disabled vary based on hasSentCode\n  if (authenticator.id === 'sms') {\n    // Ideally we would have greater flexibility when rendering footer\n    return [\n      {...form[0], disabled: sendingCode || hasSentCode},\n      ...(hasSentCode ? [{...form[1], required: true}] : []),\n      () => (\n        <Actions key=\"sms-footer\">\n          <ButtonBar gap={1}>\n            {hasSentCode && <Button onClick={onSmsReset}>{t('Start Over')}</Button>}\n            <Button priority=\"primary\" type=\"submit\">\n              {hasSentCode ? t('Confirm') : t('Send Code')}\n            </Button>\n          </ButtonBar>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Need to render device name field + U2f component\n  if (authenticator.id === 'u2f') {\n    const deviceNameField = form.find(({name}) => name === 'deviceName')!;\n    return [\n      deviceNameField,\n      () => (\n        <U2fsign\n          key=\"u2f-enroll\"\n          style={{marginBottom: 0}}\n          challengeData={authenticator.challenge}\n          displayMode=\"enroll\"\n          onTap={onU2fTap}\n        />\n      ),\n    ];\n  }\n\n  return null;\n};\n\ntype Props = DeprecatedAsyncView['props'] & WithRouterProps<{authId: string}, {}> & {};\n\ntype State = DeprecatedAsyncView['state'] & {\n  authenticator: Authenticator | null;\n  hasSentCode: boolean;\n  sendingCode: boolean;\n};\n\ntype PendingInvite = ReturnType<typeof getPendingInvite>;\n\n/**\n * Renders necessary forms in order to enroll user in 2fa\n */\nclass AccountSecurityEnroll extends DeprecatedAsyncView<Props, State> {\n  formModel = new FormModel();\n\n  getTitle() {\n    return t('Security');\n  }\n\n  getDefaultState() {\n    return {...super.getDefaultState(), hasSentCode: false};\n  }\n\n  get authenticatorEndpoint() {\n    return `/users/me/authenticators/${this.props.params.authId}/`;\n  }\n\n  get enrollEndpoint() {\n    return `${this.authenticatorEndpoint}enroll/`;\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const errorHandler = (err: any) => {\n      const alreadyEnrolled =\n        err &&\n        err.status === 400 &&\n        err.responseJSON &&\n        err.responseJSON.details === 'Already enrolled';\n\n      if (alreadyEnrolled) {\n        this.props.router.push('/settings/account/security/');\n        addErrorMessage(t('Already enrolled'));\n      }\n\n      // Allow the endpoint to fail if the user is already enrolled\n      return alreadyEnrolled;\n    };\n\n    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.pendingInvitation = getPendingInvite();\n  }\n\n  pendingInvitation: PendingInvite = null;\n\n  get authenticatorName() {\n    return this.state.authenticator?.name ?? 'Authenticator';\n  }\n\n  // This resets state so that user can re-enter their phone number again\n  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);\n\n  // Handles SMS authenticators\n  handleSmsSubmit = async (dataModel: any) => {\n    const {authenticator, hasSentCode} = this.state;\n    const {phone, otp} = dataModel;\n\n    // Don't submit if empty\n    if (!phone || !authenticator) {\n      return;\n    }\n\n    const data = {\n      phone,\n      // Make sure `otp` is undefined if we are submitting OTP verification\n      // Otherwise API will think that we are on verification step (e.g. after submitting phone)\n      otp: hasSentCode ? otp : undefined,\n      secret: authenticator.secret,\n    };\n\n    // Only show loading when submitting OTP\n    this.setState({sendingCode: !hasSentCode});\n\n    if (!hasSentCode) {\n      addLoadingMessage(t('Sending code to %s...', data.phone));\n    } else {\n      addLoadingMessage(t('Verifying OTP...'));\n    }\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (error) {\n      this.formModel.resetForm();\n\n      addErrorMessage(\n        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')\n      );\n\n      this.setState({\n        hasSentCode: false,\n        sendingCode: false,\n      });\n\n      // Re-mount because we want to fetch a fresh secret\n      this.remountComponent();\n\n      return;\n    }\n\n    if (!hasSentCode) {\n      // Just successfully finished sending OTP to user\n      this.setState({hasSentCode: true, sendingCode: false});\n      addSuccessMessage(t('Sent code to %s', data.phone));\n    } else {\n      // OTP was accepted and SMS was added as a 2fa method\n      this.handleEnrollSuccess();\n    }\n  };\n\n  // Handle u2f device tap\n  handleU2fTap = async (tapData: any) => {\n    const data = {deviceName: this.formModel.getValue('deviceName'), ...tapData};\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Currently only TOTP uses this\n  handleTotpSubmit = async (dataModel: any) => {\n    if (!this.state.authenticator) {\n      return;\n    }\n\n    const data = {\n      ...(dataModel ?? {}),\n      secret: this.state.authenticator.secret,\n    };\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  handleSubmit: FormProps['onSubmit'] = data => {\n    const id = this.state.authenticator?.id;\n\n    if (id === 'totp') {\n      this.handleTotpSubmit(data);\n      return;\n    }\n    if (id === 'sms') {\n      this.handleSmsSubmit(data);\n      return;\n    }\n  };\n\n  // Handler when we successfully add a 2fa device\n  async handleEnrollSuccess() {\n    // If we're pending approval of an invite, the user will have just joined\n    // the organization when completing 2fa enrollment. We should reload the\n    // organization context in that case to assign them to the org.\n    if (this.pendingInvitation) {\n      await fetchOrganizationByMember(\n        this.api,\n        this.pendingInvitation.memberId.toString(),\n        {\n          addOrg: true,\n          fetchOrgDetails: true,\n        }\n      );\n    }\n\n    this.props.router.push('/settings/account/security/');\n    openRecoveryOptions({authenticatorName: this.authenticatorName});\n  }\n\n  // Handler when we failed to add a 2fa device\n  handleEnrollError() {\n    this.setState({loading: false});\n    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));\n  }\n\n  // Removes an authenticator\n  handleRemove = async () => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // `authenticator.authId` is NOT the same as `props.params.authId` This is\n    // for backwards compatibility with API endpoint\n    try {\n      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticator'));\n      return;\n    }\n\n    this.props.router.push('/settings/account/security/');\n    addSuccessMessage(t('Authenticator has been removed'));\n  };\n\n  renderBody() {\n    const {authenticator, hasSentCode, sendingCode} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const fields = getFields({\n      authenticator,\n      hasSentCode,\n      sendingCode,\n      onSmsReset: this.handleSmsReset,\n      onU2fTap: this.handleU2fTap,\n    });\n\n    // Attempt to extract `defaultValue` from server generated form fields\n    const defaultValues = fields\n      ? fields\n          .filter(\n            field =>\n              typeof field !== 'function' && typeof field.defaultValue !== 'undefined'\n          )\n          .map(field => [\n            field.name,\n            typeof field !== 'function' ? field.defaultValue : '',\n          ])\n          .reduce((acc, [name, value]) => {\n            acc[name] = value;\n            return acc;\n          }, {})\n      : {};\n\n    const isActive = authenticator.isEnrolled || authenticator.status === 'rotation';\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator\n                role=\"status\"\n                aria-label={\n                  isActive\n                    ? t('Authentication Method Active')\n                    : t('Authentication Method Inactive')\n                }\n                enabled={isActive}\n                css={{marginLeft: 6}}\n              />\n            </Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <RemoveConfirm onConfirm={this.handleRemove}>\n                <Button priority=\"danger\">{authenticator.removeButton}</Button>\n              </RemoveConfirm>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        {authenticator.rotationWarning && authenticator.status === 'rotation' && (\n          <Alert type=\"warning\" showIcon>\n            {authenticator.rotationWarning}\n          </Alert>\n        )}\n\n        {!!authenticator.form?.length && (\n          <Form\n            model={this.formModel}\n            apiMethod=\"POST\"\n            apiEndpoint={this.authenticatorEndpoint}\n            onSubmit={this.handleSubmit}\n            initialData={{...defaultValues, ...authenticator}}\n            hideFooter\n          >\n            <JsonForm forms={[{title: 'Configuration', fields: fields ?? []}]} />\n          </Form>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst CodeContainer = styled(PanelItem)`\n  justify-content: center;\n`;\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nconst StyledQRCode = styled(QRCodeCanvas)`\n  background: white;\n  padding: ${space(2)};\n`;\n\nexport default withSentryRouter(AccountSecurityEnroll);\n"],"names":["base64urlToBuffer","baseurl64String","padding","slice","length","base64String","replace","str","atob","buffer","ArrayBuffer","byteView","Uint8Array","i","charCodeAt","bufferToBase64url","charCode","String","fromCharCode","btoa","U2fInterface","Component","constructor","arguments","_defineProperty","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","isSafari","failCount","this","setState","invokeU2fFlow","ref","form","value","JSON","stringify","props","challengeData","_jsx","onClick","onTryAgain","className","children","flowMode","t","state","supportMail","ConfigStore","get","support","href","renderSafariWebAuthn","_jsxs","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","componentDidMount","supported","window","PublicKeyCredential","navigator","userAgent","includes","getU2FResponse","data","response","authenticatorData","keyHandle","id","clientData","clientDataJSON","signatureData","signature","rawId","attestationObject","type","Error","submitU2fResponse","promise","then","u2fResponse","challenge","onTap","catch","submit","err","failure","metaData","Sentry","webAuthnSignIn","publicKeyCredentialRequestOptions","credentials","publicKey","webAuthnRegister","create","challengeArray","webAuthnAuthenticationData","cbor","decodeFirst","webAuthnRegisterData","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","renderPrompt","name","bindChallengeElement","bindResponseElement","render","displayName","withOrganization","MESSAGES","signin","sudo","enroll","U2fSign","_ref","displayMode","_ref4","styles","AccountSecurityEnroll","DeprecatedAsyncView","FormModel","hasSentCode","remountComponent","async","authenticator","phone","otp","dataModel","undefined","secret","sendingCode","addLoadingMessage","api","requestPromise","enrollEndpoint","error","formModel","resetForm","addErrorMessage","handleEnrollSuccess","addSuccessMessage","deviceName","getValue","tapData","loading","handleEnrollError","method","handleSmsSubmit","handleTotpSubmit","authId","authenticatorEndpoint","router","push","getTitle","getDefaultState","super","params","getEndpoints","allowError","alreadyEnrolled","status","responseJSON","details","pendingInvitation","getPendingInvite","authenticatorName","fetchOrganizationByMember","memberId","toString","addOrg","fetchOrgDetails","openRecoveryOptions","fields","onSmsReset","onU2fTap","CodeContainer","StyledQRCode","qrcode","size","FieldGroup","label","TextCopyInput","Actions","Button","priority","disabled","required","ButtonBar","gap","find","_ref2","U2fsign","marginBottom","getFields","handleSmsReset","handleU2fTap","defaultValues","filter","field","defaultValue","map","reduce","acc","_ref3","isActive","isEnrolled","Fragment","SettingsPageHeader","title","CircleIndicator","role","enabled","css","action","removeButton","RemoveConfirm","onConfirm","handleRemove","TextBlock","description","rotationWarning","Alert","showIcon","Form","model","apiMethod","apiEndpoint","onSubmit","handleSubmit","initialData","hideFooter","JsonForm","forms","_styled","PanelItem","target","QRCodeCanvas","space","withSentryRouter"],"sourceRoot":""}