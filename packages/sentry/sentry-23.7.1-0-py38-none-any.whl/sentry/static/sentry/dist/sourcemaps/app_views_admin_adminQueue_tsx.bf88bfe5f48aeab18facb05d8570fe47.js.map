{"version":3,"file":"chunks/app_views_admin_adminQueue_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/internalStatChart.tsx","webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/views/admin/adminQueue.tsx","webpack:///./app/views/deprecatedAsyncView.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'sentry/api';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  label: string;\n  resolution: string;\n  since: number;\n  stat: string;\n  height?: number;\n};\n\ntype State = {\n  data: [number, number][] | null;\n  error: boolean;\n  loading: boolean;\n};\n\nclass InternalStatChart extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(_nextProps: Props, nextState: State) {\n    return this.state.loading !== nextState.loading;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.since !== this.props.since ||\n      prevProps.stat !== this.props.stat ||\n      prevProps.resolution !== this.props.resolution\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({loading: true});\n    this.props.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data =>\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        }),\n      error: () => this.setState({error: true, loading: false}),\n    });\n  };\n\n  render() {\n    const {loading, error, data} = this.state;\n    const {label, height} = this.props;\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = {\n      seriesName: label,\n      data:\n        data?.map(([timestamp, value]) => ({\n          name: timestamp * 1000,\n          value,\n        })) ?? [],\n    };\n    return (\n      <MiniBarChart\n        height={height ?? 150}\n        series={[series]}\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(InternalStatChart);\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport InternalStatChart from 'sentry/components/internalStatChart';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\n\nconst TIME_WINDOWS = ['1h', '1d', '1w'] as const;\n\ntype TimeWindow = (typeof TIME_WINDOWS)[number];\n\ntype State = DeprecatedAsyncView['state'] & {\n  activeTask: string;\n  resolution: string;\n  since: number;\n  taskList: string[];\n  taskName: string;\n  timeWindow: TimeWindow;\n};\n\nexport default class AdminQueue extends DeprecatedAsyncView<{}, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      timeWindow: '1w',\n      since: new Date().getTime() / 1000 - 3600 * 24 * 7,\n      resolution: '1h',\n      taskName: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    return [['taskList', '/internal/queue/tasks/']];\n  }\n\n  changeWindow(timeWindow: TimeWindow) {\n    let seconds: number;\n    if (timeWindow === '1h') {\n      seconds = 3600;\n    } else if (timeWindow === '1d') {\n      seconds = 3600 * 24;\n    } else if (timeWindow === '1w') {\n      seconds = 3600 * 24 * 7;\n    } else {\n      throw new Error('Invalid time window');\n    }\n    this.setState({\n      since: new Date().getTime() / 1000 - seconds,\n      timeWindow,\n    });\n  }\n\n  changeTask(value: string) {\n    this.setState({activeTask: value});\n  }\n\n  renderBody() {\n    const {activeTask, taskList} = this.state;\n\n    return (\n      <div>\n        <Header>\n          <h3>Queue Overview</h3>\n\n          <ButtonBar merged active={this.state.timeWindow}>\n            {TIME_WINDOWS.map(r => (\n              <Button size=\"sm\" barId={r} onClick={() => this.changeWindow(r)} key={r}>\n                {r}\n              </Button>\n            ))}\n          </ButtonBar>\n        </Header>\n\n        <Panel>\n          <PanelHeader>Global Throughput</PanelHeader>\n          <PanelBody withPadding>\n            <InternalStatChart\n              since={this.state.since}\n              resolution={this.state.resolution}\n              stat=\"jobs.all.started\"\n              label=\"jobs started\"\n            />\n          </PanelBody>\n        </Panel>\n\n        <h3>Task Details</h3>\n\n        <div>\n          <div className=\"m-b-1\">\n            <label>Show details for task:</label>\n            <SelectControl\n              name=\"task\"\n              onChange={({value}) => this.changeTask(value)}\n              value={activeTask}\n              clearable\n              options={taskList.map(value => ({value, label: value}))}\n            />\n          </div>\n          {activeTask ? (\n            <div>\n              <Panel key={`jobs.started.${activeTask}`}>\n                <PanelHeader>\n                  Jobs Started <small>{activeTask}</small>\n                </PanelHeader>\n                <PanelBody withPadding>\n                  <InternalStatChart\n                    since={this.state.since}\n                    resolution={this.state.resolution}\n                    stat={`jobs.started.${activeTask}`}\n                    label=\"jobs\"\n                    height={100}\n                  />\n                </PanelBody>\n              </Panel>\n              <Panel key={`jobs.finished.${activeTask}`}>\n                <PanelHeader>\n                  Jobs Finished <small>{activeTask}</small>\n                </PanelHeader>\n                <PanelBody withPadding>\n                  <InternalStatChart\n                    since={this.state.since}\n                    resolution={this.state.resolution}\n                    stat={`jobs.finished.${activeTask}`}\n                    label=\"jobs\"\n                    height={100}\n                  />\n                </PanelBody>\n              </Panel>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Header = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n"],"names":["InternalStatChart","Component","constructor","arguments","_defineProperty","error","loading","data","this","setState","props","api","request","method","since","resolution","key","stat","success","componentDidMount","fetchData","shouldComponentUpdate","_nextProps","nextState","state","componentDidUpdate","prevProps","render","label","height","_jsx","LoadingIndicator","LoadingError","onRetry","series","seriesName","map","_ref","timestamp","value","name","MiniBarChart","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","displayName","withApi","getPadding","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","TIME_WINDOWS","AdminQueue","DeprecatedAsyncView","getDefaultState","super","timeWindow","Date","getTime","taskName","getEndpoints","changeWindow","seconds","Error","changeTask","activeTask","renderBody","taskList","_jsxs","children","Header","ButtonBar","merged","active","r","Button","size","barId","onClick","Panel","PanelHeader","PanelBody","withPadding","className","SelectControl","onChange","clearable","options","styles","DeprecatedAsyncComponent","getTitle","SentryDocumentTitle","title","renderComponent"],"sourceRoot":""}