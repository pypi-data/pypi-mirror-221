{"version":3,"file":"chunks/app_views_settings_organizationAuthTokens_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/organizationAuthTokens/authTokenRow.tsx","webpack:///./app/views/settings/organizationAuthTokens/index.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Placeholder from 'sentry/components/placeholder';\nimport TimeSince from 'sentry/components/timeSince';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconSubtract} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, OrgAuthToken, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {tokenPreview} from 'sentry/views/settings/organizationAuthTokens';\n\nfunction LastUsed({\n  organization,\n  dateLastUsed,\n  projectLastUsed,\n}: {\n  organization: Organization;\n  dateLastUsed?: Date;\n  projectLastUsed?: Project;\n}) {\n  if (dateLastUsed && projectLastUsed) {\n    return (\n      <Fragment>\n        {tct('[date] in project [project]', {\n          date: (\n            <TimeSince\n              date={getDynamicText({\n                value: dateLastUsed,\n                fixed: new Date(1508208080000), // National Pasta Day\n              })}\n            />\n          ),\n          project: (\n            <Link to={`/settings/${organization.slug}/${projectLastUsed.slug}/`}>\n              {projectLastUsed.name}\n            </Link>\n          ),\n        })}\n      </Fragment>\n    );\n  }\n\n  if (dateLastUsed) {\n    return (\n      <Fragment>\n        <TimeSince\n          date={getDynamicText({\n            value: dateLastUsed,\n            fixed: new Date(1508208080000), // National Pasta Day\n          })}\n        />\n      </Fragment>\n    );\n  }\n\n  if (projectLastUsed) {\n    return (\n      <Fragment>\n        {tct('in project [project]', {\n          project: (\n            <Link to={`/settings/${organization.slug}/${projectLastUsed.slug}/`}>\n              {projectLastUsed.name}\n            </Link>\n          ),\n        })}\n      </Fragment>\n    );\n  }\n\n  return <NeverUsed>{t('never used')}</NeverUsed>;\n}\n\nexport function OrganizationAuthTokensAuthTokenRow({\n  organization,\n  isRevoking,\n  token,\n  revokeToken,\n  projectLastUsed,\n  isProjectLoading,\n}: {\n  isRevoking: boolean;\n  organization: Organization;\n  token: OrgAuthToken;\n  isProjectLoading?: boolean;\n  projectLastUsed?: Project;\n  revokeToken?: (token: OrgAuthToken) => void;\n}) {\n  return (\n    <Fragment>\n      <div>\n        <Label>\n          <Link to={`/settings/${organization.slug}/auth-tokens/${token.id}/`}>\n            {token.name}\n          </Link>\n        </Label>\n\n        {token.tokenLastCharacters && (\n          <TokenPreview aria-label={t('Token preview')}>\n            {tokenPreview(\n              getDynamicText({\n                value: token.tokenLastCharacters,\n                fixed: 'ABCD',\n              })\n            )}\n          </TokenPreview>\n        )}\n      </div>\n\n      <LastUsedDate>\n        {isProjectLoading ? (\n          <Placeholder height=\"1.25em\" />\n        ) : (\n          <LastUsed\n            dateLastUsed={token.dateLastUsed}\n            projectLastUsed={projectLastUsed}\n            organization={organization}\n          />\n        )}\n      </LastUsedDate>\n\n      <Actions>\n        <Tooltip\n          title={t(\n            'You must be an organization owner, manager or admin to revoke a token.'\n          )}\n          disabled={!!revokeToken}\n        >\n          <Confirm\n            disabled={!revokeToken || isRevoking}\n            onConfirm={revokeToken ? () => revokeToken(token) : undefined}\n            message={t(\n              'Are you sure you want to revoke this token? The token will not be usable anymore, and this cannot be undone.'\n            )}\n          >\n            <Button\n              size=\"sm\"\n              disabled={isRevoking || !revokeToken}\n              aria-label={t('Revoke %s', token.name)}\n              icon={\n                isRevoking ? (\n                  <LoadingIndicator mini />\n                ) : (\n                  <IconSubtract isCircled size=\"xs\" />\n                )\n              }\n            >\n              {t('Revoke')}\n            </Button>\n          </Confirm>\n        </Tooltip>\n      </Actions>\n    </Fragment>\n  );\n}\n\nconst Label = styled('div')``;\n\nconst Actions = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst LastUsedDate = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n`;\n\nconst NeverUsed = styled('div')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst TokenPreview = styled('div')`\n  color: ${p => p.theme.gray300};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport Access from 'sentry/components/acl/access';\nimport {Button} from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingError from 'sentry/components/loadingError';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, OrgAuthToken, Project} from 'sentry/types';\nimport {handleXhrErrorResponse} from 'sentry/utils/handleXhrErrorResponse';\nimport {\n  setApiQueryData,\n  useApiQuery,\n  useMutation,\n  useQueryClient,\n} from 'sentry/utils/queryClient';\nimport RequestError from 'sentry/utils/requestError/requestError';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {OrganizationAuthTokensAuthTokenRow} from 'sentry/views/settings/organizationAuthTokens/authTokenRow';\n\ntype FetchOrgAuthTokensResponse = OrgAuthToken[];\ntype FetchOrgAuthTokensParameters = {\n  orgSlug: string;\n};\ntype RevokeTokenQueryVariables = {\n  token: OrgAuthToken;\n};\n\nexport const makeFetchOrgAuthTokensForOrgQueryKey = ({\n  orgSlug,\n}: FetchOrgAuthTokensParameters) =>\n  [`/organizations/${orgSlug}/org-auth-tokens/`] as const;\n\nfunction TokenList({\n  organization,\n  tokenList,\n  isRevoking,\n  revokeToken,\n}: {\n  isRevoking: boolean;\n  organization: Organization;\n  tokenList: OrgAuthToken[];\n  revokeToken?: (data: {token: OrgAuthToken}) => void;\n}) {\n  const apiEndpoint = `/organizations/${organization.slug}/projects/`;\n\n  const projectIds = tokenList\n    .map(token => token.projectLastUsedId)\n    .filter(id => !!id) as string[];\n\n  const idQueryParams = projectIds.map(id => `id:${id}`).join(' ');\n\n  const hasProjects = projectIds.length > 0;\n\n  const {data: projects, isLoading: isLoadingProjects} = useApiQuery<Project[]>(\n    [apiEndpoint, {query: {query: idQueryParams}}],\n    {\n      staleTime: 0,\n      enabled: hasProjects,\n    }\n  );\n\n  return (\n    <Fragment>\n      {tokenList.map(token => {\n        const projectLastUsed = token.projectLastUsedId\n          ? projects?.find(p => p.id === token.projectLastUsedId)\n          : undefined;\n        return (\n          <OrganizationAuthTokensAuthTokenRow\n            key={token.id}\n            organization={organization}\n            token={token}\n            isRevoking={isRevoking}\n            revokeToken={revokeToken ? () => revokeToken({token}) : undefined}\n            projectLastUsed={projectLastUsed}\n            isProjectLoading={hasProjects && isLoadingProjects}\n          />\n        );\n      })}\n    </Fragment>\n  );\n}\n\nexport function OrganizationAuthTokensIndex({\n  organization,\n}: {\n  organization: Organization;\n}) {\n  const api = useApi();\n  const queryClient = useQueryClient();\n\n  const {\n    isLoading,\n    isError,\n    data: tokenList,\n    refetch: refetchTokenList,\n  } = useApiQuery<FetchOrgAuthTokensResponse>(\n    makeFetchOrgAuthTokensForOrgQueryKey({orgSlug: organization.slug}),\n    {\n      staleTime: Infinity,\n    }\n  );\n\n  const {mutate: handleRevokeToken, isLoading: isRevoking} = useMutation<\n    {},\n    RequestError,\n    RevokeTokenQueryVariables\n  >({\n    mutationFn: ({token}) =>\n      api.requestPromise(\n        `/organizations/${organization.slug}/org-auth-tokens/${token.id}/`,\n        {\n          method: 'DELETE',\n        }\n      ),\n\n    onSuccess: (_data, {token}) => {\n      addSuccessMessage(t('Revoked auth token for the organization.'));\n\n      setApiQueryData(\n        queryClient,\n        makeFetchOrgAuthTokensForOrgQueryKey({orgSlug: organization.slug}),\n        oldData => {\n          if (!Array.isArray(oldData)) {\n            return oldData;\n          }\n\n          return oldData.filter(oldToken => oldToken.id !== token.id);\n        }\n      );\n    },\n    onError: error => {\n      const message = t('Failed to revoke the auth token for the organization.');\n      handleXhrErrorResponse(message, error);\n      addErrorMessage(message);\n    },\n  });\n\n  const createNewToken = (\n    <Button\n      priority=\"primary\"\n      size=\"sm\"\n      to={`/settings/${organization.slug}/auth-tokens/new-token/`}\n      data-test-id=\"create-token\"\n    >\n      {t('Create New Token')}\n    </Button>\n  );\n\n  return (\n    <Access access={['org:write']}>\n      {({hasAccess}) => (\n        <Fragment>\n          <SentryDocumentTitle title={t('Auth Tokens')} />\n          <SettingsPageHeader title={t('Auth Tokens')} action={createNewToken} />\n\n          <TextBlock>\n            {t(\n              \"Authentication tokens allow you to perform actions against the Sentry API on behalf of your organization. They're the easiest way to get started using the API.\"\n            )}\n          </TextBlock>\n          <TextBlock>\n            {tct(\n              'For more information on how to use the web API, see our [link:documentation].',\n              {\n                link: <ExternalLink href=\"https://docs.sentry.io/api/\" />,\n              }\n            )}\n          </TextBlock>\n\n          <ResponsivePanelTable\n            isLoading={isLoading || isError}\n            isEmpty={!isLoading && !tokenList?.length}\n            loader={\n              isError ? (\n                <LoadingError\n                  message={t('Failed to load auth tokens for the organization.')}\n                  onRetry={refetchTokenList}\n                />\n              ) : undefined\n            }\n            emptyMessage={t(\"You haven't created any authentication tokens yet.\")}\n            headers={[t('Auth token'), t('Last access'), '']}\n          >\n            {!isError && !isLoading && !!tokenList?.length && (\n              <TokenList\n                organization={organization}\n                tokenList={tokenList}\n                isRevoking={isRevoking}\n                revokeToken={hasAccess ? handleRevokeToken : undefined}\n              />\n            )}\n          </ResponsivePanelTable>\n        </Fragment>\n      )}\n    </Access>\n  );\n}\n\nexport function tokenPreview(tokenLastCharacters: string) {\n  return `sntrys_************${tokenLastCharacters}`;\n}\n\nexport default withOrganization(OrganizationAuthTokensIndex);\n\nconst ResponsivePanelTable = styled(PanelTable)`\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: 1fr 1fr;\n\n    > *:nth-child(3n + 2) {\n      display: none;\n    }\n  }\n`;\n"],"names":["LastUsed","_ref","organization","dateLastUsed","projectLastUsed","_jsx","Fragment","children","tct","date","TimeSince","getDynamicText","value","fixed","Date","project","Link","to","slug","name","NeverUsed","t","OrganizationAuthTokensAuthTokenRow","_ref2","isRevoking","token","revokeToken","isProjectLoading","_jsxs","Label","id","tokenLastCharacters","TokenPreview","tokenPreview","LastUsedDate","Placeholder","height","Actions","Tooltip","title","disabled","Confirm","onConfirm","undefined","message","Button","size","icon","LoadingIndicator","mini","IconSubtract","isCircled","displayName","_styled","target","styles","space","p","theme","gray300","makeFetchOrgAuthTokensForOrgQueryKey","orgSlug","TokenList","tokenList","apiEndpoint","projectIds","map","projectLastUsedId","filter","idQueryParams","join","hasProjects","length","data","projects","isLoading","isLoadingProjects","useApiQuery","query","staleTime","enabled","find","OrganizationAuthTokensIndex","_ref3","api","useApi","queryClient","useQueryClient","isError","refetch","refetchTokenList","Infinity","mutate","handleRevokeToken","useMutation","mutationFn","_ref4","requestPromise","method","onSuccess","_data","_ref5","addSuccessMessage","setApiQueryData","oldData","Array","isArray","oldToken","onError","error","handleXhrErrorResponse","addErrorMessage","createNewToken","priority","Access","access","_ref6","hasAccess","SentryDocumentTitle","SettingsPageHeader","action","TextBlock","link","ExternalLink","href","ResponsivePanelTable","isEmpty","loader","LoadingError","onRetry","emptyMessage","headers","withOrganization","PanelTable","breakpoints","small"],"sourceRoot":""}