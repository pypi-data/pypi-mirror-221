{"version":3,"file":"chunks/app_utils_performance_contexts_metricsEnhancedSetting_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/contexts/metricsEnhancedPerformanceDataContext.tsx","webpack:///./app/utils/performance/contexts/metricsEnhancedSetting.tsx","webpack:///./app/views/performance/landing/widgets/types.tsx","webpack:///./app/views/performance/landing/widgets/utils.tsx","webpack:///./app/views/performance/landing/widgets/widgetDefinitions.tsx"],"sourcesContent":["import {ReactNode, useCallback, useState} from 'react';\n\nimport Tag from 'sentry/components/tag';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {WIDGET_MAP_DENY_LIST} from 'sentry/views/performance/landing/widgets/utils';\nimport {PerformanceWidgetSetting} from 'sentry/views/performance/landing/widgets/widgetDefinitions';\n\nimport {AutoSampleState, useMEPSettingContext} from './metricsEnhancedSetting';\nimport {createDefinedContext} from './utils';\n\nexport interface MetricsEnhancedPerformanceDataContext {\n  setIsMetricsData: (value?: boolean) => void;\n  isMetricsData?: boolean;\n}\n\nconst [_MEPDataProvider, _useMEPDataContext] =\n  createDefinedContext<MetricsEnhancedPerformanceDataContext>({\n    name: 'MetricsEnhancedPerformanceDataContext',\n  });\n\nexport function MEPDataProvider({\n  children,\n  chartSetting,\n}: {\n  children: ReactNode;\n  chartSetting?: PerformanceWidgetSetting;\n}) {\n  const {setAutoSampleState} = useMEPSettingContext();\n  const [isMetricsData, _setIsMetricsData] = useState<boolean | undefined>(undefined); // Uses undefined to cover 'not initialized'\n\n  const setIsMetricsData = useCallback(\n    (value?: boolean) => {\n      if (WIDGET_MAP_DENY_LIST.includes(chartSetting as PerformanceWidgetSetting)) {\n        // Certain widgets shouldn't update their sampled tags or have the page info change eg. Auto(...)\n        return;\n      }\n      if (value === true) {\n        setAutoSampleState(AutoSampleState.METRICS);\n      } else if (value === false) {\n        setAutoSampleState(AutoSampleState.TRANSACTIONS);\n      }\n      _setIsMetricsData(value);\n    },\n    [setAutoSampleState, _setIsMetricsData, chartSetting]\n  );\n\n  return (\n    <_MEPDataProvider value={{isMetricsData, setIsMetricsData}}>\n      {children}\n    </_MEPDataProvider>\n  );\n}\n\nexport const useMEPDataContext = _useMEPDataContext;\n\nexport function getIsMetricsDataFromResults(\n  results: any,\n  field = ''\n): boolean | undefined {\n  const isMetricsData =\n    results?.meta?.isMetricsData ??\n    results?.seriesAdditionalInfo?.[field]?.isMetricsData ??\n    results?.histograms?.meta?.isMetricsData ??\n    results?.tableData?.meta?.isMetricsData;\n  return isMetricsData;\n}\n\nexport function MEPTag() {\n  const {isMetricsData} = useMEPDataContext();\n  const organization = useOrganization();\n\n  if (!organization.features.includes('performance-use-metrics')) {\n    // Separate if for easier flag deletion\n    return null;\n  }\n\n  if (isMetricsData === undefined) {\n    return <span data-test-id=\"no-metrics-data-tag\" />;\n  }\n\n  const tagText = isMetricsData ? 'processed' : 'indexed';\n\n  return <Tag data-test-id=\"has-metrics-data-tag\">{tagText}</Tag>;\n}\n","import {Dispatch, ReactNode, useCallback, useReducer} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport localStorage from 'sentry/utils/localStorage';\nimport {MEPDataProvider} from 'sentry/utils/performance/contexts/metricsEnhancedPerformanceDataContext';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {createDefinedContext} from './utils';\n\nexport interface MetricsEnhancedSettingContext {\n  autoSampleState: AutoSampleState;\n  memoizationKey: string;\n  metricSettingState: MEPState | null;\n  setAutoSampleState: Dispatch<AutoSampleState>;\n  setMetricSettingState: Dispatch<MEPState>;\n  shouldQueryProvideMEPAutoParams: boolean;\n  shouldQueryProvideMEPMetricParams: boolean;\n  shouldQueryProvideMEPTransactionParams: boolean;\n}\n\nconst [_MEPSettingProvider, _useMEPSettingContext, _MEPSettingContext] =\n  createDefinedContext<MetricsEnhancedSettingContext>({\n    name: 'MetricsEnhancedSettingContext',\n  });\n\nexport const MEPConsumer = _MEPSettingContext.Consumer;\n\n/**\n * These will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n * \"Unset\" should be the initial state before any queries return for the first time.\n */\nexport enum AutoSampleState {\n  UNSET = 'unset',\n  METRICS = 'metrics',\n  TRANSACTIONS = 'transactions',\n}\n\n/**\n * Metrics/transactions will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n */\nexport enum MEPState {\n  AUTO = 'auto',\n  METRICS_ONLY = 'metricsOnly',\n  TRANSACTIONS_ONLY = 'transactionsOnly',\n}\n\nexport const METRIC_SETTING_PARAM = 'metricSetting';\nexport const METRIC_SEARCH_SETTING_PARAM = 'metricSearchSetting'; // TODO: Clean this up since we don't need multiple params in practice.\n\nconst storageKey = 'performance.metrics-enhanced-setting';\nexport class MEPSetting {\n  static get(): MEPState | null {\n    const value = localStorage.getItem(storageKey);\n    if (value) {\n      if (!(value in MEPState)) {\n        localStorage.removeItem(storageKey);\n        return null;\n      }\n      return MEPState[value];\n    }\n    return null;\n  }\n\n  static set(value: MEPState) {\n    localStorage.setItem(storageKey, value);\n  }\n}\n\nexport function canUseMetricsDevUI(organization: Organization) {\n  return organization.features.includes('performance-use-metrics');\n}\n\nexport function canUseMetricsData(organization: Organization) {\n  const isDevFlagOn = canUseMetricsDevUI(organization); // Forces metrics data on as well.\n  const isInternalViewOn = organization.features.includes(\n    'performance-transaction-name-only-search'\n  );\n  const samplingFeatureFlag = organization.features.includes('dynamic-sampling'); // Exists on AM2 plans only.\n  const isRollingOut =\n    samplingFeatureFlag && organization.features.includes('mep-rollout-flag');\n\n  return isDevFlagOn || isInternalViewOn || isRollingOut;\n}\n\nexport function MEPSettingProvider({\n  children,\n  location,\n  _hasMEPState,\n  forceTransactions,\n}: {\n  children: ReactNode;\n  _hasMEPState?: MEPState;\n  forceTransactions?: boolean;\n  location?: Location;\n}) {\n  const organization = useOrganization();\n\n  const canUseMEP = canUseMetricsData(organization);\n\n  const allowedStates = [MEPState.METRICS_ONLY, MEPState.TRANSACTIONS_ONLY];\n  const _metricSettingFromParam = location\n    ? decodeScalar(location.query[METRIC_SETTING_PARAM])\n    : MEPState.METRICS_ONLY;\n  let defaultMetricsState = MEPState.METRICS_ONLY;\n\n  if (forceTransactions) {\n    defaultMetricsState = MEPState.TRANSACTIONS_ONLY;\n  }\n\n  const metricSettingFromParam =\n    allowedStates.find(s => s === _metricSettingFromParam) ?? defaultMetricsState;\n\n  const isControlledMEP = typeof _hasMEPState !== 'undefined';\n\n  const [_metricSettingState, _setMetricSettingState] = useReducer(\n    (_: MEPState, next: MEPState) => next,\n    metricSettingFromParam\n  );\n\n  const setMetricSettingState = useCallback(\n    (settingState: MEPState) => {\n      if (!location) {\n        return;\n      }\n      browserHistory.replace({\n        ...location,\n        query: {\n          ...location.query,\n          [METRIC_SETTING_PARAM]: settingState,\n        },\n      });\n      _setMetricSettingState(settingState);\n    },\n    [location, _setMetricSettingState]\n  );\n\n  const [autoSampleState, setAutoSampleState] = useReducer(\n    (_: AutoSampleState, next: AutoSampleState) => next,\n    AutoSampleState.UNSET\n  );\n\n  const metricSettingState = isControlledMEP ? _hasMEPState : _metricSettingState;\n\n  const shouldQueryProvideMEPAutoParams =\n    canUseMEP && metricSettingState === MEPState.AUTO;\n  const shouldQueryProvideMEPMetricParams =\n    canUseMEP && metricSettingState === MEPState.METRICS_ONLY;\n  const shouldQueryProvideMEPTransactionParams =\n    canUseMEP && metricSettingState === MEPState.TRANSACTIONS_ONLY;\n\n  const memoizationKey = `${metricSettingState}`;\n\n  return (\n    <_MEPSettingProvider\n      value={{\n        autoSampleState,\n        metricSettingState,\n        shouldQueryProvideMEPAutoParams,\n        shouldQueryProvideMEPMetricParams,\n        shouldQueryProvideMEPTransactionParams,\n        memoizationKey,\n        setMetricSettingState,\n        setAutoSampleState,\n      }}\n    >\n      <MEPDataProvider>{children}</MEPDataProvider>\n    </_MEPSettingProvider>\n  );\n}\n\nexport const useMEPSettingContext = _useMEPSettingContext;\n","import {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport BaseChart from 'sentry/components/charts/baseChart';\nimport {RenderProps} from 'sentry/components/charts/eventsRequest';\nimport {DateString, Organization, OrganizationSummary} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\n\nimport {PerformanceWidgetContainerTypes} from './components/performanceWidgetContainer';\nimport {ChartDefinition, PerformanceWidgetSetting} from './widgetDefinitions';\n\nexport enum VisualizationDataState {\n  ERROR = 'error',\n  LOADING = 'loading',\n  EMPTY = 'empty',\n  DATA = 'data',\n}\n\nexport enum GenericPerformanceWidgetDataType {\n  HISTOGRAM = 'histogram',\n  AREA = 'area',\n  VITALS = 'vitals',\n  LINE_LIST = 'line_list',\n  TRENDS = 'trends',\n  STACKED_AREA = 'stacked_area',\n}\n\nexport type PerformanceWidgetProps = {\n  ContainerActions: React.ComponentType<{isLoading: boolean}> | null;\n  chartDefinition: ChartDefinition;\n  chartHeight: number;\n\n  chartSetting: PerformanceWidgetSetting;\n  eventView: EventView;\n  fields: string[];\n\n  organization: Organization;\n  title: string;\n  titleTooltip: string;\n\n  InteractiveTitle?: React.ComponentType<{isLoading: boolean}> | null;\n\n  chartColor?: string;\n\n  withStaticFilters?: boolean;\n};\n\nexport interface WidgetDataResult {\n  hasData: boolean;\n  isErrored: boolean;\n  isLoading: boolean;\n}\nexport interface WidgetDataConstraint {\n  [dataKey: string]: WidgetDataResult | undefined;\n}\n\nexport type QueryChildren = {\n  children: (props: any) => React.ReactNode; // TODO(k-fish): Fix any type.\n};\nexport type QueryFC<T extends WidgetDataConstraint> = React.ComponentType<\n  QueryChildren & {\n    eventView: EventView;\n    orgSlug: string;\n    organization: OrganizationSummary;\n    widgetData: T;\n    end?: DateString;\n    environment?: Readonly<string[]>;\n    fields?: string | string[];\n    period?: string | null;\n    project?: Readonly<number[]>;\n    query?: string;\n    referrer?: string;\n    start?: DateString;\n    team?: Readonly<string | string[]>;\n    yAxis?: string | string[];\n  }\n>;\n\nexport type QueryDefinition<\n  T extends WidgetDataConstraint,\n  S extends WidgetDataResult | undefined\n> = {\n  component: QueryFC<T>;\n  fields: string | string[];\n  transform: (\n    props: GenericPerformanceWidgetProps<T>,\n    results: any,\n    queryDefinition: QueryDefinitionWithKey<T>\n  ) => S; // TODO(k-fish): Fix any type.\n  enabled?: (data: T) => boolean;\n};\nexport type Queries<T extends WidgetDataConstraint> = Record<\n  string,\n  QueryDefinition<T, T[string]>\n>;\n\ntype Visualization<T> = {\n  component: React.ComponentType<{\n    widgetData: T;\n    grid?: React.ComponentProps<typeof BaseChart>['grid'];\n    height?: number;\n    queryFields?: string;\n  }>;\n  height: number;\n  bottomPadding?: boolean;\n  dataState?: (data: T) => VisualizationDataState;\n  fields?: string;\n  noPadding?: boolean;\n  queryFields?: string[]; // Used to determine placeholder and loading sizes. Will also be passed to the component.\n};\n\ntype Visualizations<T extends WidgetDataConstraint> = Readonly<Visualization<T>[]>; // Readonly because of index being used for React key.\n\ntype HeaderActions<T> = React.ComponentType<{\n  widgetData: T;\n}>;\n\ntype InteractiveTitle<T> = React.ComponentType<{widgetData: T}>;\n\ntype Subtitle<T> = React.ComponentType<{\n  widgetData: T;\n}>;\n\nexport type GenericPerformanceWidgetProps<T extends WidgetDataConstraint> = {\n  Queries: Queries<T>;\n  Visualizations: Visualizations<T>;\n\n  chartDefinition: ChartDefinition;\n  chartHeight: number;\n\n  chartSetting: PerformanceWidgetSetting;\n  containerType: PerformanceWidgetContainerTypes;\n  eventView: EventView;\n\n  fields: string[];\n  location: Location;\n  organization: Organization;\n\n  // Header;\n  title: string;\n  titleTooltip: string;\n  EmptyComponent?: React.ComponentType<{height?: number}>;\n\n  HeaderActions?: HeaderActions<T>;\n  InteractiveTitle?: InteractiveTitle<T> | null;\n  Subtitle?: Subtitle<T>;\n};\n\nexport type GenericPerformanceWithData<T extends WidgetDataConstraint> =\n  GenericPerformanceWidgetProps<T> & WidgetDataProps<T>;\n\nexport type WidgetDataProps<T> = {\n  removeWidgetDataForKey: (dataKey: string) => void;\n  setWidgetDataForKey: (dataKey: string, result?: WidgetDataResult) => void;\n  widgetData: T;\n};\n\nexport type EventsRequestChildrenProps = RenderProps;\n\nexport type QueryDefinitionWithKey<T extends WidgetDataConstraint> = QueryDefinition<\n  T,\n  T[string]\n> & {queryKey: string};\n\nexport type QueryHandlerProps<T extends WidgetDataConstraint> = {\n  api: Client;\n  eventView: EventView;\n  queries: QueryDefinitionWithKey<T>[];\n  queryProps: WidgetPropUnion<T>;\n  children?: React.ReactNode;\n} & WidgetDataProps<T>;\n\nexport type WidgetPropUnion<T extends WidgetDataConstraint> =\n  GenericPerformanceWidgetProps<T>;\n","import {Organization} from 'sentry/types';\nimport {objectIsEmpty} from 'sentry/utils';\nimport localStorage from 'sentry/utils/localStorage';\nimport {\n  canUseMetricsData,\n  MEPState,\n  MetricsEnhancedSettingContext,\n} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\n\nimport {ProjectPerformanceType} from '../../utils';\n\nimport {PerformanceWidgetSetting} from './widgetDefinitions';\n\nexport const eventsRequestQueryProps = [\n  'children',\n  'organization',\n  'yAxis',\n  'period',\n  'start',\n  'end',\n  'environment',\n  'project',\n  'referrer',\n] as const;\n\nfunction setWidgetStorageObject(localObject: Record<string, string>) {\n  localStorage.setItem(getContainerLocalStorageObjectKey, JSON.stringify(localObject));\n}\n\nconst mepQueryParamBase = {};\n\nexport function getMEPQueryParams(\n  mepContext: MetricsEnhancedSettingContext,\n  forceAuto?: boolean\n) {\n  let queryParams = {};\n  const base = mepQueryParamBase;\n  if (mepContext.shouldQueryProvideMEPAutoParams || forceAuto) {\n    queryParams = {\n      ...queryParams,\n      ...base,\n      dataset: 'metricsEnhanced',\n    };\n    if (forceAuto) {\n      return queryParams;\n    }\n  }\n  if (mepContext.shouldQueryProvideMEPTransactionParams) {\n    queryParams = {...queryParams, ...base, dataset: 'discover'};\n  }\n  if (mepContext.shouldQueryProvideMEPMetricParams) {\n    queryParams = {...queryParams, ...base, dataset: 'metrics'};\n  }\n\n  // Disallow any performance request from using aggregates since they aren't currently possible in all visualizations and we don't want to mix modes.\n  return objectIsEmpty(queryParams) ? undefined : queryParams;\n}\n\nexport function getMetricOnlyQueryParams() {\n  return {...mepQueryParamBase, dataset: 'metrics'};\n}\n\nexport const WIDGET_MAP_DENY_LIST = [\n  PerformanceWidgetSetting.MOST_RELATED_ERRORS,\n  PerformanceWidgetSetting.MOST_RELATED_ISSUES,\n];\n\n/**\n * Some widgets, such as Related Issues, are inherently not possible w/ metrics at the moment since they use event.type:error under the hood.\n */\nexport function getMEPParamsIfApplicable(\n  mepContext: MetricsEnhancedSettingContext,\n  widget: PerformanceWidgetSetting\n) {\n  if (WIDGET_MAP_DENY_LIST.includes(widget)) {\n    return undefined;\n  }\n  return getMEPQueryParams(mepContext);\n}\n\nconst getContainerLocalStorageObjectKey = 'landing-chart-container';\nconst getContainerKey = (\n  index: number,\n  performanceType: ProjectPerformanceType,\n  height: number\n) => `landing-chart-container#${performanceType}#${height}#${index}`;\n\nfunction getWidgetStorageObject() {\n  const localObject = JSON.parse(\n    localStorage.getItem(getContainerLocalStorageObjectKey) || '{}'\n  );\n  return localObject;\n}\n\nexport const getChartSetting = (\n  index: number,\n  height: number,\n  performanceType: ProjectPerformanceType,\n  defaultType: PerformanceWidgetSetting,\n  forceDefaultChartSetting?: boolean // Used for testing.\n): PerformanceWidgetSetting => {\n  if (forceDefaultChartSetting) {\n    return defaultType;\n  }\n  const key = getContainerKey(index, performanceType, height);\n  const localObject = getWidgetStorageObject();\n  const value = localObject?.[key];\n\n  if (\n    value &&\n    Object.values(PerformanceWidgetSetting).includes(value as PerformanceWidgetSetting)\n  ) {\n    const _value: PerformanceWidgetSetting = value as PerformanceWidgetSetting;\n    return _value;\n  }\n  return defaultType;\n};\nexport const _setChartSetting = (\n  index: number,\n  height: number,\n  performanceType: ProjectPerformanceType,\n  setting: PerformanceWidgetSetting\n) => {\n  const key = getContainerKey(index, performanceType, height);\n  const localObject = getWidgetStorageObject();\n  localObject[key] = setting;\n\n  setWidgetStorageObject(localObject);\n};\n\nconst DISALLOWED_CHARTS_METRICS = [\n  PerformanceWidgetSetting.DURATION_HISTOGRAM,\n  PerformanceWidgetSetting.FCP_HISTOGRAM,\n  PerformanceWidgetSetting.LCP_HISTOGRAM,\n  PerformanceWidgetSetting.FID_HISTOGRAM,\n];\n\nexport function filterAllowedChartsMetrics(\n  organization: Organization,\n  allowedCharts: PerformanceWidgetSetting[],\n  mepSetting: MetricsEnhancedSettingContext\n) {\n  if (\n    !canUseMetricsData(organization) ||\n    organization.features.includes('performance-mep-reintroduce-histograms') ||\n    mepSetting.metricSettingState === MEPState.TRANSACTIONS_ONLY\n  ) {\n    return allowedCharts;\n  }\n\n  return allowedCharts.filter(c => !DISALLOWED_CHARTS_METRICS.includes(c));\n}\n","import {CHART_PALETTE} from 'sentry/constants/chartPalette';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {SPAN_OP_BREAKDOWN_FIELDS} from 'sentry/utils/discover/fields';\n\nimport {getTermHelp, PerformanceTerm} from '../../data';\n\nimport {GenericPerformanceWidgetDataType} from './types';\n\nexport interface ChartDefinition {\n  dataType: GenericPerformanceWidgetDataType;\n  fields: string[];\n  // Additional fields to get requested but are not directly used in visualization.\n  title: string;\n\n  titleTooltip: string;\n  // The first field in the list will be treated as the primary field in most widgets (except for special casing).\n  allowsOpenInDiscover?: boolean;\n\n  chartColor?: string;\n  secondaryFields?: string[]; // Optional. Will default to colors depending on placement in list or colors from the chart itself.\n\n  vitalStops?: {\n    meh: number;\n    poor: number;\n  };\n}\n\nexport enum PerformanceWidgetSetting {\n  DURATION_HISTOGRAM = 'duration_histogram',\n  LCP_HISTOGRAM = 'lcp_histogram',\n  FCP_HISTOGRAM = 'fcp_histogram',\n  FID_HISTOGRAM = 'fid_histogram',\n  APDEX_AREA = 'apdex_area',\n  P50_DURATION_AREA = 'p50_duration_area',\n  P75_DURATION_AREA = 'p75_duration_area',\n  P95_DURATION_AREA = 'p95_duration_area',\n  P99_DURATION_AREA = 'p99_duration_area',\n  P75_LCP_AREA = 'p75_lcp_area',\n  TPM_AREA = 'tpm_area',\n  FAILURE_RATE_AREA = 'failure_rate_area',\n  USER_MISERY_AREA = 'user_misery_area',\n  WORST_LCP_VITALS = 'worst_lcp_vitals',\n  WORST_FCP_VITALS = 'worst_fcp_vitals',\n  WORST_CLS_VITALS = 'worst_cls_vitals',\n  WORST_FID_VITALS = 'worst_fid_vitals',\n  MOST_CHANGED = 'most_changed',\n  MOST_IMPROVED = 'most_improved',\n  MOST_REGRESSED = 'most_regressed',\n  MOST_RELATED_ERRORS = 'most_related_errors',\n  MOST_RELATED_ISSUES = 'most_related_issues',\n  SLOW_HTTP_OPS = 'slow_http_ops',\n  SLOW_DB_OPS = 'slow_db_ops',\n  SLOW_RESOURCE_OPS = 'slow_resource_ops',\n  SLOW_BROWSER_OPS = 'slow_browser_ops',\n  COLD_STARTUP_AREA = 'cold_startup_area',\n  WARM_STARTUP_AREA = 'warm_startup_area',\n  SLOW_FRAMES_AREA = 'slow_frames_area',\n  FROZEN_FRAMES_AREA = 'frozen_frames_area',\n  MOST_SLOW_FRAMES = 'most_slow_frames',\n  MOST_FROZEN_FRAMES = 'most_frozen_frames',\n  SPAN_OPERATIONS = 'span_operations',\n  TIME_TO_INITIAL_DISPLAY = 'time_to_initial_display',\n  TIME_TO_FULL_DISPLAY = 'time_to_full_display',\n}\n\nconst WIDGET_PALETTE = CHART_PALETTE[5];\nexport const WIDGET_DEFINITIONS: ({\n  organization,\n}: {\n  organization: Organization;\n}) => Record<PerformanceWidgetSetting, ChartDefinition> = ({\n  organization,\n}: {\n  organization: Organization;\n}) => ({\n  [PerformanceWidgetSetting.DURATION_HISTOGRAM]: {\n    title: t('Duration Distribution'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.DURATION_DISTRIBUTION),\n    fields: ['transaction.duration'],\n    dataType: GenericPerformanceWidgetDataType.HISTOGRAM,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.LCP_HISTOGRAM]: {\n    title: t('LCP Distribution'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.DURATION_DISTRIBUTION),\n    fields: ['measurements.lcp'],\n    dataType: GenericPerformanceWidgetDataType.HISTOGRAM,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.FCP_HISTOGRAM]: {\n    title: t('FCP Distribution'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.DURATION_DISTRIBUTION),\n    fields: ['measurements.fcp'],\n    dataType: GenericPerformanceWidgetDataType.HISTOGRAM,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.FID_HISTOGRAM]: {\n    title: t('FID Distribution'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.DURATION_DISTRIBUTION),\n    fields: ['measurements.fid'],\n    dataType: GenericPerformanceWidgetDataType.HISTOGRAM,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.WORST_LCP_VITALS]: {\n    title: t('Worst LCP Web Vitals'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.LCP),\n    fields: ['measurements.lcp'],\n    vitalStops: {\n      poor: 4000,\n      meh: 2500,\n    },\n    dataType: GenericPerformanceWidgetDataType.VITALS,\n  },\n  [PerformanceWidgetSetting.WORST_FCP_VITALS]: {\n    title: t('Worst FCP Web Vitals'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.FCP),\n    fields: ['measurements.fcp'],\n    vitalStops: {\n      poor: 3000,\n      meh: 1000,\n    },\n    dataType: GenericPerformanceWidgetDataType.VITALS,\n  },\n  [PerformanceWidgetSetting.WORST_FID_VITALS]: {\n    title: t('Worst FID Web Vitals'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.FID),\n    fields: ['measurements.fid'],\n    vitalStops: {\n      poor: 300,\n      meh: 100,\n    },\n    dataType: GenericPerformanceWidgetDataType.VITALS,\n  },\n  [PerformanceWidgetSetting.WORST_CLS_VITALS]: {\n    title: t('Worst CLS Web Vitals'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.CLS),\n    fields: ['measurements.cls'],\n    vitalStops: {\n      poor: 0.25,\n      meh: 0.1,\n    },\n    dataType: GenericPerformanceWidgetDataType.VITALS,\n  },\n  [PerformanceWidgetSetting.TPM_AREA]: {\n    title: t('Transactions Per Minute'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.TPM),\n    fields: ['tpm()'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[1],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.APDEX_AREA]: {\n    title: t('Apdex'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.APDEX),\n    fields: ['apdex()'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[4],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.P50_DURATION_AREA]: {\n    title: t('p50 Duration'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.P50),\n    fields: ['p50(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[3],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.P75_DURATION_AREA]: {\n    title: t('p75 Duration'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.P75),\n    fields: ['p75(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[3],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.P95_DURATION_AREA]: {\n    title: t('p95 Duration'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.P95),\n    fields: ['p95(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[3],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.P99_DURATION_AREA]: {\n    title: t('p99 Duration'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.P99),\n    fields: ['p99(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[3],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.P75_LCP_AREA]: {\n    title: t('p75 LCP'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.P75),\n    fields: ['p75(measurements.lcp)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[1],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.FAILURE_RATE_AREA]: {\n    title: t('Failure Rate'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.FAILURE_RATE),\n    fields: ['failure_rate()'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[2],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.USER_MISERY_AREA]: {\n    title: t('User Misery'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.USER_MISERY),\n    fields: [`user_misery()`],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[0],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.COLD_STARTUP_AREA]: {\n    title: t('Cold Startup Time'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.APP_START_COLD),\n    fields: ['p75(measurements.app_start_cold)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[4],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.WARM_STARTUP_AREA]: {\n    title: t('Warm Startup Time'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.APP_START_WARM),\n    fields: ['p75(measurements.app_start_warm)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[3],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.SLOW_FRAMES_AREA]: {\n    title: t('Slow Frames'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.SLOW_FRAMES),\n    fields: ['p75(measurements.frames_slow_rate)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[0],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.FROZEN_FRAMES_AREA]: {\n    title: t('Frozen Frames'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.FROZEN_FRAMES),\n    fields: ['p75(measurements.frames_frozen_rate)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[5],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.MOST_RELATED_ERRORS]: {\n    title: t('Most Related Errors'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.MOST_ERRORS),\n    fields: [`failure_count()`],\n    dataType: GenericPerformanceWidgetDataType.LINE_LIST,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_RELATED_ISSUES]: {\n    title: t('Most Related Issues'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.MOST_ISSUES),\n    fields: [`count()`],\n    dataType: GenericPerformanceWidgetDataType.LINE_LIST,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_HTTP_OPS]: {\n    title: t('Slow HTTP Ops'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.http)`, 'p75(spans.db)'],\n    dataType: GenericPerformanceWidgetDataType.LINE_LIST,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_BROWSER_OPS]: {\n    title: t('Slow Browser Ops'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.browser)`],\n    dataType: GenericPerformanceWidgetDataType.LINE_LIST,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_RESOURCE_OPS]: {\n    title: t('Slow Resource Ops'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.resource)`],\n    dataType: GenericPerformanceWidgetDataType.LINE_LIST,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_DB_OPS]: {\n    title: t('Slow DB Ops'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.db)`, 'p75(spans.http)'],\n    dataType: GenericPerformanceWidgetDataType.LINE_LIST,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.TIME_TO_INITIAL_DISPLAY]: {\n    title: t('Time to Initial Display'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.TIME_TO_INITIAL_DISPLAY),\n    fields: ['p75(measurements.time_to_initial_display)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[4],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.TIME_TO_FULL_DISPLAY]: {\n    title: t('Time to Full Display'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.TIME_TO_FULL_DISPLAY),\n    fields: ['p75(measurements.time_to_full_display)'],\n    dataType: GenericPerformanceWidgetDataType.AREA,\n    chartColor: WIDGET_PALETTE[4],\n    allowsOpenInDiscover: true,\n  },\n  [PerformanceWidgetSetting.MOST_SLOW_FRAMES]: {\n    title: t('Most Slow Frames'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.SLOW_FRAMES),\n    fields: ['avg(measurements.frames_slow)'],\n    dataType: GenericPerformanceWidgetDataType.LINE_LIST,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_FROZEN_FRAMES]: {\n    title: t('Most Frozen Frames'),\n    titleTooltip: getTermHelp(organization, PerformanceTerm.FROZEN_FRAMES),\n    fields: ['avg(measurements.frames_frozen)'],\n    dataType: GenericPerformanceWidgetDataType.LINE_LIST,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_IMPROVED]: {\n    title: t('Most Improved'),\n    titleTooltip: t(\n      'This compares the baseline (%s) of the past with the present.',\n      'improved'\n    ),\n    fields: [],\n    dataType: GenericPerformanceWidgetDataType.TRENDS,\n  },\n  [PerformanceWidgetSetting.MOST_REGRESSED]: {\n    title: t('Most Regressed'),\n    titleTooltip: t(\n      'This compares the baseline (%s) of the past with the present.',\n      'regressed'\n    ),\n    fields: [],\n    dataType: GenericPerformanceWidgetDataType.TRENDS,\n  },\n  [PerformanceWidgetSetting.MOST_CHANGED]: {\n    title: t('Most Changed'),\n    titleTooltip: t(\n      'This compares the baseline (%s) of the past with the present.',\n      'changed'\n    ),\n    fields: [],\n    dataType: GenericPerformanceWidgetDataType.TRENDS,\n  },\n  [PerformanceWidgetSetting.SPAN_OPERATIONS]: {\n    title: t('Span Operations Breakdown'),\n    titleTooltip: '',\n    fields: SPAN_OP_BREAKDOWN_FIELDS.map(spanOp => `p75(${spanOp})`),\n    dataType: GenericPerformanceWidgetDataType.STACKED_AREA,\n  },\n});\n"],"names":["_MEPDataProvider","_useMEPDataContext","createDefinedContext","name","MEPDataProvider","_ref","children","chartSetting","setAutoSampleState","useMEPSettingContext","isMetricsData","_setIsMetricsData","useState","undefined","setIsMetricsData","useCallback","value","WIDGET_MAP_DENY_LIST","includes","AutoSampleState","METRICS","TRANSACTIONS","_jsx","displayName","useMEPDataContext","getIsMetricsDataFromResults","results","field","arguments","length","meta","seriesAdditionalInfo","histograms","tableData","MEPTag","useOrganization","features","tagText","Tag","_MEPSettingProvider","_useMEPSettingContext","_MEPSettingContext","MEPConsumer","Consumer","MEPState","METRIC_SETTING_PARAM","METRIC_SEARCH_SETTING_PARAM","canUseMetricsData","organization","isDevFlagOn","canUseMetricsDevUI","isInternalViewOn","isRollingOut","MEPSettingProvider","location","_hasMEPState","forceTransactions","canUseMEP","allowedStates","METRICS_ONLY","TRANSACTIONS_ONLY","_metricSettingFromParam","decodeScalar","query","defaultMetricsState","metricSettingFromParam","find","s","isControlledMEP","_metricSettingState","_setMetricSettingState","useReducer","_","next","setMetricSettingState","settingState","browserHistory","replace","autoSampleState","UNSET","metricSettingState","shouldQueryProvideMEPAutoParams","AUTO","shouldQueryProvideMEPMetricParams","shouldQueryProvideMEPTransactionParams","memoizationKey","VisualizationDataState","GenericPerformanceWidgetDataType","eventsRequestQueryProps","mepQueryParamBase","getMEPQueryParams","mepContext","forceAuto","queryParams","base","dataset","objectIsEmpty","PerformanceWidgetSetting","MOST_RELATED_ERRORS","MOST_RELATED_ISSUES","getMEPParamsIfApplicable","widget","getContainerLocalStorageObjectKey","getContainerKey","index","performanceType","height","getWidgetStorageObject","JSON","parse","localStorage","getItem","getChartSetting","defaultType","forceDefaultChartSetting","key","localObject","Object","values","_setChartSetting","setting","setItem","stringify","setWidgetStorageObject","DISALLOWED_CHARTS_METRICS","DURATION_HISTOGRAM","FCP_HISTOGRAM","LCP_HISTOGRAM","FID_HISTOGRAM","filterAllowedChartsMetrics","allowedCharts","mepSetting","filter","c","WIDGET_PALETTE","CHART_PALETTE","WIDGET_DEFINITIONS","title","t","titleTooltip","getTermHelp","PerformanceTerm","DURATION_DISTRIBUTION","fields","dataType","HISTOGRAM","chartColor","WORST_LCP_VITALS","LCP","vitalStops","poor","meh","VITALS","WORST_FCP_VITALS","FCP","WORST_FID_VITALS","FID","WORST_CLS_VITALS","CLS","TPM_AREA","TPM","AREA","allowsOpenInDiscover","APDEX_AREA","APDEX","P50_DURATION_AREA","P50","P75_DURATION_AREA","P75","P95_DURATION_AREA","P95","P99_DURATION_AREA","P99","P75_LCP_AREA","FAILURE_RATE_AREA","FAILURE_RATE","USER_MISERY_AREA","USER_MISERY","COLD_STARTUP_AREA","APP_START_COLD","WARM_STARTUP_AREA","APP_START_WARM","SLOW_FRAMES_AREA","SLOW_FRAMES","FROZEN_FRAMES_AREA","FROZEN_FRAMES","MOST_ERRORS","LINE_LIST","MOST_ISSUES","SLOW_HTTP_OPS","SLOW_HTTP_SPANS","SLOW_BROWSER_OPS","SLOW_RESOURCE_OPS","SLOW_DB_OPS","TIME_TO_INITIAL_DISPLAY","TIME_TO_FULL_DISPLAY","MOST_SLOW_FRAMES","MOST_FROZEN_FRAMES","MOST_IMPROVED","TRENDS","MOST_REGRESSED","MOST_CHANGED","SPAN_OPERATIONS","SPAN_OP_BREAKDOWN_FIELDS","map","spanOp","STACKED_AREA"],"sourceRoot":""}