{"version":3,"file":"chunks/app_components_modals_widgetBuilder_overwriteWidgetModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/widgetBuilder/overwriteWidgetModal.tsx","webpack:///./app/views/dashboards/types.tsx","webpack:///./app/views/dashboards/widgetBuilder/widgetLibrary/card.tsx","webpack:///./app/views/dashboards/widgetLibrary/widgetCard.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Card} from 'sentry/views/dashboards/widgetBuilder/widgetLibrary/card';\nimport {WidgetTemplate} from 'sentry/views/dashboards/widgetLibrary/data';\n\nexport type OverwriteWidgetModalProps = {\n  iconColor: string;\n  onConfirm: () => void;\n  widget: WidgetTemplate;\n};\n\ntype Props = ModalRenderProps & OverwriteWidgetModalProps;\n\nconst MODAL_DESCRIPTION = t(\n  \"You've already started building this widget and will lose unsaved changes. Are you sure you want to overwrite this widget with the template values?\"\n);\n\nfunction OverwriteWidgetModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  onConfirm,\n  widget,\n  iconColor,\n}: Props) {\n  function handleConfirm() {\n    onConfirm();\n    closeModal();\n  }\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Overwrite Widget')}</h4>\n      </Header>\n      <Body>\n        {MODAL_DESCRIPTION}\n        <CardWrapper>\n          <Card widget={widget} iconColor={iconColor} />\n        </CardWrapper>\n      </Body>\n      <Footer>\n        <ButtonBar gap={1.5}>\n          <Button onClick={closeModal}>{t('Cancel')}</Button>\n          <Button priority=\"primary\" onClick={handleConfirm}>\n            {t('Confirm')}\n          </Button>\n        </ButtonBar>\n      </Footer>\n    </Fragment>\n  );\n}\n\nexport default OverwriteWidgetModal;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 700px;\n  margin: 70px auto;\n`;\n\nconst CardWrapper = styled('div')`\n  padding: ${space(3)} 0;\n`;\n","import {Layout} from 'react-grid-layout';\n\nimport {User} from 'sentry/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport const DEFAULT_TABLE_LIMIT = 5;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  TOP_N = 'top_n',\n}\n\nexport enum WidgetType {\n  DISCOVER = 'discover',\n  ISSUE = 'issue',\n  RELEASE = 'metrics', // TODO(dashboards): Rename this on backend and then change here\n}\n\nexport type WidgetQuery = {\n  aggregates: string[];\n  columns: string[];\n  conditions: string;\n  name: string;\n  orderby: string;\n  // Table column alias.\n  // We may want to have alias for y-axis in the future too\n  fieldAliases?: string[];\n  // Fields is replaced with aggregates + columns. It\n  // is currently used to track column order on table\n  // widgets.\n  fields?: string[];\n};\n\nexport type Widget = {\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n  title: string;\n  description?: string;\n  id?: string;\n  layout?: WidgetLayout | null;\n  // Used to define 'topEvents' when fetching time-series data for a widget\n  limit?: number;\n  tempId?: string;\n  widgetType?: WidgetType;\n};\n\n// We store an explicit set of keys in the backend now\nexport type WidgetLayout = Pick<Layout, 'h' | 'w' | 'x' | 'y'> & {\n  minH: number;\n};\n\nexport type WidgetPreview = {\n  displayType: DisplayType;\n  layout: WidgetLayout | null;\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  widgetDisplay: DisplayType[];\n  widgetPreview: WidgetPreview[];\n  createdBy?: User;\n  dateCreated?: string;\n};\n\nexport enum DashboardFilterKeys {\n  RELEASE = 'release',\n}\n\nexport type DashboardFilters = {\n  [DashboardFilterKeys.RELEASE]?: string[];\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  dateCreated: string;\n  filters: DashboardFilters;\n  id: string;\n  projects: number[];\n  title: string;\n  widgets: Widget[];\n  createdBy?: User;\n  end?: string;\n  environment?: string[];\n  period?: string;\n  start?: string;\n  utc?: boolean;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n  PREVIEW = 'preview',\n}\n\n// where we launch the dashboard widget from\nexport enum DashboardWidgetSource {\n  DISCOVERV2 = 'discoverv2',\n  DASHBOARDS = 'dashboards',\n  LIBRARY = 'library',\n  ISSUE_DETAILS = 'issueDetail',\n}\n","import styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\nimport {WidgetTemplate} from 'sentry/views/dashboards/widgetLibrary/data';\nimport {getWidgetIcon} from 'sentry/views/dashboards/widgetLibrary/widgetCard';\n\ninterface CardProps {\n  iconColor: string;\n  widget: WidgetTemplate;\n}\n\nexport function Card({widget, iconColor}: CardProps) {\n  const {title, description, displayType} = widget;\n  const Icon = getWidgetIcon(displayType);\n\n  return (\n    <Container>\n      <IconWrapper backgroundColor={iconColor}>\n        <Icon color=\"white\" />\n      </IconWrapper>\n      <Information>\n        <Heading>{title}</Heading>\n        <SubHeading>{description}</SubHeading>\n      </Information>\n    </Container>\n  );\n}\n\nconst Container = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n`;\n\nconst Information = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Heading = styled('div')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: 500;\n  margin-bottom: 0;\n  color: ${p => p.theme.gray500};\n`;\n\nconst SubHeading = styled('small')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IconWrapper = styled('div')<{backgroundColor: string}>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ${space(1)};\n  min-width: 40px;\n  height: 40px;\n  border-radius: ${p => p.theme.borderRadius};\n  background: ${p => p.backgroundColor};\n`;\n","import {IconArrow, IconGlobe, IconGraph, IconMenu, IconNumber} from 'sentry/icons';\nimport {IconGraphArea} from 'sentry/icons/iconGraphArea';\nimport {IconGraphBar} from 'sentry/icons/iconGraphBar';\n\nimport {DisplayType} from '../types';\n\nexport function getWidgetIcon(displayType: DisplayType) {\n  switch (displayType) {\n    case DisplayType.TABLE:\n      return IconMenu;\n    case DisplayType.WORLD_MAP:\n      return IconGlobe;\n    case DisplayType.BIG_NUMBER:\n      return IconNumber;\n    case DisplayType.BAR:\n      return IconGraphBar;\n    case DisplayType.TOP_N:\n      return IconArrow;\n    case DisplayType.AREA:\n      return IconGraphArea;\n    case DisplayType.LINE:\n    default:\n      return IconGraph;\n  }\n}\n"],"names":["MODAL_DESCRIPTION","t","OverwriteWidgetModal","_ref","Header","Body","Footer","closeModal","onConfirm","widget","iconColor","_jsxs","Fragment","children","_jsx","closeButton","CardWrapper","Card","ButtonBar","gap","Button","onClick","priority","displayName","modalCss","name","styles","_styled","target","space","MAX_WIDGETS","DEFAULT_TABLE_LIMIT","DisplayType","WidgetType","DashboardFilterKeys","DashboardState","DashboardWidgetSource","title","description","displayType","Icon","TABLE","IconMenu","WORLD_MAP","IconGlobe","BIG_NUMBER","IconNumber","BAR","IconGraphBar","TOP_N","IconArrow","AREA","IconGraphArea","LINE","IconGraph","getWidgetIcon","Container","IconWrapper","backgroundColor","color","Information","Heading","SubHeading","p","theme","fontSizeLarge","gray500","gray300","borderRadius"],"sourceRoot":""}