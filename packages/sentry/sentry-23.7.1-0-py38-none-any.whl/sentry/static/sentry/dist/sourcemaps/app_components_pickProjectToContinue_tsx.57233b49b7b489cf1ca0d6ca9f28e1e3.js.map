{"version":3,"file":"chunks/app_components_pickProjectToContinue_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"ogBA4BA,SAASA,EAAqBC,GAMpB,IANqB,sBAC7BC,EAAqB,SACrBC,EAAQ,OACRC,EAAM,SACNC,EAAQ,0BACRC,GAA4B,GACtBL,EACN,MAAMM,EAAgBJ,EAASK,MAC/B,IAAIC,GAAa,EACbC,EAAQ,GAAEP,EAASQ,oBAEvB,GAAIJ,EAAe,CACjB,MAIMK,EAAe,IAJCC,OAAOC,QAAQP,GAClCQ,QAAOC,IAAA,IAAEC,EAAKC,GAAOF,EAAA,MAAa,YAARC,CAAiB,IAC3CE,KAAIC,IAAA,IAAEH,EAAKI,GAAMD,EAAA,MAAM,GAAEH,KAAOI,GAAO,IAEF,YAAYC,KAAK,KAEzDZ,EAAQ,GAAEP,EAASQ,YAAYC,GACjC,CAGA,OAAwB,IAApBP,EAASkB,QACXnB,EAAOoB,QAAQd,EAAOL,EAAS,GAAGoB,IAC3B,QAGTC,EAAAA,EAAAA,YACEC,IACEC,EAAAA,EAAAA,IAACC,EAAAA,EAAkB,IACbF,EACJG,SAAS,EACTC,aAAW,EACX5B,SAAW,GAAEO,YACbsB,SAAUrB,IACRF,GAAa,EACbL,EAAOoB,QAAQb,EAAS,EAE1BsB,aAAc5B,EAASc,KAAIe,GAAKA,EAAEC,OAClC7B,0BAA2BA,KAG/B,CACE8B,UAGO3B,GACHL,EAAOiC,KAAKnC,EAEhB,KAIG0B,EAAAA,EAAAA,IAACU,EAAuB,IACjC,CAtDStC,EAAqBuC,YAAA,wBAwD9B,MAAMD,GAA0BE,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,CAAAE,KAAA,SAAAC,OAAA,4BAK7C,G","sources":["webpack:///./app/components/pickProjectToContinue.tsx"],"sourcesContent":["import {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor, LocationDescriptorObject} from 'history';\n\nimport {openModal} from 'sentry/actionCreators/modal';\nimport ContextPickerModal from 'sentry/components/contextPickerModal';\n\ntype Project = {\n  id: string;\n  slug: string;\n};\n\ntype Props = {\n  /**\n   * Path used on the redirect router if the user did select a project\n   */\n  nextPath: Pick<LocationDescriptorObject, 'query'> & {\n    pathname: NonNullable<LocationDescriptorObject['pathname']>;\n  };\n  /**\n   * Path used on the redirect router if the user did not select a project\n   */\n  noProjectRedirectPath: LocationDescriptor;\n  projects: Project[];\n  router: InjectedRouter;\n  allowAllProjectsSelection?: boolean;\n};\n\nfunction PickProjectToContinue({\n  noProjectRedirectPath,\n  nextPath,\n  router,\n  projects,\n  allowAllProjectsSelection = false,\n}: Props) {\n  const nextPathQuery = nextPath.query;\n  let navigating = false;\n  let path = `${nextPath.pathname}?project=`;\n\n  if (nextPathQuery) {\n    const filteredQuery = Object.entries(nextPathQuery)\n      .filter(([key, _value]) => key !== 'project')\n      .map(([key, value]) => `${key}=${value}`);\n\n    const newPathQuery = [...filteredQuery, 'project='].join('&');\n\n    path = `${nextPath.pathname}?${newPathQuery}`;\n  }\n\n  // if the project in URL is missing, but this release belongs to only one project, redirect there\n  if (projects.length === 1) {\n    router.replace(path + projects[0].id);\n    return null;\n  }\n\n  openModal(\n    modalProps => (\n      <ContextPickerModal\n        {...modalProps}\n        needOrg={false}\n        needProject\n        nextPath={`${path}:project`}\n        onFinish={pathname => {\n          navigating = true;\n          router.replace(pathname);\n        }}\n        projectSlugs={projects.map(p => p.slug)}\n        allowAllProjectsSelection={allowAllProjectsSelection}\n      />\n    ),\n    {\n      onClose() {\n        // we want this to be executed only if the user didn't select any project\n        // (closed modal either via button, Esc, clicking outside, ...)\n        if (!navigating) {\n          router.push(noProjectRedirectPath);\n        }\n      },\n    }\n  );\n\n  return <ContextPickerBackground />;\n}\n\nconst ContextPickerBackground = styled('div')`\n  height: 100vh;\n  width: 100%;\n`;\n\nexport default PickProjectToContinue;\n"],"names":["PickProjectToContinue","_ref","noProjectRedirectPath","nextPath","router","projects","allowAllProjectsSelection","nextPathQuery","query","navigating","path","pathname","newPathQuery","Object","entries","filter","_ref2","key","_value","map","_ref3","value","join","length","replace","id","openModal","modalProps","_jsx","ContextPickerModal","needOrg","needProject","onFinish","projectSlugs","p","slug","onClose","push","ContextPickerBackground","displayName","_styled","target","name","styles"],"sourceRoot":""}