{"version":3,"file":"chunks/app_views_projectInstall_issueAlertOptions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/projectInstall/issueAlertOptions.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport Input from 'sentry/components/input';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {IssueAlertRuleAction} from 'sentry/types/alerts';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nexport enum MetricValues {\n  ERRORS,\n  USERS,\n}\n\nexport enum RuleAction {\n  ALERT_ON_EVERY_ISSUE,\n  CUSTOMIZED_ALERTS,\n  CREATE_ALERT_LATER,\n}\n\nconst UNIQUE_USER_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition';\nconst EVENT_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition';\nexport const EVENT_FREQUENCY_PERCENT_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyPercentCondition';\nexport const REAPPEARED_EVENT_CONDITION =\n  'sentry.rules.conditions.reappeared_event.ReappearedEventCondition';\nconst ISSUE_ALERT_DEFAULT_ACTION: Omit<\n  IssueAlertRuleAction,\n  'label' | 'name' | 'prompt'\n> = {\n  id: 'sentry.mail.actions.NotifyEmailAction',\n  targetType: 'IssueOwners',\n};\n\nconst METRIC_CONDITION_MAP = {\n  [MetricValues.ERRORS]: EVENT_FREQUENCY_CONDITION,\n  [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,\n} as const;\n\nconst DEFAULT_PLACEHOLDER_VALUE = '10';\n\ntype StateUpdater = (updatedData: RequestDataFragment) => void;\ntype Props = DeprecatedAsyncComponent['props'] & {\n  onChange: StateUpdater;\n  organization: Organization;\n  alertSetting?: string;\n  interval?: string;\n  metric?: MetricValues;\n  threshold?: string;\n};\n\ntype State = DeprecatedAsyncComponent['state'] & {\n  alertSetting: string;\n  // TODO(ts): When we have alert conditional types, convert this\n  conditions: any;\n  interval: string;\n  intervalChoices: [string, string][] | undefined;\n  metric: MetricValues;\n\n  threshold: string;\n};\n\ntype RequestDataFragment = {\n  actionMatch: string;\n  actions: Omit<IssueAlertRuleAction, 'label' | 'name' | 'prompt'>[];\n  conditions: {id: string; interval: string; value: string}[] | undefined;\n  defaultRules: boolean;\n  frequency: number;\n  name: string;\n  shouldCreateCustomRule: boolean;\n};\n\nfunction getConditionFrom(\n  interval: string,\n  metricValue: MetricValues,\n  threshold: string\n): {id: string; interval: string; value: string} {\n  let condition: string;\n  switch (metricValue) {\n    case MetricValues.ERRORS:\n      condition = EVENT_FREQUENCY_CONDITION;\n      break;\n    case MetricValues.USERS:\n      condition = UNIQUE_USER_FREQUENCY_CONDITION;\n      break;\n    default:\n      throw new RangeError('Supplied metric value is not handled');\n  }\n  return {\n    interval,\n    id: condition,\n    value: threshold,\n  };\n}\n\nfunction unpackConditions(conditions: any[]) {\n  const equalityReducer = (acc, curr) => {\n    if (!acc || !curr || !isEqual(acc, curr)) {\n      return null;\n    }\n    return acc;\n  };\n\n  const intervalChoices = conditions\n    .map(condition => condition.formFields?.interval?.choices)\n    .reduce(equalityReducer);\n  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};\n}\n\nclass IssueAlertOptions extends DeprecatedAsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      conditions: [],\n      intervalChoices: [],\n      alertSetting: this.props.alertSetting ?? RuleAction.ALERT_ON_EVERY_ISSUE.toString(),\n      metric: this.props.metric ?? MetricValues.ERRORS,\n      interval: this.props.interval ?? '',\n      threshold: this.props.threshold ?? '',\n    };\n  }\n\n  getAvailableMetricOptions() {\n    return [\n      {value: MetricValues.ERRORS, label: t('occurrences of')},\n      {value: MetricValues.USERS, label: t('users affected by')},\n    ].filter(({value}) => {\n      return this.state.conditions?.some?.(\n        object => object?.id === METRIC_CONDITION_MAP[value]\n      );\n    });\n  }\n\n  getIssueAlertsChoices(\n    hasProperlyLoadedConditions: boolean\n  ): [string, string | React.ReactElement][] {\n    const customizedAlertOption: [string, React.ReactNode] = [\n      RuleAction.CUSTOMIZED_ALERTS.toString(),\n      <CustomizeAlertsGrid\n        key={RuleAction.CUSTOMIZED_ALERTS}\n        onClick={e => {\n          // XXX(epurkhiser): The `e.preventDefault` here is needed to stop\n          // propagation of the click up to the label, causing it to focus\n          // the radio input and lose focus on the select.\n          e.preventDefault();\n          const alertSetting = RuleAction.CUSTOMIZED_ALERTS.toString();\n          this.setStateAndUpdateParents({alertSetting});\n        }}\n      >\n        {t('When there are more than')}\n        <InlineInput\n          type=\"number\"\n          min=\"0\"\n          name=\"\"\n          placeholder={DEFAULT_PLACEHOLDER_VALUE}\n          value={this.state.threshold}\n          onChange={threshold =>\n            this.setStateAndUpdateParents({threshold: threshold.target.value})\n          }\n          data-test-id=\"range-input\"\n        />\n        <InlineSelectControl\n          value={this.state.metric}\n          options={this.getAvailableMetricOptions()}\n          onChange={metric => this.setStateAndUpdateParents({metric: metric.value})}\n        />\n        {t('a unique error in')}\n        <InlineSelectControl\n          value={this.state.interval}\n          options={this.state.intervalChoices?.map(([value, label]) => ({\n            value,\n            label,\n          }))}\n          onChange={interval => this.setStateAndUpdateParents({interval: interval.value})}\n        />\n      </CustomizeAlertsGrid>,\n    ];\n\n    const options: [string, React.ReactNode][] = [\n      [RuleAction.ALERT_ON_EVERY_ISSUE.toString(), t('Alert me on every new issue')],\n      ...(hasProperlyLoadedConditions ? [customizedAlertOption] : []),\n      [RuleAction.CREATE_ALERT_LATER.toString(), t(\"I'll create my own alerts later\")],\n    ];\n    return options.map(([choiceValue, node]) => [\n      choiceValue,\n      <RadioItemWrapper key={choiceValue}>{node}</RadioItemWrapper>,\n    ]);\n  }\n\n  getUpdatedData(): RequestDataFragment {\n    let defaultRules: boolean;\n    let shouldCreateCustomRule: boolean;\n    const alertSetting: RuleAction = parseInt(this.state.alertSetting, 10);\n    switch (alertSetting) {\n      case RuleAction.ALERT_ON_EVERY_ISSUE:\n        defaultRules = true;\n        shouldCreateCustomRule = false;\n        break;\n      case RuleAction.CREATE_ALERT_LATER:\n        defaultRules = false;\n        shouldCreateCustomRule = false;\n        break;\n      case RuleAction.CUSTOMIZED_ALERTS:\n        defaultRules = false;\n        shouldCreateCustomRule = true;\n        break;\n      default:\n        throw new RangeError('Supplied alert creation action is not handled');\n    }\n\n    return {\n      defaultRules,\n      shouldCreateCustomRule,\n      name: 'Send a notification for new issues',\n      conditions:\n        this.state.interval.length > 0 && this.state.threshold.length > 0\n          ? [\n              getConditionFrom(\n                this.state.interval,\n                this.state.metric,\n                this.state.threshold\n              ),\n            ]\n          : undefined,\n      actions: [\n        {\n          ...ISSUE_ALERT_DEFAULT_ACTION,\n          ...(this.props.organization.features.includes('issue-alert-fallback-targeting')\n            ? {fallthroughType: 'ActiveMembers'}\n            : {}),\n        },\n      ],\n      actionMatch: 'all',\n      frequency: 5,\n    };\n  }\n\n  setStateAndUpdateParents<K extends keyof State>(\n    state:\n      | ((\n          prevState: Readonly<State>,\n          props: Readonly<Props>\n        ) => Pick<State, K> | State | null)\n      | Pick<State, K>\n      | State\n      | null\n  ): void {\n    this.setState(state, () => {\n      this.props.onChange(this.getUpdatedData());\n    });\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncComponent['getEndpoints']> {\n    return [['conditions', `/projects/${this.props.organization.slug}/rule-conditions/`]];\n  }\n\n  onLoadAllEndpointsSuccess(): void {\n    const conditions = this.state.conditions?.filter?.(object =>\n      Object.values(METRIC_CONDITION_MAP).includes(object?.id)\n    );\n\n    if (!conditions || conditions.length === 0) {\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const {intervalChoices, interval} = unpackConditions(conditions);\n    if (!intervalChoices || !interval) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureException(\n          new Error('Interval choices or sent from API endpoint is inconsistent or empty')\n        );\n      });\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const newInterval =\n      this.props.interval &&\n      intervalChoices.some(intervalChoice => intervalChoice[0] === this.props.interval)\n        ? this.props.interval\n        : interval;\n\n    this.setStateAndUpdateParents({\n      conditions,\n      intervalChoices,\n      interval: newInterval,\n    });\n  }\n\n  renderBody(): React.ReactElement {\n    const issueAlertOptionsChoices = this.getIssueAlertsChoices(\n      this.state.conditions?.length > 0\n    );\n\n    return (\n      <Fragment>\n        <PageHeadingWithTopMargins withMargins>\n          {t('2. Set your alert frequency')}\n        </PageHeadingWithTopMargins>\n        <Content>\n          <RadioGroupWithPadding\n            choices={issueAlertOptionsChoices}\n            label={t('Options for creating an alert')}\n            onChange={alertSetting => this.setStateAndUpdateParents({alertSetting})}\n            value={this.state.alertSetting}\n          />\n        </Content>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IssueAlertOptions);\n\nconst Content = styled('div')`\n  padding-top: ${space(2)};\n  padding-bottom: ${space(4)};\n`;\n\nconst CustomizeAlertsGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(5, max-content);\n  gap: ${space(1)};\n  align-items: center;\n`;\nconst InlineInput = styled(Input)`\n  width: 80px;\n`;\nconst InlineSelectControl = styled(SelectControl)`\n  width: 160px;\n`;\nconst RadioGroupWithPadding = styled(RadioGroup)`\n  margin-bottom: ${space(2)};\n`;\nconst PageHeadingWithTopMargins = styled(Layout.Title)`\n  margin-top: 65px;\n  margin-bottom: 0;\n  padding-bottom: ${space(3)};\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`;\nconst RadioItemWrapper = styled('div')`\n  min-height: 35px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n"],"names":["MetricValues","RuleAction","UNIQUE_USER_FREQUENCY_CONDITION","EVENT_FREQUENCY_CONDITION","EVENT_FREQUENCY_PERCENT_CONDITION","REAPPEARED_EVENT_CONDITION","ISSUE_ALERT_DEFAULT_ACTION","id","targetType","METRIC_CONDITION_MAP","ERRORS","USERS","getConditionFrom","interval","metricValue","threshold","condition","RangeError","value","IssueAlertOptions","DeprecatedAsyncComponent","getDefaultState","super","conditions","intervalChoices","alertSetting","this","props","ALERT_ON_EVERY_ISSUE","toString","metric","getAvailableMetricOptions","label","t","filter","_ref","state","some","object","getIssueAlertsChoices","hasProperlyLoadedConditions","customizedAlertOption","CUSTOMIZED_ALERTS","_jsxs","CustomizeAlertsGrid","onClick","e","preventDefault","setStateAndUpdateParents","children","_jsx","InlineInput","type","min","name","placeholder","onChange","target","InlineSelectControl","options","map","_ref2","CREATE_ALERT_LATER","_ref3","choiceValue","node","RadioItemWrapper","getUpdatedData","defaultRules","shouldCreateCustomRule","parseInt","length","undefined","actions","organization","features","includes","fallthroughType","actionMatch","frequency","setState","getEndpoints","slug","onLoadAllEndpointsSuccess","Object","values","formFields","choices","reduce","equalityReducer","acc","curr","isEqual","unpackConditions","Sentry","scope","setExtra","Error","newInterval","intervalChoice","renderBody","issueAlertOptionsChoices","Fragment","PageHeadingWithTopMargins","withMargins","Content","RadioGroupWithPadding","withOrganization","_styled","space","Input","styles","SelectControl","RadioGroup","Layout"],"sourceRoot":""}