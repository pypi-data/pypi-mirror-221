{"version":3,"file":"chunks/app_gettingStartedDocs_electron_electron_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"4ZAcO,SAASA,EAAuBC,GAM7B,IAN8B,UACtCC,EAAS,aACTC,EAAY,YACZC,EAAW,UACXC,EAAS,OACTC,GACML,EACN,MAAO,CACLM,OAAOC,EAAAA,EAAAA,GAAE,sBACTC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,wKACA,CACEV,WAAWQ,EAAAA,EAAAA,IAACG,EAAAA,EAAY,CAACC,KAAMZ,QAKvCa,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,0CACPC,OAAQA,KACDf,GAAiBE,GAAcD,IAIpCe,EAAAA,EAAAA,IACEb,EACI,oDACA,0DACJ,CACEc,WAAYf,EACZgB,SAAUjB,EACVD,gBAEH,EAEHmB,gBAAiBA,KACVnB,GAAiBE,GAAcD,IAIpCe,EAAAA,EAAAA,IACEb,EACI,oDACA,0DACJ,CACEc,WAAYf,EACZgB,SAAUjB,EACVD,gBAEH,IAKX,C,gfCvDO,MAAMoB,EAAQ,eAAC,kBACpBC,KACGC,GACgBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CACnD,CACEG,KAAMC,EAAAA,GAASC,QACftB,aAAaD,EAAAA,EAAAA,GAAE,wDACfO,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,6GAUb,CACEY,KAAMC,EAAAA,GAASE,UACfvB,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACE,wNAED,CACEqB,UAAUvB,EAAAA,EAAAA,IAAA,WACVwB,UAAUxB,EAAAA,EAAAA,IAAA,WACVyB,cAAczB,EAAAA,EAAAA,IAAA,WACd0B,UACE1B,EAAAA,EAAAA,IAACG,EAAAA,EAAY,CAACC,KAAK,qEAM7BC,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,6FAIHO,+BAMVxB,EAAAA,EAAAA,GAAwB,CACtBE,UAAW,6EACRuB,IAEL,CACEI,KAAMC,EAAAA,GAASO,OACf5B,aAAaD,EAAAA,EAAAA,GACV,iKAGHO,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,+CAKXqB,gBAAgB9B,EAAAA,EAAAA,GACd,4IAGL,EAIM,SAAS+B,EAA0BtC,GAM1B,IAN2B,IACzCuC,EAAG,aACHrC,EAAY,YACZC,EAAW,UACXC,EAAS,OACTC,GACYL,EACZ,MAAMuB,EAA8B,CAAE,SAAQgB,OAE9C,OACE9B,EAAAA,EAAAA,IAAC+B,EAAAA,EAAM,CACLlB,MAAOA,EAAM,CACXC,kBAAmBA,EAAkBkB,KAAK,MAC1CvC,eACAC,cACAC,YACAC,WAEFqC,UAAW,GACXrC,OAAQA,EACRF,YAAaA,GAGnB,CAvBgBmC,EAA0BK,YAAA,6BAyB1C,S","sources":["webpack:///./app/components/onboarding/gettingStartedDoc/utils.tsx","webpack:///./app/gettingStartedDocs/electron/electron.tsx"],"sourcesContent":["import ExternalLink from 'sentry/components/links/externalLink';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\n\ntype Props = {\n  guideLink: string;\n  newOrg?: boolean;\n  organization?: Organization;\n  platformKey?: PlatformKey;\n  projectId?: string;\n};\n\nexport function getUploadSourceMapsStep({\n  guideLink,\n  organization,\n  platformKey,\n  projectId,\n  newOrg,\n}: Props) {\n  return {\n    title: t('Upload Source Maps'),\n    description: (\n      <p>\n        {tct(\n          'Automatically upload your source maps to enable readable stack traces for Errors. If you prefer to manually set up source maps, please follow [guideLink:this guide].',\n          {\n            guideLink: <ExternalLink href={guideLink} />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        code: `npx @sentry/wizard@latest -i sourcemaps`,\n        onCopy: () => {\n          if (!organization || !projectId || !platformKey) {\n            return;\n          }\n\n          trackAnalytics(\n            newOrg\n              ? 'onboarding.source_maps_wizard_button_copy_clicked'\n              : 'project_creation.source_maps_wizard_button_copy_clicked',\n            {\n              project_id: projectId,\n              platform: platformKey,\n              organization,\n            }\n          );\n        },\n        onSelectAndCopy: () => {\n          if (!organization || !projectId || !platformKey) {\n            return;\n          }\n\n          trackAnalytics(\n            newOrg\n              ? 'onboarding.source_maps_wizard_selected_and_copied'\n              : 'project_creation.source_maps_wizard_selected_and_copied',\n            {\n              project_id: projectId,\n              platform: platformKey,\n              organization,\n            }\n          );\n        },\n      },\n    ],\n  };\n}\n","import ExternalLink from 'sentry/components/links/externalLink';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {getUploadSourceMapsStep} from 'sentry/components/onboarding/gettingStartedDoc/utils';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\n\ntype StepProps = {\n  newOrg: boolean;\n  organization: Organization;\n  platformKey: PlatformKey;\n  projectId: string;\n  sentryInitContent: string;\n};\n\nexport const steps = ({\n  sentryInitContent,\n  ...props\n}: Partial<StepProps> = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: t('Add the Sentry Electron SDK package as a dependency:'),\n    configurations: [\n      {\n        language: 'bash',\n        code: `\n# Using yarn\nyarn add @sentry/electron\n\n# Using npm\nnpm install --save @sentry/electron\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          `You need to call [codeInit:Sentry.init] in the [codeMain:main] process and in every [codeRenderer:renderer] process you spawn.\n           For more details about configuring the Electron SDK [docsLink:click here].`,\n          {\n            codeInit: <code />,\n            codeMain: <code />,\n            codeRenderer: <code />,\n            docsLink: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/javascript/guides/electron/\" />\n            ),\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        import * as Sentry from \"@sentry/electron\";\n\n        Sentry.init({\n          ${sentryInitContent}\n        });\n        `,\n      },\n    ],\n  },\n  getUploadSourceMapsStep({\n    guideLink: 'https://docs.sentry.io/platforms/javascript/guides/electron/sourcemaps/',\n    ...props,\n  }),\n  {\n    type: StepType.VERIFY,\n    description: t(\n      `One way to verify your setup is by intentionally causing an error that breaks your application.\n      Calling an undefined function will throw an exception:`\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        myUndefinedFunction();\n        `,\n      },\n    ],\n    additionalInfo: t(\n      'You may want to try inserting this code snippet into both your main and any renderer processes to verify Sentry is operational in both.'\n    ),\n  },\n];\n\n// Configuration End\n\nexport function GettingStartedWithElectron({\n  dsn,\n  organization,\n  platformKey,\n  projectId,\n  newOrg,\n}: ModuleProps) {\n  const sentryInitContent: string[] = [`dsn: \"${dsn}\",`];\n\n  return (\n    <Layout\n      steps={steps({\n        sentryInitContent: sentryInitContent.join('\\n'),\n        organization,\n        platformKey,\n        projectId,\n        newOrg,\n      })}\n      nextSteps={[]}\n      newOrg={newOrg}\n      platformKey={platformKey}\n    />\n  );\n}\n\nexport default GettingStartedWithElectron;\n"],"names":["getUploadSourceMapsStep","_ref","guideLink","organization","platformKey","projectId","newOrg","title","t","description","_jsx","children","tct","ExternalLink","href","configurations","language","code","onCopy","trackAnalytics","project_id","platform","onSelectAndCopy","steps","sentryInitContent","props","arguments","length","undefined","type","StepType","INSTALL","CONFIGURE","codeInit","codeMain","codeRenderer","docsLink","VERIFY","additionalInfo","GettingStartedWithElectron","dsn","Layout","join","nextSteps","displayName"],"sourceRoot":""}