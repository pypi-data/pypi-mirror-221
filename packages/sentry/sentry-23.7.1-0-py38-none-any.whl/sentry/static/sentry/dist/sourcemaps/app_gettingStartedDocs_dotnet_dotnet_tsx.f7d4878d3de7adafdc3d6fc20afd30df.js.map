{"version":3,"file":"chunks/app_gettingStartedDocs_dotnet_dotnet_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"upBAWA,MAAMA,GACJC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,qZACA,CACEC,QAAQH,EAAAA,EAAAA,IAAA,aACRI,MAAMJ,EAAAA,EAAAA,IAACK,EAAAA,EAAY,CAACC,KAAK,iDAKpBC,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aACEf,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IAAI,sCAAuC,CAC1CC,QAAQH,EAAAA,EAAAA,IAAA,iBAIdgB,eAAgB,CACd,CACEC,SAAU,QACVC,KAAO,kJAUb,CACEN,KAAMC,EAAAA,GAASM,UACfJ,aACEf,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,mIACA,CACEkB,eAAepB,EAAAA,EAAAA,IAAA,WACfqB,aAAarB,EAAAA,EAAAA,IAAA,eAKrBgB,eAAgB,CACd,CACEC,SAAU,SACVC,KAAO,mSAQMV,m7BAsBnB,CACEI,KAAMC,EAAAA,GAASS,OACfP,aAAaQ,EAAAA,EAAAA,GAAE,+DACfP,eAAgB,CACd,CACEC,SAAU,SACVC,KAAM,uDAIZ,CACEM,OAAOD,EAAAA,EAAAA,GAAE,0BACTR,aAAaQ,EAAAA,EAAAA,GACX,qFAEFP,eAAgB,CACd,CACEC,SAAU,SACVC,KAAO,ujBAmBXO,gBACEzB,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,iGACA,CACEE,MACEJ,EAAAA,EAAAA,IAACK,EAAAA,EAAY,CAACC,KAAK,8EAO/B,CACEkB,OAAOD,EAAAA,EAAAA,GAAE,WACTR,aACEW,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAA1B,SAAA,EACPD,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,qGACA,CACEE,MACEJ,EAAAA,EAAAA,IAACK,EAAAA,EAAY,CAACC,KAAK,gFAK1BiB,EAAAA,EAAAA,GACC,6FAEFG,EAAAA,EAAAA,IAACE,EAAAA,EAAI,CAACC,OAAO,SAAQ5B,SAAA,EACnBD,EAAAA,EAAAA,IAAC8B,EAAAA,EAAQ,CAAA7B,UACNC,EAAAA,EAAAA,IACC,4EACA,CACEE,MACEJ,EAAAA,EAAAA,IAACK,EAAAA,EAAY,CAACC,KAAK,iEAErBY,MAAMlB,EAAAA,EAAAA,IAAA,WACNG,QAAQH,EAAAA,EAAAA,IAAA,kBAIdA,EAAAA,EAAAA,IAAC8B,EAAAA,EAAQ,CAAA7B,UACNC,EAAAA,EAAAA,IAAI,uCAAwC,CAC3CE,MAAMJ,EAAAA,EAAAA,IAACK,EAAAA,EAAY,CAACC,KAAK,2CACzBH,QAAQH,EAAAA,EAAAA,IAAA,wBAOrB,EAGM,SAAS+B,EAAwBC,GAA+B,IAA9B,IAACxB,KAAQyB,GAAmBD,EACnE,OAAOhC,EAAAA,EAAAA,IAACkC,EAAAA,EAAM,CAAC3B,MAAOA,EAAM,CAACC,QAAOT,aAAcA,KAAkBkC,GACtE,CAFgBF,EAAwBI,YAAA,2BAIxC,S","sources":["webpack:///./app/gettingStartedDocs/dotnet/dotnet.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nconst introduction = (\n  <p>\n    {tct(\n      'Sentry for .NET is a collection of NuGet packages provided by Sentry; it supports .NET Framework 4.6.1 and .NET Core 2.0 and above. At its core, Sentry for .NET provides a raw client for sending events to Sentry. If you use a framework such as [strong:ASP.NET, WinForms, WPF, MAUI, Xamarin, Serilog], or similar, we recommend visiting our [link:Sentry .NET] documentation for installation instructions.',\n      {\n        strong: <strong />,\n        link: <ExternalLink href=\"https://docs.sentry.io/platforms/dotnet/\" />,\n      }\n    )}\n  </p>\n);\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct('Install the [strong:NuGet] package:', {\n          strong: <strong />,\n        })}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'shell',\n        code: `\n# Using Package Manager\nInstall-Package Sentry -Version 3.34.0\n\n# Or using .NET Core CLI\ndotnet add package Sentry -v 3.34.0\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          'Initialize the SDK as early as possible. For example, call [sentrySdkCode:SentrySdk.Init] in your [programCode:Program.cs] file:',\n          {\n            sentrySdkCode: <code />,\n            programCode: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'csharp',\n        code: `\nusing Sentry;\n\nSentrySdk.Init(options =>\n{\n    // A Sentry Data Source Name (DSN) is required.\n    // See https://docs.sentry.io/product/sentry-basics/dsn-explainer/\n    // You can set it in the SENTRY_DSN environment variable, or you can set it in code here.\n    options.Dsn = \"${dsn}\";\n\n    // When debug is enabled, the Sentry client will emit detailed debugging information to the console.\n    // This might be helpful, or might interfere with the normal operation of your application.\n    // We enable it here for demonstration purposes when first trying Sentry.\n    // You shouldn't do this in your applications unless you're troubleshooting issues with Sentry.\n    options.Debug = true;\n\n    // This option is recommended. It enables Sentry's \"Release Health\" feature.\n    options.AutoSessionTracking = true;\n\n    // This option is recommended for client applications only. It ensures all threads use the same global scope.\n    // If you're writing a background service of any kind, you should remove this.\n    options.IsGlobalModeEnabled = true;\n\n    // This option will enable Sentry's tracing features. You still need to start transactions and spans.\n    options.EnableTracing = true;\n});\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t('Verify Sentry is correctly configured by sending a message:'),\n    configurations: [\n      {\n        language: 'csharp',\n        code: 'SentrySdk.CaptureMessage(\"Something went wrong\");',\n      },\n    ],\n  },\n  {\n    title: t('Performance Monitoring'),\n    description: t(\n      'You can measure the performance of your code by capturing transactions and spans.'\n    ),\n    configurations: [\n      {\n        language: 'csharp',\n        code: `\n// Transaction can be started by providing, at minimum, the name and the operation\nvar transaction = SentrySdk.StartTransaction(\n  \"test-transaction-name\",\n  \"test-transaction-operation\"\n);\n\n// Transactions can have child spans (and those spans can have child spans as well)\nvar span = transaction.StartChild(\"test-child-operation\");\n\n// ...\n// (Perform the operation represented by the span/transaction)\n// ...\n\nspan.Finish(); // Mark the span as finished\ntransaction.Finish(); // Mark the transaction as finished and send it to Sentry\n        `,\n      },\n    ],\n    additionalInfo: (\n      <p>\n        {tct(\n          'Check out [link:the documentation] to learn more about the API and automatic instrumentations.',\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/dotnet/performance/instrumentation/\" />\n            ),\n          }\n        )}\n      </p>\n    ),\n  },\n  {\n    title: t('Samples'),\n    description: (\n      <Fragment>\n        <p>\n          {tct(\n            'You can find an example ASP.NET MVC 5 app with Sentry integrated [link:on this GitHub repository].',\n            {\n              link: (\n                <ExternalLink href=\"https://github.com/getsentry/examples/tree/master/dotnet/AspNetMvc5Ef6\" />\n              ),\n            }\n          )}\n        </p>\n        {t(\n          'In addition, these examples demonstrate how to integrate Sentry with various frameworks:'\n        )}\n        <List symbol=\"bullet\">\n          <ListItem>\n            {tct(\n              '[link:Multiple samples in the [code:dotnet] SDK repository] [strong:(C#)]',\n              {\n                link: (\n                  <ExternalLink href=\"https://github.com/getsentry/sentry-dotnet/tree/main/samples\" />\n                ),\n                code: <code />,\n                strong: <strong />,\n              }\n            )}\n          </ListItem>\n          <ListItem>\n            {tct('[link:Basic F# sample] [strong:(F#)]', {\n              link: <ExternalLink href=\"https://github.com/sentry-demos/fsharp\" />,\n              strong: <strong />,\n            })}\n          </ListItem>\n        </List>\n      </Fragment>\n    ),\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithDotnet({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} introduction={introduction} {...props} />;\n}\n\nexport default GettingStartedWithDotnet;\n"],"names":["introduction","_jsx","children","tct","strong","link","ExternalLink","href","steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","configurations","language","code","CONFIGURE","sentrySdkCode","programCode","VERIFY","t","title","additionalInfo","_jsxs","Fragment","List","symbol","ListItem","GettingStartedWithDotnet","_ref","props","Layout","displayName"],"sourceRoot":""}