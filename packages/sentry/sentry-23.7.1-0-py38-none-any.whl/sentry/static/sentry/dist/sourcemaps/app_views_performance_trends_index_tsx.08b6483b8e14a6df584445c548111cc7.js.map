{"version":3,"file":"chunks/app_views_performance_trends_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/trends/content.tsx","webpack:///./app/views/performance/trends/index.tsx","webpack:///../node_modules/lodash/assign.js"],"sourcesContent":["import {useEffect, useMemo} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {CustomMeasurementCollection} from 'sentry/utils/customMeasurements/customMeasurements';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {\n  DEVICE_CLASS_TAG_VALUES,\n  FieldKey,\n  FieldKind,\n  isDeviceClass,\n} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\nimport {isCustomMeasurement} from 'sentry/views/dashboards/utils';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst STATIC_FIELD_TAGS_SET = new Set(Object.keys(FIELD_TAGS));\nconst getFunctionTags = (fields: Readonly<Field[]> | undefined) => {\n  if (!fields?.length) {\n    return [];\n  }\n  return fields.reduce((acc, item) => {\n    if (\n      !STATIC_FIELD_TAGS_SET.has(item.field) &&\n      !isEquation(item.field) &&\n      !isCustomMeasurement(item.field)\n    ) {\n      acc[item.field] = {key: item.field, name: item.field, kind: FieldKind.FUNCTION};\n    }\n\n    return acc;\n  }, {});\n};\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements'],\n  customMeasurements:\n    | Parameters<React.ComponentProps<typeof Measurements>['children']>[0]['measurements']\n    | undefined\n) => {\n  const measurementsWithKind = Object.keys(measurements).reduce((tags, key) => {\n    tags[key] = {\n      ...measurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, {});\n\n  if (!customMeasurements) {\n    return measurementsWithKind;\n  }\n\n  return Object.keys(customMeasurements).reduce((tags, key) => {\n    tags[key] = {\n      ...customMeasurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, measurementsWithKind);\n};\n\nconst STATIC_FIELD_TAGS = Object.keys(FIELD_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...FIELD_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nconst STATIC_FIELD_TAGS_WITHOUT_TRACING = omit(STATIC_FIELD_TAGS, TRACING_FIELDS);\n\nconst STATIC_SPAN_TAGS = SPAN_OP_BREAKDOWN_FIELDS.reduce((tags, key) => {\n  tags[key] = {name: key, kind: FieldKind.METRICS};\n  return tags;\n}, {});\n\nconst STATIC_SEMVER_TAGS = Object.keys(SEMVER_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...SEMVER_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  customMeasurements?: CustomMeasurementCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n    customMeasurements,\n  } = props;\n\n  const api = useApi();\n\n  const functionTags = useMemo(() => getFunctionTags(fields), [fields]);\n  const tagsWithKind = useMemo(() => {\n    return Object.keys(tags).reduce((acc, key) => {\n      acc[key] = {\n        ...tags[key],\n        kind: FieldKind.TAG,\n      };\n      return acc;\n    }, {});\n  }, [tags]);\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      // device.class is stored as \"numbers\" in snuba, but we want to suggest high, medium,\n      // and low search filter values because discover maps device.class to these values.\n      if (isDeviceClass(tag.key)) {\n        return Promise.resolve(DEVICE_CLASS_TAG_VALUES);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: query,\n        projectIds: projectIdStrings,\n        endpointParams,\n        // allows searching for tags on transactions as well\n        includeTransactions: true,\n        // allows searching for tags on sessions as well\n        includeSessions: includeSessionTagsValues,\n      }).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const measurementsWithKind = getMeasurementTags(measurements, customMeasurements);\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: TagCollection = orgHasPerformanceView\n      ? Object.assign(\n          {},\n          measurementsWithKind,\n          functionTags,\n          STATIC_SPAN_TAGS,\n          STATIC_FIELD_TAGS\n        )\n      : Object.assign({}, STATIC_FIELD_TAGS_WITHOUT_TRACING);\n\n    assign(combinedTags, tagsWithKind, STATIC_FIELD_TAGS, STATIC_SEMVER_TAGS);\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: Object.keys(combinedTags).sort((a, b) => {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      }),\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    const list =\n      omitTags && omitTags.length > 0 ? omit(combinedTags, omitTags) : combinedTags;\n    return list;\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludedTags={[FieldKey.ENVIRONMENT, FieldKey.TOTAL_COUNT]}\n          maxMenuHeight={maxMenuHeight ?? 300}\n          customPerformanceMetrics={customMeasurements}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getState(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport TransactionNameSearchBar from 'sentry/components/performance/searchBar';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {generateAggregateFields} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {getPerformanceLandingUrl, getTransactionSearchQuery} from '../utils';\n\nimport ChangedTransactions from './changedTransactions';\nimport {TrendChangeType, TrendFunctionField, TrendView} from './types';\nimport {\n  DEFAULT_MAX_DURATION,\n  DEFAULT_TRENDS_STATS_PERIOD,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getSelectedQueryKey,\n  modifyTransactionNameTrendsQuery,\n  modifyTrendsViewDefaultPeriod,\n  resetCursors,\n  TRENDS_FUNCTIONS,\n  TRENDS_PARAMETERS,\n} from './utils';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  error?: string;\n  previousTrendFunction?: TrendFunctionField;\n};\n\nexport const defaultTrendsSelectionDate = {\n  start: null,\n  end: null,\n  utc: false,\n  period: DEFAULT_TRENDS_STATS_PERIOD,\n};\n\nclass TrendsContent extends Component<Props, State> {\n  state: State = {};\n\n  handleSearch = (searchQuery: string) => {\n    const {location} = this.props;\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        query: String(searchQuery).trim() || undefined,\n      },\n    });\n  };\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  handleTrendFunctionChange = (field: string) => {\n    const {organization, location} = this.props;\n\n    const offsets = {};\n\n    Object.values(TrendChangeType).forEach(trendChangeType => {\n      const queryKey = getSelectedQueryKey(trendChangeType);\n      offsets[queryKey] = undefined;\n    });\n\n    trackAnalytics('performance_views.trends.change_function', {\n      organization,\n      function_name: field,\n    });\n\n    this.setState({\n      previousTrendFunction: getCurrentTrendFunction(location).field,\n    });\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...offsets,\n        ...cursors,\n        trendFunction: field,\n      },\n    });\n  };\n\n  renderError() {\n    const {error} = this.state;\n\n    if (!error) {\n      return null;\n    }\n\n    return (\n      <Alert type=\"error\" showIcon>\n        {error}\n      </Alert>\n    );\n  }\n\n  handleParameterChange = (label: string) => {\n    const {organization, location} = this.props;\n    const cursors = resetCursors();\n\n    trackAnalytics('performance_views.trends.change_parameter', {\n      organization,\n      parameter_name: label,\n    });\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        trendParameter: label,\n      },\n    });\n  };\n\n  getFreeTextFromQuery(query: string) {\n    const conditions = new MutableSearch(query);\n    const transactionValues = conditions.getFilterValues('transaction');\n    if (transactionValues.length) {\n      return transactionValues[0];\n    }\n    if (conditions.freeText.length > 0) {\n      // raw text query will be wrapped in wildcards in generatePerformanceEventView\n      // so no need to wrap it here\n      return conditions.freeText.join(' ');\n    }\n    return '';\n  }\n\n  getPerformanceLink() {\n    const {location} = this.props;\n\n    const newQuery = {\n      ...location.query,\n    };\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    // This stops errors from occurring when navigating to other views since we are appending aggregates to the trends view\n    conditions.removeFilter('tpm()');\n    conditions.removeFilter('confidence()');\n    conditions.removeFilter('transaction.duration');\n    newQuery.query = conditions.formatString();\n    return {\n      pathname: getPerformanceLandingUrl(this.props.organization),\n      query: newQuery,\n    };\n  }\n\n  render() {\n    const {organization, eventView, location, projects} = this.props;\n    const {previousTrendFunction} = this.state;\n\n    const trendView = eventView.clone() as TrendView;\n    modifyTrendsViewDefaultPeriod(trendView, location);\n\n    if (organization.features.includes('performance-new-trends')) {\n      modifyTransactionNameTrendsQuery(trendView);\n    }\n\n    const fields = generateAggregateFields(\n      organization,\n      [\n        {\n          field: 'absolute_correlation()',\n        },\n        {\n          field: 'trend_percentage()',\n        },\n        {\n          field: 'trend_difference()',\n        },\n        {\n          field: 'count_percentage()',\n        },\n        {\n          field: 'tpm()',\n        },\n        {\n          field: 'tps()',\n        },\n      ],\n      ['epm()', 'eps()']\n    );\n    const currentTrendFunction = getCurrentTrendFunction(location);\n    const currentTrendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const query = getTransactionSearchQuery(location);\n\n    return (\n      <PageFiltersContainer\n        defaultSelection={{\n          datetime: defaultTrendsSelectionDate,\n        }}\n      >\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  label: 'Performance',\n                  to: this.getPerformanceLink(),\n                },\n                {\n                  label: 'Trends',\n                },\n              ]}\n            />\n            <Layout.Title>{t('Trends')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <DefaultTrends location={location} eventView={eventView} projects={projects}>\n              <FilterActions>\n                <PageFilterBar condensed>\n                  <ProjectPageFilter />\n                  <EnvironmentPageFilter />\n                  <DatePageFilter alignDropdown=\"left\" />\n                </PageFilterBar>\n                {organization.features.includes('performance-new-trends') ? (\n                  <StyledTransactionNameSearchBar\n                    organization={organization}\n                    eventView={trendView}\n                    onSearch={this.handleSearch}\n                    query={this.getFreeTextFromQuery(query)}\n                  />\n                ) : (\n                  <StyledSearchBar\n                    searchSource=\"trends\"\n                    organization={organization}\n                    projectIds={trendView.project}\n                    query={query}\n                    fields={fields}\n                    onSearch={this.handleSearch}\n                    maxQueryLength={MAX_QUERY_LENGTH}\n                  />\n                )}\n                <CompactSelect\n                  triggerProps={{prefix: t('Percentile')}}\n                  value={currentTrendFunction.field}\n                  options={TRENDS_FUNCTIONS.map(({label, field}) => ({\n                    value: field,\n                    label,\n                  }))}\n                  onChange={opt => this.handleTrendFunctionChange(opt.value)}\n                />\n                <CompactSelect\n                  triggerProps={{prefix: t('Parameter')}}\n                  value={currentTrendParameter.label}\n                  options={TRENDS_PARAMETERS.map(({label}) => ({\n                    value: label,\n                    label,\n                  }))}\n                  onChange={opt => this.handleParameterChange(opt.value)}\n                />\n              </FilterActions>\n              <ListContainer>\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.IMPROVED}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                  withBreakpoint={organization.features.includes(\n                    'performance-new-trends'\n                  )}\n                />\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.REGRESSION}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                  withBreakpoint={organization.features.includes(\n                    'performance-new-trends'\n                  )}\n                />\n              </ListContainer>\n              <Feature features={['organizations:performance-trendsv2-dev-only']}>\n                <ListContainer>\n                  <ChangedTransactions\n                    trendChangeType={TrendChangeType.IMPROVED}\n                    previousTrendFunction={previousTrendFunction}\n                    trendView={trendView}\n                    location={location}\n                    setError={this.setError}\n                  />\n                  <ChangedTransactions\n                    trendChangeType={TrendChangeType.REGRESSION}\n                    previousTrendFunction={previousTrendFunction}\n                    trendView={trendView}\n                    location={location}\n                    setError={this.setError}\n                  />\n                </ListContainer>\n              </Feature>\n            </DefaultTrends>\n          </Layout.Main>\n        </Layout.Body>\n      </PageFiltersContainer>\n    );\n  }\n}\n\ntype DefaultTrendsProps = {\n  children: React.ReactNode[];\n  eventView: EventView;\n  location: Location;\n  projects: Project[];\n};\n\nclass DefaultTrends extends Component<DefaultTrendsProps> {\n  hasPushedDefaults = false;\n\n  render() {\n    const {children, location, eventView, projects} = this.props;\n\n    const queryString = decodeScalar(location.query.query);\n    const trendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const conditions = new MutableSearch(queryString || '');\n\n    if (queryString || this.hasPushedDefaults) {\n      this.hasPushedDefaults = true;\n      return <Fragment>{children}</Fragment>;\n    }\n    this.hasPushedDefaults = true;\n    conditions.setFilterValues('tpm()', ['>0.01']);\n    conditions.setFilterValues(trendParameter.column, ['>0', `<${DEFAULT_MAX_DURATION}`]);\n\n    const query = conditions.formatString();\n    eventView.query = query;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        cursor: undefined,\n        query: String(query).trim() || undefined,\n      },\n    });\n    return null;\n  }\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(3, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto 1fr auto auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nconst StyledTransactionNameSearchBar = styled(TransactionNameSearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nconst ListContainer = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n`;\n\nexport default withPageFilters(TrendsContent);\n","import {Component} from 'react';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {MetricsCardinalityProvider} from 'sentry/utils/performance/contexts/metricsCardinality';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {generatePerformanceEventView} from '../data';\n\nimport TrendsContent from './content';\n\ntype Props = {\n  api: Client;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  eventView: EventView;\n  error?: string;\n};\n\nclass TrendsSummary extends Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    return {\n      ...prevState,\n      eventView: generatePerformanceEventView(\n        nextProps.location,\n        nextProps.projects,\n        {\n          isTrends: true,\n        },\n        nextProps.organization\n      ),\n    };\n  }\n\n  state: State = {\n    eventView: generatePerformanceEventView(\n      this.props.location,\n      this.props.projects,\n      {\n        isTrends: true,\n      },\n      this.props.organization\n    ),\n    error: undefined,\n  };\n\n  getDocumentTitle(): string {\n    return [t('Trends'), t('Performance')].join(' — ');\n  }\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  renderContent() {\n    const {organization, location, projects} = this.props;\n    const {eventView} = this.state;\n    return (\n      <TrendsContent\n        organization={organization}\n        location={location}\n        eventView={eventView}\n        projects={projects}\n      />\n    );\n  }\n\n  render() {\n    const {organization, location} = this.props;\n\n    return (\n      <SentryDocumentTitle title={this.getDocumentTitle()} orgSlug={organization.slug}>\n        <Layout.Page>\n          <MetricsCardinalityProvider\n            sendOutcomeAnalytics\n            organization={organization}\n            location={location}\n          >\n            {this.renderContent()}\n          </MetricsCardinalityProvider>\n        </Layout.Page>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(withProjects(withPageFilters(withApi(TrendsSummary))));\n","var assignValue = require('./_assignValue'),\n    copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    isArrayLike = require('./isArrayLike'),\n    isPrototype = require('./_isPrototype'),\n    keys = require('./keys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nmodule.exports = assign;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","STATIC_FIELD_TAGS_SET","Set","Object","keys","FIELD_TAGS","STATIC_FIELD_TAGS","reduce","tags","key","kind","FieldKind","FIELD","STATIC_FIELD_TAGS_WITHOUT_TRACING","omit","TRACING_FIELDS","STATIC_SPAN_TAGS","SPAN_OP_BREAKDOWN_FIELDS","name","METRICS","STATIC_SEMVER_TAGS","SEMVER_TAGS","SearchBar","props","maxSearchItems","organization","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","customMeasurements","api","useApi","functionTags","useMemo","length","acc","item","has","field","isEquation","isCustomMeasurement","FUNCTION","getFunctionTags","tagsWithKind","TAG","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","isMeasurement","Promise","resolve","isDeviceClass","DEVICE_CLASS_TAG_VALUES","fetchTagValues","orgSlug","slug","tagKey","search","includeTransactions","includeSessions","then","results","flatten","filter","_ref","defined","_ref2","Error","_ref3","getTagList","measurements","measurementsWithKind","getMeasurementTags","MEASUREMENT","combinedTags","features","includes","assign","FieldKey","HAS","values","sort","a","b","toLowerCase","localeCompare","predefined","_jsx","Measurements","children","_ref4","SmartSearchBar","hasRecentSearches","savedSearchType","SavedSearchType","EVENT","onGetTagValues","supportedTags","prepareQuery","replace","excludedTags","ENVIRONMENT","TOTAL_COUNT","customPerformanceMetrics","displayName","withTags","WrappedComponent","WithTags","Component","constructor","arguments","_defineProperty","TagStore","getState","listen","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","defaultTrendsSelectionDate","start","end","utc","period","DEFAULT_TRENDS_STATS_PERIOD","TrendsContent","searchQuery","location","cursors","resetCursors","browserHistory","push","pathname","trim","error","offsets","TrendChangeType","forEach","trendChangeType","queryKey","getSelectedQueryKey","trackAnalytics","function_name","previousTrendFunction","getCurrentTrendFunction","trendFunction","label","parameter_name","trendParameter","renderError","Alert","type","showIcon","getFreeTextFromQuery","conditions","MutableSearch","transactionValues","getFilterValues","freeText","join","getPerformanceLink","newQuery","decodeScalar","removeFilter","formatString","getPerformanceLandingUrl","eventView","projects","trendView","clone","modifyTrendsViewDefaultPeriod","modifyTransactionNameTrendsQuery","generateAggregateFields","currentTrendFunction","currentTrendParameter","getCurrentTrendParameter","project","getTransactionSearchQuery","_jsxs","PageFiltersContainer","defaultSelection","datetime","Layout","Breadcrumbs","crumbs","to","t","fullWidth","DefaultTrends","FilterActions","PageFilterBar","condensed","ProjectPageFilter","EnvironmentPageFilter","DatePageFilter","alignDropdown","StyledTransactionNameSearchBar","onSearch","handleSearch","StyledSearchBar","searchSource","maxQueryLength","MAX_QUERY_LENGTH","CompactSelect","triggerProps","prefix","value","options","TRENDS_FUNCTIONS","onChange","opt","handleTrendFunctionChange","TRENDS_PARAMETERS","handleParameterChange","ListContainer","ChangedTransactions","IMPROVED","setError","withBreakpoint","REGRESSION","Feature","queryString","hasPushedDefaults","Fragment","setFilterValues","column","DEFAULT_MAX_DURATION","cursor","_styled","target","space","p","theme","breakpoints","small","xlarge","TransactionNameSearchBar","withPageFilters","TrendsSummary","generatePerformanceEventView","isTrends","static","nextProps","prevState","getDocumentTitle","renderContent","SentryDocumentTitle","title","MetricsCardinalityProvider","sendOutcomeAnalytics","withOrganization","withProjects","withApi","assignValue","copyObject","createAssigner","isArrayLike","isPrototype","hasOwnProperty","prototype","object","source","call","module","exports"],"sourceRoot":""}