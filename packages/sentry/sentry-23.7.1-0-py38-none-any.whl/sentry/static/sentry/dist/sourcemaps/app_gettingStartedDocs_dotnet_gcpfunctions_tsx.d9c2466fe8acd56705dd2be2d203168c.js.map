{"version":3,"file":"chunks/app_gettingStartedDocs_dotnet_gcpfunctions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"yqBAWO,MAAMA,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IAAI,sCAAuC,CAC1CC,QAAQH,EAAAA,EAAAA,IAAA,iBAIdI,eAAgB,CACd,CACEC,SAAU,QACVN,aAAaO,EAAAA,EAAAA,GAAE,oBACfC,KAAM,iEAER,CACEF,SAAU,QACVN,aAAaO,EAAAA,EAAAA,GAAE,qBACfC,KAAM,8DAER,CACEF,SAAU,MACVN,aAAaO,EAAAA,EAAAA,GAAE,iEACfC,KAAO,2HAQb,CACEX,KAAMC,EAAAA,GAASW,UACfT,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,wGACA,CACEO,cAAcT,EAAAA,EAAAA,IAAA,WACdU,qBAAqBV,EAAAA,EAAAA,IAAA,eAK7BI,eAAgB,CACd,CACEC,SAAU,SACVE,KAAO,mPAaT,CACEF,SAAU,OACVN,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,+GACA,CAACS,YAAYX,EAAAA,EAAAA,IAAA,WAAUY,iBAAiBZ,EAAAA,EAAAA,IAAA,eAI9CO,KAAO,mCAGDf,ugBAgBZ,CACEI,KAAMC,EAAAA,GAASgB,OACfd,aAAaO,EAAAA,EAAAA,GAAE,iEACfF,eAAgB,CACd,CACEC,SAAU,SACVE,KAAO,qMAab,CACEO,OAAOR,EAAAA,EAAAA,GAAE,WACTP,aACEgB,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAf,SAAA,EACNK,EAAAA,EAAAA,GACC,iGAEFS,EAAAA,EAAAA,IAACE,EAAAA,EAAI,CAACC,OAAO,SAAQjB,SAAA,EACnBD,EAAAA,EAAAA,IAACmB,EAAAA,EAAQ,CAAAlB,UACNC,EAAAA,EAAAA,IAAI,uCAAwC,CAC3CkB,MACEpB,EAAAA,EAAAA,IAACqB,EAAAA,EAAY,CAACC,KAAK,4GAIzBtB,EAAAA,EAAAA,IAACmB,EAAAA,EAAQ,CAAAlB,UACNC,EAAAA,EAAAA,IACC,4EACA,CACEkB,MACEpB,EAAAA,EAAAA,IAACqB,EAAAA,EAAY,CAACC,KAAK,iEAErBnB,QAAQH,EAAAA,EAAAA,IAAA,aACRO,MAAMP,EAAAA,EAAAA,IAAA,gBAIZA,EAAAA,EAAAA,IAACmB,EAAAA,EAAQ,CAAAlB,UACNC,EAAAA,EAAAA,IAAI,uCAAwC,CAC3CkB,MAAMpB,EAAAA,EAAAA,IAACqB,EAAAA,EAAY,CAACC,KAAK,2CACzBnB,QAAQH,EAAAA,EAAAA,IAAA,wBAOrB,EAGM,SAASuB,EAA8BC,GAA+B,IAA9B,IAAChC,KAAQiC,GAAmBD,EACzE,OAAOxB,EAAAA,EAAAA,IAAC0B,EAAAA,EAAM,CAACnC,MAAOA,EAAM,CAACC,WAAWiC,GAC1C,CAFgBF,EAA8BI,YAAA,iCAI9C,S","sources":["webpack:///./app/gettingStartedDocs/dotnet/gcpfunctions.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct('Install the [strong:NuGet] package:', {\n          strong: <strong />,\n        })}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'shell',\n        description: t('Package Manager:'),\n        code: 'Install-Package Sentry.Google.Cloud.Functions -Version 3.34.0',\n      },\n      {\n        language: 'shell',\n        description: t('Or .NET Core CLI:'),\n        code: 'dotnet add package Sentry.Google.Cloud.Functions -v 3.34.0',\n      },\n      {\n        language: 'xml',\n        description: t('Or, manually add the Sentry dependency into your csproj file:'),\n        code: `\n<ItemGroup>\n  <PackageReference Include=\"Sentry.Google.Cloud.Functions\" Version=\"3.34.0\"/>\n</ItemGroup>\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          'Then, add Sentry to the [functionCode:Function] class through [functionStartupCode:FunctionsStartup]:',\n          {\n            functionCode: <code />,\n            functionStartupCode: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'csharp',\n        code: `\n// Add the following line:\n[assembly: FunctionsStartup(typeof(SentryStartup))]\n\npublic class Function : IHttpFunction\n{\n    public Task HandleAsync(HttpContext context)\n    {\n        // Your function code here.\n    }\n}\n        `,\n      },\n      {\n        language: 'json',\n        description: (\n          <p>\n            {tct(\n              \"Additionally, you'll need to set up your [sentryCode:Sentry] settings on [appsettingsCode:appsettings.json]:\",\n              {sentryCode: <code />, appsettingsCode: <code />}\n            )}\n          </p>\n        ),\n        code: `\n{\n  \"Sentry\": {\n    \"Dsn\": \"${dsn}\",\n    // Sends Cookies, User Id when one is logged on and user IP address to sentry. It's turned off by default.\n    \"SendDefaultPii\": true,\n    // When configuring for the first time, to see what the SDK is doing:\n    \"Debug\": true,\n    // Opt-in for payload submission.\n    \"MaxRequestBodySize\": \"Always\",\n    // Set TracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n    // We recommend adjusting this value in production.\n    \"TracesSampleRate\": 1\n  }\n}\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t('To verify your setup, you can capture a message with the SDK:'),\n    configurations: [\n      {\n        language: 'csharp',\n        code: `\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Sentry;\n\npublic Task HandleAsync(HttpContext context)\n{\n    SentrySdk.CaptureMessage(\"Hello Sentry\");\n}\n        `,\n      },\n    ],\n  },\n  {\n    title: t('Samples'),\n    description: (\n      <Fragment>\n        {t(\n          'See the following examples that demonstrate how to integrate Sentry with various frameworks.'\n        )}\n        <List symbol=\"bullet\">\n          <ListItem>\n            {tct('[link:Google Cloud Functions sample]', {\n              link: (\n                <ExternalLink href=\"https://github.com/getsentry/sentry-dotnet/tree/main/samples/Sentry.Samples.Google.Cloud.Functions\" />\n              ),\n            })}\n          </ListItem>\n          <ListItem>\n            {tct(\n              '[link:Multiple samples in the [code:dotnet] SDK repository] [strong:(C#)]',\n              {\n                link: (\n                  <ExternalLink href=\"https://github.com/getsentry/sentry-dotnet/tree/main/samples\" />\n                ),\n                strong: <strong />,\n                code: <code />,\n              }\n            )}\n          </ListItem>\n          <ListItem>\n            {tct('[link:Basic F# sample] [strong:(F#)]', {\n              link: <ExternalLink href=\"https://github.com/sentry-demos/fsharp\" />,\n              strong: <strong />,\n            })}\n          </ListItem>\n        </List>\n      </Fragment>\n    ),\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithGCPFunctions({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} {...props} />;\n}\n\nexport default GettingStartedWithGCPFunctions;\n"],"names":["steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","_jsx","children","tct","strong","configurations","language","t","code","CONFIGURE","functionCode","functionStartupCode","sentryCode","appsettingsCode","VERIFY","title","_jsxs","Fragment","List","symbol","ListItem","link","ExternalLink","href","GettingStartedWithGCPFunctions","_ref","props","Layout","displayName"],"sourceRoot":""}