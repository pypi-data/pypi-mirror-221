{"version":3,"file":"chunks/app_actionCreators_navigation_tsx-app_utils_useParams_tsx-app_utils_withOrganizations_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/navigation.tsx","webpack:///./app/components/contextPickerModal.tsx","webpack:///./app/utils/replaceRouterParams.tsx","webpack:///./app/utils/useParams.tsx","webpack:///./app/utils/withOrganizations.tsx","webpack:///./app/views/settings/organizationIntegrations/integrationIcon.tsx"],"sourcesContent":["import {InjectedRouter} from 'react-router';\nimport {Location} from 'history';\n\nimport {openModal} from 'sentry/actionCreators/modal';\nimport ContextPickerModal from 'sentry/components/contextPickerModal';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\n// TODO(ts): figure out better typing for react-router here\nexport function navigateTo(\n  to: string,\n  router: InjectedRouter & {location?: Location},\n  configUrl?: string\n) {\n  // Check for placeholder params\n  const needOrg = to.includes(':orgId');\n  const needProject = to.includes(':projectId') || to.includes(':project');\n  const comingFromProjectId = router?.location?.query?.project;\n  const needProjectId = !comingFromProjectId || Array.isArray(comingFromProjectId);\n\n  const projectById = ProjectsStore.getById(comingFromProjectId);\n\n  if (needOrg || (needProject && (needProjectId || !projectById)) || configUrl) {\n    openModal(\n      modalProps => (\n        <ContextPickerModal\n          {...modalProps}\n          nextPath={to}\n          needOrg={needOrg}\n          needProject={needProject}\n          configUrl={configUrl}\n          onFinish={path => {\n            modalProps.closeModal();\n            return window.setTimeout(() => router.push(normalizeUrl(path)), 0);\n          }}\n        />\n      ),\n      {}\n    );\n  } else {\n    if (projectById) {\n      to = replaceRouterParams(to, {\n        projectId: projectById.slug,\n        project: projectById.id,\n      });\n    }\n    router.push(normalizeUrl(to));\n  }\n}\n","import {Component, Fragment} from 'react';\nimport {findDOMNode} from 'react-dom';\nimport {components} from 'react-select';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SelectControl, {\n  StylesConfig,\n} from 'sentry/components/forms/controls/selectControl';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport OrganizationsStore from 'sentry/stores/organizationsStore';\nimport OrganizationStore from 'sentry/stores/organizationStore';\nimport {space} from 'sentry/styles/space';\nimport {Integration, Organization, Project} from 'sentry/types';\nimport Projects from 'sentry/utils/projects';\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport IntegrationIcon from 'sentry/views/settings/organizationIntegrations/integrationIcon';\n\ntype Props = ModalRenderProps & {\n  integrationConfigs: Integration[];\n\n  loading: boolean;\n\n  /**\n   * Does modal need to prompt for organization.\n   * TODO(billy): This can be derived from `nextPath`\n   */\n  needOrg: boolean;\n\n  /**\n   * Does modal need to prompt for project\n   */\n  needProject: boolean;\n\n  /**\n   * The destination route\n   */\n  nextPath: string;\n\n  /**\n   * Finish callback\n   */\n  onFinish: (path: string) => number | void;\n  /**\n   * Callback for when organization is selected\n   */\n  onSelectOrganization: (orgSlug: string) => void;\n\n  /**\n   * Organization slug\n   */\n  organization: string;\n\n  /**\n   * List of available organizations\n   */\n  organizations: Organization[];\n\n  projects: Project[];\n\n  allowAllProjectsSelection?: boolean;\n};\n\nconst selectStyles: StylesConfig = {\n  menu: provided => ({\n    ...provided,\n    position: 'initial',\n    boxShadow: 'none',\n    marginBottom: 0,\n  }),\n  option: (provided, state: any) => ({\n    ...provided,\n    opacity: state.isDisabled ? 0.6 : 1,\n    cursor: state.isDisabled ? 'not-allowed' : 'pointer',\n    pointerEvents: state.isDisabled ? 'none' : 'auto',\n  }),\n};\n\nclass ContextPickerModal extends Component<Props> {\n  componentDidMount() {\n    const {organization, projects, organizations} = this.props;\n\n    // Don't make any assumptions if there are multiple organizations\n    if (organizations.length !== 1) {\n      return;\n    }\n\n    // If there is an org in context (and there's only 1 org available),\n    // attempt to see if we need more info from user and redirect otherwise\n    if (organization) {\n      // This will handle if we can intelligently move the user forward\n      this.navigateIfFinish([{slug: organization}], projects);\n      return;\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    // Component may be mounted before projects is fetched, check if we can finish when\n    // component is updated with projects\n    if (JSON.stringify(prevProps.projects) !== JSON.stringify(this.props.projects)) {\n      this.navigateIfFinish(this.props.organizations, this.props.projects);\n    }\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.onFinishTimeout);\n  }\n\n  onFinishTimeout: number | undefined = undefined;\n\n  // TODO(ts) The various generics in react-select types make getting this\n  // right hard.\n  orgSelect: any | null = null;\n  projectSelect: any | null = null;\n  configSelect: any | null = null;\n\n  // Performs checks to see if we need to prompt user\n  // i.e. When there is only 1 org and no project is needed or\n  // there is only 1 org and only 1 project (which should be rare)\n  navigateIfFinish = (\n    organizations: Array<{slug: string}>,\n    projects: Array<{slug: string}>,\n    latestOrg: string = this.props.organization\n  ) => {\n    const {needProject, onFinish, nextPath, integrationConfigs} = this.props;\n    const {isSuperuser} = ConfigStore.get('user') || {};\n\n    // If no project is needed and theres only 1 org OR\n    // if we need a project and there's only 1 project\n    // then return because we can't navigate anywhere yet\n    if (\n      (!needProject && organizations.length !== 1) ||\n      (needProject && projects.length !== 1) ||\n      (integrationConfigs.length && isSuperuser)\n    ) {\n      return;\n    }\n\n    window.clearTimeout(this.onFinishTimeout);\n\n    // If there is only one org and we don't need a project slug, then call finish callback\n    if (!needProject) {\n      this.onFinishTimeout =\n        onFinish(\n          replaceRouterParams(nextPath, {\n            orgId: organizations[0].slug,\n          })\n        ) ?? undefined;\n      return;\n    }\n\n    // Use latest org or if only 1 org, use that\n    let org = latestOrg;\n    if (!org && organizations.length === 1) {\n      org = organizations[0].slug;\n    }\n\n    this.onFinishTimeout =\n      onFinish(\n        replaceRouterParams(nextPath, {\n          orgId: org,\n          projectId: projects[0].slug,\n          project: this.props.projects.find(p => p.slug === projects[0].slug)?.id,\n        })\n      ) ?? undefined;\n  };\n\n  doFocus = (ref: any | null) => {\n    if (!ref || this.props.loading) {\n      return;\n    }\n\n    // eslint-disable-next-line react/no-find-dom-node\n    const el = findDOMNode(ref) as HTMLElement;\n\n    if (el !== null) {\n      const input = el.querySelector('input');\n\n      input && input.focus();\n    }\n  };\n\n  handleSelectOrganization = ({value}: {value: string}) => {\n    // If we do not need to select a project, we can early return after selecting an org\n    // No need to fetch org details\n    if (!this.props.needProject) {\n      this.navigateIfFinish([{slug: value}], []);\n      return;\n    }\n\n    this.props.onSelectOrganization(value);\n  };\n\n  handleSelectProject = ({value}: {value: string}) => {\n    const {organization} = this.props;\n    if (!value || !organization) {\n      return;\n    }\n\n    this.navigateIfFinish([{slug: organization}], [{slug: value}]);\n  };\n\n  handleSelectConfiguration = ({value}: {value: string}) => {\n    const {onFinish, nextPath} = this.props;\n\n    if (!value) {\n      return;\n    }\n\n    onFinish(`${nextPath}${value}/`);\n    return;\n  };\n\n  getMemberProjects = () => {\n    const {projects} = this.props;\n    const nonMemberProjects: Project[] = [];\n    const memberProjects: Project[] = [];\n    projects.forEach(project =>\n      project.isMember ? memberProjects.push(project) : nonMemberProjects.push(project)\n    );\n\n    return [memberProjects, nonMemberProjects];\n  };\n\n  // TODO(TS): Fix typings\n  customOptionProject = ({label, ...props}: any) => {\n    const project = this.props.projects.find(({slug}) => props.value === slug);\n    if (!project) {\n      return null;\n    }\n    return (\n      <components.Option label={label} {...props}>\n        <ProjectBadgeOption\n          project={project}\n          avatarSize={20}\n          displayName={label}\n          avatarProps={{consistentWidth: true}}\n          disableLink\n        />\n      </components.Option>\n    );\n  };\n\n  get headerText() {\n    const {needOrg, needProject, integrationConfigs} = this.props;\n    if (needOrg && needProject) {\n      return t('Select an organization and a project to continue');\n    }\n    if (needOrg) {\n      return t('Select an organization to continue');\n    }\n    if (needProject) {\n      return t('Select a project to continue');\n    }\n    if (integrationConfigs.length) {\n      return t('Select a configuration to continue');\n    }\n    // if neither project nor org needs to be selected, nothing will render anyways\n    return '';\n  }\n\n  renderProjectSelectOrMessage() {\n    const {organization, projects, allowAllProjectsSelection} = this.props;\n    const [memberProjects, nonMemberProjects] = this.getMemberProjects();\n    const {isSuperuser} = ConfigStore.get('user') || {};\n\n    const projectOptions = [\n      {\n        label: t('My Projects'),\n        options: memberProjects.map(p => ({\n          value: p.slug,\n          label: p.slug,\n          disabled: false,\n        })),\n      },\n      {\n        label: t('All Projects'),\n        options: nonMemberProjects.map(p => ({\n          value: p.slug,\n          label: p.slug,\n          disabled: allowAllProjectsSelection ? false : !isSuperuser,\n        })),\n      },\n    ];\n\n    if (!projects.length) {\n      return (\n        <div>\n          {tct('You have no projects. Click [link] to make one.', {\n            link: (\n              <Link to={`/organizations/${organization}/projects/new/`}>{t('here')}</Link>\n            ),\n          })}\n        </div>\n      );\n    }\n\n    return (\n      <StyledSelectControl\n        ref={(ref: any) => {\n          this.projectSelect = ref;\n          this.doFocus(this.projectSelect);\n        }}\n        placeholder={t('Select a Project to continue')}\n        name=\"project\"\n        options={projectOptions}\n        onChange={this.handleSelectProject}\n        components={{Option: this.customOptionProject, DropdownIndicator: null}}\n        styles={selectStyles}\n        menuIsOpen\n      />\n    );\n  }\n\n  renderIntegrationConfigs() {\n    const {integrationConfigs} = this.props;\n    const {isSuperuser} = ConfigStore.get('user') || {};\n\n    const options = [\n      {\n        label: tct('[providerName] Configurations', {\n          providerName: integrationConfigs[0].provider.name,\n        }),\n        options: integrationConfigs.map(config => ({\n          value: config.id,\n          label: (\n            <StyledIntegrationItem>\n              <IntegrationIcon size={22} integration={config} />\n              <span>{config.domainName}</span>\n            </StyledIntegrationItem>\n          ),\n          disabled: isSuperuser ? false : true,\n        })),\n      },\n    ];\n    return (\n      <StyledSelectControl\n        ref={(ref: any) => {\n          this.configSelect = ref;\n          this.doFocus(this.configSelect);\n        }}\n        placeholder={t('Select a configuration to continue')}\n        name=\"configurations\"\n        options={options}\n        onChange={this.handleSelectConfiguration}\n        components={{DropdownIndicator: null}}\n        styles={selectStyles}\n        menuIsOpen\n      />\n    );\n  }\n\n  render() {\n    const {\n      needOrg,\n      needProject,\n      organization,\n      organizations,\n      loading,\n      Header,\n      Body,\n      integrationConfigs,\n    } = this.props;\n    const {isSuperuser} = ConfigStore.get('user') || {};\n\n    const shouldShowProjectSelector = organization && needProject && !loading;\n\n    const shouldShowConfigSelector = integrationConfigs.length > 0 && isSuperuser;\n\n    const orgChoices = organizations\n      .filter(({status}) => status.id !== 'pending_deletion')\n      .map(({slug}) => ({label: slug, value: slug}));\n\n    const shouldShowPicker = needOrg || needProject || shouldShowConfigSelector;\n\n    if (!shouldShowPicker) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <Header closeButton>{this.headerText}</Header>\n        <Body>\n          {loading && <StyledLoadingIndicator overlay />}\n          {needOrg && (\n            <StyledSelectControl\n              ref={(ref: any) => {\n                this.orgSelect = ref;\n                if (shouldShowProjectSelector) {\n                  return;\n                }\n                this.doFocus(this.orgSelect);\n              }}\n              placeholder={t('Select an Organization')}\n              name=\"organization\"\n              options={orgChoices}\n              value={organization}\n              onChange={this.handleSelectOrganization}\n              components={{DropdownIndicator: null}}\n              styles={selectStyles}\n              menuIsOpen\n            />\n          )}\n\n          {shouldShowProjectSelector && this.renderProjectSelectOrMessage()}\n          {shouldShowConfigSelector && this.renderIntegrationConfigs()}\n        </Body>\n      </Fragment>\n    );\n  }\n}\n\ntype ContainerProps = Omit<\n  Props,\n  | 'projects'\n  | 'loading'\n  | 'organizations'\n  | 'organization'\n  | 'onSelectOrganization'\n  | 'integrationConfigs'\n> & {\n  allowAllProjectsSelection?: boolean;\n  configUrl?: string;\n\n  /**\n   * List of slugs we want to be able to choose from\n   */\n  projectSlugs?: string[];\n} & DeprecatedAsyncComponent['props'];\n\ntype ContainerState = {\n  organizations: Organization[];\n  integrationConfigs?: Integration[];\n  selectedOrganization?: string;\n} & DeprecatedAsyncComponent['state'];\n\nclass ContextPickerModalContainer extends DeprecatedAsyncComponent<\n  ContainerProps,\n  ContainerState\n> {\n  getDefaultState() {\n    const storeState = OrganizationStore.get();\n    return {\n      ...super.getDefaultState(),\n      organizations: OrganizationsStore.getAll(),\n      selectedOrganization: storeState.organization?.slug,\n    };\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncComponent['getEndpoints']> {\n    const {configUrl} = this.props;\n    if (configUrl) {\n      return [['integrationConfigs', configUrl]];\n    }\n    return [];\n  }\n\n  componentWillUnmount() {\n    this.unlistener?.();\n  }\n\n  unlistener = OrganizationsStore.listen(\n    (organizations: Organization[]) => this.setState({organizations}),\n    undefined\n  );\n\n  handleSelectOrganization = (organizationSlug: string) => {\n    this.setState({selectedOrganization: organizationSlug});\n  };\n\n  renderModal({\n    projects,\n    initiallyLoaded,\n    integrationConfigs,\n  }: {\n    initiallyLoaded?: boolean;\n    integrationConfigs?: Integration[];\n    projects?: Project[];\n  }) {\n    return (\n      <ContextPickerModal\n        {...this.props}\n        projects={projects || []}\n        loading={!initiallyLoaded}\n        organizations={this.state.organizations}\n        organization={this.state.selectedOrganization!}\n        onSelectOrganization={this.handleSelectOrganization}\n        integrationConfigs={integrationConfigs || []}\n        allowAllProjectsSelection={this.props.allowAllProjectsSelection}\n      />\n    );\n  }\n\n  render() {\n    const {projectSlugs, configUrl} = this.props;\n\n    if (configUrl && this.state.loading) {\n      return <LoadingIndicator />;\n    }\n    if (this.state.integrationConfigs?.length) {\n      return this.renderModal({\n        integrationConfigs: this.state.integrationConfigs,\n        initiallyLoaded: !this.state.loading,\n      });\n    }\n    if (this.state.selectedOrganization) {\n      return (\n        <Projects\n          orgId={this.state.selectedOrganization}\n          allProjects={!projectSlugs?.length}\n          slugs={projectSlugs}\n        >\n          {({projects, initiallyLoaded}) =>\n            this.renderModal({projects: projects as Project[], initiallyLoaded})\n          }\n        </Projects>\n      );\n    }\n\n    return this.renderModal({});\n  }\n}\n\nexport default ContextPickerModalContainer;\n\nconst StyledSelectControl = styled(SelectControl)`\n  margin-top: ${space(1)};\n`;\n\nconst ProjectBadgeOption = styled(IdBadge)`\n  margin: ${space(1)};\n`;\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  z-index: 1;\n`;\n\nconst StyledIntegrationItem = styled('div')`\n  display: grid;\n  grid-template-columns: ${space(4)} auto;\n  grid-template-rows: 1fr;\n`;\n","/**\n * Given a route string, replace path parameters (e.g. `:id`) with value from `params`\n *\n * e.g. {id: 'test'}\n */\nexport default function replaceRouterParams(\n  route: string,\n  params: {[key: string]: string | number | undefined}\n): string {\n  // parse route params from route\n  const matches = route.match(/:\\w+/g);\n\n  if (!matches || !matches.length) {\n    return route;\n  }\n\n  // replace with current params\n  matches.forEach(param => {\n    const paramName = param.slice(1);\n    if (typeof params[paramName] === 'undefined') {\n      return;\n    }\n\n    route = route.replace(param, String(params[paramName]));\n  });\n\n  return route;\n}\n","import {useMemo} from 'react';\n\nimport {customerDomain, usingCustomerDomain} from 'sentry/constants';\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\nexport function useParams<P = Record<string, string>>(): P {\n  const contextParams = useRouteContext().params;\n\n  // Memoize params as mutating for customer domains causes other hooks\n  // that depend on `useParams()` to refresh infinitely.\n  return useMemo(() => {\n    if (usingCustomerDomain && customerDomain && contextParams.orgId === undefined) {\n      // We do not know if the caller of this hook requires orgId, so we populate orgId implicitly.\n      return {...contextParams, orgId: customerDomain};\n    }\n    return contextParams;\n  }, [contextParams]);\n}\n","import {Component} from 'react';\n\nimport OrganizationsStore from 'sentry/stores/organizationsStore';\nimport {OrganizationSummary} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedOrganizationsProps = {\n  organizations: OrganizationSummary[];\n  organizationsLoading?: boolean;\n};\n\ntype State = {\n  organizations: OrganizationSummary[];\n};\n\nfunction withOrganizations<P extends InjectedOrganizationsProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithOrganizations extends Component<\n    Omit<P, keyof InjectedOrganizationsProps> & Partial<InjectedOrganizationsProps>,\n    State\n  > {\n    static displayName = `withOrganizations(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {organizations: OrganizationsStore.getAll()};\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = OrganizationsStore.listen(\n      (organizations: OrganizationSummary[]) => this.setState({organizations}),\n      undefined\n    );\n\n    render() {\n      const {organizationsLoading, organizations, ...props} = this.props as P;\n      return (\n        <WrappedComponent\n          {...({\n            organizationsLoading: organizationsLoading ?? !OrganizationsStore.loaded,\n            organizations: organizations ?? this.state.organizations,\n            ...props,\n          } as P)}\n        />\n      );\n    }\n  }\n\n  return WithOrganizations;\n}\n\nexport default withOrganizations;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport PluginIcon, {DEFAULT_ICON, ICON_PATHS} from 'sentry/plugins/components/pluginIcon';\nimport {Integration} from 'sentry/types';\n\ntype Props = {\n  integration: Integration;\n  size?: number;\n};\n\ntype State = {\n  imgSrc: Integration['icon'];\n};\n\ntype IconProps = Pick<Props, 'size'>;\n\nconst StyledIcon = styled('img')<IconProps>`\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n  border-radius: 2px;\n  display: block;\n`;\n\nclass Icon extends Component<Props, State> {\n  state: State = {\n    imgSrc: this.props.integration.icon,\n  };\n\n  render() {\n    const {integration, size} = this.props;\n\n    return (\n      <StyledIcon\n        size={size}\n        src={this.state.imgSrc}\n        onError={() => {\n          this.setState({imgSrc: ICON_PATHS[integration.provider.key] || DEFAULT_ICON});\n        }}\n      />\n    );\n  }\n}\n\nfunction IntegrationIcon({integration, size = 32}: Props) {\n  return integration.icon ? (\n    <Icon size={size} integration={integration} />\n  ) : (\n    <PluginIcon size={size} pluginId={integration.provider.key} />\n  );\n}\n\nexport default IntegrationIcon;\n"],"names":["navigateTo","to","router","configUrl","needOrg","includes","needProject","comingFromProjectId","location","query","project","needProjectId","Array","isArray","projectById","ProjectsStore","getById","openModal","modalProps","_jsx","ContextPickerModal","nextPath","onFinish","path","closeModal","window","setTimeout","push","normalizeUrl","replaceRouterParams","projectId","slug","id","selectStyles","menu","provided","position","boxShadow","marginBottom","option","state","opacity","isDisabled","cursor","pointerEvents","Component","constructor","_this","arguments","this","_defineProperty","undefined","organizations","projects","latestOrg","length","props","organization","integrationConfigs","isSuperuser","ConfigStore","get","clearTimeout","onFinishTimeout","orgId","org","find","p","ref","loading","el","findDOMNode","input","querySelector","focus","_ref","value","onSelectOrganization","navigateIfFinish","_ref2","_ref3","nonMemberProjects","memberProjects","forEach","isMember","_ref4","label","_ref5","components","Option","children","ProjectBadgeOption","avatarSize","displayName","avatarProps","consistentWidth","disableLink","componentDidMount","componentDidUpdate","prevProps","JSON","stringify","componentWillUnmount","headerText","t","renderProjectSelectOrMessage","allowAllProjectsSelection","getMemberProjects","projectOptions","options","map","disabled","StyledSelectControl","projectSelect","doFocus","placeholder","name","onChange","handleSelectProject","customOptionProject","DropdownIndicator","styles","menuIsOpen","tct","link","Link","renderIntegrationConfigs","providerName","provider","config","_jsxs","StyledIntegrationItem","IntegrationIcon","size","integration","domainName","configSelect","handleSelectConfiguration","render","Header","Body","shouldShowProjectSelector","shouldShowConfigSelector","orgChoices","filter","_ref6","status","_ref7","Fragment","closeButton","StyledLoadingIndicator","overlay","orgSelect","handleSelectOrganization","ContextPickerModalContainer","DeprecatedAsyncComponent","OrganizationsStore","listen","setState","organizationSlug","selectedOrganization","getDefaultState","storeState","OrganizationStore","super","getAll","getEndpoints","unlistener","renderModal","_ref8","initiallyLoaded","projectSlugs","LoadingIndicator","Projects","allProjects","slugs","_ref9","_styled","SelectControl","target","space","IdBadge","route","params","matches","match","param","paramName","slice","replace","String","useParams","contextParams","useRouteContext","useMemo","usingCustomerDomain","customerDomain","WrappedComponent","WithOrganizations","unsubscribe","organizationsLoading","loaded","getDisplayName","StyledIcon","Icon","imgSrc","icon","src","onError","ICON_PATHS","key","DEFAULT_ICON","PluginIcon","pluginId"],"sourceRoot":""}