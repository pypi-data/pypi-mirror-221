{"version":3,"file":"chunks/app_views_alerts_list_incidents_index_tsx-images_spot_alerts-empty-state_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/alerts/list/onboarding.tsx","webpack:///./app/views/alerts/list/incidents/row.tsx","webpack:///./app/views/alerts/list/incidents/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport Panel from 'sentry/components/panels/panel';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n  noCenter?: boolean;\n}\n\nfunction OnboardingPanel({image, noCenter, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image && !noCenter}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  min-width: 0;\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  min-width: 150px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/alerts-empty-state.svg';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  actions: React.ReactNode;\n};\n\nfunction Onboarding({actions}: Props) {\n  return (\n    <OnboardingPanel image={<AlertsImage src={emptyStateImg} />}>\n      <h3>{t('More signal, less noise')}</h3>\n      <p>\n        {t(\n          'Not every error is worth an email. Set your own rules for alerts you need, with information that helps.'\n        )}\n      </p>\n      <ButtonList gap={1}>{actions}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst AlertsImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    transform: translateX(-60%);\n    width: 280px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    transform: translateX(-75%);\n    width: 320px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport ActorAvatar from 'sentry/components/avatar/actorAvatar';\nimport Duration from 'sentry/components/duration';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport Tag from 'sentry/components/tag';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {space} from 'sentry/styles/space';\nimport {Actor, Organization, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {Incident, IncidentStatus} from 'sentry/views/alerts/types';\nimport {alertDetailsLink} from 'sentry/views/alerts/utils';\n\ntype Props = {\n  incident: Incident;\n  organization: Organization;\n  projects: Project[];\n  projectsLoaded: boolean;\n};\n\nfunction AlertListRow({incident, projectsLoaded, projects, organization}: Props) {\n  const slug = incident.projects[0];\n  const started = moment(incident.dateStarted);\n  const duration = moment\n    .duration(moment(incident.dateClosed || new Date()).diff(started))\n    .as('seconds');\n\n  const project = useMemo(() => projects.find(p => p.slug === slug), [slug, projects]);\n\n  const alertLink = {\n    pathname: alertDetailsLink(organization, incident),\n    query: {alert: incident.identifier},\n  };\n  const ownerId = incident.alertRule.owner?.split(':')[1];\n  let teamName = '';\n  if (ownerId) {\n    teamName = TeamStore.getById(ownerId)?.name ?? '';\n  }\n  const teamActor = ownerId\n    ? {type: 'team' as Actor['type'], id: ownerId, name: teamName}\n    : null;\n\n  return (\n    <ErrorBoundary>\n      <FlexCenter>\n        <Title data-test-id=\"alert-title\">\n          <Link to={alertLink}>{incident.title}</Link>\n        </Title>\n      </FlexCenter>\n\n      <NoWrapNumeric>\n        {getDynamicText({\n          value: <TimeSince date={incident.dateStarted} unitStyle=\"extraShort\" />,\n          fixed: '1w ago',\n        })}\n      </NoWrapNumeric>\n      <NoWrapNumeric>\n        {incident.status === IncidentStatus.CLOSED ? (\n          <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n        ) : (\n          <Tag type=\"warning\">{t('Still Active')}</Tag>\n        )}\n      </NoWrapNumeric>\n\n      <FlexCenter>\n        <ProjectBadge avatarSize={18} project={!projectsLoaded ? {slug} : project} />\n      </FlexCenter>\n      <NoWrapNumeric>#{incident.id}</NoWrapNumeric>\n\n      <FlexCenter>\n        {teamActor ? (\n          <Fragment>\n            <StyledActorAvatar actor={teamActor} size={18} hasTooltip={false} />{' '}\n            <TeamWrapper>{teamActor.name}</TeamWrapper>\n          </Fragment>\n        ) : (\n          '-'\n        )}\n      </FlexCenter>\n    </ErrorBoundary>\n  );\n}\n\nconst Title = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n  min-width: 130px;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst FlexCenter = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n  display: flex;\n  align-items: center;\n  line-height: 1.6;\n`;\n\nconst NoWrapNumeric = styled(FlexCenter)`\n  white-space: nowrap;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst TeamWrapper = styled('span')`\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst StyledActorAvatar = styled(ActorAvatar)`\n  margin-right: ${space(1)};\n`;\n\nexport default AlertListRow;\n","import {Fragment, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {promptsCheck, promptsUpdate} from 'sentry/actionCreators/prompts';\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport Pagination from 'sentry/components/pagination';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport Projects from 'sentry/utils/projects';\n\nimport FilterBar from '../../filterBar';\nimport {Incident} from '../../types';\nimport {getQueryStatus, getTeamParams} from '../../utils';\nimport AlertHeader from '../header';\nimport Onboarding from '../onboarding';\n\nimport AlertListRow from './row';\n\nconst DOCS_URL =\n  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';\n\ntype Props = RouteComponentProps<{}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  incidentList: Incident[];\n  /**\n   * User has not yet seen the 'alert_stream' welcome prompt for this\n   * organization.\n   */\n  firstVisitShown?: boolean;\n  /**\n   * Is there at least one alert rule configured for the currently selected\n   * projects?\n   */\n  hasAlertRule?: boolean;\n};\n\nclass IncidentsList extends DeprecatedAsyncComponent<\n  Props,\n  State & DeprecatedAsyncComponent['state']\n> {\n  getEndpoints(): ReturnType<DeprecatedAsyncComponent['getEndpoints']> {\n    const {organization, location} = this.props;\n    const {query} = location;\n    const status = getQueryStatus(query.status);\n\n    return [\n      [\n        'incidentList',\n        `/organizations/${organization.slug}/incidents/`,\n        {\n          query: {\n            ...query,\n            status: status === 'all' ? undefined : status,\n            team: getTeamParams(query.team),\n            expand: ['original_alert_rule'],\n          },\n        },\n      ],\n    ];\n  }\n\n  /**\n   * If our incidentList is empty, determine if we've configured alert rules or\n   * if the user has seen the welcome prompt.\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length !== 0) {\n      this.setState({hasAlertRule: true, firstVisitShown: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    // Check if they have rules or not, to know which empty state message to\n    // display\n    const {location, organization} = this.props;\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${organization.slug}/alert-rules/`,\n      {\n        method: 'GET',\n        query: location.query,\n      }\n    );\n    const hasAlertRule = alertRules.length > 0;\n\n    // We've already configured alert rules, no need to check if we should show\n    // the \"first time welcome\" prompt\n    if (hasAlertRule) {\n      this.setState({hasAlertRule, firstVisitShown: false, loading: false});\n      return;\n    }\n\n    // Check if they have already seen the prompt for the alert stream\n    const prompt = await promptsCheck(this.api, {\n      organizationId: organization.id,\n      feature: 'alert_stream',\n    });\n\n    const firstVisitShown = !prompt?.dismissedTime;\n\n    if (firstVisitShown) {\n      // Prompt has not been seen, mark the prompt as seen immediately so they\n      // don't see it again\n      promptsUpdate(this.api, {\n        feature: 'alert_stream',\n        organizationId: organization.id,\n        status: 'dismissed',\n      });\n    }\n\n    this.setState({hasAlertRule, firstVisitShown, loading: false});\n  }\n\n  get projectsFromIncidents() {\n    const {incidentList} = this.state;\n\n    return [...new Set(incidentList?.map(({projects}) => projects).flat())];\n  }\n\n  handleChangeSearch = (title: string) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        title,\n      },\n    });\n  };\n\n  handleChangeFilter = (activeFilters: string[]) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        // Preserve empty team query parameter\n        team: activeFilters.length > 0 ? activeFilters : '',\n      },\n    });\n  };\n\n  handleChangeStatus = (value: string): void => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        status: value === 'all' ? undefined : value,\n      },\n    });\n  };\n\n  tryRenderOnboarding() {\n    const {firstVisitShown} = this.state;\n    const {organization} = this.props;\n\n    if (!firstVisitShown) {\n      return null;\n    }\n\n    const actions = (\n      <Fragment>\n        <Button size=\"sm\" external href={DOCS_URL}>\n          {t('View Features')}\n        </Button>\n        <CreateAlertButton\n          organization={organization}\n          iconProps={{size: 'xs'}}\n          size=\"sm\"\n          priority=\"primary\"\n          referrer=\"alert_stream\"\n        >\n          {t('Create Alert')}\n        </CreateAlertButton>\n      </Fragment>\n    );\n\n    return <Onboarding actions={actions} />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;\n    const {organization} = this.props;\n\n    const checkingForAlertRules =\n      incidentList?.length === 0 && hasAlertRule === undefined;\n    const showLoadingIndicator = loading || checkingForAlertRules;\n\n    return (\n      <Fragment>\n        {this.tryRenderOnboarding() ?? (\n          <StyledPanelTable\n            isLoading={showLoadingIndicator}\n            isEmpty={incidentList?.length === 0}\n            emptyMessage={t('No incidents exist for the current query.')}\n            emptyAction={\n              <EmptyStateAction>\n                {tct('Learn more about [link:Metric Alerts]', {\n                  link: <ExternalLink href={DOCS_URL} />,\n                })}\n              </EmptyStateAction>\n            }\n            headers={[\n              t('Alert Rule'),\n              t('Triggered'),\n              t('Duration'),\n              t('Project'),\n              t('Alert ID'),\n              t('Team'),\n            ]}\n          >\n            <Projects orgId={organization.slug} slugs={this.projectsFromIncidents}>\n              {({initiallyLoaded, projects}) =>\n                incidentList.map(incident => (\n                  <AlertListRow\n                    key={incident.id}\n                    projectsLoaded={initiallyLoaded}\n                    projects={projects as Project[]}\n                    incident={incident}\n                    organization={organization}\n                  />\n                ))\n              }\n            </Projects>\n          </StyledPanelTable>\n        )}\n        <Pagination pageLinks={incidentListPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {organization, router, location} = this.props;\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={organization.slug}>\n        <PageFiltersContainer>\n          <AlertHeader router={router} activeTab=\"stream\" />\n          <Layout.Body>\n            <Layout.Main fullWidth>\n              {!this.tryRenderOnboarding() && (\n                <Fragment>\n                  <StyledAlert showIcon>\n                    {t('This page only shows metric alerts.')}\n                  </StyledAlert>\n                  <FilterBar\n                    location={location}\n                    onChangeFilter={this.handleChangeFilter}\n                    onChangeSearch={this.handleChangeSearch}\n                    onChangeStatus={this.handleChangeStatus}\n                    hasStatusFilters\n                  />\n                </Fragment>\n              )}\n              {this.renderList()}\n            </Layout.Main>\n          </Layout.Body>\n        </PageFiltersContainer>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nfunction IncidentsListContainer(props: Props) {\n  useEffect(() => {\n    trackAnalytics('alert_stream.viewed', {\n      organization: props.organization,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const renderDisabled = () => (\n    <Layout.Body>\n      <Layout.Main fullWidth>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </Layout.Main>\n    </Layout.Body>\n  );\n\n  return (\n    <Feature\n      features={['incidents']}\n      hookName=\"feature-disabled:alerts-page\"\n      renderDisabled={renderDisabled}\n    >\n      <IncidentsList {...props} />\n    </Feature>\n  );\n}\n\nconst StyledPanelTable = styled(PanelTable)`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  & > div {\n    padding: ${space(1.5)} ${space(2)};\n  }\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: ${space(1.5)};\n`;\n\nconst EmptyStateAction = styled('p')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nexport default IncidentsListContainer;\n"],"names":["OnboardingPanel","_ref","image","noCenter","children","props","_jsx","Panel","_jsxs","Container","IlloBox","StyledBox","centered","displayName","_styled","target","space","p","theme","breakpoints","small","medium","Onboarding","actions","AlertsImage","src","emptyStateImg","t","ButtonList","gap","large","xlarge","ButtonBar","name","styles","AlertListRow","incident","projectsLoaded","projects","organization","slug","started","moment","dateStarted","duration","dateClosed","Date","diff","as","project","useMemo","find","alertLink","pathname","alertDetailsLink","query","alert","identifier","ownerId","alertRule","owner","split","teamName","TeamStore","getById","teamActor","type","id","ErrorBoundary","FlexCenter","Title","Link","to","title","NoWrapNumeric","getDynamicText","value","TimeSince","date","unitStyle","fixed","status","IncidentStatus","CLOSED","Duration","seconds","Tag","ProjectBadge","avatarSize","Fragment","StyledActorAvatar","actor","size","hasTooltip","TeamWrapper","overflowEllipsis","IdBadge","ActorAvatar","DOCS_URL","IncidentsList","DeprecatedAsyncComponent","constructor","arguments","_defineProperty","router","location","this","cursor","_cursor","page","_page","currentQuery","push","activeFilters","team","length","undefined","getEndpoints","getQueryStatus","getTeamParams","expand","async","incidentList","state","setState","hasAlertRule","firstVisitShown","loading","api","requestPromise","method","prompt","promptsCheck","organizationId","feature","dismissedTime","promptsUpdate","projectsFromIncidents","Set","map","flat","tryRenderOnboarding","Button","external","href","CreateAlertButton","iconProps","priority","referrer","renderLoading","renderBody","renderList","incidentListPageLinks","showLoadingIndicator","StyledPanelTable","isLoading","isEmpty","emptyMessage","emptyAction","EmptyStateAction","tct","link","ExternalLink","headers","Projects","orgId","slugs","_ref2","initiallyLoaded","Pagination","pageLinks","SentryDocumentTitle","orgSlug","PageFiltersContainer","AlertHeader","activeTab","Layout","fullWidth","StyledAlert","showIcon","FilterBar","onChangeFilter","handleChangeFilter","onChangeSearch","handleChangeSearch","onChangeStatus","handleChangeStatus","hasStatusFilters","IncidentsListContainer","useEffect","trackAnalytics","Feature","features","hookName","renderDisabled","Alert","PanelTable","fontSizeMedium","fontSizeLarge"],"sourceRoot":""}