{"version":3,"file":"chunks/app_gettingStartedDocs_javascript_ember_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboarding/gettingStartedDoc/utils.tsx","webpack:///./app/gettingStartedDocs/javascript/ember.tsx"],"sourcesContent":["import ExternalLink from 'sentry/components/links/externalLink';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\n\ntype Props = {\n  guideLink: string;\n  newOrg?: boolean;\n  organization?: Organization;\n  platformKey?: PlatformKey;\n  projectId?: string;\n};\n\nexport function getUploadSourceMapsStep({\n  guideLink,\n  organization,\n  platformKey,\n  projectId,\n  newOrg,\n}: Props) {\n  return {\n    title: t('Upload Source Maps'),\n    description: (\n      <p>\n        {tct(\n          'Automatically upload your source maps to enable readable stack traces for Errors. If you prefer to manually set up source maps, please follow [guideLink:this guide].',\n          {\n            guideLink: <ExternalLink href={guideLink} />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        code: `npx @sentry/wizard@latest -i sourcemaps`,\n        onCopy: () => {\n          if (!organization || !projectId || !platformKey) {\n            return;\n          }\n\n          trackAnalytics(\n            newOrg\n              ? 'onboarding.source_maps_wizard_button_copy_clicked'\n              : 'project_creation.source_maps_wizard_button_copy_clicked',\n            {\n              project_id: projectId,\n              platform: platformKey,\n              organization,\n            }\n          );\n        },\n        onSelectAndCopy: () => {\n          if (!organization || !projectId || !platformKey) {\n            return;\n          }\n\n          trackAnalytics(\n            newOrg\n              ? 'onboarding.source_maps_wizard_selected_and_copied'\n              : 'project_creation.source_maps_wizard_selected_and_copied',\n            {\n              project_id: projectId,\n              platform: platformKey,\n              organization,\n            }\n          );\n        },\n      },\n    ],\n  };\n}\n","import {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {getUploadSourceMapsStep} from 'sentry/components/onboarding/gettingStartedDoc/utils';\nimport {ProductSolution} from 'sentry/components/onboarding/productSelection';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\n\ntype StepProps = {\n  newOrg: boolean;\n  organization: Organization;\n  platformKey: PlatformKey;\n  projectId: string;\n  sentryInitContent: string;\n};\n\n// Configuration Start\nconst replayIntegration = `\nnew Sentry.Replay(),\n`;\n\nconst replayOtherConfig = `\n// Session Replay\nreplaysSessionSampleRate: 0.1, // This sets the sample rate at 10%. You may want to change it to 100% while in development and then sample at a lower rate in production.\nreplaysOnErrorSampleRate: 1.0, // If you're not already sampling the entire session, change the sample rate to 100% when sampling sessions where errors occur.\n`;\n\nconst performanceOtherConfig = `\n// Performance Monitoring\ntracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!\n`;\n\nexport const steps = ({\n  sentryInitContent,\n  ...props\n}: Partial<StepProps> = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: t(\n      'Sentry captures data by using an SDK within your applicationâ€™s runtime.'\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        code: `\n# Using ember-cli\nember install @sentry/ember\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          'You should [initCode:init] the Sentry SDK as soon as possible during your application load up in [appCode:app.js], before initializing Ember:',\n          {\n            initCode: <code />,\n            appCode: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        import Application from \"@ember/application\";\n        import Resolver from \"ember-resolver\";\n        import loadInitializers from \"ember-load-initializers\";\n        import config from \"./config/environment\";\n\n        import * as Sentry from \"@sentry/ember\";\n\n        Sentry.init({\n          ${sentryInitContent}\n        });\n\n        export default class App extends Application {\n          modulePrefix = config.modulePrefix;\n          podModulePrefix = config.podModulePrefix;\n          Resolver = Resolver;\n        }\n        `,\n      },\n    ],\n  },\n  getUploadSourceMapsStep({\n    guideLink: 'https://docs.sentry.io/platforms/javascript/guides/ember/sourcemaps/',\n    ...props,\n  }),\n  {\n    type: StepType.VERIFY,\n    description: t(\n      \"This snippet contains an intentional error and can be used as a test to make sure that everything's working as expected.\"\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `myUndefinedFunction();`,\n      },\n    ],\n  },\n];\n\nexport const nextSteps = [\n  {\n    id: 'performance-monitoring',\n    name: t('Performance Monitoring'),\n    description: t(\n      'Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n    ),\n    link: 'https://docs.sentry.io/platforms/javascript/guides/ember/performance/',\n  },\n  {\n    id: 'session-replay',\n    name: t('Session Replay'),\n    description: t(\n      'Get to the root cause of an error or latency issue faster by seeing all the technical details related to that issue in one visual replay on your web application.'\n    ),\n    link: 'https://docs.sentry.io/platforms/javascript/guides/ember/session-replay/',\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithEmber({\n  dsn,\n  activeProductSelection = [],\n  organization,\n  newOrg,\n  platformKey,\n  projectId,\n}: ModuleProps) {\n  const integrations: string[] = [];\n  const otherConfigs: string[] = [];\n\n  let nextStepDocs = [...nextSteps];\n\n  if (activeProductSelection.includes(ProductSolution.PERFORMANCE_MONITORING)) {\n    otherConfigs.push(performanceOtherConfig.trim());\n    nextStepDocs = nextStepDocs.filter(\n      step => step.id !== ProductSolution.PERFORMANCE_MONITORING\n    );\n  }\n\n  if (activeProductSelection.includes(ProductSolution.SESSION_REPLAY)) {\n    integrations.push(replayIntegration.trim());\n    otherConfigs.push(replayOtherConfig.trim());\n    nextStepDocs = nextStepDocs.filter(\n      step => step.id !== ProductSolution.SESSION_REPLAY\n    );\n  }\n\n  let sentryInitContent: string[] = [`dsn: \"${dsn}\",`];\n\n  if (integrations.length > 0) {\n    sentryInitContent = sentryInitContent.concat('integrations: [', integrations, '],');\n  }\n\n  if (otherConfigs.length > 0) {\n    sentryInitContent = sentryInitContent.concat(otherConfigs);\n  }\n\n  return (\n    <Layout\n      steps={steps({\n        sentryInitContent: sentryInitContent.join('\\n'),\n        organization,\n        newOrg,\n        platformKey,\n        projectId,\n      })}\n      nextSteps={nextStepDocs}\n      newOrg={newOrg}\n      platformKey={platformKey}\n    />\n  );\n}\n\nexport default GettingStartedWithEmber;\n"],"names":["getUploadSourceMapsStep","_ref","guideLink","organization","platformKey","projectId","newOrg","title","t","description","_jsx","children","tct","ExternalLink","href","configurations","language","code","onCopy","trackAnalytics","project_id","platform","onSelectAndCopy","replayIntegration","replayOtherConfig","performanceOtherConfig","steps","sentryInitContent","props","arguments","length","undefined","type","StepType","INSTALL","CONFIGURE","initCode","appCode","VERIFY","nextSteps","id","name","link","GettingStartedWithEmber","dsn","activeProductSelection","integrations","otherConfigs","nextStepDocs","includes","ProductSolution","PERFORMANCE_MONITORING","push","trim","filter","step","SESSION_REPLAY","concat","Layout","join","displayName"],"sourceRoot":""}