{"version":3,"file":"chunks/app_components_modals_createNewIntegrationModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"45BAqBA,MAAMA,EAAgB,wBAEtB,SAASC,EAAyBC,GAMC,IANA,KACjCC,EAAI,OACJC,EAAM,OACNC,EAAM,WACNC,EAAU,aACVC,GAC+BL,EAC/B,MAAOM,EAAQC,IAAgBC,EAAAA,EAAAA,UAAS,YAClCC,EAAU,CACd,CACE,YACAC,EAAAA,EAAAA,IAACC,EAAiB,CAAC,eAAa,uBAAsBC,UACnDC,EAAAA,EAAAA,GAAE,yBADsD,oBAG3DH,EAAAA,EAAAA,IAACI,EAAsB,CAAAF,UACpBG,EAAAA,EAAAA,IACC,oHACA,CACEC,UACEN,EAAAA,EAAAA,IAACO,EAAAA,EAAY,CACXC,KAAMC,EAAAA,GAAqBC,EAAAA,GAAeC,eAC1CC,QAASA,MACPC,EAAAA,EAAAA,IAA0BH,EAAAA,GAAeC,cAAe,CACtDhB,eACAmB,KAAM1B,GACN,EACFc,UAEDC,EAAAA,EAAAA,GAAE,8BAde,yBAqB9B,CACE,UACAH,EAAAA,EAAAA,IAACC,EAAiB,CAAC,eAAa,qBAAoBC,UACjDC,EAAAA,EAAAA,GAAE,uBADoD,kBAGzDH,EAAAA,EAAAA,IAACI,EAAsB,CAAAF,UACpBG,EAAAA,EAAAA,IACC,6GACA,CACEC,UACEN,EAAAA,EAAAA,IAACO,EAAAA,EAAY,CACXC,KAAMC,EAAAA,GAAqBC,EAAAA,GAAeK,aAC1CH,QAASA,MACPC,EAAAA,EAAAA,IAA0BH,EAAAA,GAAeK,YAAa,CACpDpB,eACAmB,KAAM1B,GACN,EACFc,UAEDC,EAAAA,EAAAA,GAAE,4BAde,wBAqChC,OAdIR,EAAaqB,SAASC,SAAS,qBACjClB,EAAQmB,KAAK,CACX,aACAlB,EAAAA,EAAAA,IAACC,EAAiB,CAAC,eAAa,kBAAiBC,UAC9CC,EAAAA,EAAAA,GAAE,oBADiD,oBAGtDH,EAAAA,EAAAA,IAACI,EAAsB,CAAAF,UACpBC,EAAAA,EAAAA,GACC,4FAFwB,kCAS9BgB,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAlB,SAAA,EACPF,EAAAA,EAAAA,IAACR,EAAM,CAAAU,UACLiB,EAAAA,EAAAA,IAACE,EAAa,CAAAnB,SAAA,EACZF,EAAAA,EAAAA,IAAA,MAAAE,UAAKC,EAAAA,EAAAA,GAAE,8BACPH,EAAAA,EAAAA,IAACsB,EAAAA,EAAwB,CAAClC,cAAeA,UAG7CY,EAAAA,EAAAA,IAACT,EAAI,CAAAW,UACHF,EAAAA,EAAAA,IAACuB,EAAgB,CACfxB,QAASA,EACTyB,OAAOrB,EAAAA,EAAAA,GAAE,eACTsB,SAAUC,GAAS7B,EAAa6B,GAChCA,MAAO9B,OAGXuB,EAAAA,EAAAA,IAAC1B,EAAM,CAAAS,SAAA,EACLF,EAAAA,EAAAA,IAAC2B,EAAAA,GAAM,CAACC,KAAK,KAAKhB,QAASA,IAAMlB,IAAcmC,MAAO,CAACC,aAAaC,EAAAA,EAAAA,GAAM,IAAI7B,UAC3EC,EAAAA,EAAAA,GAAE,aAELH,EAAAA,EAAAA,IAAC2B,EAAAA,GAAM,CACLK,SAAS,UACTJ,KAAK,KACLK,GACa,cAAXrC,EACK,aAAYD,EAAauC,gDACzB,aAAYvC,EAAauC,2BACb,WAAXtC,EAAsB,aAAe,kBAG7CgB,QAASA,MACPC,EAAAA,EAAAA,IACa,cAAXjB,EACIc,EAAAA,GAAeyB,gBACJ,WAAXvC,EACAc,EAAAA,GAAe0B,aACf1B,EAAAA,GAAe2B,eACnB,CACE1C,eACAmB,KAAM1B,GAET,EACDc,UAEDC,EAAAA,EAAAA,GAAE,eAKb,CA9HSd,EAAyBiD,YAAA,4BAgIlC,MAAMf,GAAmBgB,EAAAA,EAAAA,GAAOC,EAAAA,EAAU,CAAAC,OAAA,YAAjBF,CAAkB,oFAGrBR,EAAAA,EAAAA,GAAM,GAAE,MAGxB9B,GAAoBsC,EAAAA,EAAAA,GAAO,KAAI,CAAAE,OAAA,YAAXF,CAAY,CAAAG,KAAA,SAAAC,OAAA,aAIhCvC,GAAyBmC,EAAAA,EAAAA,GAAO,MAAK,CAAAE,OAAA,YAAZF,CAAa,UACjCK,GAAKA,EAAEC,MAAMC,SAAO,eAChBF,GAAKA,EAAEC,MAAME,gBAAc,uBAIpC1B,GAAgBkB,EAAAA,EAAAA,GAAO,MAAK,CAAAE,OAAA,YAAZF,CAAa,CAAAG,KAAA,SAAAC,OAAA,6EAOnC,GAAeK,EAAAA,EAAAA,GAAiB3D,E,0bC1JhC,SAASiC,EAAwBhC,GAIC,IAJA,aAChCK,EAAY,cACZP,KACG6D,GAC2B3D,EAC9B,OACEU,EAAAA,EAAAA,IAAC2B,EAAAA,GAAM,CACLC,KAAK,KACLsB,UAAQ,EACR1C,KAAMC,EAAAA,GAAqBC,EAAAA,GAAeyC,gBAC1CvC,QAASA,MACPC,EAAAA,EAAAA,IAA0BH,EAAAA,GAAeyC,eAAgB,CACvDxD,eACAmB,KAAM1B,GACN,EAEJgE,MAAMpD,EAAAA,EAAAA,IAACqD,EAAAA,GAAU,OACbJ,EAAW/C,UAEdC,EAAAA,EAAAA,GAAE,qBAGT,CAtBSmB,EAAwBgB,YAAA,2BAuBjC,SAAeU,EAAAA,EAAAA,GAAiB1B,E","sources":["webpack:///./app/components/modals/createNewIntegrationModal.tsx","webpack:///./app/views/settings/organizationIntegrations/exampleIntegrationButton.tsx"],"sourcesContent":["import {Fragment, ReactNode, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {\n  platformEventLinkMap,\n  PlatformEvents,\n} from 'sentry/utils/analytics/integrations/platformAnalyticsEvents';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport ExampleIntegrationButton from 'sentry/views/settings/organizationIntegrations/exampleIntegrationButton';\n\nexport type CreateNewIntegrationModalOptions = {organization: Organization};\ntype CreateNewIntegrationModalProps = CreateNewIntegrationModalOptions & ModalRenderProps;\n\nconst analyticsView = 'new_integration_modal' as const;\n\nfunction CreateNewIntegrationModal({\n  Body,\n  Header,\n  Footer,\n  closeModal,\n  organization,\n}: CreateNewIntegrationModalProps) {\n  const [option, selectOption] = useState('internal');\n  const choices = [\n    [\n      'internal',\n      <RadioChoiceHeader data-test-id=\"internal-integration\" key=\"header-internal\">\n        {t('Internal Integration')}\n      </RadioChoiceHeader>,\n      <RadioChoiceDescription key=\"description-internal\">\n        {tct(\n          'Internal integrations are meant for custom integrations unique to your organization. See more info on [docsLink].',\n          {\n            docsLink: (\n              <ExternalLink\n                href={platformEventLinkMap[PlatformEvents.INTERNAL_DOCS]}\n                onClick={() => {\n                  trackIntegrationAnalytics(PlatformEvents.INTERNAL_DOCS, {\n                    organization,\n                    view: analyticsView,\n                  });\n                }}\n              >\n                {t('Internal Integrations')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </RadioChoiceDescription>,\n    ],\n    [\n      'public',\n      <RadioChoiceHeader data-test-id=\"public-integration\" key=\"header-public\">\n        {t('Public Integration')}\n      </RadioChoiceHeader>,\n      <RadioChoiceDescription key=\"description-public\">\n        {tct(\n          'A public integration will be available for all Sentry users for installation. See more info on [docsLink].',\n          {\n            docsLink: (\n              <ExternalLink\n                href={platformEventLinkMap[PlatformEvents.PUBLIC_DOCS]}\n                onClick={() => {\n                  trackIntegrationAnalytics(PlatformEvents.PUBLIC_DOCS, {\n                    organization,\n                    view: analyticsView,\n                  });\n                }}\n              >\n                {t('Public Integrations')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </RadioChoiceDescription>,\n    ],\n  ] as [string, ReactNode, ReactNode][];\n\n  if (organization.features.includes('sentry-functions')) {\n    choices.push([\n      'sentry-fx',\n      <RadioChoiceHeader data-test-id=\"sentry-function\" key=\"header-sentryfx\">\n        {t('Sentry Function')}\n      </RadioChoiceHeader>,\n      <RadioChoiceDescription key=\"description-sentry-function\">\n        {t(\n          'A Sentry Function is a new type of integration leveraging the power of cloud functions.'\n        )}\n      </RadioChoiceDescription>,\n    ]);\n  }\n\n  return (\n    <Fragment>\n      <Header>\n        <HeaderWrapper>\n          <h3>{t('Choose Integration Type')}</h3>\n          <ExampleIntegrationButton analyticsView={analyticsView} />\n        </HeaderWrapper>\n      </Header>\n      <Body>\n        <StyledRadioGroup\n          choices={choices}\n          label={t('Avatar Type')}\n          onChange={value => selectOption(value)}\n          value={option}\n        />\n      </Body>\n      <Footer>\n        <Button size=\"sm\" onClick={() => closeModal()} style={{marginRight: space(1)}}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          priority=\"primary\"\n          size=\"sm\"\n          to={\n            option === 'sentry-fx'\n              ? `/settings/${organization.slug}/developer-settings/sentry-functions/new/`\n              : `/settings/${organization.slug}/developer-settings/${\n                  option === 'public' ? 'new-public' : 'new-internal'\n                }/`\n          }\n          onClick={() => {\n            trackIntegrationAnalytics(\n              option === 'sentry-fx'\n                ? PlatformEvents.CHOSE_SENTRY_FX\n                : option === 'public'\n                ? PlatformEvents.CHOSE_PUBLIC\n                : PlatformEvents.CHOSE_INTERNAL,\n              {\n                organization,\n                view: analyticsView,\n              }\n            );\n          }}\n        >\n          {t('Next')}\n        </Button>\n      </Footer>\n    </Fragment>\n  );\n}\n\nconst StyledRadioGroup = styled(RadioGroup)`\n  grid-auto-columns: auto;\n  & > label:not(:last-child) > div:last-child > * {\n    padding-bottom: ${space(1)};\n  }\n`;\nconst RadioChoiceHeader = styled('h6')`\n  margin: 0;\n`;\n\nconst RadioChoiceDescription = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-size: ${p => p.theme.fontSizeMedium};\n  line-height: 1.6em;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nexport default withOrganization(CreateNewIntegrationModal);\n","import {Button, ButtonProps} from 'sentry/components/button';\nimport {IconGithub} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {IntegrationView} from 'sentry/utils/analytics/integrations';\nimport {\n  platformEventLinkMap,\n  PlatformEvents,\n} from 'sentry/utils/analytics/integrations/platformAnalyticsEvents';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype ExampleIntegrationButtonProps = {\n  analyticsView: IntegrationView['view'];\n  organization: Organization;\n} & ButtonProps;\n\n/**\n * Button to direct users to the Example App repository\n */\nfunction ExampleIntegrationButton({\n  organization,\n  analyticsView,\n  ...buttonProps\n}: ExampleIntegrationButtonProps) {\n  return (\n    <Button\n      size=\"sm\"\n      external\n      href={platformEventLinkMap[PlatformEvents.EXAMPLE_SOURCE]}\n      onClick={() => {\n        trackIntegrationAnalytics(PlatformEvents.EXAMPLE_SOURCE, {\n          organization,\n          view: analyticsView,\n        });\n      }}\n      icon={<IconGithub />}\n      {...buttonProps}\n    >\n      {t('View Example App')}\n    </Button>\n  );\n}\nexport default withOrganization(ExampleIntegrationButton);\n"],"names":["analyticsView","CreateNewIntegrationModal","_ref","Body","Header","Footer","closeModal","organization","option","selectOption","useState","choices","_jsx","RadioChoiceHeader","children","t","RadioChoiceDescription","tct","docsLink","ExternalLink","href","platformEventLinkMap","PlatformEvents","INTERNAL_DOCS","onClick","trackIntegrationAnalytics","view","PUBLIC_DOCS","features","includes","push","_jsxs","Fragment","HeaderWrapper","ExampleIntegrationButton","StyledRadioGroup","label","onChange","value","Button","size","style","marginRight","space","priority","to","slug","CHOSE_SENTRY_FX","CHOSE_PUBLIC","CHOSE_INTERNAL","displayName","_styled","RadioGroup","target","name","styles","p","theme","gray400","fontSizeMedium","withOrganization","buttonProps","external","EXAMPLE_SOURCE","icon","IconGithub"],"sourceRoot":""}