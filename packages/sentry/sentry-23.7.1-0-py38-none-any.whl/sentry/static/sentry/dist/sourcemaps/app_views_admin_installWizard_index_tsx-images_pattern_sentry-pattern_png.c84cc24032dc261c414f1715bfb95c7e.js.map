{"version":3,"file":"chunks/app_views_admin_installWizard_index_tsx-images_pattern_sentry-pattern_png.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/apiForm.tsx","webpack:///./app/views/admin/installWizard/index.tsx"],"sourcesContent":["import {useCallback} from 'react';\n\nimport {addLoadingMessage, clearIndicators} from 'sentry/actionCreators/indicator';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport {t} from 'sentry/locale';\nimport useApi from 'sentry/utils/useApi';\n\ntype Props = FormProps & {\n  apiEndpoint: string;\n  apiMethod: string;\n  onSubmit?: (data: Record<string, any>) => any | void;\n};\n\nfunction ApiForm({onSubmit, apiMethod, apiEndpoint, ...otherProps}: Props) {\n  const api = useApi();\n\n  const handleSubmit = useCallback(\n    (\n      data: Record<string, any>,\n      onSuccess: (response: Record<string, any>) => void,\n      onError: (error: any) => void\n    ) => {\n      const transformed = onSubmit?.(data);\n      addLoadingMessage(t('Saving changes\\u2026'));\n      api.request(apiEndpoint, {\n        method: apiMethod,\n        data: transformed ?? data,\n        success: response => {\n          clearIndicators();\n          onSuccess(response);\n        },\n        error: error => {\n          clearIndicators();\n          onError(error);\n        },\n      });\n    },\n    [api, onSubmit, apiMethod, apiEndpoint]\n  );\n\n  return <Form onSubmit={handleSubmit} {...otherProps} />;\n}\n\nexport default ApiForm;\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport sentryPattern from 'sentry-images/pattern/sentry-pattern.png';\n\nimport {Alert} from 'sentry/components/alert';\nimport ApiForm from 'sentry/components/forms/apiForm';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {space} from 'sentry/styles/space';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\n\nimport {getForm, getOptionDefault, getOptionField} from '../options';\n\ntype Props = DeprecatedAsyncView['props'] & {\n  onConfigured: () => void;\n};\n\ntype State = DeprecatedAsyncView['state'];\n\nexport default class InstallWizard extends DeprecatedAsyncView<Props, State> {\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    return [['data', '/internal/options/?query=is:required']];\n  }\n\n  renderFormFields() {\n    const options = this.state.data;\n\n    let missingOptions = new Set(\n      Object.keys(options).filter(option => !options[option].field.isSet)\n    );\n    // This is to handle the initial installation case.\n    // Even if all options are filled out, we want to prompt to confirm\n    // them. This is a bit of a hack because we're assuming that\n    // the backend only spit back all filled out options for\n    // this case.\n    if (missingOptions.size === 0) {\n      missingOptions = new Set(Object.keys(options));\n    }\n\n    // A mapping of option name to Field object\n    const fields = {};\n\n    for (const key of missingOptions) {\n      const option = options[key];\n      if (option.field.disabled) {\n        continue;\n      }\n      fields[key] = getOptionField(key, option.field);\n    }\n\n    return getForm(fields);\n  }\n\n  getInitialData() {\n    const options = this.state.data;\n    const data = {};\n    Object.keys(options).forEach(optionName => {\n      const option = options[optionName];\n      if (option.field.disabled) {\n        return;\n      }\n\n      // TODO(dcramer): we need to rethink this logic as doing multiple \"is this value actually set\"\n      // is problematic\n      // all values to their server-defaults (as client-side defaults don't really work)\n      const displayValue = option.value || getOptionDefault(optionName);\n      if (\n        // XXX(dcramer): we need the user to explicitly choose beacon.anonymous\n        // vs using an implied default so effectively this is binding\n        optionName !== 'beacon.anonymous' &&\n        // XXX(byk): if we don't have a set value but have a default value filled\n        // instead, from the client, set it on the data so it is sent to the server\n        !option.field.isSet &&\n        displayValue !== undefined\n      ) {\n        data[optionName] = displayValue;\n      }\n    });\n    return data;\n  }\n\n  getTitle() {\n    return t('Setup Sentry');\n  }\n\n  render() {\n    const version = ConfigStore.get('version');\n    return (\n      <SentryDocumentTitle noSuffix title={this.getTitle()}>\n        <Wrapper>\n          <Pattern />\n          <SetupWizard>\n            <Heading>\n              <span>{t('Welcome to Sentry')}</span>\n              <Version>{version.current}</Version>\n            </Heading>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError()\n              : this.renderBody()}\n          </SetupWizard>\n        </Wrapper>\n      </SentryDocumentTitle>\n    );\n  }\n\n  renderError() {\n    return (\n      <Alert type=\"error\" showIcon>\n        {t(\n          'We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.'\n        )}\n      </Alert>\n    );\n  }\n\n  renderBody() {\n    return (\n      <ApiForm\n        apiMethod=\"PUT\"\n        apiEndpoint={this.getEndpoints()[0][1]}\n        submitLabel={t('Continue')}\n        initialData={this.getInitialData()}\n        onSubmitSuccess={this.props.onConfigured}\n      >\n        <p>{t('Complete setup by filling out the required configuration.')}</p>\n\n        {this.renderFormFields()}\n      </ApiForm>\n    );\n  }\n}\n\nconst Wrapper = styled('div')`\n  display: flex;\n  justify-content: center;\n`;\n\nconst fixedStyle = css`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst Pattern = styled('div')`\n  z-index: -1;\n\n  &::before {\n    ${fixedStyle}\n    content: '';\n    background-image: linear-gradient(\n      to right,\n      ${p => p.theme.purple200} 0%,\n      ${p => p.theme.purple300} 100%\n    );\n    background-repeat: repeat-y;\n  }\n\n  &::after {\n    ${fixedStyle}\n    content: '';\n    background: url(${sentryPattern});\n    background-size: 400px;\n    opacity: 0.8;\n  }\n`;\n\nconst Heading = styled('h1')`\n  display: grid;\n  gap: ${space(1)};\n  justify-content: space-between;\n  grid-auto-flow: column;\n  line-height: 36px;\n`;\n\nconst Version = styled('small')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  line-height: inherit;\n`;\n\nconst SetupWizard = styled('div')`\n  background: ${p => p.theme.background};\n  border-radius: ${p => p.theme.borderRadius};\n  box-shadow: ${p => p.theme.dropShadowHeavy};\n  margin-top: 40px;\n  padding: 40px 40px 20px;\n  width: 600px;\n  z-index: ${p => p.theme.zIndex.initial};\n`;\n"],"names":["ApiForm","_ref","onSubmit","apiMethod","apiEndpoint","otherProps","api","useApi","handleSubmit","useCallback","data","onSuccess","onError","transformed","addLoadingMessage","t","request","method","success","response","clearIndicators","error","_jsx","Form","displayName","InstallWizard","DeprecatedAsyncView","getEndpoints","renderFormFields","options","this","state","missingOptions","Set","Object","keys","filter","option","field","isSet","size","fields","key","disabled","getOptionField","getForm","getInitialData","forEach","optionName","displayValue","value","getOptionDefault","undefined","getTitle","render","version","ConfigStore","get","SentryDocumentTitle","noSuffix","title","children","_jsxs","Wrapper","Pattern","SetupWizard","Heading","Version","current","loading","renderLoading","renderError","renderBody","Alert","type","showIcon","submitLabel","initialData","onSubmitSuccess","props","onConfigured","_styled","target","name","styles","fixedStyle","p","theme","purple200","purple300","sentryPattern","space","fontSizeExtraLarge","background","borderRadius","dropShadowHeavy","zIndex","initial"],"sourceRoot":""}