{"version":3,"file":"chunks/app_views_dashboards_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboards/index.tsx","webpack:///./app/views/dashboards/orgDashboards.tsx","webpack:///./app/views/dashboards/view.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'sentry/api';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Organization} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState} from './types';\nimport {DashboardBasicFeature} from './view';\n\ntype Props = RouteComponentProps<{}, {}> & {\n  api: Client;\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nfunction DashboardsV2Container(props: Props) {\n  const {organization, api, location, children} = props;\n\n  if (organization.features.includes('dashboards-edit')) {\n    return <Fragment>{children}</Fragment>;\n  }\n  const params = {...props.params, orgId: organization.slug};\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, onDashboardUpdate}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <ErrorBoundary>\n              <DashboardDetail\n                {...props}\n                initialState={DashboardState.VIEW}\n                dashboard={dashboard}\n                dashboards={dashboards}\n                onDashboardUpdate={onDashboardUpdate}\n              />\n            </ErrorBoundary>\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withApi(withOrganization(DashboardsV2Container));\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport NotFound from 'sentry/components/errors/notFound';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport withRouteAnalytics, {\n  WithRouteAnalyticsProps,\n} from 'sentry/utils/routeAnalytics/withRouteAnalytics';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nimport {assignTempId} from './layoutUtils';\nimport {DashboardDetails, DashboardListItem} from './types';\nimport {hasSavedPageFilters} from './utils';\n\ntype OrgDashboardsChildrenProps = {\n  dashboard: DashboardDetails | null;\n  dashboards: DashboardListItem[];\n  error: boolean;\n  onDashboardUpdate: (updatedDashboard: DashboardDetails) => void;\n};\n\ntype Props = WithRouteAnalyticsProps & {\n  api: Client;\n  children: (props: OrgDashboardsChildrenProps) => React.ReactNode;\n  location: Location;\n  organization: Organization;\n  params: {orgId: string; dashboardId?: string};\n};\n\ntype State = {\n  // endpoint response\n  dashboards: DashboardListItem[] | null;\n  /**\n   * The currently selected dashboard.\n   */\n  selectedDashboard: DashboardDetails | null;\n} & DeprecatedAsyncComponent['state'];\n\nclass OrgDashboards extends DeprecatedAsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n\n    dashboards: [],\n    selectedDashboard: null,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.params.dashboardId, this.props.params.dashboardId)) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const url = `/organizations/${organization.slug}/dashboards/`;\n    const endpoints: ReturnType<DeprecatedAsyncComponent['getEndpoints']> = [\n      ['dashboards', url],\n    ];\n\n    if (params.dashboardId) {\n      endpoints.push(['selectedDashboard', `${url}${params.dashboardId}/`]);\n      this.props.setEventNames('dashboards2.view', 'Dashboards2: View dashboard');\n      this.props.setRouteAnalyticsParams({\n        dashboard_id: params.dashboardId,\n      });\n    }\n\n    return endpoints;\n  }\n\n  onDashboardUpdate(updatedDashboard: DashboardDetails) {\n    this.setState({selectedDashboard: updatedDashboard});\n  }\n\n  getDashboards(): DashboardListItem[] {\n    const {dashboards} = this.state;\n\n    return Array.isArray(dashboards) ? dashboards : [];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    const {params, organization, location} = this.props;\n\n    if (params.dashboardId || stateKey === 'selectedDashboard') {\n      const queryParamFilters = new Set([\n        'project',\n        'environment',\n        'statsPeriod',\n        'start',\n        'end',\n        'utc',\n        'release',\n      ]);\n      if (\n        stateKey === 'selectedDashboard' &&\n        // Only redirect if there are saved filters and none of the filters\n        // appear in the query params\n        hasSavedPageFilters(data) &&\n        isEmpty(\n          Object.keys(location.query).filter(unsavedQueryParam =>\n            queryParamFilters.has(unsavedQueryParam)\n          )\n        )\n      ) {\n        browserHistory.replace({\n          ...location,\n          query: {\n            ...location.query,\n            project: data.projects,\n            environment: data.environment,\n            statsPeriod: data.period,\n            start: data.start,\n            end: data.end,\n            utc: data.utc,\n          },\n        });\n      }\n      return;\n    }\n\n    // If we don't have a selected dashboard, and one isn't going to arrive\n    // we can redirect to the first dashboard in the list.\n    const dashboardId = data.length ? data[0].id : 'default-overview';\n    browserHistory.replace(\n      normalizeUrl({\n        pathname: `/organizations/${organization.slug}/dashboard/${dashboardId}/`,\n        query: {\n          ...location.query,\n        },\n      })\n    );\n  }\n\n  renderLoading() {\n    return (\n      <Layout.Page withPadding>\n        <LoadingIndicator />\n      </Layout.Page>\n    );\n  }\n\n  renderBody() {\n    const {children} = this.props;\n    const {selectedDashboard, error} = this.state;\n    let dashboard = selectedDashboard;\n\n    // Ensure there are always tempIds for grid layout\n    // This is needed because there are cases where the dashboard\n    // renders before the onRequestSuccess setState is processed\n    // and will caused stacked widgets because of missing tempIds\n    dashboard = selectedDashboard\n      ? {\n          ...selectedDashboard,\n          widgets: selectedDashboard.widgets.map(assignTempId),\n        }\n      : null;\n\n    return children({\n      error,\n      dashboard,\n      dashboards: this.getDashboards(),\n      onDashboardUpdate: (updatedDashboard: DashboardDetails) =>\n        this.onDashboardUpdate(updatedDashboard),\n    });\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n\n    return super.renderError(error, true);\n  }\n\n  renderComponent() {\n    const {organization, location} = this.props;\n    const {loading, selectedDashboard} = this.state;\n\n    if (!organization.features.includes('dashboards-basic')) {\n      // Redirect to Dashboards v1\n      browserHistory.replace(\n        normalizeUrl({\n          pathname: `/organizations/${organization.slug}/dashboards/`,\n          query: {\n            ...location.query,\n          },\n        })\n      );\n      return null;\n    }\n\n    if (\n      loading &&\n      selectedDashboard &&\n      hasSavedPageFilters(selectedDashboard) &&\n      isEmpty(location.query)\n    ) {\n      // Block dashboard from rendering if the dashboard has filters and\n      // the URL does not contain filters yet. The filters can either match the\n      // saved filters, or can be different (i.e. sharing an unsaved state)\n      return this.renderLoading();\n    }\n\n    return (\n      <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n        {super.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withRouteAnalytics(OrgDashboards);\n","import {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport {updateDashboardVisit} from 'sentry/actionCreators/dashboards';\nimport Feature from 'sentry/components/acl/feature';\nimport {Alert} from 'sentry/components/alert';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport NotFound from 'sentry/components/errors/notFound';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState, Widget} from './types';\nimport {constructWidgetFromQuery} from './utils';\n\nconst ALLOWED_PARAMS = [\n  'start',\n  'end',\n  'utc',\n  'period',\n  'project',\n  'environment',\n  'statsPeriod',\n];\n\ntype Props = RouteComponentProps<\n  {dashboardId: string; orgId: string; widgetId?: number},\n  {}\n> & {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nfunction ViewEditDashboard(props: Props) {\n  const api = useApi();\n\n  const {organization, params, location} = props;\n  const dashboardId = params.dashboardId;\n  const orgSlug = organization.slug;\n  const [newWidget, setNewWidget] = useState<Widget | undefined>();\n  const [dashboardInitialState, setDashboardInitialState] = useState(DashboardState.VIEW);\n\n  useEffect(() => {\n    if (dashboardId && dashboardId !== 'default-overview') {\n      updateDashboardVisit(api, orgSlug, dashboardId);\n    }\n  }, [api, orgSlug, dashboardId]);\n\n  useEffect(() => {\n    const constructedWidget = constructWidgetFromQuery(location.query);\n    setNewWidget(constructedWidget);\n    // Clean up url after constructing widget from query string, only allow GHS params\n    if (constructedWidget) {\n      setDashboardInitialState(DashboardState.EDIT);\n      browserHistory.replace({\n        pathname: location.pathname,\n        query: pick(location.query, ALLOWED_PARAMS),\n      });\n    }\n  }, [location.pathname, location.query]);\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, onDashboardUpdate}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <ErrorBoundary>\n              <DashboardDetail\n                {...props}\n                initialState={dashboardInitialState}\n                dashboard={dashboard}\n                dashboards={dashboards}\n                onDashboardUpdate={onDashboardUpdate}\n                newWidget={newWidget}\n                onSetNewWidget={() => setNewWidget(undefined)}\n              />\n            </ErrorBoundary>\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withOrganization(ViewEditDashboard);\n\ntype FeatureProps = {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nexport function DashboardBasicFeature({organization, children}: FeatureProps) {\n  const renderDisabled = () => (\n    <Layout.Page withPadding>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </Layout.Page>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-page\"\n      features={['organizations:dashboards-basic']}\n      organization={organization}\n      renderDisabled={renderDisabled}\n    >\n      {children}\n    </Feature>\n  );\n}\n"],"names":["DashboardsV2Container","props","organization","api","location","children","features","includes","_jsx","Fragment","params","orgId","slug","DashboardBasicFeature","OrgDashboards","_ref","dashboard","dashboards","error","onDashboardUpdate","NotFound","ErrorBoundary","DashboardDetail","initialState","DashboardState","VIEW","LoadingIndicator","displayName","withApi","withOrganization","DeprecatedAsyncComponent","constructor","arguments","_defineProperty","loading","reloading","errors","selectedDashboard","componentDidUpdate","prevProps","isEqual","dashboardId","this","remountComponent","getEndpoints","url","endpoints","push","setEventNames","setRouteAnalyticsParams","dashboard_id","updatedDashboard","setState","getDashboards","state","Array","isArray","onRequestSuccess","stateKey","data","queryParamFilters","Set","hasSavedPageFilters","isEmpty","Object","keys","query","filter","unsavedQueryParam","has","browserHistory","replace","project","projects","environment","statsPeriod","period","start","end","utc","length","id","normalizeUrl","pathname","renderLoading","Layout","withPadding","renderBody","widgets","map","assignTempId","renderError","values","find","resp","status","super","renderComponent","SentryDocumentTitle","title","t","orgSlug","withRouteAnalytics","ALLOWED_PARAMS","ViewEditDashboard","useApi","newWidget","setNewWidget","useState","dashboardInitialState","setDashboardInitialState","useEffect","updateDashboardVisit","constructedWidget","constructWidgetFromQuery","EDIT","pick","onSetNewWidget","undefined","_ref2","Feature","hookName","renderDisabled","Alert","type"],"sourceRoot":""}