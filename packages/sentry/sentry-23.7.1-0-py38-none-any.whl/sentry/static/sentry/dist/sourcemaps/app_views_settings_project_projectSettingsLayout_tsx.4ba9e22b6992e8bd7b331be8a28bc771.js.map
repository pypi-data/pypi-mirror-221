{"version":3,"file":"chunks/app_views_settings_project_projectSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/projects/appStoreConnectContext.tsx","webpack:///./app/utils/appStoreValidationErrorMessage.tsx","webpack:///./app/views/projects/projectContext.tsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.tsx"],"sourcesContent":["import {createContext, useEffect, useMemo, useState} from 'react';\n\nimport {Organization, Project} from 'sentry/types';\nimport {\n  AppStoreConnectCredentialsStatus,\n  AppStoreConnectStatusData,\n} from 'sentry/types/debugFiles';\nimport {getAppStoreValidationErrorMessage} from 'sentry/utils/appStoreValidationErrorMessage';\nimport useApi from 'sentry/utils/useApi';\n\nexport type AppStoreConnectContextProps =\n  | Record<string, AppStoreConnectStatusData>\n  | undefined;\n\nconst AppStoreConnectContext = createContext<AppStoreConnectContextProps>(undefined);\n\ntype ProviderProps = {\n  children: React.ReactNode;\n  organization: Organization;\n  project?: Project;\n};\n\nfunction Provider({children, project, organization}: ProviderProps) {\n  const api = useApi();\n\n  const [projectDetails, setProjectDetails] = useState<undefined | Project>();\n  const [appStoreConnectStatusData, setAppStoreConnectStatusData] =\n    useState<AppStoreConnectContextProps>(undefined);\n\n  const appStoreConnectSymbolSources = useMemo(() => {\n    return (\n      projectDetails?.symbolSources ? JSON.parse(projectDetails.symbolSources) : []\n    ).reduce((acc, {type, id, ...symbolSource}) => {\n      if (type.toLowerCase() === 'appstoreconnect') {\n        acc[id] = {type, ...symbolSource};\n      }\n      return acc;\n    }, {});\n  }, [projectDetails?.symbolSources]);\n\n  useEffect(() => {\n    if (!project || projectDetails) {\n      return undefined;\n    }\n\n    if (project.symbolSources) {\n      setProjectDetails(project);\n      return undefined;\n    }\n\n    let unmounted = false;\n\n    api\n      .requestPromise(`/projects/${organization.slug}/${project.slug}/`)\n      .then(responseProjectDetails => {\n        if (unmounted) {\n          return;\n        }\n\n        setProjectDetails(responseProjectDetails);\n      })\n      .catch(() => {\n        // We do not care about the error\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [project, organization, api]);\n\n  useEffect(() => {\n    if (!projectDetails) {\n      return undefined;\n    }\n\n    if (!Object.keys(appStoreConnectSymbolSources).length) {\n      return undefined;\n    }\n\n    let unmounted = false;\n\n    api\n      .requestPromise(\n        `/projects/${organization.slug}/${projectDetails.slug}/appstoreconnect/status/`\n      )\n      .then(appStoreConnectStatus => {\n        if (unmounted) {\n          return;\n        }\n        setAppStoreConnectStatusData(appStoreConnectStatus);\n      })\n      .catch(() => {\n        // We do not care about the error\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [projectDetails, organization, appStoreConnectSymbolSources, api]);\n\n  function getUpdateAlertMessage(\n    respository: NonNullable<Parameters<typeof getAppStoreValidationErrorMessage>[1]>,\n    credentials: AppStoreConnectCredentialsStatus\n  ) {\n    if (credentials?.status === 'valid') {\n      return undefined;\n    }\n\n    return getAppStoreValidationErrorMessage(credentials, respository);\n  }\n\n  return (\n    <AppStoreConnectContext.Provider\n      value={\n        appStoreConnectStatusData && project\n          ? Object.keys(appStoreConnectStatusData).reduce((acc, key) => {\n              const appStoreConnect = appStoreConnectStatusData[key];\n              return {\n                ...acc,\n                [key]: {\n                  ...appStoreConnect,\n                  updateAlertMessage: getUpdateAlertMessage(\n                    {\n                      name: appStoreConnectSymbolSources[key].name,\n                      link: `/settings/${organization.slug}/projects/${project.slug}/debug-symbols/?customRepository=${key}`,\n                    },\n                    appStoreConnect.credentials\n                  ),\n                },\n              };\n            }, {})\n          : undefined\n      }\n    >\n      {children}\n    </AppStoreConnectContext.Provider>\n  );\n}\n\nexport {Provider};\n\nexport default AppStoreConnectContext;\n","import * as Sentry from '@sentry/react';\n\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {AppStoreConnectValidationError} from 'sentry/types/debugFiles';\n\nexport const unexpectedErrorMessage = t(\n  'An unexpected error occurred while configuring the App Store Connect integration'\n);\n\nexport function getAppStoreValidationErrorMessage(\n  error: AppStoreConnectValidationError,\n  repo?: {link: string; name: string}\n) {\n  switch (error.code) {\n    case 'app-connect-authentication-error':\n      return repo\n        ? tct(\n            'App Store Connect credentials are invalid or missing. [linkToCustomRepository]',\n            {\n              linkToCustomRepository: (\n                <Link to={repo.link}>\n                  {tct(\n                    \"Make sure the credentials of the '[customRepositoryName]' repository are correct and exist.\",\n                    {\n                      customRepositoryName: repo.name,\n                    }\n                  )}\n                </Link>\n              ),\n            }\n          )\n        : t('The supplied App Store Connect credentials are invalid or missing.');\n    case 'app-connect-forbidden-error':\n      return t('The supplied API key does not have sufficient permissions.');\n    case 'app-connect-multiple-sources-error':\n      return t('Only one App Store Connect application is allowed in this project.');\n    default: {\n      // this shall not happen\n      Sentry.captureException(new Error('Unknown app store connect error.'));\n      return unexpectedErrorMessage;\n    }\n  }\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport {setActiveProject} from 'sentry/actionCreators/projects';\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport MissingProjectMembership from 'sentry/components/projects/missingProjectMembership';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport SentryTypes from 'sentry/sentryTypes';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project, User} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nenum ErrorTypes {\n  MISSING_MEMBERSHIP = 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype ChildFuncProps = {\n  project: Project;\n};\n\ntype Props = {\n  api: Client;\n  children: ((props: ChildFuncProps) => React.ReactNode) | React.ReactNode;\n  loadingProjects: boolean;\n  orgId: string;\n  organization: Organization;\n  projectId: string;\n  projects: Project[];\n  /**\n   * If true, this will not change `state.loading` during `fetchData` phase\n   */\n  skipReload?: boolean;\n};\n\ntype State = {\n  error: boolean;\n  errorType: ErrorTypes | null;\n  loading: boolean;\n  memberList: User[];\n  project: Project | null;\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nclass ProjectContext extends Component<Props, State> {\n  static childContextTypes = {\n    project: SentryTypes.Project,\n  };\n\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n    };\n  }\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  }\n\n  componentDidMount() {\n    // Wait for withProjects to fetch projects before making request\n    // Once loaded we can fetchData in componentDidUpdate\n    const {loadingProjects} = this.props;\n    if (!loadingProjects) {\n      this.fetchData();\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, _prevState: State) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeMembers();\n    this.unsubscribeProjects();\n  }\n\n  unsubscribeProjects = ProjectsStore.listen(\n    (projectIds: Set<string>) => this.onProjectChange(projectIds),\n    undefined\n  );\n\n  unsubscribeMembers = MemberListStore.listen(\n    ({members}: typeof MemberListStore.state) => this.setState({memberList: members}),\n    undefined\n  );\n\n  remountComponent() {\n    this.setState(this.getInitialState());\n  }\n\n  getTitle() {\n    return this.state.project?.slug ?? 'Sentry';\n  }\n\n  onProjectChange(projectIds: Set<string>) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)} as Project,\n    });\n  }\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  }\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState((state: State) => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ErrorTypes.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, [activeProject.id]);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.PROJECT_NOT_FOUND,\n      });\n    }\n  }\n\n  renderBody() {\n    const {children, organization} = this.props;\n    const {error, errorType, loading, project} = this.state;\n\n    if (loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    }\n\n    if (!error && project) {\n      return typeof children === 'function' ? children({project}) : children;\n    }\n\n    switch (errorType) {\n      case ErrorTypes.PROJECT_NOT_FOUND:\n        // TODO(chrissy): use scale for margin values\n        return (\n          <Layout.Page withPadding>\n            <Alert type=\"warning\">\n              {t('The project you were looking for was not found.')}\n            </Alert>\n          </Layout.Page>\n        );\n      case ErrorTypes.MISSING_MEMBERSHIP:\n        // TODO(dcramer): add various controls to improve this flow and break it\n        // out into a reusable missing access error component\n        return (\n          <ErrorWrapper>\n            <MissingProjectMembership organization={organization} project={project} />\n          </ErrorWrapper>\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle noSuffix title={this.getTitle()}>\n        {this.renderBody()}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(ProjectContext)));\n\nconst ErrorWrapper = styled('div')`\n  width: 100%;\n  margin: ${space(2)} ${space(4)};\n`;\n","import {useContext} from 'react';\n\nimport AppStoreConnectContext from 'sentry/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'sentry/types';\nimport withProject from 'sentry/utils/withProject';\nimport SettingsNavigation from 'sentry/views/settings/components/settingsNavigation';\nimport getConfiguration from 'sentry/views/settings/project/navigationConfiguration';\n\ntype Props = {\n  organization: Organization;\n  project?: Project;\n};\n\nfunction ProjectSettingsNavigation({organization, project}: Props) {\n  const appStoreConnectContext = useContext(AppStoreConnectContext);\n\n  const debugFilesNeedsReview = appStoreConnectContext\n    ? Object.keys(appStoreConnectContext).some(\n        key => appStoreConnectContext[key].credentials.status === 'invalid'\n      )\n    : false;\n\n  return (\n    <SettingsNavigation\n      navigationObjects={getConfiguration({project, organization, debugFilesNeedsReview})}\n      access={new Set(organization.access)}\n      features={new Set(organization.features)}\n      organization={organization}\n      project={project}\n    />\n  );\n}\n\nexport default withProject(ProjectSettingsNavigation);\n","import {cloneElement, isValidElement} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport * as AppStoreConnectContext from 'sentry/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'sentry/types';\nimport useRouteAnalyticsParams from 'sentry/utils/routeAnalytics/useRouteAnalyticsParams';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport ProjectContext from 'sentry/views/projects/projectContext';\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\nimport ProjectSettingsNavigation from 'sentry/views/settings/project/projectSettingsNavigation';\n\ntype Props = {\n  children: React.ReactNode;\n  organization: Organization;\n} & RouteComponentProps<{projectId: string}, {}>;\n\ntype InnerProps = Props & {project: Project};\n\nfunction InnerProjectSettingsLayout({\n  params,\n  routes,\n  project,\n  organization,\n  children,\n  ...props\n}: InnerProps) {\n  // set analytics params for route based analytics\n  useRouteAnalyticsParams({\n    project_id: project.id,\n    project_platform: project.platform,\n  });\n  return (\n    <AppStoreConnectContext.Provider project={project} organization={organization}>\n      <SettingsLayout\n        params={params}\n        routes={routes}\n        {...props}\n        renderNavigation={() => <ProjectSettingsNavigation organization={organization} />}\n      >\n        {children && isValidElement(children)\n          ? cloneElement<any>(children, {organization, project})\n          : children}\n      </SettingsLayout>\n    </AppStoreConnectContext.Provider>\n  );\n}\n\nfunction ProjectSettingsLayout({organization, params, ...props}: Props) {\n  return (\n    <ProjectContext orgId={organization.slug} projectId={params.projectId}>\n      {({project}) => (\n        <InnerProjectSettingsLayout {...{params, project, organization, ...props}} />\n      )}\n    </ProjectContext>\n  );\n}\n\nexport default withOrganization(ProjectSettingsLayout);\n"],"names":["AppStoreConnectContext","createContext","undefined","Provider","_ref","children","project","organization","api","useApi","projectDetails","setProjectDetails","useState","appStoreConnectStatusData","setAppStoreConnectStatusData","appStoreConnectSymbolSources","useMemo","symbolSources","JSON","parse","reduce","acc","_ref2","type","id","symbolSource","toLowerCase","getUpdateAlertMessage","respository","credentials","status","getAppStoreValidationErrorMessage","useEffect","unmounted","requestPromise","slug","then","responseProjectDetails","catch","Object","keys","length","appStoreConnectStatus","_jsx","value","key","appStoreConnect","updateAlertMessage","name","link","displayName","unexpectedErrorMessage","t","error","repo","code","tct","linkToCustomRepository","Link","to","customRepositoryName","Sentry","Error","ErrorTypes","ProjectContext","Component","constructor","arguments","_defineProperty","this","getInitialState","ProjectsStore","listen","projectIds","onProjectChange","MemberListStore","members","setState","memberList","loading","errorType","getChildContext","state","componentDidMount","loadingProjects","props","fetchData","UNSAFE_componentWillReceiveProps","nextProps","projectId","skipReload","remountComponent","componentDidUpdate","prevProps","_prevState","projects","componentWillUnmount","unsubscribeMembers","unsubscribeProjects","getTitle","has","getById","identifyProject","projectSlug","find","async","orgId","activeProject","hasAccess","setActiveProject","projectRequest","UNKNOWN","fetchOrgMembers","isMember","PROJECT_NOT_FOUND","MISSING_MEMBERSHIP","renderBody","className","LoadingIndicator","Layout","withPadding","Alert","ErrorWrapper","MissingProjectMembership","LoadingError","onRetry","render","SentryDocumentTitle","noSuffix","title","SentryTypes","Project","withApi","withOrganization","withProjects","_styled","target","space","ProjectSettingsNavigation","appStoreConnectContext","useContext","debugFilesNeedsReview","some","SettingsNavigation","navigationObjects","getConfiguration","access","Set","features","withProject","InnerProjectSettingsLayout","params","routes","useRouteAnalyticsParams","project_id","project_platform","platform","SettingsLayout","renderNavigation","isValidElement","cloneElement","ProjectSettingsLayout","_ref3"],"sourceRoot":""}