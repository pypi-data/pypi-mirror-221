{"version":3,"file":"chunks/app_components_modals_createTeamModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/components/teams/createTeamForm.tsx","webpack:///./app/components/modals/createTeamModal.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/useApi.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {tct} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {Team} from 'sentry/types';\n\ntype CallbackOptions = {\n  error?: Function;\n  success?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => params[name]?.(...args);\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch user teams for current org and place them in the team store\nexport async function fetchUserTeams(api: Client, params: OrgSlug) {\n  const teams = await api.requestPromise(`/organizations/${params.orgId}/user-teams/`);\n  TeamStore.loadUserTeams(teams);\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamStore.onUpdateSuccess(teamId, data);\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamStore.onCreateSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamStore.onRemoveSuccess(params.teamId);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {Fragment} from 'react';\n\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form from 'sentry/components/forms/form';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport slugify from 'sentry/utils/slugify';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  formProps?: Partial<typeof Form>;\n  onSubmit?: (data: Payload, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n};\n\nfunction CreateTeamForm({organization, formProps, ...props}: Props) {\n  return (\n    <Fragment>\n      <p>\n        {t(\n          'Members of a team have access to specific areas, such as a new release or a new application feature.'\n        )}\n      </p>\n\n      <Form\n        submitLabel={t('Create Team')}\n        apiEndpoint={`/organizations/${organization.slug}/teams/`}\n        apiMethod=\"POST\"\n        onSubmit={(data, onSuccess, onError) =>\n          props.onSubmit?.(data as Payload, onSuccess, onError)\n        }\n        onSubmitSuccess={data => props.onSuccess?.(data)}\n        requireChanges\n        data-test-id=\"create-team-form\"\n        {...formProps}\n      >\n        <TextField\n          name=\"slug\"\n          label={t('Team Name')}\n          placeholder={t('e.g. operations, web-frontend, desktop')}\n          help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n          required\n          stacked\n          flexibleControlStateSize\n          inline={false}\n          transformInput={slugify}\n        />\n      </Form>\n    </Fragment>\n  );\n}\n\nexport default CreateTeamForm;\n","import {Fragment} from 'react';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {createTeam} from 'sentry/actionCreators/teams';\nimport CreateTeamForm from 'sentry/components/teams/createTeamForm';\nimport {t} from 'sentry/locale';\nimport {Organization, Team} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\n\ninterface Props extends ModalRenderProps {\n  organization: Organization;\n  onClose?: (team: Team) => void;\n}\n\nfunction CreateTeamModal({Body, Header, ...props}: Props) {\n  const {onClose, closeModal, organization} = props;\n  const api = useApi();\n\n  async function handleSubmit(\n    data: {slug: string},\n    onSuccess: Function,\n    onError: Function\n  ) {\n    try {\n      const team: Team = await createTeam(api, data, {orgId: organization.slug});\n\n      closeModal();\n      onClose?.(team);\n      onSuccess(team);\n    } catch (err) {\n      onError(err);\n    }\n  }\n\n  return (\n    <Fragment>\n      <Header closeButton>{t('Create Team')}</Header>\n      <Body>\n        <CreateTeamForm {...props} onSubmit={handleSubmit} />\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default CreateTeamModal;\n","/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import {useCallback, useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  // Clear API calls on unmount (if persistInFlight is disabled\n  const clearOnUnmount = useCallback(() => {\n    if (!persistInFlight) {\n      api.clear();\n    }\n  }, [api, persistInFlight]);\n\n  useEffect(() => clearOnUnmount, [clearOnUnmount]);\n\n  return api;\n}\n\nexport default useApi;\n"],"names":["doCallback","params","arguments","length","undefined","name","_len","args","Array","_key","async","fetchUserTeams","api","teams","requestPromise","orgId","TeamStore","loadUserTeams","updateTeamSuccess","teamId","data","onUpdateSuccess","joinTeam","options","endpoint","memberId","request","method","success","error","leaveTeam","createTeam","team","then","onCreateSuccess","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","onRemoveSuccess","CreateTeamForm","_ref","formProps","props","_jsxs","Fragment","children","_jsx","t","Form","submitLabel","apiEndpoint","apiMethod","onSubmit","onSuccess","onError","onSubmitSuccess","requireChanges","TextField","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput","slugify","displayName","CreateTeamModal","Body","Header","onClose","closeModal","useApi","closeButton","str","normalize","toLowerCase","replace","persistInFlight","providedApi","localApi","useRef","current","Client","clearOnUnmount","useCallback","clear","useEffect"],"sourceRoot":""}