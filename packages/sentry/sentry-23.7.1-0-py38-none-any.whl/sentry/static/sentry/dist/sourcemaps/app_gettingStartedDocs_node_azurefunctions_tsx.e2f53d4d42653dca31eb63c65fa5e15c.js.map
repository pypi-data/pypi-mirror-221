{"version":3,"file":"chunks/app_gettingStartedDocs_node_azurefunctions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"qgBAeO,MAAMA,EAAQ,eAAC,kBACpBC,GACmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CACnD,CACEG,KAAMC,EAAAA,GAASC,QACfC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UAAIC,EAAAA,EAAAA,IAAI,2CAA4C,CAACC,MAAMH,EAAAA,EAAAA,IAAA,eAE7DI,eAAgB,CACd,CACEC,SAAU,OACVF,KAAO,qGAUb,CACEP,KAAMC,EAAAA,GAASS,UACfP,aAAaQ,EAAAA,EAAAA,GAAE,yDACfH,eAAgB,CACd,CACEC,SAAU,aACVF,KAAO,0FAMXX,uSAkBE,CACEa,SAAU,aACVN,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,wJACA,CAACM,sBAAsBR,EAAAA,EAAAA,IAAA,WAAUS,WAAWT,EAAAA,EAAAA,IAAA,kBAOzD,EAEM,SAASU,EAAgCC,GAMhC,IANiC,IAC/CC,EAAG,aACHC,EAAY,OACZC,EAAM,YACNC,EAAW,UACXC,GACYL,EACZ,MAAMnB,EAA8B,CAAE,SAAQoB,MAE9C,OACEZ,EAAAA,EAAAA,IAACiB,EAAAA,EAAM,CACL1B,MAAOA,EAAM,CACXC,kBAAmBA,EAAkB0B,KAAK,MAC1CL,eACAC,SACAC,cACAC,cAEFF,OAAQA,EACRC,YAAaA,GAGnB,CAtBgBL,EAAgCS,YAAA,mCAwBhD,S","sources":["webpack:///./app/gettingStartedDocs/node/azurefunctions.tsx"],"sourcesContent":["import {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization} from 'sentry/types';\n\ntype StepProps = {\n  newOrg: boolean;\n  organization: Organization;\n  platformKey: PlatformKey;\n  projectId: string;\n  sentryInitContent: string;\n};\n\nexport const steps = ({\n  sentryInitContent,\n}: Partial<StepProps> = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>{tct('Add [code:@sentry/node] as a dependency:', {code: <code />})}</p>\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        code: `\n# Using yarn\nyarn add @sentry/node\n\n# Using npm\nnpm install --save @sentry/node\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: t('To set up Sentry error logging for an Azure Function:'),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\n        \"use strict\";\n\nconst Sentry = require(\"@sentry/node\");\n\nSentry.init({\n  ${sentryInitContent},\n});\n\nmodule.exports = async function (context, req) {\n  try {\n    await notExistFunction();\n  } catch (e) {\n    Sentry.captureException(e);\n    await Sentry.flush(2000);\n  }\n\n  context.res = {\n    status: 200,\n    body: \"Hello from Azure Cloud Function!\",\n  };\n};\n        `,\n      },\n      {\n        language: 'javascript',\n        description: (\n          <p>\n            {tct(\n              'Note: You need to call both [captureExceptionCode:captureException] and [flushCode:flush] for captured events to be successfully delivered to Sentry.',\n              {captureExceptionCode: <code />, flushCode: <code />}\n            )}\n          </p>\n        ),\n      },\n    ],\n  },\n];\n\nexport function GettingStartedWithAzurefunctions({\n  dsn,\n  organization,\n  newOrg,\n  platformKey,\n  projectId,\n}: ModuleProps) {\n  const sentryInitContent: string[] = [`dsn: \"${dsn}\"`];\n\n  return (\n    <Layout\n      steps={steps({\n        sentryInitContent: sentryInitContent.join('\\n'),\n        organization,\n        newOrg,\n        platformKey,\n        projectId,\n      })}\n      newOrg={newOrg}\n      platformKey={platformKey}\n    />\n  );\n}\n\nexport default GettingStartedWithAzurefunctions;\n"],"names":["steps","sentryInitContent","arguments","length","undefined","type","StepType","INSTALL","description","_jsx","children","tct","code","configurations","language","CONFIGURE","t","captureExceptionCode","flushCode","GettingStartedWithAzurefunctions","_ref","dsn","organization","newOrg","platformKey","projectId","Layout","join","displayName"],"sourceRoot":""}