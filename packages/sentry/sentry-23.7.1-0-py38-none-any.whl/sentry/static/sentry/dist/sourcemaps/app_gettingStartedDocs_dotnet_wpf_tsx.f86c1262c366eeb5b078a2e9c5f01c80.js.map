{"version":3,"file":"chunks/app_gettingStartedDocs_dotnet_wpf_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"owBAaO,MAAMA,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IAAI,sCAAuC,CAC1CC,QAAQH,EAAAA,EAAAA,IAAA,iBAIdI,eAAgB,CACd,CACEC,SAAU,QACVC,KAAO,iJASXC,gBACEP,EAAAA,EAAAA,IAACQ,EAAwB,CAACZ,KAAK,OAAMK,UAClCC,EAAAA,EAAAA,IACC,wGACA,CAACC,QAAQH,EAAAA,EAAAA,IAAA,kBAKjB,CACEJ,KAAMC,EAAAA,GAASY,UACfV,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,sFACA,CACEI,MAAMN,EAAAA,EAAAA,IAAA,eAKdI,eAAgB,CACd,CACEC,SAAU,SACVC,KAAO,2VAaQd,ymBAoBrB,CACEI,KAAMC,EAAAA,GAASa,OACfX,aAAaY,EAAAA,EAAAA,GAAE,kEACfP,eAAgB,CACd,CACEC,SAAU,SACVC,KAAM,+CAIZ,CACEM,OAAOD,EAAAA,EAAAA,GAAE,0BACTZ,aAAaY,EAAAA,EAAAA,GACX,qFAEFP,eAAgB,CACd,CACEC,SAAU,SACVC,KAAO,ujBAmBXC,gBACEP,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,iGACA,CACEW,MACEb,EAAAA,EAAAA,IAACc,EAAAA,EAAY,CAACC,KAAK,8EAO/B,CACEH,OAAOD,EAAAA,EAAAA,GAAE,iBACTZ,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,kIACA,CACEW,MACEb,EAAAA,EAAAA,IAACc,EAAAA,EAAY,CAACC,KAAK,6DAO/B,CACEH,OAAOD,EAAAA,EAAAA,GAAE,WACTZ,aACEiB,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAhB,SAAA,EACNU,EAAAA,EAAAA,GACC,iGAEFK,EAAAA,EAAAA,IAACE,EAAAA,EAAI,CAACC,OAAO,SAAQlB,SAAA,EACnBD,EAAAA,EAAAA,IAACoB,EAAAA,EAAQ,CAAAnB,UACNC,EAAAA,EAAAA,IACC,4EACA,CACEW,MACEb,EAAAA,EAAAA,IAACc,EAAAA,EAAY,CAACC,KAAK,iEAErBT,MAAMN,EAAAA,EAAAA,IAAA,WACNG,QAAQH,EAAAA,EAAAA,IAAA,kBAIdA,EAAAA,EAAAA,IAACoB,EAAAA,EAAQ,CAAAnB,UACNC,EAAAA,EAAAA,IAAI,uCAAwC,CAC3CW,MAAMb,EAAAA,EAAAA,IAACc,EAAAA,EAAY,CAACC,KAAK,2CACzBZ,QAAQH,EAAAA,EAAAA,IAAA,wBAOrB,EAGM,SAASqB,EAAqBC,GAA+B,IAA9B,IAAC9B,KAAQ+B,GAAmBD,EAChE,OAAOtB,EAAAA,EAAAA,IAACwB,EAAAA,EAAM,CAACjC,MAAOA,EAAM,CAACC,WAAW+B,GAC1C,CAFgBF,EAAqBI,YAAA,wBAIrC,UAEMjB,GAA2BkB,EAAAA,EAAAA,GAAOC,EAAAA,GAAK,CAAAC,OAAA,YAAZF,CAAa,CAAAG,KAAA,UAAAC,OAAA,mB","sources":["webpack:///./app/gettingStartedDocs/dotnet/wpf.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct('Install the [strong:NuGet] package:', {\n          strong: <strong />,\n        })}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'shell',\n        code: `\n# Using Package Manager\nInstall-Package Sentry -Version 3.34.0\n\n# Or using .NET Core CLI\ndotnet add package Sentry -v 3.34.0\n        `,\n      },\n    ],\n    additionalInfo: (\n      <AlertWithoutMarginBottom type=\"info\">\n        {tct(\n          '[strong:Using .NET Framework prior to 4.6.1?] Our legacy SDK supports .NET Framework as early as 3.5.',\n          {strong: <strong />}\n        )}\n      </AlertWithoutMarginBottom>\n    ),\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          'Initialize the SDK as early as possible, like in the constructor of the [code:App]:',\n          {\n            code: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'csharp',\n        code: `\nusing System.Windows.Threading;\nusing System.Windows;\nusing Sentry;\n\npublic partial class App : Application\n{\n    public App()\n    {\n        DispatcherUnhandledException += App_DispatcherUnhandledException;\n        SentrySdk.Init(o =>\n        {\n            // Tells which project in Sentry to send events to:\n            o.Dsn = \"${dsn}\";\n            // When configuring for the first time, to see what the SDK is doing:\n            o.Debug = true;\n            // Set TracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n            // We recommend adjusting this value in production.\n            o.TracesSampleRate = 1.0;\n        });\n    }\n\n    void App_DispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)\n    {\n        SentrySdk.CaptureException(e.Exception);\n\n        // If you want to avoid the application from crashing:\n        e.Handled = true;\n    }\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t('To verify your set up, you can capture a message with the SDK:'),\n    configurations: [\n      {\n        language: 'csharp',\n        code: 'SentrySdk.CaptureMessage(\"Hello Sentry\");',\n      },\n    ],\n  },\n  {\n    title: t('Performance Monitoring'),\n    description: t(\n      'You can measure the performance of your code by capturing transactions and spans.'\n    ),\n    configurations: [\n      {\n        language: 'csharp',\n        code: `\n// Transaction can be started by providing, at minimum, the name and the operation\nvar transaction = SentrySdk.StartTransaction(\n  \"test-transaction-name\",\n  \"test-transaction-operation\"\n);\n\n// Transactions can have child spans (and those spans can have child spans as well)\nvar span = transaction.StartChild(\"test-child-operation\");\n\n// ...\n// (Perform the operation represented by the span/transaction)\n// ...\n\nspan.Finish(); // Mark the span as finished\ntransaction.Finish(); // Mark the transaction as finished and send it to Sentry\n        `,\n      },\n    ],\n    additionalInfo: (\n      <p>\n        {tct(\n          'Check out [link:the documentation] to learn more about the API and automatic instrumentations.',\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/dotnet/performance/instrumentation/\" />\n            ),\n          }\n        )}\n      </p>\n    ),\n  },\n  {\n    title: t('Documentation'),\n    description: (\n      <p>\n        {tct(\n          \"Once you've verified the package is initialized properly and sent a test event, consider visiting our [link:complete WPF docs].\",\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/platforms/dotnet/guides/wpf/\" />\n            ),\n          }\n        )}\n      </p>\n    ),\n  },\n  {\n    title: t('Samples'),\n    description: (\n      <Fragment>\n        {t(\n          'See the following examples that demonstrate how to integrate Sentry with various frameworks.'\n        )}\n        <List symbol=\"bullet\">\n          <ListItem>\n            {tct(\n              '[link:Multiple samples in the [code:dotnet] SDK repository] [strong:(C#)]',\n              {\n                link: (\n                  <ExternalLink href=\"https://github.com/getsentry/sentry-dotnet/tree/main/samples\" />\n                ),\n                code: <code />,\n                strong: <strong />,\n              }\n            )}\n          </ListItem>\n          <ListItem>\n            {tct('[link:Basic F# sample] [strong:(F#)]', {\n              link: <ExternalLink href=\"https://github.com/sentry-demos/fsharp\" />,\n              strong: <strong />,\n            })}\n          </ListItem>\n        </List>\n      </Fragment>\n    ),\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithWpf({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} {...props} />;\n}\n\nexport default GettingStartedWithWpf;\n\nconst AlertWithoutMarginBottom = styled(Alert)`\n  margin-bottom: 0;\n`;\n"],"names":["steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","_jsx","children","tct","strong","configurations","language","code","additionalInfo","AlertWithoutMarginBottom","CONFIGURE","VERIFY","t","title","link","ExternalLink","href","_jsxs","Fragment","List","symbol","ListItem","GettingStartedWithWpf","_ref","props","Layout","displayName","_styled","Alert","target","name","styles"],"sourceRoot":""}