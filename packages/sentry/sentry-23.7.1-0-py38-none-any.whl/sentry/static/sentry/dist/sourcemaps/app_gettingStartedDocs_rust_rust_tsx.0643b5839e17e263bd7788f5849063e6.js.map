{"version":3,"file":"chunks/app_gettingStartedDocs_rust_rust_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"ueAMO,MAAMA,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,sGACA,CAACC,MAAMH,EAAAA,EAAAA,IAAA,eAIbI,eAAgB,CACd,CACEC,SAAU,OACVF,KAAO,mDAOb,CACEP,KAAMC,EAAAA,GAASS,UACfP,aACEC,EAAAA,EAAAA,IAAA,KAAAC,UACGC,EAAAA,EAAAA,IACC,8IACA,CAACC,MAAMH,EAAAA,EAAAA,IAAA,eAIbI,eAAgB,CACd,CACEC,SAAU,OACVF,KAAO,iCACeX,8GAQ5B,CACEI,KAAMC,EAAAA,GAASU,OACfR,aAAaS,EAAAA,EAAAA,GACX,mFAEFJ,eAAgB,CACd,CACEC,SAAU,OACVF,KAAO,gDAEiBX,6LAY/B,EAGM,SAASiB,EAAsBC,GAA+B,IAA9B,IAAClB,KAAQmB,GAAmBD,EACjE,OAAOV,EAAAA,EAAAA,IAACY,EAAAA,EAAM,CAACrB,MAAOA,EAAM,CAACC,WAAWmB,GAC1C,CAFgBF,EAAsBI,YAAA,yBAItC,S","sources":["webpack:///./app/gettingStartedDocs/rust/rust.tsx"],"sourcesContent":["import {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct(\n          'To add Sentry to your Rust project you just need to add a new dependency to your [code:Cargo.toml]:',\n          {code: <code />}\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'toml',\n        code: `\n[dependencies]\nsentry = \"0.31.5\"\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          '[code:Sentry.init()] will return you a guard that when freed, will prevent process exit until all events have been sent (within a timeout):',\n          {code: <code />}\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'rust',\n        code: `\nlet _guard = sentry::init((\"${dsn}\", sentry::ClientOptions {\n  release: sentry::release_name!(),\n  ..Default::default()\n}));\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t(\n      'The quickest way to verify Sentry in your Rust application is to cause a panic:'\n    ),\n    configurations: [\n      {\n        language: 'rust',\n        code: `\nfn main() {\n  let _guard = sentry::init((\"${dsn}\", sentry::ClientOptions {\n    release: sentry::release_name!(),\n    ..Default::default()\n  }));\n\n  // Sentry will capture this\n  panic!(\"Everything is on fire!\");\n}\n        `,\n      },\n    ],\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithRust({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} {...props} />;\n}\n\nexport default GettingStartedWithRust;\n"],"names":["steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","_jsx","children","tct","code","configurations","language","CONFIGURE","VERIFY","t","GettingStartedWithRust","_ref","props","Layout","displayName"],"sourceRoot":""}