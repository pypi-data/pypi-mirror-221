{"version":3,"file":"chunks/app_views_settings_projectPlugins_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/components/switchButton.tsx","webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectPlugins/projectPluginRow.tsx","webpack:///./app/views/settings/projectPlugins/projectPlugins.tsx","webpack:///./app/views/settings/projectPlugins/index.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client, RequestOptions} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Plugin} from 'sentry/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginsStore.onUpdate(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginsStore.onUpdateSuccess(pluginId);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginsStore.onUpdateError(pluginId, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginsStore.onFetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, resp]) => {\n      PluginsStore.onFetchAllSuccess(data, {\n        pageLinks: resp?.getResponseHeader('Link') ?? undefined,\n      });\n\n      return data;\n    })\n    .catch(err => {\n      PluginsStore.onFetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import {forwardRef} from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  toggle: React.MouseEventHandler<HTMLButtonElement>;\n  className?: string;\n  /**\n   * Toggle color is always active.\n   */\n  forceActiveColor?: boolean;\n  forwardedRef?: React.Ref<HTMLButtonElement>;\n  id?: string;\n  isActive?: boolean;\n  isDisabled?: boolean;\n  isLoading?: boolean;\n  name?: string;\n  size?: 'sm' | 'lg';\n};\n\nfunction Switch({\n  forwardedRef,\n  size = 'sm',\n  isActive,\n  forceActiveColor,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  name,\n  className,\n  ...props\n}: Props) {\n  return (\n    <SwitchButton\n      ref={forwardedRef}\n      id={id}\n      name={name}\n      type=\"button\"\n      className={className}\n      onClick={isDisabled ? undefined : toggle}\n      role=\"checkbox\"\n      aria-checked={isActive}\n      isLoading={isLoading}\n      disabled={isDisabled}\n      isActive={isActive}\n      size={size}\n      data-test-id=\"switch\"\n      {...props}\n    >\n      <Toggle\n        isDisabled={isDisabled}\n        isActive={isActive}\n        forceActiveColor={forceActiveColor}\n        size={size}\n      />\n    </SwitchButton>\n  );\n}\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 4 : 8);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 1 : 3);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) * 0.875 : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => p.theme.border};\n  position: relative;\n  box-shadow: inset ${p => p.theme.dropShadowMedium};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 1.875}px;\n  border-radius: ${getSize}px;\n  transition: border 0.1s, box-shadow 0.1s;\n\n  &[disabled] {\n    cursor: not-allowed;\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    border-color: ${p => p.theme.focusBorder};\n    box-shadow: ${p => p.theme.focusBorder} 0 0 0 1px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p =>\n    p.isActive || p.forceActiveColor ? p.theme.active : p.theme.border};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\n\nexport default forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <Switch {...props} forwardedRef={ref} />\n));\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport {Plugin} from 'sentry/types';\n\ninterface InternalDefinition {\n  plugins: Map<string, Plugin> | null;\n  state: {\n    error: Error | null;\n    loading: boolean;\n    pageLinks: string | null;\n    plugins: Plugin[];\n  };\n  updating: Map<string, Plugin>;\n}\n\ninterface PluginStoreDefinition extends StoreDefinition, InternalDefinition {\n  getState: () => InternalDefinition['state'];\n  onFetchAll: (options?: {resetLoading?: boolean}) => void;\n  onFetchAllError: (err) => void;\n\n  onFetchAllSuccess: (data: Plugin[], links: {pageLinks?: string}) => void;\n  onUpdate: (id: string, updateObj: Partial<Plugin>) => void;\n  onUpdateError: (id: string, err: Error) => void;\n  onUpdateSuccess: (id: string) => void;\n  reset: () => void;\n}\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst storeConfig: PluginStoreDefinition = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    this.reset();\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data, {pageLinks}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\nconst PluginStore = createStore(storeConfig);\nexport default PluginStore;\n","import {Component} from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends Component<Omit<P, 'plugins'> & WithPluginProps, State> {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {PureComponent} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Access from 'sentry/components/acl/access';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport Switch from 'sentry/components/switchButton';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst grayText = css`\n  color: #979ba0;\n`;\n\ntype Props = {\n  onChange: (id: string, enabled: boolean) => void;\n  organization: Organization;\n  project: Project;\n} & Plugin &\n  Pick<RouteComponentProps<{}, {}>, 'params' | 'routes'>;\n\nclass ProjectPluginRow extends PureComponent<Props> {\n  handleChange = () => {\n    const {onChange, id, enabled} = this.props;\n    onChange(id, !enabled);\n    const eventKey = !enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationAnalytics(eventKey, {\n      integration: id,\n      integration_type: 'plugin',\n      view: 'legacy_integrations',\n      organization: this.props.organization,\n    });\n  };\n\n  render() {\n    const {\n      id,\n      name,\n      slug,\n      version,\n      author,\n      hasConfiguration,\n      enabled,\n      canDisable,\n      project,\n    } = this.props;\n\n    const configureUrl = recreateRoute(id, this.props);\n    return (\n      <Access access={['project:write']} project={project}>\n        {({hasAccess}) => {\n          const LinkOrSpan = hasAccess ? Link : 'span';\n\n          return (\n            <PluginItem key={id} className={slug}>\n              <PluginInfo>\n                <StyledPluginIcon size={48} pluginId={id} />\n                <PluginDescription>\n                  <PluginName>\n                    {`${name} `}\n                    {getDynamicText({\n                      value: (\n                        <Version>{version ? `v${version}` : <em>{t('n/a')}</em>}</Version>\n                      ),\n                      fixed: <Version>v10</Version>,\n                    })}\n                  </PluginName>\n                  <div>\n                    {author && (\n                      <ExternalLink css={grayText} href={author.url}>\n                        {author.name}\n                      </ExternalLink>\n                    )}\n                    {hasConfiguration && (\n                      <span>\n                        {' '}\n                        &middot;{' '}\n                        <LinkOrSpan css={grayText} to={configureUrl}>\n                          {t('Configure plugin')}\n                        </LinkOrSpan>\n                      </span>\n                    )}\n                  </div>\n                </PluginDescription>\n              </PluginInfo>\n              <Switch\n                size=\"lg\"\n                isDisabled={!hasAccess || !canDisable}\n                isActive={enabled}\n                toggle={this.handleChange}\n              />\n            </PluginItem>\n          );\n        }}\n      </Access>\n    );\n  }\n}\n\nexport default withOrganization(ProjectPluginRow);\n\nconst PluginItem = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst PluginDescription = styled('div')`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst PluginInfo = styled('div')`\n  display: flex;\n  flex: 1;\n  line-height: 24px;\n`;\n\nconst PluginName = styled('div')`\n  font-size: 16px;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: 16px;\n`;\n\n// Keeping these colors the same from old integrations page\nconst Version = styled('span')`\n  color: #babec2;\n`;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Access from 'sentry/components/acl/access';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelAlert from 'sentry/components/panels/panelAlert';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport RouteError from 'sentry/views/routeError';\n\nimport ProjectPluginRow from './projectPluginRow';\n\ntype Props = {\n  error: React.ComponentProps<typeof RouteError>['error'];\n  loading: boolean;\n  onChange: React.ComponentProps<typeof ProjectPluginRow>['onChange'];\n  organization: Organization;\n  plugins: Plugin[];\n  project: Project;\n} & RouteComponentProps<{}, {}>;\n\nclass ProjectPlugins extends Component<Props> {\n  render() {\n    const {plugins, loading, error, onChange, routes, organization, project} = this.props;\n    const hasError = error;\n    const isLoading = !hasError && loading;\n\n    if (hasError) {\n      return <RouteError error={error} />;\n    }\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    const params = {orgId: organization.slug, projectId: project.slug};\n\n    return (\n      <Access access={['org:integrations']} project={project}>\n        {({hasAccess}) => (\n          <Panel>\n            <PanelHeader>\n              <div>{t('Legacy Integration')}</div>\n              <div />\n            </PanelHeader>\n            <PanelBody>\n              <PanelAlert type=\"warning\">\n                {hasAccess\n                  ? tct(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available. Visit the [link:organization integrations] settings to manage them.\",\n                      {\n                        link: <Link to={`/settings/${organization.slug}/integrations`} />,\n                      }\n                    )\n                  : t(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available.\"\n                    )}\n              </PanelAlert>\n\n              {plugins\n                .filter(p => {\n                  return !p.isHidden;\n                })\n                .map(plugin => (\n                  <PanelItem key={plugin.id}>\n                    <ProjectPluginRow\n                      params={params}\n                      routes={routes}\n                      project={project}\n                      {...plugin}\n                      onChange={onChange}\n                    />\n                  </PanelItem>\n                ))}\n            </PanelBody>\n          </Panel>\n        )}\n      </Access>\n    );\n  }\n}\n\nexport default ProjectPlugins;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {disablePlugin, enablePlugin, fetchPlugins} from 'sentry/actionCreators/plugins';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\nimport ProjectPlugins from './projectPlugins';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n  plugins: {\n    error: React.ComponentProps<typeof ProjectPlugins>['error'];\n    loading: boolean;\n    plugins: Plugin[];\n  };\n  project: Project;\n};\n\nclass ProjectPluginsContainer extends Component<Props> {\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = async () => {\n    const {organization, params} = this.props;\n\n    const plugins = await fetchPlugins({...params, orgId: organization.slug});\n    const installCount = plugins.filter(\n      plugin => plugin.hasConfiguration && plugin.enabled\n    ).length;\n    trackIntegrationAnalytics(\n      'integrations.index_viewed',\n      {\n        integrations_installed: installCount,\n        view: 'legacy_integrations',\n        organization: this.props.organization,\n      },\n      {startSession: true}\n    );\n  };\n\n  handleChange = (pluginId: string, shouldEnable: boolean) => {\n    const {organization, params} = this.props;\n\n    const actionCreator = shouldEnable ? enablePlugin : disablePlugin;\n    actionCreator({projectId: params.projectId, orgId: organization.slug, pluginId});\n  };\n\n  render() {\n    const {loading, error, plugins} = this.props.plugins || {};\n    const {organization, project} = this.props;\n\n    const title = t('Legacy Integrations');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} orgSlug={organization.slug} />\n        <SettingsPageHeader title={title} />\n        <PermissionAlert project={project} />\n\n        <ProjectPlugins\n          {...this.props}\n          onChange={this.handleChange}\n          loading={loading}\n          error={error}\n          plugins={plugins}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport {ProjectPluginsContainer};\n\nexport default withPlugins(ProjectPluginsContainer);\n"],"names":["activeFetch","api","Client","doUpdate","_ref","orgId","projectId","pluginId","update","params","PluginsStore","onUpdate","request","requestPromise","then","onUpdateSuccess","catch","resp","err","responseJSON","detail","Error","onUpdateError","fetchPlugins","_ref2","options","path","onFetchAll","method","includeAllArgs","_ref3","data","_","onFetchAllSuccess","pageLinks","getResponseHeader","undefined","onFetchAllError","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","getPadding","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","Switch","forwardedRef","size","isActive","forceActiveColor","isLoading","isDisabled","toggle","id","name","className","props","_jsx","SwitchButton","ref","type","onClick","role","disabled","children","Toggle","displayName","getSize","getToggleSize","getToggleTop","getTranslateX","dropShadowMedium","focusBorder","active","forwardRef","defaultState","loading","plugins","error","storeConfig","state","updating","Map","reset","this","getInitialState","getState","_plugins","Array","from","values","init","triggerState","trigger","resetLoading","arguments","length","map","plugin","updateObj","get","newPlugin","set","delete","origPlugin","createStore","WrappedComponent","WithPlugins","Component","constructor","_defineProperty","listen","setState","componentDidMount","componentDidUpdate","prevProps","_prevState","prevContext","organization","project","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","componentWillUnmount","unsubscribe","render","getDisplayName","withOrganization","withProject","permissionAlertText","PermissionAlert","access","team","Access","hasAccess","Alert","grayText","styles","ProjectPluginRow","PureComponent","onChange","eventKey","trackIntegrationAnalytics","integration","integration_type","view","version","author","hasConfiguration","canDisable","configureUrl","recreateRoute","LinkOrSpan","Link","_jsxs","PluginItem","PluginInfo","StyledPluginIcon","PluginDescription","PluginName","getDynamicText","value","Version","fixed","ExternalLink","href","url","to","handleChange","PluginIcon","ProjectPlugins","routes","RouteError","LoadingIndicator","Panel","PanelHeader","PanelBody","PanelAlert","tct","link","filter","isHidden","PanelItem","ProjectPluginsContainer","async","installCount","integrations_installed","startSession","shouldEnable","fetchData","title","Fragment","SentryDocumentTitle","orgSlug","SettingsPageHeader","withPlugins"],"sourceRoot":""}