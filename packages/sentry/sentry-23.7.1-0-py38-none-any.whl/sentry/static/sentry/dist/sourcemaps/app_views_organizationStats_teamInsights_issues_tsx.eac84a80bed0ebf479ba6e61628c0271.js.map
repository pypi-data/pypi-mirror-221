{"version":3,"file":"chunks/app_views_organizationStats_teamInsights_issues_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/organizationStats/teamInsights/teamIssuesAge.tsx","webpack:///./app/views/organizationStats/teamInsights/teamIssuesBreakdown.tsx","webpack:///./app/views/organizationStats/teamInsights/teamResolutionTime.tsx","webpack:///./app/views/organizationStats/teamInsights/teamUnresolvedIssues.tsx","webpack:///./app/views/organizationStats/teamInsights/issues.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport Count from 'sentry/components/count';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Group, Organization} from 'sentry/types';\nimport {getTitle} from 'sentry/utils/events';\nimport {useApiQuery} from 'sentry/utils/queryClient';\n\ninterface TeamIssuesAgeProps {\n  organization: Organization;\n  teamSlug: string;\n}\n\n/**\n * takes \"< 1 hour\" and returns a datetime of 1 hour ago\n */\nfunction parseBucket(bucket: string): number {\n  if (bucket === '> 1 year') {\n    return moment().subtract(1, 'y').subtract(1, 'd').valueOf();\n  }\n\n  const [_, num, unit] = bucket.split(' ');\n  return moment()\n    .subtract(num, unit as any)\n    .valueOf();\n}\n\nconst bucketLabels = {\n  '< 1 hour': t('1 hour'),\n  '< 4 hour': t('4 hours'),\n  '< 12 hour': t('12 hours'),\n  '< 1 day': t('1 day'),\n  '< 1 week': t('1 week'),\n  '< 4 week': t('1 month'),\n  '< 24 week': t('6 months'),\n  '< 1 year': t('1 year'),\n  '> 1 year': t('> 1 year'),\n};\n\nfunction TeamIssuesAge({organization, teamSlug}: TeamIssuesAgeProps) {\n  const {\n    data: oldestIssues,\n    isLoading: isOldestIssuesLoading,\n    isError: isOldestIssuesError,\n    refetch: refetchOldestIssues,\n  } = useApiQuery<Group[]>(\n    [\n      `/teams/${organization.slug}/${teamSlug}/issues/old/`,\n      {\n        query: {\n          limit: 7,\n        },\n      },\n    ],\n    {staleTime: 5000}\n  );\n\n  const {\n    data: unresolvedIssueAge,\n    isLoading: isUnresolvedIssueAgeLoading,\n    isError: isUnresolvedIssueAgeError,\n    refetch: refetchUnresolvedIssueAge,\n  } = useApiQuery<Record<string, number>>(\n    [`/teams/${organization.slug}/${teamSlug}/unresolved-issue-age/`],\n    {staleTime: 5000}\n  );\n\n  const isLoading = isOldestIssuesLoading || isUnresolvedIssueAgeLoading;\n\n  if (isOldestIssuesError || isUnresolvedIssueAgeError) {\n    return (\n      <LoadingError\n        onRetry={() => {\n          refetchOldestIssues();\n          refetchUnresolvedIssueAge();\n        }}\n      />\n    );\n  }\n\n  const seriesData = Object.entries(unresolvedIssueAge ?? {})\n    .map(([bucket, value]) => ({\n      name: bucket,\n      value,\n    }))\n    .sort((a, b) => parseBucket(b.name) - parseBucket(a.name));\n\n  return (\n    <div>\n      <ChartWrapper>\n        {isLoading && <Placeholder height=\"200px\" />}\n        {!isLoading && (\n          <BarChart\n            style={{height: 190}}\n            legend={{right: 3, top: 0}}\n            yAxis={{minInterval: 1}}\n            xAxis={{\n              type: 'category',\n              min: 0,\n              axisLabel: {\n                showMaxLabel: true,\n                showMinLabel: true,\n                formatter: (bucket: string) => {\n                  return bucketLabels[bucket] ?? bucket;\n                },\n              },\n            }}\n            series={[\n              {\n                seriesName: t('Unresolved Issues'),\n                silent: true,\n                data: seriesData,\n                barCategoryGap: '5%',\n              },\n            ]}\n          />\n        )}\n      </ChartWrapper>\n      <StyledPanelTable\n        isEmpty={!oldestIssues || oldestIssues?.length === 0}\n        emptyMessage={t('No unresolved issues for this team’s projects')}\n        headers={[\n          t('Oldest Issues'),\n          <RightAligned key=\"events\">{t('Events')}</RightAligned>,\n          <RightAligned key=\"users\">{t('Users')}</RightAligned>,\n          <RightAligned key=\"age\">\n            {t('Age')} <IconArrow direction=\"down\" size=\"xs\" color=\"gray300\" />\n          </RightAligned>,\n        ]}\n        isLoading={isLoading}\n      >\n        {oldestIssues?.map(issue => {\n          const {title} = getTitle(issue, organization?.features, false);\n\n          return (\n            <Fragment key={issue.id}>\n              <ProjectTitleContainer>\n                <ShadowlessProjectBadge\n                  disableLink\n                  hideName\n                  avatarSize={18}\n                  project={issue.project}\n                />\n                <TitleOverflow>\n                  <Link\n                    to={{\n                      pathname: `/organizations/${organization.slug}/issues/${issue.id}/`,\n                    }}\n                  >\n                    {title}\n                  </Link>\n                </TitleOverflow>\n              </ProjectTitleContainer>\n              <RightAligned>\n                <Count value={issue.count} />\n              </RightAligned>\n              <RightAligned>\n                <Count value={issue.userCount} />\n              </RightAligned>\n              <RightAligned>\n                <TimeSince date={issue.firstSeen} />\n              </RightAligned>\n            </Fragment>\n          );\n        })}\n      </StyledPanelTable>\n    </div>\n  );\n}\n\nexport default TeamIssuesAge;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr 0.15fr 0.15fr 0.25fr;\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: unset;\n\n  > * {\n    padding: ${space(1)} ${space(2)};\n  }\n\n  ${p =>\n    p.isEmpty &&\n    css`\n      & > div:last-child {\n        padding: 48px ${space(2)};\n      }\n    `}\n`;\n\nconst RightAligned = styled('span')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst ProjectTitleContainer = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  display: flex;\n  align-items: center;\n`;\n\nconst TitleOverflow = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst ShadowlessProjectBadge = styled(ProjectBadge)`\n  display: inline-flex;\n  align-items: center;\n  margin-right: ${space(1)};\n\n  * > img {\n    box-shadow: none;\n  }\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {BarChart, BarChartSeries} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport CollapsePanel, {COLLAPSE_COUNT} from 'sentry/components/collapsePanel';\nimport LoadingError from 'sentry/components/loadingError';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {space} from 'sentry/styles/space';\nimport type {Organization, Project} from 'sentry/types';\nimport {useApiQuery} from 'sentry/utils/queryClient';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {barAxisLabel, convertDayValueObjectToSeries, sortSeriesByDay} from './utils';\n\ninterface StatusCounts {\n  total: number;\n  archived?: number;\n  deleted?: number;\n  ignored?: number;\n  new?: number;\n  regressed?: number;\n  resolved?: number;\n  unarchived?: number;\n  unignored?: number;\n}\n\nexport type IssuesBreakdown = Record<string, Record<string, StatusCounts>>;\n\ntype Statuses = keyof Omit<StatusCounts, 'total'>;\n\ninterface TeamIssuesBreakdownProps extends DateTimeObject {\n  organization: Organization;\n  projects: Project[];\n  statuses: Statuses[];\n  teamSlug: string;\n  environment?: string;\n}\n\nconst keys = ['deleted', 'ignored', 'resolved', 'unignored', 'regressed', 'new', 'total'];\n\nfunction TeamIssuesBreakdown({\n  organization,\n  projects,\n  start,\n  end,\n  period,\n  utc,\n  teamSlug,\n  statuses,\n  environment,\n}: TeamIssuesBreakdownProps) {\n  const {\n    data: issuesBreakdown = {},\n    isLoading,\n    isError,\n    refetch,\n  } = useApiQuery<IssuesBreakdown>(\n    [\n      `/teams/${organization.slug}/${teamSlug}/issue-breakdown/`,\n      {\n        query: {\n          ...normalizeDateTimeParams({start, end, period, utc}),\n          statuses,\n          environment,\n        },\n      },\n    ],\n    {staleTime: 5000}\n  );\n\n  const hasEscalatingIssues = organization.features.includes('escalating-issues');\n\n  const allReviewedByDay: Record<string, Record<string, number>> = {};\n  // Total statuses & total reviewed keyed by project ID\n  const projectTotals: Record<string, StatusCounts> = {};\n\n  // The issues breakdown is keyed by projectId\n  for (const [projectId, entries] of Object.entries(issuesBreakdown)) {\n    // Each bucket is 1 day\n    for (const [bucket, counts] of Object.entries(entries)) {\n      if (!projectTotals[projectId]) {\n        projectTotals[projectId] = {\n          deleted: 0,\n          ignored: 0,\n          resolved: 0,\n          unignored: 0,\n          regressed: 0,\n          new: 0,\n          total: 0,\n        };\n      }\n\n      for (const key of keys) {\n        projectTotals[projectId][key] += counts[key];\n      }\n\n      if (!allReviewedByDay[projectId]) {\n        allReviewedByDay[projectId] = {};\n      }\n\n      if (allReviewedByDay[projectId][bucket] === undefined) {\n        allReviewedByDay[projectId][bucket] = counts.total;\n      } else {\n        allReviewedByDay[projectId][bucket] += counts.total;\n      }\n    }\n  }\n\n  const sortedProjectIds = Object.entries(projectTotals)\n    .map(([projectId, {total}]) => ({projectId, total}))\n    .sort((a, b) => b.total - a.total);\n\n  const allSeries = Object.keys(allReviewedByDay).map(\n    (projectId, idx): BarChartSeries => ({\n      seriesName: ProjectsStore.getById(projectId)?.slug ?? projectId,\n      data: sortSeriesByDay(convertDayValueObjectToSeries(allReviewedByDay[projectId])),\n      animationDuration: 500,\n      animationDelay: idx * 500,\n      silent: true,\n      barCategoryGap: '5%',\n    })\n  );\n\n  if (isError) {\n    return <LoadingError onRetry={refetch} />;\n  }\n\n  return (\n    <Fragment>\n      <IssuesChartWrapper>\n        {isLoading && <Placeholder height=\"200px\" />}\n        {!isLoading && (\n          <BarChart\n            style={{height: 200}}\n            stacked\n            isGroupedByDate\n            useShortDate\n            legend={{right: 0, top: 0}}\n            xAxis={barAxisLabel()}\n            yAxis={{minInterval: 1}}\n            series={allSeries}\n          />\n        )}\n      </IssuesChartWrapper>\n      <CollapsePanel items={sortedProjectIds.length}>\n        {({isExpanded, showMoreButton}) => (\n          <Fragment>\n            <StyledPanelTable\n              numActions={statuses.length}\n              headers={[\n                t('Project'),\n                ...statuses\n                  .map(action =>\n                    hasEscalatingIssues ? action.replace('ignore', 'archive') : action\n                  )\n                  .map(action => <AlignRight key={action}>{action}</AlignRight>),\n                <AlignRight key=\"total\">\n                  {t('total')} <IconArrow direction=\"down\" size=\"xs\" color=\"gray300\" />\n                </AlignRight>,\n              ]}\n              isLoading={isLoading}\n            >\n              {sortedProjectIds.map(({projectId}, idx) => {\n                const project = projects.find(p => p.id === projectId);\n\n                if (idx >= COLLAPSE_COUNT && !isExpanded) {\n                  return null;\n                }\n\n                return (\n                  <Fragment key={projectId}>\n                    <ProjectBadgeContainer>\n                      {project && <ProjectBadge avatarSize={18} project={project} />}\n                    </ProjectBadgeContainer>\n                    {statuses.map(action => (\n                      <AlignRight key={action}>\n                        {projectTotals[projectId][action]}\n                      </AlignRight>\n                    ))}\n                    <AlignRight>{projectTotals[projectId].total}</AlignRight>\n                  </Fragment>\n                );\n              })}\n            </StyledPanelTable>\n            {!isLoading && showMoreButton}\n          </Fragment>\n        )}\n      </CollapsePanel>\n    </Fragment>\n  );\n}\n\nexport default TeamIssuesBreakdown;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n`;\n\nconst IssuesChartWrapper = styled(ChartWrapper)`\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)<{numActions: number}>`\n  grid-template-columns: 1fr ${p => ' 0.2fr'.repeat(p.numActions)} 0.2fr;\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n`;\n","import styled from '@emotion/styled';\n\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {getDuration} from 'sentry/utils/formatters';\nimport {useApiQuery} from 'sentry/utils/queryClient';\n\nimport {barAxisLabel, sortSeriesByDay} from './utils';\n\ntype TimeToResolution = Record<string, {avg: number; count: number}>;\n\ninterface TeamResolutionTimeProps extends DateTimeObject {\n  organization: Organization;\n  teamSlug: string;\n  environment?: string;\n}\n\nfunction TeamResolutionTime({\n  organization,\n  teamSlug,\n  environment,\n  start,\n  end,\n  period,\n  utc,\n}: TeamResolutionTimeProps) {\n  const datetime = {start, end, period, utc};\n\n  const {\n    data: resolutionTime,\n    isLoading,\n    isError,\n    refetch,\n  } = useApiQuery<TimeToResolution>(\n    [\n      `/teams/${organization.slug}/${teamSlug}/time-to-resolution/`,\n      {\n        query: {\n          ...normalizeDateTimeParams(datetime),\n          environment,\n        },\n      },\n    ],\n    {staleTime: 5000}\n  );\n\n  if (isLoading) {\n    return (\n      <ChartWrapper>\n        <LoadingIndicator />\n      </ChartWrapper>\n    );\n  }\n\n  if (isError) {\n    return <LoadingError onRetry={refetch} />;\n  }\n\n  const data = Object.entries(resolutionTime ?? {}).map(([bucket, {avg}]) => ({\n    value: avg,\n    name: new Date(bucket).getTime(),\n  }));\n\n  const seriesData = sortSeriesByDay(data);\n\n  return (\n    <ChartWrapper>\n      <BarChart\n        style={{height: 190}}\n        isGroupedByDate\n        useShortDate\n        period=\"7d\"\n        tooltip={{\n          valueFormatter: (value: number) => getDuration(value, 1),\n        }}\n        yAxis={{\n          // Each yAxis marker will increase by 1 day\n          minInterval: 86400,\n          axisLabel: {\n            formatter: (value: number) => {\n              if (value === 0) {\n                return '';\n              }\n\n              return getDuration(value, 0, true, true);\n            },\n          },\n        }}\n        legend={{right: 0, top: 0}}\n        xAxis={barAxisLabel()}\n        series={[\n          {\n            seriesName: t('Time to Resolution'),\n            data: seriesData,\n            silent: true,\n            barCategoryGap: '5%',\n          },\n        ]}\n      />\n    </ChartWrapper>\n  );\n}\n\nexport default TeamResolutionTime;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport CollapsePanel, {COLLAPSE_COUNT} from 'sentry/components/collapsePanel';\nimport LoadingError from 'sentry/components/loadingError';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconArrow} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport type {Organization, Project} from 'sentry/types';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport {useApiQuery} from 'sentry/utils/queryClient';\nimport type {ColorOrAlias} from 'sentry/utils/theme';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {\n  barAxisLabel,\n  convertDayValueObjectToSeries,\n  groupByTrend,\n  sortSeriesByDay,\n} from './utils';\n\ninterface TeamUnresolvedIssuesProps extends DateTimeObject {\n  organization: Organization;\n  projects: Project[];\n  teamSlug: string;\n  environment?: string;\n}\n\ntype UnresolvedCount = {unresolved: number};\ntype ProjectReleaseCount = Record<string, Record<string, UnresolvedCount>>;\n\nexport function TeamUnresolvedIssues({\n  organization,\n  teamSlug,\n  projects,\n  start,\n  end,\n  period,\n  utc,\n  environment,\n}: TeamUnresolvedIssuesProps) {\n  const {\n    data: periodIssues = {},\n    isLoading,\n    isError,\n    refetch,\n  } = useApiQuery<ProjectReleaseCount>(\n    [\n      `/teams/${organization.slug}/${teamSlug}/all-unresolved-issues/`,\n      {\n        query: {\n          ...normalizeDateTimeParams({start, end, period, utc}),\n          environment,\n        },\n      },\n    ],\n    {staleTime: 0}\n  );\n\n  function getTotalUnresolved(projectId: number): number {\n    const entries = Object.values(periodIssues?.[projectId] ?? {});\n    const total = entries.reduce((acc, current) => acc + current.unresolved, 0);\n\n    return Math.round(total / entries.length);\n  }\n\n  const projectTotals: Record<\n    string,\n    {percentChange: number; periodAvg: number; projectId: string; today: number}\n  > = {};\n  for (const projectId of Object.keys(periodIssues)) {\n    const periodAvg = getTotalUnresolved(Number(projectId));\n    const projectPeriodEntries = Object.values(periodIssues?.[projectId] ?? {});\n    const today = projectPeriodEntries[projectPeriodEntries.length - 1]?.unresolved ?? 0;\n    const percentChange = (today - periodAvg) / periodAvg;\n    projectTotals[projectId] = {\n      projectId,\n      periodAvg,\n      today,\n      percentChange: Number.isNaN(percentChange) ? 0 : percentChange,\n    };\n  }\n\n  const sortedProjects = projects\n    .map(project => ({project, trend: projectTotals[project.id]?.percentChange ?? 0}))\n    .sort((a, b) => Math.abs(b.trend) - Math.abs(a.trend));\n\n  const groupedProjects = groupByTrend(sortedProjects);\n\n  // All data will contain all pairs of [day, unresolved_count].\n  const allData = Object.values(periodIssues).flatMap(data =>\n    Object.entries(data).map(\n      ([bucket, {unresolved}]) => [bucket, unresolved] as [string, number]\n    )\n  );\n  // Total by day for all projects\n  const totalByDay = allData.reduce((acc, [bucket, unresolved]) => {\n    if (acc[bucket] === undefined) {\n      acc[bucket] = 0;\n    }\n    acc[bucket] += unresolved;\n    return acc;\n  }, {});\n\n  const seriesData = sortSeriesByDay(convertDayValueObjectToSeries(totalByDay));\n\n  if (isError) {\n    return <LoadingError onRetry={refetch} />;\n  }\n\n  return (\n    <div>\n      <ChartWrapper>\n        {isLoading && <Placeholder height=\"200px\" />}\n        {!isLoading && (\n          <BarChart\n            style={{height: 190}}\n            isGroupedByDate\n            useShortDate\n            legend={{right: 3, top: 0}}\n            yAxis={{minInterval: 1}}\n            xAxis={barAxisLabel()}\n            series={[\n              {\n                seriesName: t('Unresolved Issues'),\n                silent: true,\n                data: seriesData,\n                barCategoryGap: '6%',\n              },\n            ]}\n          />\n        )}\n      </ChartWrapper>\n      <CollapsePanel items={groupedProjects.length}>\n        {({isExpanded, showMoreButton}) => (\n          <Fragment>\n            <StyledPanelTable\n              isEmpty={projects.length === 0}\n              isLoading={isLoading}\n              headers={[\n                t('Project'),\n                <RightAligned key=\"last\">\n                  {tct('Last [period] Average', {period})}\n                </RightAligned>,\n                <RightAligned key=\"curr\">{t('Today')}</RightAligned>,\n                <RightAligned key=\"diff\">{t('Change')}</RightAligned>,\n              ]}\n            >\n              {groupedProjects.map(({project}, idx) => {\n                const totals = projectTotals[project.id] ?? {};\n\n                if (idx >= COLLAPSE_COUNT && !isExpanded) {\n                  return null;\n                }\n\n                return (\n                  <Fragment key={project.id}>\n                    <ProjectBadgeContainer>\n                      <ProjectBadge avatarSize={18} project={project} />\n                    </ProjectBadgeContainer>\n\n                    <ScoreWrapper>{totals.periodAvg}</ScoreWrapper>\n                    <ScoreWrapper>{totals.today}</ScoreWrapper>\n                    <ScoreWrapper>\n                      <SubText\n                        color={\n                          totals.percentChange === 0\n                            ? 'subText'\n                            : totals.percentChange > 0\n                            ? 'errorText'\n                            : 'successText'\n                        }\n                      >\n                        {formatPercentage(\n                          Number.isNaN(totals.percentChange) ? 0 : totals.percentChange,\n                          0\n                        )}\n                        <PaddedIconArrow\n                          direction={totals.percentChange > 0 ? 'up' : 'down'}\n                          size=\"xs\"\n                        />\n                      </SubText>\n                    </ScoreWrapper>\n                  </Fragment>\n                );\n              })}\n            </StyledPanelTable>\n            {!isLoading && showMoreButton}\n          </Fragment>\n        )}\n      </CollapsePanel>\n    </div>\n  );\n}\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr 0.2fr 0.2fr 0.2fr;\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst RightAligned = styled('span')`\n  text-align: right;\n`;\n\nconst ScoreWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  text-align: right;\n`;\n\nconst PaddedIconArrow = styled(IconArrow)`\n  margin: 0 ${space(0.5)};\n`;\n\nconst SubText = styled('div')<{color: ColorOrAlias}>`\n  color: ${p => p.theme[p.color]};\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport {TeamWithProjects} from 'sentry/types';\nimport localStorage from 'sentry/utils/localStorage';\nimport useRouteAnalyticsEventNames from 'sentry/utils/routeAnalytics/useRouteAnalyticsEventNames';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useTeams} from 'sentry/utils/useTeams';\n\nimport Header from '../header';\n\nimport TeamStatsControls from './controls';\nimport DescriptionCard from './descriptionCard';\nimport TeamIssuesAge from './teamIssuesAge';\nimport TeamIssuesBreakdown from './teamIssuesBreakdown';\nimport TeamResolutionTime from './teamResolutionTime';\nimport {TeamUnresolvedIssues} from './teamUnresolvedIssues';\nimport {dataDatetime} from './utils';\n\ntype Props = RouteComponentProps<{}, {}>;\n\nfunction TeamStatsIssues({location, router}: Props) {\n  const organization = useOrganization();\n  const {teams, initiallyLoaded} = useTeams({provideUserTeams: true});\n\n  useRouteAnalyticsEventNames('team_insights.viewed', 'Team Insights: Viewed');\n\n  const query = location?.query ?? {};\n  const localStorageKey = `teamInsightsSelectedTeamId:${organization.slug}`;\n\n  let localTeamId: string | null | undefined =\n    query.team ?? localStorage.getItem(localStorageKey);\n  if (localTeamId && !teams.find(team => team.id === localTeamId)) {\n    localTeamId = null;\n  }\n  const currentTeamId = localTeamId ?? teams[0]?.id;\n  const currentTeam = teams.find(team => team.id === currentTeamId) as\n    | TeamWithProjects\n    | undefined;\n  const projects = currentTeam?.projects ?? [];\n  const environment = query.environment;\n\n  const {period, start, end, utc} = dataDatetime(query);\n  const hasEscalatingIssues = organization.features.includes('escalating-issues');\n\n  if (teams.length === 0) {\n    return (\n      <NoProjectMessage organization={organization} superuserNeedsToBeProjectMember />\n    );\n  }\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={t('Team Issues')} orgSlug={organization.slug} />\n      <Header organization={organization} activeTab=\"issues\" />\n\n      <Body>\n        <TeamStatsControls\n          showEnvironment\n          location={location}\n          router={router}\n          currentTeam={currentTeam}\n          currentEnvironment={environment}\n        />\n\n        {!initiallyLoaded && <LoadingIndicator />}\n        {initiallyLoaded && (\n          <Layout.Main fullWidth>\n            <DescriptionCard\n              title={t('All Unresolved Issues')}\n              description={tct(\n                'This includes New and Returning issues in the last 7 days as well as those that haven’t been resolved or [status] in the past.',\n                {\n                  status: hasEscalatingIssues ? 'archived' : 'ignored',\n                }\n              )}\n            >\n              <TeamUnresolvedIssues\n                projects={projects}\n                organization={organization}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start}\n                end={end}\n                utc={utc}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('New and Returning Issues')}\n              description={tct(\n                'The new, regressed, and [status] issues that were assigned to your team.',\n                {\n                  status: hasEscalatingIssues ? 'escalating' : 'unignored',\n                }\n              )}\n            >\n              <TeamIssuesBreakdown\n                organization={organization}\n                projects={projects}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                statuses={['new', 'regressed', 'unignored']}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Issues Triaged')}\n              description={t(\n                'How many new and returning issues were reviewed by your team each week. Reviewing an issue includes marking as reviewed, resolving, assigning to another team, or deleting.'\n              )}\n            >\n              <TeamIssuesBreakdown\n                organization={organization}\n                projects={projects}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                statuses={['resolved', 'ignored', 'deleted']}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Age of Unresolved Issues')}\n              description={t('How long ago since unresolved issues were first created.')}\n            >\n              <TeamIssuesAge organization={organization} teamSlug={currentTeam!.slug} />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Time to Resolution')}\n              description={t(\n                `The mean time it took for issues to be resolved by your team.`\n              )}\n            >\n              <TeamResolutionTime\n                organization={organization}\n                environment={environment}\n                teamSlug={currentTeam!.slug}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n              />\n            </DescriptionCard>\n          </Layout.Main>\n        )}\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default TeamStatsIssues;\n\nconst Body = styled(Layout.Body)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    display: block;\n  }\n`;\n"],"names":["parseBucket","bucket","moment","subtract","valueOf","_","num","unit","split","bucketLabels","t","TeamIssuesAge","_ref","organization","teamSlug","data","oldestIssues","isLoading","isOldestIssuesLoading","isError","isOldestIssuesError","refetch","refetchOldestIssues","useApiQuery","slug","query","limit","staleTime","unresolvedIssueAge","isUnresolvedIssueAgeLoading","isUnresolvedIssueAgeError","refetchUnresolvedIssueAge","_jsx","LoadingError","onRetry","seriesData","Object","entries","map","_ref2","value","name","sort","a","b","_jsxs","children","ChartWrapper","Placeholder","height","BarChart","style","legend","right","top","yAxis","minInterval","xAxis","type","min","axisLabel","showMaxLabel","showMinLabel","formatter","series","seriesName","silent","barCategoryGap","StyledPanelTable","isEmpty","length","emptyMessage","headers","RightAligned","IconArrow","direction","size","color","issue","title","getTitle","features","Fragment","ProjectTitleContainer","ShadowlessProjectBadge","disableLink","hideName","avatarSize","project","TitleOverflow","Link","to","pathname","id","Count","count","userCount","TimeSince","date","firstSeen","displayName","_styled","target","space","p","theme","border","PanelTable","fontSizeMedium","css","styles","overflowEllipsis","ProjectBadge","keys","TeamIssuesBreakdown","projects","start","end","period","utc","statuses","environment","issuesBreakdown","normalizeDateTimeParams","hasEscalatingIssues","includes","allReviewedByDay","projectTotals","projectId","counts","deleted","ignored","resolved","unignored","regressed","new","total","key","undefined","sortedProjectIds","allSeries","idx","ProjectsStore","getById","sortSeriesByDay","convertDayValueObjectToSeries","animationDuration","animationDelay","IssuesChartWrapper","stacked","isGroupedByDate","useShortDate","barAxisLabel","CollapsePanel","items","_ref3","isExpanded","showMoreButton","numActions","action","replace","AlignRight","_ref4","find","COLLAPSE_COUNT","ProjectBadgeContainer","repeat","TeamResolutionTime","datetime","resolutionTime","LoadingIndicator","avg","Date","getTime","tooltip","valueFormatter","getDuration","TeamUnresolvedIssues","periodIssues","getTotalUnresolved","values","reduce","acc","current","unresolved","Math","round","periodAvg","Number","projectPeriodEntries","today","percentChange","isNaN","sortedProjects","trend","abs","groupedProjects","groupByTrend","totalByDay","flatMap","tct","_ref5","totals","ScoreWrapper","SubText","formatPercentage","PaddedIconArrow","TeamStatsIssues","location","router","useOrganization","teams","initiallyLoaded","useTeams","provideUserTeams","useRouteAnalyticsEventNames","localStorageKey","localTeamId","team","localStorage","getItem","currentTeamId","currentTeam","dataDatetime","NoProjectMessage","superuserNeedsToBeProjectMember","SentryDocumentTitle","orgSlug","Header","activeTab","Body","TeamStatsControls","showEnvironment","currentEnvironment","Layout","fullWidth","DescriptionCard","description","status","toString","breakpoints","medium"],"sourceRoot":""}