{"version":3,"file":"chunks/app_components_scoreCard_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"gkBAmBA,SAASA,EAASC,GAQC,IARA,MACjBC,EAAK,MACLC,EAAK,KACLC,EAAI,MACJC,EAAK,YACLC,EAAW,UACXC,EAAS,iBACTC,GACeP,EACf,OACEQ,EAAAA,EAAAA,IAACC,EAAU,CAACH,UAAWA,EAAUI,SAAA,EAC/BF,EAAAA,EAAAA,IAACG,EAAa,CAAAD,SAAA,EACZF,EAAAA,EAAAA,IAACI,EAAW,CAAAF,SAAA,EACVG,EAAAA,EAAAA,IAACC,EAAK,CAAAJ,SAAET,IACPE,IAAQU,EAAAA,EAAAA,IAACE,EAAAA,EAAe,CAACd,MAAOE,EAAMa,KAAK,KAAKC,SAAS,WAE3DV,UAGHC,EAAAA,EAAAA,IAACU,EAAY,CAAAR,SAAA,EACXG,EAAAA,EAAAA,IAACM,EAAK,CAAAT,SAAER,GAAS,OAChBkB,EAAAA,EAAAA,IAAQhB,KACPS,EAAAA,EAAAA,IAACQ,EAAK,CAAChB,YAAaA,EAAYK,UAC9BG,EAAAA,EAAAA,IAACS,EAAAA,EAAY,CAAAZ,SAAEN,WAM3B,CAEA,SAASmB,EAAcC,GACrB,OAAQA,EAAEnB,aACR,IAAK,OACH,OAAOmB,EAAEC,MAAMC,YACjB,IAAK,MACH,OAAOF,EAAEC,MAAME,UACjB,QACE,OAAOH,EAAEC,MAAMG,QAErB,CAxCS7B,EAAS8B,YAAA,YA0CX,MAAMpB,GAAaqB,EAAAA,EAAAA,GAAOC,EAAAA,EAAK,CAAAC,OAAA,YAAZF,CAAa,6EAI1BG,EAAAA,EAAAA,GAAM,GAAE,KAAIA,EAAAA,EAAAA,GAAM,GAAE,qBAIpBrB,GAAckB,EAAAA,EAAAA,GAAO,MAAK,CAAAE,OAAA,YAAZF,CAAa,kDAG/BG,EAAAA,EAAAA,GAAM,GAAE,0CAKJnB,GAAQgB,EAAAA,EAAAA,GAAO,MAAK,CAAAE,OAAA,YAAZF,CAAa,cACnBN,GAAKA,EAAEC,MAAMS,eAAa,WAC9BV,GAAKA,EAAEC,MAAMU,cAAY,KAChCX,GAAKA,EAAEC,MAAMW,kBAAgB,qBAI3BzB,GAAgBmB,EAAAA,EAAAA,GAAO,MAAK,CAAAE,OAAA,YAAZF,CAAa,CAAAO,KAAA,UAAAC,OAAA,iFAOtBpB,GAAeY,EAAAA,EAAAA,GAAO,MAAK,CAAAE,OAAA,YAAZF,CAAa,CAAAO,KAAA,SAAAC,OAAA,wEAO5BnB,GAAQW,EAAAA,EAAAA,GAAO,OAAM,CAAAE,OAAA,YAAbF,CAAc,qDAIxBN,GAAKA,EAAEC,MAAMU,cAAY,wBAMvBd,GAAQS,EAAAA,EAAAA,GAAO,MAAK,CAAAE,OAAA,YAAZF,CAAa,SACvBP,EAAa,iBACPU,EAAAA,EAAAA,GAAM,GAAE,mCAKzB,G","sources":["webpack:///./app/components/scoreCard.tsx"],"sourcesContent":["import {Theme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Panel from 'sentry/components/panels/panel';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {space} from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\n\nexport type ScoreCardProps = {\n  title: React.ReactNode;\n  className?: string;\n  help?: React.ReactNode;\n  renderOpenButton?: () => React.ReactNode;\n  score?: React.ReactNode;\n  trend?: React.ReactNode;\n  trendStatus?: 'good' | 'bad';\n};\n\nfunction ScoreCard({\n  title,\n  score,\n  help,\n  trend,\n  trendStatus,\n  className,\n  renderOpenButton,\n}: ScoreCardProps) {\n  return (\n    <ScorePanel className={className}>\n      <HeaderWrapper>\n        <HeaderTitle>\n          <Title>{title}</Title>\n          {help && <QuestionTooltip title={help} size=\"sm\" position=\"top\" />}\n        </HeaderTitle>\n        {renderOpenButton?.()}\n      </HeaderWrapper>\n\n      <ScoreWrapper>\n        <Score>{score ?? '\\u2014'}</Score>\n        {defined(trend) && (\n          <Trend trendStatus={trendStatus}>\n            <TextOverflow>{trend}</TextOverflow>\n          </Trend>\n        )}\n      </ScoreWrapper>\n    </ScorePanel>\n  );\n}\n\nfunction getTrendColor(p: TrendProps & {theme: Theme}) {\n  switch (p.trendStatus) {\n    case 'good':\n      return p.theme.successText;\n    case 'bad':\n      return p.theme.errorText;\n    default:\n      return p.theme.subText;\n  }\n}\n\nexport const ScorePanel = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: ${space(2)} ${space(3)};\n  min-height: 96px;\n`;\n\nexport const HeaderTitle = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: center;\n  width: fit-content;\n`;\n\nexport const Title = styled('div')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  color: ${p => p.theme.headingColor};\n  ${p => p.theme.overflowEllipsis};\n  font-weight: 600;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const ScoreWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: baseline;\n  max-width: 100%;\n`;\n\nexport const Score = styled('span')`\n  flex-shrink: 1;\n  font-size: 32px;\n  line-height: 1;\n  color: ${p => p.theme.headingColor};\n  white-space: nowrap;\n`;\n\ntype TrendProps = {trendStatus: ScoreCardProps['trendStatus']};\n\nexport const Trend = styled('div')<TrendProps>`\n  color: ${getTrendColor};\n  margin-left: ${space(1)};\n  line-height: 1;\n  overflow: hidden;\n`;\n\nexport default ScoreCard;\n"],"names":["ScoreCard","_ref","title","score","help","trend","trendStatus","className","renderOpenButton","_jsxs","ScorePanel","children","HeaderWrapper","HeaderTitle","_jsx","Title","QuestionTooltip","size","position","ScoreWrapper","Score","defined","Trend","TextOverflow","getTrendColor","p","theme","successText","errorText","subText","displayName","_styled","Panel","target","space","fontSizeLarge","headingColor","overflowEllipsis","name","styles"],"sourceRoot":""}