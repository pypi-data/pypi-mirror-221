{"version":3,"file":"chunks/app_components_forms_jsonForm_tsx-app_data_forms_accountEmails_tsx-app_views_deprecatedAsyncV-a86373.xxxxxxxxxxxxxxxxxxxx.js","mappings":"quBAqCA,MAAMA,UAAiBC,EAAAA,UAAwBC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,aAC9B,CAEbC,YAAaC,KAAKC,MAAMC,UAAUC,MACnC,CAEDC,oBACEJ,KAAKK,cACP,CAEAC,mBAAmBC,GACjB,GAAIP,KAAKC,MAAMC,UAAYF,KAAKC,MAAMC,SAASC,OAASI,EAAUL,SAASC,KAAM,CAC/E,MAAMA,EAAOH,KAAKC,MAAMC,SAASC,KACjCH,KAAKK,aAAaF,GAClBH,KAAKQ,SAAS,CAACT,YAAaI,GAC9B,CACF,CAEAE,aAAaI,GAEX,MAAMN,EAAOM,GAAUT,KAAKC,MAAMC,UAAUC,KAE5C,GAAKA,EAOL,IACEO,KAAgBC,EAAAA,EAAAA,GAAsBC,mBAAmBT,IAAQ,CAC/DU,MAAO,SACPC,QAAS,KAEb,CAAE,MAAOC,GACPC,EAAAA,GAAwBD,EAC1B,CACF,CAEAE,kBAAkBC,GAChB,MAAMC,EAAwBD,EAAOE,QACnCC,GAA0B,mBAAVA,IAAwBC,EAAAA,EAAAA,IAAQD,GAAOE,WAGzD,GAAIL,EAAOM,SAAWL,EAAsBK,OAAQ,CAClD,MAAM,qBAACC,KAAyBxB,GAASD,KAAKC,MAS9C,OAP2BkB,EAAsBO,OAAML,GACxB,mBAAlBA,EAAME,SACPF,EAAME,QAAQ,IAAItB,KAAUwB,KAE9BJ,EAAME,SAIlB,CAEA,OAAO,CACT,CAEAI,WAAUC,GAiBP,IAjBQ,OACTV,EAAM,eACNW,EAAc,MACdC,GAcDF,EAGC,OAF0B5B,KAAKiB,kBAAkBC,IAI9CW,GAAgBE,cAChBF,GAAgBG,cAKZC,EAAAA,EAAAA,IAACC,EAAAA,EAAS,CAACJ,MAAOA,EAAOZ,OAAQA,KAAYW,IAH3C,IAIX,CAEAM,SACE,MAAM,OACJC,EAAM,YACNC,EAAW,mBACXC,EAAkB,OAClBpB,EAAM,MACNY,EAAK,MACLS,EAAK,SACLC,EAAQ,SACRC,EAAQ,qBACRhB,EAAoB,aACpBM,EAAY,aACZC,EACA9B,SAAUwC,EACVC,OAAQC,EACRC,OAAQC,EACRC,OAAQC,KACLC,GACDjD,KAAKC,MAEH4B,EAAiB,CACrBO,SACAI,WACAC,WACAhB,uBACAM,eACAC,eACAjC,YAAaC,KAAKkD,MAAMnD,YACxBsC,cACAC,sBAGF,OACEa,EAAAA,EAAAA,IAAA,UAASF,EAAUG,SAAA,MACC,IAAVb,GACNA,EAAMc,KAAI,CAACC,EAAWC,KACpBtB,EAAAA,EAAAA,IAACuB,EAAAA,SAAQ,CAAAJ,SAAUpD,KAAK2B,WAAW,CAACE,oBAAmByB,KAAxCC,UAED,IAAVhB,QACY,IAAXrB,GACPlB,KAAK2B,WAAW,CAACT,SAAQW,iBAAgBC,YAGjD,EAtIIpC,EAAQ+D,YAAA,WAyId,SAAeC,EAAAA,EAAAA,GAAiBhE,E,uHC1KzB,MAAMiE,EAAQ,4BAsBrB,EApBqC,CACnC,CAEE7B,OAAO8B,EAAAA,EAAAA,GAAE,wBACT1C,OAAQ,CACN,CACE2C,KAAM,QACNC,KAAM,SAGNC,OAAOH,EAAAA,EAAAA,GAAE,oBACTI,aAAaJ,EAAAA,EAAAA,GAAE,8BACfK,MAAML,EAAAA,EAAAA,GAAE,mDACRM,YAAY,EACZC,aAAaP,EAAAA,EAAAA,GAAE,kD,4QCPR,MAAMQ,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAnC,SACE,OACEF,EAAAA,EAAAA,IAACsC,EAAAA,EAAmB,CAACzC,MAAO9B,KAAKsE,WAAWlB,SACzCpD,KAAKwE,mBAGZ,EAdmBJ,EAAmBX,YAAA,qB","sources":["webpack:///./app/components/forms/jsonForm.tsx","webpack:///./app/data/forms/accountEmails.tsx","webpack:///./app/views/deprecatedAsyncView.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'sentry/utils';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  additionalFieldProps?: {[key: string]: any};\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.hash !== prevProps.location.hash) {\n      const hash = this.props.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      initiallyCollapsed,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      params: _params,\n      router: _router,\n      routes: _routes,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n      initiallyCollapsed,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <Fragment key={i}>{this.renderForm({formPanelProps, ...formGroup})}</Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withSentryRouter(JsonForm);\n","import {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: t('Add Secondary Emails'),\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: t('Additional Email'),\n        placeholder: t('e.g. secondary@example.com'),\n        help: t('Designate an alternative email for this account'),\n        saveOnBlur: false,\n        saveMessage: t('Add this new email address to your account?'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n"],"names":["JsonForm","Component","constructor","arguments","_defineProperty","highlighted","this","props","location","hash","componentDidMount","scrollToHash","componentDidUpdate","prevProps","setState","toHash","scrollToElement","sanitizeQuerySelector","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fields","fieldsWithVisibleProp","filter","field","defined","visible","length","additionalFieldProps","every","renderForm","_ref","formPanelProps","title","renderFooter","renderHeader","_jsx","FormPanel","render","access","collapsible","initiallyCollapsed","forms","disabled","features","_location","params","_params","router","_router","routes","_routes","otherProps","state","_jsxs","children","map","formGroup","i","Fragment","displayName","withSentryRouter","route","t","name","type","label","placeholder","help","saveOnBlur","saveMessage","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","SentryDocumentTitle","renderComponent"],"sourceRoot":""}