{"version":3,"file":"chunks/app_views_app_root_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"yZAoCA,QAjBA,WACE,MAAM,iBAACA,IAAoBC,EAAAA,EAAAA,GAAeC,EAAAA,GAa1C,OAXAC,EAAAA,EAAAA,YAAU,KACR,IAAKH,EACH,OAGF,MAAMI,EAAUJ,EACVK,GAAMC,EAAAA,EAAAA,GAAoBC,EAAAA,GAAmB,CAACH,YAEpDI,EAAAA,eAAeC,QAAQJ,EAAI,GAC1B,CAACL,IAEG,IACT,C","sources":["webpack:///./app/views/app/root.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {DEFAULT_APP_ROUTE} from 'sentry/constants';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\n\n/**\n * This view is used when a user lands on the route `/` which historically\n * is a server-rendered route which redirects the user to their last selected organization\n *\n * However, this does not work when in the experimental SPA mode (e.g. developing against a remote API,\n * or a deploy preview), so we must replicate the functionality and redirect\n * the user to the proper organization.\n *\n * TODO: There might be an edge case where user does not have `lastOrganization` set,\n * in which case we should load their list of organizations and make a decision\n */\nfunction AppRoot() {\n  const {lastOrganization} = useLegacyStore(ConfigStore);\n\n  useEffect(() => {\n    if (!lastOrganization) {\n      return;\n    }\n\n    const orgSlug = lastOrganization;\n    const url = replaceRouterParams(DEFAULT_APP_ROUTE, {orgSlug});\n\n    browserHistory.replace(url);\n  }, [lastOrganization]);\n\n  return null;\n}\n\nexport default AppRoot;\n"],"names":["lastOrganization","useLegacyStore","ConfigStore","useEffect","orgSlug","url","replaceRouterParams","DEFAULT_APP_ROUTE","browserHistory","replace"],"sourceRoot":""}