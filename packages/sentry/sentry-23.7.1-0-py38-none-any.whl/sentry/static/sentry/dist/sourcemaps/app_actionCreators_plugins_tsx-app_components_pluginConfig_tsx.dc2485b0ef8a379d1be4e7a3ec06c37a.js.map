{"version":3,"file":"chunks/app_actionCreators_plugins_tsx-app_components_pluginConfig_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/components/pluginConfig.tsx","webpack:///./app/stores/pluginsStore.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client, RequestOptions} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Plugin} from 'sentry/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginsStore.onUpdate(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginsStore.onUpdateSuccess(pluginId);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginsStore.onUpdateError(pluginId, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginsStore.onFetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, resp]) => {\n      PluginsStore.onFetchAllSuccess(data, {\n        pageLinks: resp?.getResponseHeader('Link') ?? undefined,\n      });\n\n      return data;\n    })\n    .catch(err => {\n      PluginsStore.onFetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport {Button} from 'sentry/components/button';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelAlert from 'sentry/components/panels/panelAlert';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport {t} from 'sentry/locale';\nimport plugins from 'sentry/plugins';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  data: Plugin;\n  onDisablePlugin: (data: Plugin) => void;\n  organization: Organization;\n  project: Project;\n  enabled?: boolean;\n};\n\ntype State = {\n  testResults: string;\n  loading?: boolean;\n};\n\nclass PluginConfig extends Component<Props, State> {\n  static defaultProps = {\n    onDisablePlugin: () => {},\n  };\n\n  state: State = {\n    loading: !plugins.isLoaded(this.props.data),\n    testResults: '',\n  };\n\n  componentDidMount() {\n    this.loadPlugin(this.props.data);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    this.loadPlugin(nextProps.data);\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return !isEqual(nextState, this.state) || !isEqual(nextProps.data, this.props.data);\n  }\n\n  loadPlugin(data: Plugin) {\n    this.setState(\n      {\n        loading: true,\n      },\n      () => {\n        plugins.load(data, () => {\n          this.setState({loading: false});\n        });\n      }\n    );\n  }\n\n  getPluginEndpoint() {\n    const {organization, project, data} = this.props;\n    return `/projects/${organization.slug}/${project.slug}/plugins/${data.id}/`;\n  }\n\n  handleDisablePlugin = () => {\n    this.props.onDisablePlugin(this.props.data);\n  };\n\n  handleTestPlugin = async () => {\n    this.setState({testResults: ''});\n    addLoadingMessage(t('Sending test...'));\n\n    try {\n      const data = await this.props.api.requestPromise(this.getPluginEndpoint(), {\n        method: 'POST',\n        data: {\n          test: true,\n        },\n      });\n\n      this.setState({testResults: JSON.stringify(data.detail)});\n      addSuccessMessage(t('Test Complete!'));\n    } catch (_err) {\n      addErrorMessage(\n        t('An unexpected error occurred while testing your plugin. Please try again.')\n      );\n    }\n  };\n\n  createMarkup() {\n    return {__html: this.props.data.doc};\n  }\n\n  render() {\n    const {data, organization, project} = this.props;\n    // If passed via props, use that value instead of from `data`\n    const enabled =\n      typeof this.props.enabled !== 'undefined' ? this.props.enabled : data.enabled;\n    const hasWriteAccess = hasEveryAccess(['project:write'], {organization, project});\n\n    return (\n      <Panel\n        className={`plugin-config ref-plugin-config-${data.id}`}\n        data-test-id=\"plugin-config\"\n      >\n        <PanelHeader hasButtons>\n          <PluginName>\n            <StyledPluginIcon pluginId={data.id} />\n            <span>{data.name}</span>\n          </PluginName>\n\n          {data.canDisable && enabled && (\n            <Actions>\n              {data.isTestable && (\n                <TestPluginButton onClick={this.handleTestPlugin} size=\"sm\">\n                  {t('Test Plugin')}\n                </TestPluginButton>\n              )}\n              <Button\n                size=\"sm\"\n                onClick={this.handleDisablePlugin}\n                disabled={!hasWriteAccess}\n              >\n                {t('Disable')}\n              </Button>\n            </Actions>\n          )}\n        </PanelHeader>\n\n        {data.status === 'beta' && (\n          <PanelAlert type=\"warning\">\n            {t('This plugin is considered beta and may change in the future.')}\n          </PanelAlert>\n        )}\n\n        {this.state.testResults !== '' && (\n          <PanelAlert type=\"info\">\n            <strong>Test Results</strong>\n            <div>{this.state.testResults}</div>\n          </PanelAlert>\n        )}\n\n        <StyledPanelBody>\n          <div dangerouslySetInnerHTML={this.createMarkup()} />\n          {this.state.loading ? (\n            <LoadingIndicator />\n          ) : (\n            plugins.get(data).renderSettings({\n              organization: this.props.organization,\n              project: this.props.project,\n            })\n          )}\n        </StyledPanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport {PluginConfig};\nexport default withApi(PluginConfig);\n\nconst PluginName = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst Actions = styled('div')`\n  display: flex;\n`;\nconst TestPluginButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  padding: ${space(2)};\n  padding-bottom: 0;\n`;\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport {Plugin} from 'sentry/types';\n\ninterface InternalDefinition {\n  plugins: Map<string, Plugin> | null;\n  state: {\n    error: Error | null;\n    loading: boolean;\n    pageLinks: string | null;\n    plugins: Plugin[];\n  };\n  updating: Map<string, Plugin>;\n}\n\ninterface PluginStoreDefinition extends StoreDefinition, InternalDefinition {\n  getState: () => InternalDefinition['state'];\n  onFetchAll: (options?: {resetLoading?: boolean}) => void;\n  onFetchAllError: (err) => void;\n\n  onFetchAllSuccess: (data: Plugin[], links: {pageLinks?: string}) => void;\n  onUpdate: (id: string, updateObj: Partial<Plugin>) => void;\n  onUpdateError: (id: string, err: Error) => void;\n  onUpdateSuccess: (id: string) => void;\n  reset: () => void;\n}\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst storeConfig: PluginStoreDefinition = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    this.reset();\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data, {pageLinks}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\nconst PluginStore = createStore(storeConfig);\nexport default PluginStore;\n"],"names":["activeFetch","api","Client","doUpdate","_ref","orgId","projectId","pluginId","update","params","PluginsStore","onUpdate","request","requestPromise","then","onUpdateSuccess","catch","resp","err","responseJSON","detail","Error","onUpdateError","fetchPlugins","_ref2","options","path","onFetchAll","method","includeAllArgs","_ref3","data","_","onFetchAllSuccess","pageLinks","getResponseHeader","undefined","onFetchAllError","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","getPadding","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","PluginConfig","Component","constructor","arguments","_defineProperty","loading","plugins","isLoaded","this","props","testResults","onDisablePlugin","async","setState","getPluginEndpoint","test","JSON","stringify","_err","componentDidMount","loadPlugin","UNSAFE_componentWillReceiveProps","nextProps","shouldComponentUpdate","nextState","isEqual","state","load","organization","project","slug","id","createMarkup","__html","doc","render","hasWriteAccess","hasEveryAccess","_jsxs","Panel","className","children","PanelHeader","PluginName","_jsx","StyledPluginIcon","name","canDisable","Actions","isTestable","TestPluginButton","onClick","handleTestPlugin","size","Button","handleDisablePlugin","disabled","status","PanelAlert","type","StyledPanelBody","dangerouslySetInnerHTML","LoadingIndicator","get","renderSettings","displayName","withApi","styles","PluginIcon","PanelBody","defaultState","error","storeConfig","updating","Map","reset","getInitialState","getState","_plugins","Array","from","values","init","triggerState","trigger","resetLoading","length","map","plugin","updateObj","newPlugin","set","delete","origPlugin","createStore"],"sourceRoot":""}