{"version":3,"file":"chunks/app_views_monitors_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"6/BAyBe,SAASA,IACtB,MAAM,YAACC,IAAeC,EAAAA,EAAAA,MAChB,UAACC,IAAaC,EAAAA,EAAAA,KACdC,GAAeC,EAAAA,EAAAA,KACfC,GAAcC,EAAAA,EAAAA,MAEdC,EAAwB,CAC3B,kBAAiBJ,EAAaK,iBAAiBT,KAChD,CAACU,MAAO,CAACC,OAAQ,CAAC,iBAGd,UACJC,EAAS,QACTC,EACAC,KAAMC,EAAO,QACbC,IACEC,EAAAA,EAAAA,IAAqBT,EAAU,CACjCU,UAAW,EACXC,UAAW,IAoBb,OAAIP,GACKQ,EAAAA,EAAAA,IAACC,EAAAA,EAAgB,IAGtBR,GACKO,EAAAA,EAAAA,IAACE,EAAAA,EAAY,CAACC,QAASP,EAASQ,QAAQ,6BAI/CJ,EAAAA,EAAAA,IAACK,EAAAA,EAAmB,CAACC,MAfjBX,EACM,GAAEA,EAAQY,kBAAkBvB,EAAaK,OAE3C,WAAUL,EAAaK,OAYQmB,UACrCC,EAAAA,EAAAA,IAACC,EAAAA,GAAW,CAAAF,SAAA,EACVR,EAAAA,EAAAA,IAACU,EAAAA,GAAa,CAAAF,UACZC,EAAAA,EAAAA,IAACC,EAAAA,GAAoB,CAAAF,SAAA,EACnBR,EAAAA,EAAAA,IAACW,EAAAA,EAAW,CACVC,OAAQ,CACN,CACEC,OAAOC,EAAAA,EAAAA,GAAE,SACTC,IAAIC,EAAAA,EAAAA,GAAc,kBAAiBhC,EAAaK,gBAElD,CACEwB,OACEJ,EAAAA,EAAAA,IAACQ,EAAiB,CAAAT,SAAA,EAChBR,EAAAA,EAAAA,IAACkB,EAAAA,EAAO,CACNC,aAAW,EACXC,QAASzB,EAAQyB,QACjBC,WAAY,GACZC,UAAQ,EACRC,YAAa,CAACC,YAAY,EAAMC,QAAS9B,EAAQyB,QAAQ/B,QAE1DM,EAAQY,QAGbQ,IAAIC,EAAAA,EAAAA,GACD,kBAAiBhC,EAAaK,cAAcM,EAAQN,UAGzD,CACEwB,OAAOC,EAAAA,EAAAA,GAAE,aAIfd,EAAAA,EAAAA,IAACU,EAAAA,GAAY,CAAAF,UAAEM,EAAAA,EAAAA,GAAE,wBAGrBd,EAAAA,EAAAA,IAACU,EAAAA,GAAW,CAAAF,UACVR,EAAAA,EAAAA,IAACU,EAAAA,GAAW,CAACgB,WAAS,EAAAlB,UACpBR,EAAAA,EAAAA,IAAC2B,EAAAA,EAAW,CACVhC,QAASA,EACTiC,UAAU,MACVC,YAAc,kBAAiB7C,EAAaK,iBAAiBM,EAAQN,QACrEyC,gBAnEZ,SAAyBpC,IACvBqC,EAAAA,EAAAA,IAAgB7C,EAAaE,EAAUM,GACvCsC,EAAAA,eAAeC,MACbjB,EAAAA,EAAAA,GAAa,CACXkB,SAAW,kBAAiBlD,EAAaK,cAAcK,EAAKL,QAC5DC,MAAO,CAAC6C,YAAarD,EAAUsD,gBAGrC,YAkEF,CA/FwBzD,EAAW0D,YAAA,cAiGnC,MAAMpB,GAAoBqB,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,qBAE9BE,EAAAA,EAAAA,GAAM,GAAE,uB","sources":["webpack:///./app/views/monitors/edit.tsx"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport IdBadge from 'sentry/components/idBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {\n  ApiQueryKey,\n  setApiQueryData,\n  useApiQuery,\n  useQueryClient,\n} from 'sentry/utils/queryClient';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {useParams} from 'sentry/utils/useParams';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nimport MonitorForm from './components/monitorForm';\nimport {Monitor} from './types';\n\nexport default function EditMonitor() {\n  const {monitorSlug} = useParams();\n  const {selection} = usePageFilters();\n  const organization = useOrganization();\n  const queryClient = useQueryClient();\n\n  const queryKey: ApiQueryKey = [\n    `/organizations/${organization.slug}/monitors/${monitorSlug}/`,\n    {query: {expand: ['alertRule']}},\n  ];\n\n  const {\n    isLoading,\n    isError,\n    data: monitor,\n    refetch,\n  } = useApiQuery<Monitor>(queryKey, {\n    cacheTime: 0,\n    staleTime: 0,\n  });\n\n  function onSubmitSuccess(data: Monitor) {\n    setApiQueryData(queryClient, queryKey, data);\n    browserHistory.push(\n      normalizeUrl({\n        pathname: `/organizations/${organization.slug}/crons/${data.slug}/`,\n        query: {environment: selection.environments},\n      })\n    );\n  }\n\n  function getTitle() {\n    if (monitor) {\n      return `${monitor.name} - Crons - ${organization.slug}`;\n    }\n    return `Crons - ${organization.slug}`;\n  }\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  if (isError) {\n    return <LoadingError onRetry={refetch} message=\"Failed to load monitor.\" />;\n  }\n\n  return (\n    <SentryDocumentTitle title={getTitle()}>\n      <Layout.Page>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  label: t('Crons'),\n                  to: normalizeUrl(`/organizations/${organization.slug}/crons/`),\n                },\n                {\n                  label: (\n                    <MonitorBreadcrumb>\n                      <IdBadge\n                        disableLink\n                        project={monitor.project}\n                        avatarSize={16}\n                        hideName\n                        avatarProps={{hasTooltip: true, tooltip: monitor.project.slug}}\n                      />\n                      {monitor.name}\n                    </MonitorBreadcrumb>\n                  ),\n                  to: normalizeUrl(\n                    `/organizations/${organization.slug}/crons/${monitor.slug}/`\n                  ),\n                },\n                {\n                  label: t('Edit'),\n                },\n              ]}\n            />\n            <Layout.Title>{t('Edit Monitor')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <MonitorForm\n              monitor={monitor}\n              apiMethod=\"PUT\"\n              apiEndpoint={`/organizations/${organization.slug}/monitors/${monitor.slug}/`}\n              onSubmitSuccess={onSubmitSuccess}\n            />\n          </Layout.Main>\n        </Layout.Body>\n      </Layout.Page>\n    </SentryDocumentTitle>\n  );\n}\n\nconst MonitorBreadcrumb = styled('div')`\n  display: flex;\n  gap: ${space(1)};\n  align-items: center;\n`;\n"],"names":["EditMonitor","monitorSlug","useParams","selection","usePageFilters","organization","useOrganization","queryClient","useQueryClient","queryKey","slug","query","expand","isLoading","isError","data","monitor","refetch","useApiQuery","cacheTime","staleTime","_jsx","LoadingIndicator","LoadingError","onRetry","message","SentryDocumentTitle","title","name","children","_jsxs","Layout","Breadcrumbs","crumbs","label","t","to","normalizeUrl","MonitorBreadcrumb","IdBadge","disableLink","project","avatarSize","hideName","avatarProps","hasTooltip","tooltip","fullWidth","MonitorForm","apiMethod","apiEndpoint","onSubmitSuccess","setApiQueryData","browserHistory","push","pathname","environment","environments","displayName","_styled","target","space"],"sourceRoot":""}