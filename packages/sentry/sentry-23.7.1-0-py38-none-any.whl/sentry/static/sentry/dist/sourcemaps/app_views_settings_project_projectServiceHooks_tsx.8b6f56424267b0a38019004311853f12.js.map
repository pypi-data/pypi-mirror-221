{"version":3,"file":"chunks/app_views_settings_project_projectServiceHooks_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/components/switchButton.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/project/projectServiceHooks.tsx"],"sourcesContent":["import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import {forwardRef} from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  toggle: React.MouseEventHandler<HTMLButtonElement>;\n  className?: string;\n  /**\n   * Toggle color is always active.\n   */\n  forceActiveColor?: boolean;\n  forwardedRef?: React.Ref<HTMLButtonElement>;\n  id?: string;\n  isActive?: boolean;\n  isDisabled?: boolean;\n  isLoading?: boolean;\n  name?: string;\n  size?: 'sm' | 'lg';\n};\n\nfunction Switch({\n  forwardedRef,\n  size = 'sm',\n  isActive,\n  forceActiveColor,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  name,\n  className,\n  ...props\n}: Props) {\n  return (\n    <SwitchButton\n      ref={forwardedRef}\n      id={id}\n      name={name}\n      type=\"button\"\n      className={className}\n      onClick={isDisabled ? undefined : toggle}\n      role=\"checkbox\"\n      aria-checked={isActive}\n      isLoading={isLoading}\n      disabled={isDisabled}\n      isActive={isActive}\n      size={size}\n      data-test-id=\"switch\"\n      {...props}\n    >\n      <Toggle\n        isDisabled={isDisabled}\n        isActive={isActive}\n        forceActiveColor={forceActiveColor}\n        size={size}\n      />\n    </SwitchButton>\n  );\n}\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 4 : 8);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 1 : 3);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) * 0.875 : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => p.theme.border};\n  position: relative;\n  box-shadow: inset ${p => p.theme.dropShadowMedium};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 1.875}px;\n  border-radius: ${getSize}px;\n  transition: border 0.1s, box-shadow 0.1s;\n\n  &[disabled] {\n    cursor: not-allowed;\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    border-color: ${p => p.theme.focusBorder};\n    box-shadow: ${p => p.theme.focusBorder} 0 0 0 1px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p =>\n    p.isActive || p.forceActiveColor ? p.theme.active : p.theme.border};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\n\nexport default forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <Switch {...props} forwardedRef={ref} />\n));\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Link from 'sentry/components/links/link';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelAlert from 'sentry/components/panels/panelAlert';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport Switch from 'sentry/components/switchButton';\nimport Truncate from 'sentry/components/truncate';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, ServiceHook} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype RowProps = {\n  hook: ServiceHook;\n  onToggleActive: () => void;\n  orgId: string;\n  projectId: string;\n};\n\nfunction ServiceHookRow({orgId, projectId, hook, onToggleActive}: RowProps) {\n  return (\n    <FieldGroup\n      label={\n        <Link\n          data-test-id=\"project-service-hook\"\n          to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}\n        >\n          <Truncate value={hook.url} />\n        </Link>\n      }\n      help={\n        <small>\n          {hook.events && hook.events.length !== 0 ? (\n            hook.events.join(', ')\n          ) : (\n            <em>{t('no events configured')}</em>\n          )}\n        </small>\n      }\n    >\n      <Switch isActive={hook.status === 'active'} size=\"lg\" toggle={onToggleActive} />\n    </FieldGroup>\n  );\n}\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  hookList: null | ServiceHook[];\n} & DeprecatedAsyncView['state'];\n\nclass ProjectServiceHooks extends DeprecatedAsyncView<Props, State> {\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n    const projectId = params.projectId;\n    return [['hookList', `/projects/${organization.slug}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = (hook: ServiceHook) => {\n    const {organization, params} = this.props;\n    const {hookList} = this.state;\n    if (!hookList) {\n      return;\n    }\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.api.request(\n      `/projects/${organization.slug}/${params.projectId}/hooks/${hook.id}/`,\n      {\n        method: 'PUT',\n        data: {\n          isActive: hook.status !== 'active',\n        },\n        success: data => {\n          clearIndicators();\n          this.setState({\n            hookList: hookList.map(h => {\n              if (h.id === data.id) {\n                return {\n                  ...h,\n                  ...data,\n                };\n              }\n              return h;\n            }),\n          });\n        },\n        error: () => {\n          addErrorMessage(t('Unable to remove application. Please try again.'));\n        },\n      }\n    );\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {organization, params} = this.props;\n\n    return (\n      <Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" showIcon>\n            {t(\n              'Service Hooks are an early adopter preview feature and will change in the future.'\n            )}\n          </PanelAlert>\n          {this.state.hookList?.map(hook => (\n            <ServiceHookRow\n              key={hook.id}\n              orgId={organization.slug}\n              projectId={params.projectId}\n              hook={hook}\n              onToggleActive={this.onToggleActive.bind(this, hook)}\n            />\n          ))}\n        </PanelBody>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {hookList} = this.state;\n    const body =\n      hookList && hookList.length > 0 ? this.renderResults() : this.renderEmpty();\n\n    const {organization, params} = this.props;\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            organization.access.includes('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${organization.slug}/projects/${params.projectId}/hooks/new/`}\n                size=\"sm\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(ProjectServiceHooks);\n"],"names":["getPadding","_ref","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","Switch","forwardedRef","size","isActive","forceActiveColor","isLoading","isDisabled","toggle","id","name","className","props","_jsx","SwitchButton","ref","type","onClick","undefined","role","disabled","children","Toggle","displayName","getSize","getToggleSize","getToggleTop","getTranslateX","dropShadowMedium","focusBorder","active","forwardRef","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","ServiceHookRow","orgId","projectId","hook","onToggleActive","FieldGroup","label","Link","to","Truncate","value","url","help","events","length","join","t","status","ProjectServiceHooks","constructor","arguments","_defineProperty","organization","params","hookList","state","addLoadingMessage","api","request","slug","method","data","success","clearIndicators","setState","map","h","error","addErrorMessage","getEndpoints","renderEmpty","EmptyMessage","renderResults","_jsxs","Fragment","PanelHeader","PanelBody","PanelAlert","showIcon","bind","renderBody","body","SettingsPageHeader","action","access","includes","Button","priority","icon","IconAdd","isCircled","Panel","withOrganization"],"sourceRoot":""}