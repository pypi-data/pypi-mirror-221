{"version":3,"file":"chunks/app_views_starfish_views_webServiceView_spanGroupBreakdownContainer_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"ucAaO,SAASA,EAAmBC,GAYhC,IAZiC,UAClCC,EAAS,QACTC,EAAO,SACPC,EAAQ,YACRC,EAAW,aACXC,GAAe,GAOhBL,EACC,MAAMM,GAAWC,EAAAA,EAAAA,KACXC,GAAeC,EAAAA,EAAAA,KACfC,GAASC,EAAAA,EAAAA,IAAoE,CACjFC,MAAO,eACPX,YACAK,WACAO,QAASL,EAAaM,KACtBC,kBAAmBA,KAAA,IACdd,EAAUe,oBAAoBV,GACjCW,MAAOhB,EAAUgB,MACjBC,UAAWjB,EAAUiB,UACrBb,cAA+B,IAAjBA,EAAwB,EAAI,EAC1Cc,QAAS,EACTC,QAASnB,EAAUoB,QAAQ,IAAKC,EAAAA,EAAAA,IAAWrB,EAAUoB,QAAQ,SAAME,EACnEC,SAAUvB,EAAUuB,WAEtBC,QAAS,CACPvB,UACAwB,sBAAsB,EACtBC,MAAOC,EAAAA,EACPC,WAAYC,EAAAA,EACZC,UAAWC,KAEb7B,aAGF,MAAO,IAAIO,EAAQuB,KAAMvB,EAAOwB,UAAY9B,EAAcM,EAAOuB,KACnE,C,82CChCA,MAAM,YAACE,GAAeC,EAAAA,kBAiBf,SAASC,EAAkBrC,GAQxB,IAPRsC,cAAeL,EAAI,YACnBM,EAAW,oBACXC,EAAmB,QACnBC,EAAO,QACPhB,EAAO,gBACPiB,EAAe,oBACfC,GACM3C,EACN,MAAMQ,GAAeC,EAAAA,EAAAA,KACfmC,EAAyBpC,EAAaqC,SAASC,SACnD,+BAGIC,EAAmC,GAEzC,IAAK,IAAIC,EAAQ,EAAGA,EAAQf,EAAKgB,OAAQD,IAAS,CAChD,MAAME,EAASjB,EAAKe,GACpBE,EAAOC,SAAW,CAChBC,UAAU,EACVC,MAAO,UAETH,EAAOI,KAAO,CACZC,UAAW,CAACC,QAAS,KAEvBN,EAAOO,kBAAmB,EAC1BV,EAAcW,KAAKR,EACrB,CAEA,MAAMS,EAAoBC,IAAUb,GAC9Bc,EAAgB5B,EAAK,IAAIA,MAAMgB,QAAU,EAC/C,IAAK,IAAIa,EAAI,EAAGA,EAAID,EAAeC,IAAK,CACtC,MAAMC,EAAmB9B,EAAK+B,QAAO,CAACC,EAAKC,IAAUD,EAAMC,EAAMjC,KAAK6B,GAAGK,OAAO,GAChFR,EAAkBS,SAAQC,IACxB,MAAMC,EAAQ,IAAID,EAAQpC,KAAK6B,IAC/BQ,EAAMH,MAA6B,IAArBJ,EAAyB,EAAIO,EAAMH,MAAQJ,EACzDM,EAAQpC,KAAK6B,GAAKQ,CAAK,GAE3B,CAEA,MAQMC,EAA0BC,QAAQjC,GAuBxC,OACEkC,EAAAA,EAAAA,IAACC,EAAgB,CAAAC,UACfC,EAAAA,EAAAA,IAACC,EAAY,CAAAF,SAAA,EACXC,EAAAA,EAAAA,IAACE,EAAM,CAAAH,SAAA,EACLF,EAAAA,EAAAA,IAACM,EAAU,CAAAJ,SACRJ,GACGS,EAAAA,EAAAA,GAAE,uBACFA,EAAAA,EAAAA,GAAE,0BAEPpC,IACC6B,EAAAA,EAAAA,IAACQ,EAAAA,EAAa,CACZxD,QAASA,EACT0C,MAAOzB,EACPwC,SA5CUC,IACpBxC,EAAoBwC,EAAOhB,QAC3BiB,EAAAA,EAAAA,IAAe,qDAAsD,CACnE5E,eACA6E,QAASF,EAAOhB,OAChB,QA2CEM,EAAAA,EAAAA,IAACa,EAAAA,GAAwB,CAACC,GAAG,yBAAyBC,QAASvD,EAAKgB,OAAS,EAAE0B,UAC7EF,EAAAA,EAAAA,IAACgB,EAAAA,GAAK,CACJC,OAAQ,IACRC,YAAU,EACV1D,KACES,IAAoBkD,EAAgBC,WAAalC,EAAoB1B,EAEvE6D,QAASpD,IAAoBkD,EAAgBC,WAAa,OAAItE,EAC9DwE,aACErD,IAAoBkD,EAAgBC,WAAa,SAAOtE,EAE1DkB,QAASA,EACTuD,QAASxD,EACTyD,KAAK,EACLC,QApDwCC,IAChD,IAAIC,EACJ,MAAMC,EAA0D,CAAC,EACxC,OAArBF,EAAMG,WACRF,EAAa,sBACiB,UAArBD,EAAMG,YACfD,EAAqBlE,GAAe,QACpCkE,EAAqB,kBAAoBpE,EACtCsE,QAAOC,GAAsB,UAAjBA,EAAEF,aACdG,KAAID,GAAKA,EAAEF,eAEdD,EAAqBlE,GAAe,QACpCkE,EAAqB,iBAAmBF,EAAMG,YAG3CF,IACHA,EAAa,oBAAmBM,EAAAA,UAAaL,MAE/CM,EAAAA,eAAejD,KAAK0C,EAAU,EAmCtBQ,KAAM,CACJC,KAAM,IACNC,MAAO,IACPC,IAAK,OACLC,OAAQ,KAEVC,iBAAkB,EAClBC,SAAO,EACPC,sBACEzE,IAAoBkD,EAAgBC,WAAa,aAAe,WAElEuB,wBAAyB,CACvBC,cAAeC,GACA,OAATA,EACK,WAEFA,EAETC,eAAgBpD,GACdzB,IAAoBkD,EAAgBC,YAChC2B,EAAAA,EAAAA,IAAyCrD,EAAO,eAChDqD,EAAAA,EAAAA,IAAyCrD,EAAO,aAExDsD,sBAAuBtB,KACrBf,EAAAA,EAAAA,IAAe,oDAAqD,CAClE5E,eACAkH,SAAUC,OAAOC,KAAKzB,EAAMuB,UAAUnB,QAAOsB,GAAO1B,EAAMuB,SAASG,KACnEC,QAAS3B,EAAMmB,MACf,EAEJS,gBAAkBT,GACH,OAATA,EACK,WAEFA,UAOrB,CAhJgBjF,EAAkB2F,YAAA,qBAkJlC,MAAMnD,GAAeoD,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,cACnBE,EAAAA,EAAAA,GAAM,GAAE,YAIjBpD,GAAakD,EAAAA,EAAAA,GAAO,IAAG,CAAAC,OAAA,aAAVD,EACfG,GAAKA,EAAEC,MAAMC,KAAKC,WAAS,KAGzBzD,GAASmD,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,cACbE,EAAAA,EAAAA,GAAM,GAAE,gHAMJA,EAAAA,EAAAA,GAAM,GAAE,KAGrBzD,GAAmBuD,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,aAAZD,CAAa,iDAGlBE,EAAAA,EAAAA,GAAM,GAAE,MCvLtB,eAACK,GAAkBpG,EAAAA,kBAEnBqG,EAA0B,QACnBC,GAAqB1D,EAAAA,EAAAA,GAAE,UAgB7B,IAAKY,EAML,SAAS+C,EAA2B3I,GAA0C,IAAzC,YAACuC,EAAW,kBAAEqG,GAAyB5I,EACjF,MAAM6I,GAAaC,EAAAA,EAAAA,KACbtI,GAAeC,EAAAA,EAAAA,KACfH,GAAWC,EAAAA,EAAAA,MACX,UAACwI,GAAaF,EACdR,GAAQW,EAAAA,EAAAA,KAERvH,EAA2C,CAC/C,CAACwH,MAAO,cAAe9E,MAAOyB,EAAgBC,YAC9C,CAACoD,MAAO,iBAAkB9E,MAAOyB,EAAgBsD,cACjD,CAACD,MAAO,iBAAkB9E,MAAOyB,EAAgBuD,uBAG5CzG,EAAiB0G,IAAsBC,EAAAA,EAAAA,UAC5CzD,EAAgBC,aAGX5D,KAAMqH,EAAUpH,UAAWqH,IAAqBC,EAAAA,EAAAA,GAAiB,CACtEvJ,UAAWwJ,EACTV,EACC,8BAA6BxG,EAAe,eAAcA,IAAgB,MACzEqG,EAAqB,eAAcA,IAAsB,KAE3D,CAAC,kBAEH/H,QAASL,EAAaM,KACtBX,SAAU,mDACVG,WACAoJ,MAAO,KAGFzH,KAAM0H,EAAgBzH,UAAW0H,IAA2BJ,EAAAA,EAAAA,GAAiB,CAClFvJ,UAAWwJ,EACTV,EACC,8BAA6BxG,EAAe,eAAcA,IAAgB,MACzEqG,EAAqB,eAAcA,IAAsB,KAE3D,IAEF/H,QAASL,EAAaM,KACtBX,SAAU,sCACVG,cAIA4B,UAAW2H,EACX5H,KAAM6H,EAAO,QACbC,IACEhK,EAAAA,EAAAA,GAAoB,CACtBE,UAAW+J,EACTjB,EACC,8BAA6BxG,EAAe,eAAcA,IAAgB,MACzEqG,EAAqB,eAAcA,IAAsB,KAE3D,CAAC,iBACDlG,GACA,GAEFxC,SAAS,EACTC,SAAU,8DACVC,YAAa,CAAC,IAGV6J,EAAcN,GAAgB1H,KAAK,KAAM,OAAMuG,MACjD0B,SAASP,GAAgB1H,KAAK,GAAI,OAAMuG,MAA8B,IACtE,EACE2B,EACJb,GAAUrH,KAAK+B,QACb,CAACC,EAAKI,IAAYJ,EAAMiG,SAAS7F,EAAS,OAAMmE,MAA8B,KAC9E,IACG,EAED4B,EAAaH,EAAcA,EAAcE,EAAgB,EAEzDE,EAA6B,GAEnC,IAAIC,EAAAA,EAAAA,IAAQhB,GAAW,CACrB,IAAK,IAAItG,EAAQ,EAAGA,EAAQsG,EAASrH,KAAKgB,OAAQD,IAAS,CACzD,MAAMuH,EAAUjB,EAASrH,KAAKe,GACxBwH,EAAWD,EAAQ,iBACzBF,EAAgB3G,KAAK,CACnBiG,eAAgBO,SAASK,EAAS,OAAM/B,MAA8B,IACtEiC,MAAO,CACL,gBAA8B,KAAbD,EAAkB9B,EAAqB8B,IAG9D,CAEIJ,EAAa,GAAKN,GAAWrB,KAA2BqB,GAC1DO,EAAgB3G,KAAK,CACnBiG,eAAgBS,EAChBK,MAAO,CACL,gBAAiBhC,IAIzB,CAEA,MAAMiC,EAA+C,CAAC,EAChDC,EAAetC,EAAMuC,OAAOC,gBAAgBR,EAAgBpH,OAAS,IAEvEqH,EAAAA,EAAAA,IAAQR,KACLD,GAAoBQ,EAAgBpH,OAAS,IAChDoH,EAAgBjG,SAAQ,CAACC,EAASrB,KAChC,MAAMwH,EAAWnG,EAAQoG,MAAM,iBACzBxB,EAAqB,KAAbuB,EAAkB9B,EAAqB8B,EACrDE,EAAezB,GAAS,CACtB3C,WAAY2C,EACZhH,KAAM,GACN6I,MAAOH,EAAa3H,GACrB,IAGH2E,OAAOC,KAAKkC,GAAS1F,SAAQyD,IAC3B,MAAMkD,EAA0BjB,IAAUjC,GAE1C6C,EADsB,KAAR7C,EAAaa,EAAqBb,GAC1B5F,KACpB8I,GAAY9I,KAAKwE,KAAIvC,IACZ,CAACoD,KAAiB,IAAXpD,EAAM,GAAWC,MAAOD,EAAM,GAAG,GAAG8G,WAC9C,EAAE,KAKhB,MAAM/I,EAAO0F,OAAOsD,OAAOP,GAE3B,OACEjG,EAAAA,EAAAA,IAACyG,EAAW,CAAAvG,UACVF,EAAAA,EAAAA,IAACpC,EAAkB,CACjB8I,UAAWd,EACXe,oBAAqBnB,EACrBoB,eAAgB9B,EAChBjH,cAAeL,EACf0I,aAAcA,EACdnI,oBAAqBqH,EACrByB,wBAAyB1B,EACzBrH,YAAaA,EACbE,QAASsH,EACTtI,QAASA,EACTiB,gBAAiBA,EACjBC,oBAAqByG,KAI7B,EAlJC,SAJWxD,GAAAA,EAAe,4BAAfA,EAAe,0CAAfA,EAAe,wBAI1B,CAJWA,IAAAA,EAAe,KAMX+C,EAA2BX,YAAA,8BAkJ3C,MAAMkD,GAAcjD,EAAAA,EAAAA,GAAOsD,EAAAA,EAAK,CAAArD,OAAA,YAAZD,CAAa,gBAChBE,EAAAA,EAAAA,GAAM,GAAE,qBAInB6B,EAAeA,CACnBwB,EACAC,EACAC,EACAhJ,EACAiJ,KAEA,MAAM1K,EACJyB,IAAoBkD,EAAgBsD,aAC/B,OAAMV,KACN,OAAMA,KAEb,OAAOoD,EAAAA,GAAUC,4BACf,CACEvE,KAAM,GACNwE,OAAQ,CAAE,OAAMtD,KAAoB,OAAMA,QAAsBkD,GAChEzK,MAAO0K,EAAgB,CAAC1K,GAAS,GACjCwK,QACAM,QAASC,EAAAA,GAAiBC,cAC1B7K,QAAS,sBACT8K,QAAS,EACThL,UAAWwK,EAAOzI,OAAS,EAAI,SAAM1B,EACrCC,SAAUmK,GACNQ,EAAAA,EAAAA,IAAYX,EAAYY,SAAUC,EAAAA,QAClC9K,GAENiK,EACD,EAGG/B,EAA6BA,CACjC+B,EACAC,EACAC,IAEOE,EAAAA,GAAUC,4BACf,CACEvE,KAAM,GACNwE,OAAQ,CAAE,OAAMtD,QAAsBkD,GACtCD,QACAM,QAASC,EAAAA,GAAiBC,cAC1B7K,QAAS,sBACT8K,QAAS,EACThL,UAAWwK,EAAOzI,OAAS,EAAI,SAAM1B,GAEvCiK,E","sources":["webpack:///./app/views/starfish/utils/useEventsStatsQuery.tsx","webpack:///./app/views/starfish/views/webServiceView/spanGroupBreakdown.tsx","webpack:///./app/views/starfish/views/webServiceView/spanGroupBreakdownContainer.tsx"],"sourcesContent":["import {MultiSeriesEventsStats} from 'sentry/types';\nimport EventView, {encodeSort} from 'sentry/utils/discover/eventView';\nimport {\n  DiscoverQueryProps,\n  useGenericDiscoverQuery,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {\n  getRetryDelay,\n  shouldRetryHandler,\n} from 'sentry/views/starfish/utils/retryHandlers';\n\nexport function useEventsStatsQuery({\n  eventView,\n  enabled,\n  referrer,\n  initialData,\n  excludeOther = false,\n}: {\n  eventView: EventView;\n  enabled?: boolean;\n  excludeOther?: boolean;\n  initialData?: MultiSeriesEventsStats;\n  referrer?: string;\n}) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const result = useGenericDiscoverQuery<MultiSeriesEventsStats, DiscoverQueryProps>({\n    route: 'events-stats',\n    eventView,\n    location,\n    orgSlug: organization.slug,\n    getRequestPayload: () => ({\n      ...eventView.getEventsAPIPayload(location),\n      yAxis: eventView.yAxis,\n      topEvents: eventView.topEvents,\n      excludeOther: excludeOther === true ? 1 : 0,\n      partial: 1,\n      orderby: eventView.sorts?.[0] ? encodeSort(eventView.sorts?.[0]) : undefined,\n      interval: eventView.interval,\n    }),\n    options: {\n      enabled,\n      refetchOnWindowFocus: false,\n      retry: shouldRetryHandler,\n      retryDelay: getRetryDelay,\n      staleTime: Infinity,\n    },\n    referrer,\n  });\n\n  return {...result, data: result.isLoading ? initialData : result.data};\n}\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport * as qs from 'query-string';\n\nimport {LineChartSeries} from 'sentry/components/charts/lineChart';\nimport {CompactSelect, SelectOption} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {EChartClickHandler} from 'sentry/types/echarts';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport {tooltipFormatterUsingAggregateOutputType} from 'sentry/utils/discover/charts';\nimport {VisuallyCompleteWithData} from 'sentry/utils/performanceForSentry';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport {SpanMetricsFields} from 'sentry/views/starfish/types';\nimport {\n  DataDisplayType,\n  DataRow,\n} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\nconst {SPAN_MODULE} = SpanMetricsFields;\n\ntype Props = {\n  colorPalette: string[];\n  dataDisplayType: DataDisplayType;\n  isCumulativeTimeLoading: boolean;\n  isTableLoading: boolean;\n  isTimeseriesLoading: boolean;\n  onDisplayTypeChange: (value: SelectOption<DataDisplayType>['value']) => void;\n  options: SelectOption<DataDisplayType>[];\n  tableData: DataRow[];\n  topSeriesData: LineChartSeries[];\n  totalCumulativeTime: number;\n  errored?: boolean;\n  transaction?: string;\n};\n\nexport function SpanGroupBreakdown({\n  topSeriesData: data,\n  transaction,\n  isTimeseriesLoading,\n  errored,\n  options,\n  dataDisplayType,\n  onDisplayTypeChange,\n}: Props) {\n  const organization = useOrganization();\n  const hasDropdownFeatureFlag = organization.features.includes(\n    'starfish-wsv-chart-dropdown'\n  );\n\n  const visibleSeries: LineChartSeries[] = [];\n\n  for (let index = 0; index < data.length; index++) {\n    const series = data[index];\n    series.emphasis = {\n      disabled: false,\n      focus: 'series',\n    };\n    series.blur = {\n      areaStyle: {opacity: 0.3},\n    };\n    series.triggerLineEvent = true;\n    visibleSeries.push(series);\n  }\n\n  const dataAsPercentages = cloneDeep(visibleSeries);\n  const numDataPoints = data[0]?.data?.length ?? 0;\n  for (let i = 0; i < numDataPoints; i++) {\n    const totalTimeAtIndex = data.reduce((acc, datum) => acc + datum.data[i].value, 0);\n    dataAsPercentages.forEach(segment => {\n      const clone = {...segment.data[i]};\n      clone.value = totalTimeAtIndex === 0 ? 0 : clone.value / totalTimeAtIndex;\n      segment.data[i] = clone;\n    });\n  }\n\n  const handleChange = (option: SelectOption<DataDisplayType>) => {\n    onDisplayTypeChange(option.value);\n    trackAnalytics('starfish.web_service_view.breakdown.display_change', {\n      organization,\n      display: option.value,\n    });\n  };\n\n  const isEndpointBreakdownView = Boolean(transaction);\n\n  const handleModuleAreaClick: EChartClickHandler = event => {\n    let spansLink;\n    const spansLinkQueryParams: Record<string, string | string[]> = {};\n    if (event.seriesName === 'db') {\n      spansLink = `/starfish/database/`;\n    } else if (event.seriesName === 'Other') {\n      spansLinkQueryParams[SPAN_MODULE] = 'other';\n      spansLinkQueryParams['!span.category'] = data\n        .filter(r => r.seriesName !== 'Other')\n        .map(r => r.seriesName);\n    } else {\n      spansLinkQueryParams[SPAN_MODULE] = 'other';\n      spansLinkQueryParams['span.category'] = event.seriesName;\n    }\n\n    if (!spansLink) {\n      spansLink = `/starfish/spans/?${qs.stringify(spansLinkQueryParams)}`;\n    }\n    browserHistory.push(spansLink);\n  };\n\n  return (\n    <FlexRowContainer>\n      <ChartPadding>\n        <Header>\n          <ChartLabel>\n            {isEndpointBreakdownView\n              ? t('Endpoint Breakdown')\n              : t('Time Spent Breakdown')}\n          </ChartLabel>\n          {hasDropdownFeatureFlag && (\n            <CompactSelect\n              options={options}\n              value={dataDisplayType}\n              onChange={handleChange}\n            />\n          )}\n        </Header>\n        <VisuallyCompleteWithData id=\"WSV.SpanGroupBreakdown\" hasData={data.length > 0}>\n          <Chart\n            height={340}\n            showLegend\n            data={\n              dataDisplayType === DataDisplayType.PERCENTAGE ? dataAsPercentages : data\n            }\n            dataMax={dataDisplayType === DataDisplayType.PERCENTAGE ? 1 : undefined}\n            durationUnit={\n              dataDisplayType === DataDisplayType.PERCENTAGE ? 0.25 : undefined\n            }\n            errored={errored}\n            loading={isTimeseriesLoading}\n            utc={false}\n            onClick={handleModuleAreaClick}\n            grid={{\n              left: '0',\n              right: '0',\n              top: '20px',\n              bottom: '0',\n            }}\n            definedAxisTicks={6}\n            stacked\n            aggregateOutputFormat={\n              dataDisplayType === DataDisplayType.PERCENTAGE ? 'percentage' : 'duration'\n            }\n            tooltipFormatterOptions={{\n              nameFormatter: name => {\n                if (name === 'db') {\n                  return 'database';\n                }\n                return name;\n              },\n              valueFormatter: value =>\n                dataDisplayType === DataDisplayType.PERCENTAGE\n                  ? tooltipFormatterUsingAggregateOutputType(value, 'percentage')\n                  : tooltipFormatterUsingAggregateOutputType(value, 'duration'),\n            }}\n            onLegendSelectChanged={event => {\n              trackAnalytics('starfish.web_service_view.breakdown.legend_change', {\n                organization,\n                selected: Object.keys(event.selected).filter(key => event.selected[key]),\n                toggled: event.name,\n              });\n            }}\n            legendFormatter={(name: string) => {\n              if (name === 'db') {\n                return 'database';\n              }\n              return name;\n            }}\n          />\n        </VisuallyCompleteWithData>\n      </ChartPadding>\n    </FlexRowContainer>\n  );\n}\n\nconst ChartPadding = styled('div')`\n  padding: 0 ${space(2)};\n  flex: 2;\n`;\n\nconst ChartLabel = styled('p')`\n  ${p => p.theme.text.cardTitle}\n`;\n\nconst Header = styled('div')`\n  padding: 0 ${space(1)} 0 0;\n  min-height: 36px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n`;\n\nconst FlexRowContainer = styled('div')`\n  display: flex;\n  min-height: 200px;\n  padding-bottom: ${space(2)};\n`;\n","import {useState} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {SelectOption} from 'sentry/components/compactSelect';\nimport Panel from 'sentry/components/panels/panel';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {EventsStats, PageFilters} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {useDiscoverQuery} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {SpanMetricsFields} from 'sentry/views/starfish/types';\nimport {STARFISH_CHART_INTERVAL_FIDELITY} from 'sentry/views/starfish/utils/constants';\nimport {useEventsStatsQuery} from 'sentry/views/starfish/utils/useEventsStatsQuery';\nimport {SpanGroupBreakdown} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdown';\n\nconst {SPAN_SELF_TIME} = SpanMetricsFields;\n\nconst OTHER_SPAN_GROUP_MODULE = 'Other';\nexport const NULL_SPAN_CATEGORY = t('custom');\n\ntype Props = {\n  transaction?: string;\n  transactionMethod?: string;\n};\n\ntype Group = {\n  'span.category': string;\n};\n\nexport type DataRow = {\n  cumulativeTime: number;\n  group: Group;\n};\n\nexport enum DataDisplayType {\n  DURATION_P95 = 'duration_p95',\n  CUMULATIVE_DURATION = 'cumulative_duration',\n  PERCENTAGE = 'percentage',\n}\n\nexport function SpanGroupBreakdownContainer({transaction, transactionMethod}: Props) {\n  const pageFilter = usePageFilters();\n  const organization = useOrganization();\n  const location = useLocation();\n  const {selection} = pageFilter;\n  const theme = useTheme();\n\n  const options: SelectOption<DataDisplayType>[] = [\n    {label: 'Percentages', value: DataDisplayType.PERCENTAGE},\n    {label: 'Duration (p95)', value: DataDisplayType.DURATION_P95},\n    {label: 'Total Duration', value: DataDisplayType.CUMULATIVE_DURATION},\n  ];\n\n  const [dataDisplayType, setDataDisplayType] = useState<DataDisplayType>(\n    DataDisplayType.PERCENTAGE\n  );\n\n  const {data: segments, isLoading: isSegmentsLoading} = useDiscoverQuery({\n    eventView: getCumulativeTimeEventView(\n      selection,\n      `transaction.op:http.server ${transaction ? `transaction:${transaction}` : ''} ${\n        transactionMethod ? `http.method:${transactionMethod}` : ''\n      }`,\n      ['span.category']\n    ),\n    orgSlug: organization.slug,\n    referrer: 'api.starfish-web-service.span-category-breakdown',\n    location,\n    limit: 4,\n  });\n\n  const {data: cumulativeTime, isLoading: isCumulativeDataLoading} = useDiscoverQuery({\n    eventView: getCumulativeTimeEventView(\n      selection,\n      `transaction.op:http.server ${transaction ? `transaction:${transaction}` : ''} ${\n        transactionMethod ? `http.method:${transactionMethod}` : ''\n      }`,\n      []\n    ),\n    orgSlug: organization.slug,\n    referrer: 'api.starfish-web-service.total-time',\n    location,\n  });\n\n  const {\n    isLoading: isTopDataLoading,\n    data: topData,\n    isError,\n  } = useEventsStatsQuery({\n    eventView: getEventView(\n      selection,\n      `transaction.op:http.server ${transaction ? `transaction:${transaction}` : ''} ${\n        transactionMethod ? `http.method:${transactionMethod}` : ''\n      }`,\n      ['span.category'],\n      dataDisplayType,\n      true\n    ),\n    enabled: true,\n    referrer: 'api.starfish-web-service.span-category-breakdown-timeseries',\n    initialData: {},\n  });\n\n  const totalValues = cumulativeTime?.data[0]?.[`sum(${SPAN_SELF_TIME})`]\n    ? parseInt(cumulativeTime?.data[0][`sum(${SPAN_SELF_TIME})`] as string, 10)\n    : 0;\n  const totalSegments =\n    segments?.data.reduce(\n      (acc, segment) => acc + parseInt(segment[`sum(${SPAN_SELF_TIME})`] as string, 10),\n      0\n    ) ?? 0;\n\n  const otherValue = totalValues ? totalValues - totalSegments : 0;\n\n  const transformedData: DataRow[] = [];\n\n  if (defined(segments)) {\n    for (let index = 0; index < segments.data.length; index++) {\n      const element = segments.data[index];\n      const category = element['span.category'] as string;\n      transformedData.push({\n        cumulativeTime: parseInt(element[`sum(${SPAN_SELF_TIME})`] as string, 10),\n        group: {\n          'span.category': category === '' ? NULL_SPAN_CATEGORY : category,\n        },\n      });\n    }\n\n    if (otherValue > 0 && topData && OTHER_SPAN_GROUP_MODULE in topData) {\n      transformedData.push({\n        cumulativeTime: otherValue,\n        group: {\n          'span.category': OTHER_SPAN_GROUP_MODULE,\n        },\n      });\n    }\n  }\n\n  const seriesByDomain: {[category: string]: Series} = {};\n  const colorPalette = theme.charts.getColorPalette(transformedData.length - 2);\n\n  if (defined(topData)) {\n    if (!isTopDataLoading && transformedData.length > 0) {\n      transformedData.forEach((segment, index) => {\n        const category = segment.group['span.category'] as string;\n        const label = category === '' ? NULL_SPAN_CATEGORY : category;\n        seriesByDomain[label] = {\n          seriesName: label,\n          data: [],\n          color: colorPalette[index],\n        };\n      });\n\n      Object.keys(topData).forEach(key => {\n        const seriesData: EventsStats = topData?.[key];\n        const label = key === '' ? NULL_SPAN_CATEGORY : key;\n        seriesByDomain[label].data =\n          seriesData?.data.map(datum => {\n            return {name: datum[0] * 1000, value: datum[1][0].count} as SeriesDataUnit;\n          }) ?? [];\n      });\n    }\n  }\n\n  const data = Object.values(seriesByDomain);\n\n  return (\n    <StyledPanel>\n      <SpanGroupBreakdown\n        tableData={transformedData}\n        totalCumulativeTime={totalValues}\n        isTableLoading={isSegmentsLoading}\n        topSeriesData={data}\n        colorPalette={colorPalette}\n        isTimeseriesLoading={isTopDataLoading}\n        isCumulativeTimeLoading={isCumulativeDataLoading}\n        transaction={transaction}\n        errored={isError}\n        options={options}\n        dataDisplayType={dataDisplayType}\n        onDisplayTypeChange={setDataDisplayType}\n      />\n    </StyledPanel>\n  );\n}\n\nconst StyledPanel = styled(Panel)`\n  padding-top: ${space(2)};\n  margin-bottom: 0;\n`;\n\nconst getEventView = (\n  pageFilters: PageFilters,\n  query: string,\n  groups: string[],\n  dataDisplayType: DataDisplayType,\n  getTimeseries?: boolean\n) => {\n  const yAxis =\n    dataDisplayType === DataDisplayType.DURATION_P95\n      ? `p95(${SPAN_SELF_TIME})`\n      : `sum(${SPAN_SELF_TIME})`;\n\n  return EventView.fromNewQueryWithPageFilters(\n    {\n      name: '',\n      fields: [`sum(${SPAN_SELF_TIME})`, `p95(${SPAN_SELF_TIME})`, ...groups],\n      yAxis: getTimeseries ? [yAxis] : [],\n      query,\n      dataset: DiscoverDatasets.SPANS_METRICS,\n      orderby: '-sum_span_self_time',\n      version: 2,\n      topEvents: groups.length > 0 ? '4' : undefined,\n      interval: getTimeseries\n        ? getInterval(pageFilters.datetime, STARFISH_CHART_INTERVAL_FIDELITY)\n        : undefined,\n    },\n    pageFilters\n  );\n};\n\nconst getCumulativeTimeEventView = (\n  pageFilters: PageFilters,\n  query: string,\n  groups: string[]\n) => {\n  return EventView.fromNewQueryWithPageFilters(\n    {\n      name: '',\n      fields: [`sum(${SPAN_SELF_TIME})`, ...groups],\n      query,\n      dataset: DiscoverDatasets.SPANS_METRICS,\n      orderby: '-sum_span_self_time',\n      version: 2,\n      topEvents: groups.length > 0 ? '4' : undefined,\n    },\n    pageFilters\n  );\n};\n"],"names":["useEventsStatsQuery","_ref","eventView","enabled","referrer","initialData","excludeOther","location","useLocation","organization","useOrganization","result","useGenericDiscoverQuery","route","orgSlug","slug","getRequestPayload","getEventsAPIPayload","yAxis","topEvents","partial","orderby","sorts","encodeSort","undefined","interval","options","refetchOnWindowFocus","retry","shouldRetryHandler","retryDelay","getRetryDelay","staleTime","Infinity","data","isLoading","SPAN_MODULE","SpanMetricsFields","SpanGroupBreakdown","topSeriesData","transaction","isTimeseriesLoading","errored","dataDisplayType","onDisplayTypeChange","hasDropdownFeatureFlag","features","includes","visibleSeries","index","length","series","emphasis","disabled","focus","blur","areaStyle","opacity","triggerLineEvent","push","dataAsPercentages","cloneDeep","numDataPoints","i","totalTimeAtIndex","reduce","acc","datum","value","forEach","segment","clone","isEndpointBreakdownView","Boolean","_jsx","FlexRowContainer","children","_jsxs","ChartPadding","Header","ChartLabel","t","CompactSelect","onChange","option","trackAnalytics","display","VisuallyCompleteWithData","id","hasData","Chart","height","showLegend","DataDisplayType","PERCENTAGE","dataMax","durationUnit","loading","utc","onClick","event","spansLink","spansLinkQueryParams","seriesName","filter","r","map","qs","browserHistory","grid","left","right","top","bottom","definedAxisTicks","stacked","aggregateOutputFormat","tooltipFormatterOptions","nameFormatter","name","valueFormatter","tooltipFormatterUsingAggregateOutputType","onLegendSelectChanged","selected","Object","keys","key","toggled","legendFormatter","displayName","_styled","target","space","p","theme","text","cardTitle","SPAN_SELF_TIME","OTHER_SPAN_GROUP_MODULE","NULL_SPAN_CATEGORY","SpanGroupBreakdownContainer","transactionMethod","pageFilter","usePageFilters","selection","useTheme","label","DURATION_P95","CUMULATIVE_DURATION","setDataDisplayType","useState","segments","isSegmentsLoading","useDiscoverQuery","getCumulativeTimeEventView","limit","cumulativeTime","isCumulativeDataLoading","isTopDataLoading","topData","isError","getEventView","totalValues","parseInt","totalSegments","otherValue","transformedData","defined","element","category","group","seriesByDomain","colorPalette","charts","getColorPalette","color","seriesData","count","values","StyledPanel","tableData","totalCumulativeTime","isTableLoading","isCumulativeTimeLoading","Panel","pageFilters","query","groups","getTimeseries","EventView","fromNewQueryWithPageFilters","fields","dataset","DiscoverDatasets","SPANS_METRICS","version","getInterval","datetime","STARFISH_CHART_INTERVAL_FIDELITY"],"sourceRoot":""}