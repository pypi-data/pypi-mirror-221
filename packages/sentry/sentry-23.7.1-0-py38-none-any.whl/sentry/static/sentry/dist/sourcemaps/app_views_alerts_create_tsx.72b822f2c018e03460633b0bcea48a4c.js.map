{"version":3,"file":"chunks/app_views_alerts_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/rules/metric/create.tsx","webpack:///./app/views/alerts/rules/metric/duplicate.tsx","webpack:///./app/views/alerts/create.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n  createRuleFromWizardTemplate,\n} from 'sentry/views/alerts/rules/metric/constants';\nimport {WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  projectId?: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  eventView: EventView | undefined;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n  sessionId?: string;\n  wizardTemplate?: WizardRuleTemplate;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nfunction MetricRulesCreate(props: Props) {\n  function handleSubmitSuccess(data: any) {\n    const {organization, project, router} = props;\n    const alertRuleId: string | undefined = data\n      ? (data.id as string | undefined)\n      : undefined;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    const target = alertRuleId\n      ? {\n          pathname: `/organizations/${organization.slug}/alerts/rules/details/${alertRuleId}/`,\n        }\n      : {\n          pathname: `/organizations/${organization.slug}/alerts/rules/`,\n          query: {project: project.id},\n        };\n    router.push(normalizeUrl(target));\n  }\n\n  const {project, eventView, wizardTemplate, sessionId, userTeamIds, ...otherProps} =\n    props;\n  const defaultRule = eventView\n    ? createRuleFromEventView(eventView)\n    : wizardTemplate\n    ? createRuleFromWizardTemplate(wizardTemplate)\n    : createDefaultRule();\n\n  const projectTeamIds = new Set(project.teams.map(({id}) => id));\n  const defaultOwnerId = userTeamIds.find(id => projectTeamIds.has(id)) ?? null;\n  defaultRule.owner = defaultOwnerId && `team:${defaultOwnerId}`;\n\n  return (\n    <RuleForm\n      onSubmitSuccess={handleSubmitSuccess}\n      rule={{...defaultRule, projects: [project.slug]}}\n      sessionId={sessionId}\n      project={project}\n      userTeamIds={userTeamIds}\n      eventView={eventView}\n      {...otherProps}\n    />\n  );\n}\n\nexport default MetricRulesCreate;\n","import {RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {uniqueId} from 'sentry/utils/guid';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport {\n  DuplicateActionFields,\n  DuplicateMetricFields,\n  DuplicateTriggerFields,\n} from 'sentry/views/alerts/rules/metric/constants';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\nimport {WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\n\nimport RuleForm from './ruleForm';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n  eventView?: EventView;\n  sessionId?: string;\n  wizardTemplate?: WizardRuleTemplate;\n} & RouteComponentProps<{}, {}>;\n\ntype State = {\n  duplicateTargetRule?: MetricRule;\n} & DeprecatedAsyncView['state'];\n\n/**\n * Show metric rules form with values from an existing rule. Redirects to alerts list after creation.\n */\n\nclass MetricRulesDuplicate extends DeprecatedAsyncView<Props, State> {\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {\n      organization,\n      location: {query},\n    } = this.props;\n\n    return [\n      [\n        'duplicateTargetRule',\n        `/organizations/${organization.slug}/alert-rules/${query.duplicateRuleId}/`,\n      ],\n    ];\n  }\n\n  handleSubmitSuccess = (data: any) => {\n    const {router, organization, project} = this.props;\n    const alertRuleId: string | undefined = data\n      ? (data.id as string | undefined)\n      : undefined;\n\n    const target = alertRuleId\n      ? {\n          pathname: `/organizations/${organization.slug}/alerts/rules/details/${alertRuleId}/`,\n        }\n      : {\n          pathname: `/organizations/${organization.slug}/alerts/rules/`,\n          query: {project: project.id},\n        };\n    router.push(normalizeUrl(target));\n  };\n\n  renderBody() {\n    const {project, sessionId, userTeamIds, ...otherProps} = this.props;\n    const {duplicateTargetRule} = this.state;\n\n    if (!duplicateTargetRule) {\n      return this.renderLoading();\n    }\n\n    return (\n      <Layout.Main>\n        <RuleForm\n          onSubmitSuccess={this.handleSubmitSuccess}\n          rule={\n            {\n              ...pick(duplicateTargetRule, DuplicateMetricFields),\n              triggers: duplicateTargetRule.triggers.map(trigger => ({\n                ...pick(trigger, DuplicateTriggerFields),\n                actions: trigger.actions.map(action => ({\n                  inputChannelId: null,\n                  integrationId: action.integrationId ?? undefined,\n                  options: null,\n                  sentryAppId: undefined,\n                  unsavedId: uniqueId(),\n                  unsavedDateCreated: new Date().toISOString(),\n                  ...pick(action, DuplicateActionFields),\n                })),\n              })),\n              name: duplicateTargetRule.name + ' copy',\n            } as MetricRule\n          }\n          sessionId={sessionId}\n          project={project}\n          userTeamIds={userTeamIds}\n          isDuplicateRule\n          {...otherProps}\n        />\n      </Layout.Main>\n    );\n  }\n}\n\nexport default MetricRulesDuplicate;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Member, Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {uniqueId} from 'sentry/utils/guid';\nimport withRouteAnalytics, {\n  WithRouteAnalyticsProps,\n} from 'sentry/utils/routeAnalytics/withRouteAnalytics';\nimport Teams from 'sentry/utils/teams';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IssueRuleEditor from 'sentry/views/alerts/rules/issue';\nimport MetricRulesCreate from 'sentry/views/alerts/rules/metric/create';\nimport MetricRulesDuplicate from 'sentry/views/alerts/rules/metric/duplicate';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\nimport {\n  AlertType as WizardAlertType,\n  AlertWizardAlertNames,\n  DEFAULT_WIZARD_TEMPLATE,\n  WizardRuleTemplate,\n} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\ntype RouteParams = {\n  alertType?: AlertRuleType;\n  projectId?: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> &\n  WithRouteAnalyticsProps & {\n    hasMetricAlerts: boolean;\n    members: Member[] | undefined;\n    organization: Organization;\n    project: Project;\n  };\n\ntype State = {\n  alertType: AlertRuleType;\n};\n\nclass Create extends Component<Props, State> {\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    const {organization, location, project, params, router} = this.props;\n    const {aggregate, dataset, eventTypes, createFromDuplicate} = location?.query ?? {};\n    const alertType = params.alertType || AlertRuleType.METRIC;\n\n    // TODO(taylangocmen): Remove redirect with aggregate && dataset && eventTypes, init from template\n    if (\n      alertType === AlertRuleType.METRIC &&\n      !(aggregate && dataset && eventTypes) &&\n      !createFromDuplicate\n    ) {\n      router.replace(\n        normalizeUrl({\n          ...location,\n          pathname: `/organizations/${organization.slug}/alerts/new/${alertType}`,\n          query: {\n            ...location.query,\n            ...DEFAULT_WIZARD_TEMPLATE,\n            project: project.slug,\n          },\n        })\n      );\n    }\n\n    return {alertType};\n  }\n\n  componentDidMount() {\n    const {project} = this.props;\n\n    this.props.setRouteAnalyticsParams({\n      project_id: project.id,\n      session_id: this.sessionId,\n      alert_type: this.state.alertType,\n      duplicate_rule: this.isDuplicateRule ? 'true' : 'false',\n      wizard_v3: 'true',\n    });\n    this.props.setEventNames('new_alert_rule.viewed', 'New Alert Rule: Viewed');\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  get isDuplicateRule(): boolean {\n    const {location} = this.props;\n    const createFromDuplicate = location?.query.createFromDuplicate === 'true';\n    return createFromDuplicate && location?.query.duplicateRuleId;\n  }\n\n  render() {\n    const {hasMetricAlerts, organization, project, location, members} = this.props;\n    const {alertType} = this.state;\n    const {aggregate, dataset, eventTypes, createFromWizard, createFromDiscover} =\n      location?.query ?? {};\n    const wizardTemplate: WizardRuleTemplate = {\n      aggregate: aggregate ?? DEFAULT_WIZARD_TEMPLATE.aggregate,\n      dataset: dataset ?? DEFAULT_WIZARD_TEMPLATE.dataset,\n      eventTypes: eventTypes ?? DEFAULT_WIZARD_TEMPLATE.eventTypes,\n    };\n    const eventView = createFromDiscover ? EventView.fromLocation(location) : undefined;\n\n    let wizardAlertType: undefined | WizardAlertType;\n    if (createFromWizard && alertType === AlertRuleType.METRIC) {\n      wizardAlertType = wizardTemplate\n        ? getAlertTypeFromAggregateDataset(wizardTemplate)\n        : 'issues';\n    }\n\n    const title = t('New Alert Rule');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={project.slug} />\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              alertName={t('Set Conditions')}\n              title={wizardAlertType ? t('Select Alert') : title}\n              projectSlug={project.slug}\n            />\n            <Layout.Title>\n              {wizardAlertType\n                ? `${t('Set Conditions for')} ${AlertWizardAlertNames[wizardAlertType]}`\n                : title}\n            </Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <Body>\n          <Teams provideUserTeams>\n            {({teams, initiallyLoaded}) =>\n              initiallyLoaded ? (\n                <Fragment>\n                  {(!hasMetricAlerts || alertType === AlertRuleType.ISSUE) && (\n                    <IssueRuleEditor\n                      {...this.props}\n                      project={project}\n                      userTeamIds={teams.map(({id}) => id)}\n                      members={members}\n                    />\n                  )}\n\n                  {hasMetricAlerts &&\n                    alertType === AlertRuleType.METRIC &&\n                    (this.isDuplicateRule ? (\n                      <MetricRulesDuplicate\n                        {...this.props}\n                        eventView={eventView}\n                        wizardTemplate={wizardTemplate}\n                        sessionId={this.sessionId}\n                        project={project}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    ) : (\n                      <MetricRulesCreate\n                        {...this.props}\n                        eventView={eventView}\n                        wizardTemplate={wizardTemplate}\n                        sessionId={this.sessionId}\n                        project={project}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    ))}\n                </Fragment>\n              ) : (\n                <LoadingIndicator />\n              )\n            }\n          </Teams>\n        </Body>\n      </Fragment>\n    );\n  }\n}\n\nconst Body = styled(Layout.Body)`\n  && {\n    padding: 0;\n    gap: 0;\n  }\n  grid-template-rows: 1fr;\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: minmax(100px, auto) 400px;\n  }\n`;\n\nexport default withRouteAnalytics(Create);\n"],"names":["MetricRulesCreate","props","project","eventView","wizardTemplate","sessionId","userTeamIds","otherProps","defaultRule","createRuleFromEventView","createRuleFromWizardTemplate","createDefaultRule","projectTeamIds","Set","teams","map","_ref","id","defaultOwnerId","find","has","owner","_jsx","RuleForm","onSubmitSuccess","data","organization","router","alertRuleId","undefined","metric","endTransaction","name","target","pathname","slug","query","push","normalizeUrl","rule","projects","displayName","MetricRulesDuplicate","DeprecatedAsyncView","constructor","arguments","_defineProperty","this","getEndpoints","location","duplicateRuleId","renderBody","duplicateTargetRule","state","Layout","children","handleSubmitSuccess","pick","DuplicateMetricFields","triggers","trigger","DuplicateTriggerFields","actions","action","inputChannelId","integrationId","options","sentryAppId","unsavedId","uniqueId","unsavedDateCreated","Date","toISOString","DuplicateActionFields","isDuplicateRule","renderLoading","Create","Component","getInitialState","params","aggregate","dataset","eventTypes","createFromDuplicate","alertType","AlertRuleType","METRIC","replace","DEFAULT_WIZARD_TEMPLATE","componentDidMount","setRouteAnalyticsParams","project_id","session_id","alert_type","duplicate_rule","wizard_v3","setEventNames","render","hasMetricAlerts","members","createFromWizard","createFromDiscover","EventView","fromLocation","wizardAlertType","getAlertTypeFromAggregateDataset","title","t","_jsxs","Fragment","SentryDocumentTitle","projectSlug","BuilderBreadCrumbs","alertName","AlertWizardAlertNames","Body","Teams","provideUserTeams","initiallyLoaded","ISSUE","IssueRuleEditor","_ref2","_ref3","_ref4","LoadingIndicator","_styled","p","theme","breakpoints","large","withRouteAnalytics"],"sourceRoot":""}