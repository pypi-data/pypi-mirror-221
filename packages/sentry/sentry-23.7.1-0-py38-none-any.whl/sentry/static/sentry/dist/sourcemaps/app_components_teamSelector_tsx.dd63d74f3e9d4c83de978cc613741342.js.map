{"version":3,"file":"chunks/app_components_teamSelector_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/teamSelector.tsx"],"sourcesContent":["import {useRef} from 'react';\nimport {Theme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addTeamToProject} from 'sentry/actionCreators/projects';\nimport {Button} from 'sentry/components/button';\nimport SelectControl, {\n  ControlProps,\n  GeneralSelectValue,\n  StylesConfig,\n} from 'sentry/components/forms/controls/selectControl';\nimport IdBadge from 'sentry/components/idBadge';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconAdd, IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project, Team} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport {useTeams} from 'sentry/utils/useTeams';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst UnassignedWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledIconUser = styled(IconUser)`\n  margin-left: ${space(0.25)};\n  margin-right: ${space(1)};\n  color: ${p => p.theme.gray400};\n`;\n\n// An option to be unassigned on the team dropdown\nconst unassignedOption = {\n  value: null,\n  label: (\n    <UnassignedWrapper>\n      <StyledIconUser size=\"md\" />\n      {t('Unassigned')}\n    </UnassignedWrapper>\n  ),\n  searchKey: 'unassigned',\n  actor: null,\n  disabled: false,\n};\n\n// Ensures that the svg icon is white when selected\nconst unassignedSelectStyles: StylesConfig = {\n  option: (provided, state) => {\n    // XXX: The `state.theme` is an emotion theme object, but it is not typed\n    // as the emotion theme object in react-select\n    const theme = state.theme as unknown as Theme;\n\n    return {...provided, svg: {color: state.isSelected ? theme.white : undefined}};\n  },\n};\n\nconst placeholderSelectStyles: StylesConfig = {\n  input: (provided, state) => {\n    // XXX: The `state.theme` is an emotion theme object, but it is not typed\n    // as the emotion theme object in react-select\n    const theme = state.theme as unknown as Theme;\n\n    return {\n      ...provided,\n      display: 'grid',\n      gridTemplateColumns: 'max-content 1fr',\n      alignItems: 'center',\n      gridGap: space(1),\n      ':before': {\n        backgroundColor: theme.backgroundSecondary,\n        height: 24,\n        width: 24,\n        borderRadius: 3,\n        content: '\"\"',\n        display: 'block',\n      },\n    };\n  },\n  placeholder: provided => ({\n    ...provided,\n    paddingLeft: 32,\n  }),\n};\n\ntype Props = {\n  onChange: (value: any) => any;\n  organization: Organization;\n  includeUnassigned?: boolean;\n  /**\n   * Can be used to restrict teams to a certain project and allow for new teams to be add to that project\n   */\n  project?: Project;\n  /**\n   * Function to control whether a team should be shown in the dropdown\n   */\n  teamFilter?: (team: Team) => boolean;\n  /**\n   * Controls whether the value in the dropdown is a team id or team slug\n   */\n  useId?: boolean;\n} & ControlProps;\n\ntype TeamActor = {\n  id: string;\n  name: string;\n  type: 'team';\n};\n\ntype TeamOption = GeneralSelectValue & {\n  actor: TeamActor | null;\n  searchKey: string;\n};\n\nfunction TeamSelector(props: Props) {\n  const {includeUnassigned, styles, ...extraProps} = props;\n  const {teamFilter, organization, project, multiple, value, useId, onChange} = props;\n\n  const api = useApi();\n  const {teams, fetching, onSearch} = useTeams();\n\n  // TODO(ts) This type could be improved when react-select types are better.\n  const selectRef = useRef<any>(null);\n\n  const createTeamOption = (team: Team): TeamOption => ({\n    value: useId ? team.id : team.slug,\n    label: `#${team.slug}`,\n    leadingItems: <IdBadge team={team} hideName />,\n    searchKey: team.slug,\n    actor: {\n      type: 'team',\n      id: team.id,\n      name: team.slug,\n    },\n  });\n\n  /**\n   * Closes the select menu by blurring input if possible since that seems to\n   * be the only way to close it.\n   */\n  function closeSelectMenu() {\n    if (!selectRef.current) {\n      return;\n    }\n\n    const select = selectRef.current.select;\n    const input: HTMLInputElement = select.inputRef;\n\n    if (input) {\n      // I don't think there's another way to close `react-select`\n      input.blur();\n    }\n  }\n\n  async function handleAddTeamToProject(team: Team) {\n    if (!project) {\n      closeSelectMenu();\n      return;\n    }\n\n    // Copy old value\n    const oldValue = multiple ? [...(value ?? [])] : {value};\n    // Optimistic update\n    onChange?.(createTeamOption(team));\n\n    try {\n      await addTeamToProject(api, organization.slug, project.slug, team);\n    } catch (err) {\n      // Unable to add team to project, revert select menu value\n      onChange?.(oldValue);\n    }\n\n    closeSelectMenu();\n  }\n\n  function createTeamOutsideProjectOption(team: Team): TeamOption {\n    // If the option/team is currently selected, optimistically assume it is now a part of the project\n    if (value === (useId ? team.id : team.slug)) {\n      return createTeamOption(team);\n    }\n    const canAddTeam = organization.access.includes('project:write');\n\n    return {\n      ...createTeamOption(team),\n      disabled: true,\n      label: `#${team.slug}`,\n      leadingItems: <IdBadge team={team} hideName />,\n      trailingItems: (\n        <Tooltip\n          title={\n            canAddTeam\n              ? t('Add %s to project', `#${team.slug}`)\n              : t('You do not have permission to add team to project.')\n          }\n          containerDisplayMode=\"flex\"\n        >\n          <AddToProjectButton\n            size=\"zero\"\n            borderless\n            disabled={!canAddTeam}\n            onClick={() => handleAddTeamToProject(team)}\n            icon={<IconAdd isCircled />}\n            aria-label={t('Add %s to project', `#${team.slug}`)}\n          />\n        </Tooltip>\n      ),\n      tooltip: t('%s is not a member of project', `#${team.slug}`),\n    };\n  }\n\n  function getOptions() {\n    const filteredTeams = teamFilter ? teams.filter(teamFilter) : teams;\n\n    if (project) {\n      const teamsInProjectIdSet = new Set(project.teams.map(team => team.id));\n      const teamsInProject = filteredTeams.filter(team =>\n        teamsInProjectIdSet.has(team.id)\n      );\n      const teamsNotInProject = filteredTeams.filter(\n        team => !teamsInProjectIdSet.has(team.id)\n      );\n\n      return [\n        ...teamsInProject.map(createTeamOption),\n        ...teamsNotInProject.map(createTeamOutsideProjectOption),\n        ...(includeUnassigned ? [unassignedOption] : []),\n      ];\n    }\n\n    return [\n      ...filteredTeams.map(createTeamOption),\n      ...(includeUnassigned ? [unassignedOption] : []),\n    ];\n  }\n\n  return (\n    <SelectControl\n      ref={selectRef}\n      options={getOptions()}\n      onInputChange={debounce(val => void onSearch(val), DEFAULT_DEBOUNCE_DURATION)}\n      getOptionValue={option => option.searchKey}\n      styles={{\n        ...(includeUnassigned ? unassignedSelectStyles : {}),\n        ...(multiple ? {} : placeholderSelectStyles),\n        ...(styles ?? {}),\n      }}\n      isLoading={fetching}\n      {...extraProps}\n    />\n  );\n}\n\nconst AddToProjectButton = styled(Button)`\n  flex-shrink: 0;\n`;\n\nexport {TeamSelector};\n\n// TODO(davidenwang): this is broken due to incorrect types on react-select\nexport default withOrganization(TeamSelector) as unknown as (\n  p: Omit<Props, 'organization'>\n) => JSX.Element;\n"],"names":["UnassignedWrapper","_styled","target","name","styles","StyledIconUser","IconUser","space","p","theme","gray400","unassignedOption","value","label","_jsxs","children","_jsx","size","t","searchKey","actor","disabled","unassignedSelectStyles","option","provided","state","svg","color","isSelected","white","undefined","placeholderSelectStyles","input","display","gridTemplateColumns","alignItems","gridGap","backgroundColor","backgroundSecondary","height","width","borderRadius","content","placeholder","paddingLeft","TeamSelector","props","includeUnassigned","extraProps","teamFilter","organization","project","multiple","useId","onChange","api","useApi","teams","fetching","onSearch","useTeams","selectRef","useRef","createTeamOption","team","id","slug","leadingItems","IdBadge","hideName","type","closeSelectMenu","current","select","inputRef","blur","createTeamOutsideProjectOption","canAddTeam","access","includes","trailingItems","Tooltip","title","containerDisplayMode","AddToProjectButton","borderless","onClick","async","oldValue","addTeamToProject","err","handleAddTeamToProject","icon","IconAdd","isCircled","tooltip","SelectControl","ref","options","filteredTeams","filter","teamsInProjectIdSet","Set","map","teamsInProject","has","teamsNotInProject","getOptions","onInputChange","debounce","val","DEFAULT_DEBOUNCE_DURATION","getOptionValue","isLoading","displayName","Button","withOrganization"],"sourceRoot":""}