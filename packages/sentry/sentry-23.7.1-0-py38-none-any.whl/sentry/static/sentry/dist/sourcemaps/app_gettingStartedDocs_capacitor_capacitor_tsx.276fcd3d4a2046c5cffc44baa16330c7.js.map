{"version":3,"file":"chunks/app_gettingStartedDocs_capacitor_capacitor_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"siBAQO,MAAMA,EAAQ,eAAC,IACpBC,GAGDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MAA2B,CAC/B,CACEG,KAAMC,EAAAA,GAASC,QACfC,aAAaC,EAAAA,EAAAA,GACX,8EAEFC,eAAgB,CACd,CACEC,SAAU,OACVC,KAAO,6JAQT,CACED,SAAU,OACVH,aAAaC,EAAAA,EAAAA,GACX,kFAEFG,KAAO,iHAQT,CACEJ,aACEK,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAC,SAAA,EACPC,EAAAA,EAAAA,IAAA,MAAAD,UAAKN,EAAAA,EAAAA,GAAE,4BACNA,EAAAA,EAAAA,GAAE,yDACHO,EAAAA,EAAAA,IAAA,KAAAD,UACGE,EAAAA,EAAAA,IACC,2JACA,CACEC,qBAAqBF,EAAAA,EAAAA,IAAA,WACrBG,cAAcH,EAAAA,EAAAA,IAAA,WACdI,kBAAkBJ,EAAAA,EAAAA,IAAA,kBAM5BN,eAAgB,CACd,CACEF,aAAaQ,EAAAA,EAAAA,IAAA,UAAAD,SAAQ,SACrBJ,SAAU,OACVC,KAAO,qgBAmBT,CACEJ,aAAaQ,EAAAA,EAAAA,IAAA,UAAAD,SAAQ,WACrBJ,SAAU,SACVC,KAAO,qcAqBfS,gBACEL,EAAAA,EAAAA,IAAA,KAAAD,UACGE,EAAAA,EAAAA,IACC,iOACA,CAACL,MAAMI,EAAAA,EAAAA,IAAA,gBAKf,CACEX,KAAMC,EAAAA,GAASgB,UACfd,aAAaC,EAAAA,EAAAA,GAAE,2DACfC,eAAgB,CACd,CACEF,aAAaC,EAAAA,EAAAA,GAAE,uBACfE,SAAU,aACVC,KAAO,mQASDX,ssCAwCR,CACEO,aAAaC,EAAAA,EAAAA,GAAE,eACfE,SAAU,aACVC,KAAO,uFAKLX,8LAWR,CACEI,KAAMC,EAAAA,GAASiB,OACff,aAAaC,EAAAA,EAAAA,GACX,oHAEFC,eAAgB,CACd,CACEC,SAAU,aACVC,KAAO,mHAMT,CACED,SAAU,aACVH,aAAaC,EAAAA,EAAAA,GAAE,6DACfG,KAAO,oHAKT,CACED,SAAU,aACVH,aAAaC,EAAAA,EAAAA,GAAE,8BACfG,KAAO,uFAQd,EAGM,SAASY,EAA2BC,GAA+B,IAA9B,IAACxB,KAAQyB,GAAmBD,EACtE,OAAOT,EAAAA,EAAAA,IAACW,EAAAA,EAAM,CAAC3B,MAAOA,EAAM,CAACC,WAAWyB,GAC1C,CAFgBF,EAA2BI,YAAA,8BAI3C,S","sources":["webpack:///./app/gettingStartedDocs/capacitor/capacitor.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: t(\n      'Install the Sentry Capacitor SDK alongside the sibling Sentry Angular SDK:'\n    ),\n    configurations: [\n      {\n        language: 'bash',\n        code: `\n# npm\nnpm install --save @sentry/capacitor @sentry/angular-ivy\n\n# yarn\nyarn add @sentry/capacitor @sentry/angular @sentry/tracing --exact\n        `,\n      },\n      {\n        language: 'bash',\n        description: t(\n          \"Or install the standalone Sentry Capacitor SDK if you don't use Ionic/Angular:\"\n        ),\n        code: `\n# npm\nnpm install --save @sentry/capacitor @sentry/tracing\n\n# yarn\nyarn add @sentry/capacitor\n        `,\n      },\n      {\n        description: (\n          <Fragment>\n            <h5>{t('Capacitor 2 - Android')}</h5>\n            {t('This step is not needed if you are using Capacitor 3')}\n            <p>\n              {tct(\n                'Then, add the [sentryCapacitorCode:SentryCapacitor] plugin class inside the [onCreateCode:onCreate] method of your [mainActivityCode:MainActivity] file.',\n                {\n                  sentryCapacitorCode: <code />,\n                  onCreateCode: <code />,\n                  mainActivityCode: <code />,\n                }\n              )}\n            </p>\n          </Fragment>\n        ),\n        configurations: [\n          {\n            description: <strong>Java</strong>,\n            language: 'java',\n            code: `\nimport android.os.Bundle;\nimport com.getcapacitor.BridgeActivity;\nimport com.getcapacitor.Plugin;\nimport io.sentry.capacitor.SentryCapacitor;\nimport java.util.ArrayList;\n\npublic class MainActivity extends BridgeActivity {\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    // Initializes the Bridge\n    this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{\n      add(SentryCapacitor.class);\n    }});\n  }\n}\n            `,\n          },\n          {\n            description: <strong>Kotlin</strong>,\n            language: 'kotlin',\n            code: `\nimport android.os.Bundle\nimport com.getcapacitor.BridgeActivity\nimport com.getcapacitor.Plugin\nimport io.sentry.capacitor.SentryCapacitor\n\nclass MainActivity : BridgeActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    // Initializes the Bridge\n    this.init(\n      savedInstanceState,\n      listOf<Class<out Plugin>>(SentryCapacitor::class.java)\n    )\n  }\n}\n            `,\n          },\n        ],\n      },\n    ],\n    additionalInfo: (\n      <p>\n        {tct(\n          'The version of the sibling SDK must match with the version referred by Sentry Capacitor. To check which version of the sibling SDK is installed, use the following command: [code:npm info @sentry/capacitor peerDependencies]',\n          {code: <code />}\n        )}\n      </p>\n    ),\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: t('You must initialize the Sentry SDK as early as you can:'),\n    configurations: [\n      {\n        description: t('With Ionic/Angular:'),\n        language: 'typescript',\n        code: `\n  // app.module.ts\n  import * as Sentry from '@sentry/capacitor';\n  // Use \"@sentry/angular-ivy\" for Angular 12+ or \"@sentry/angular\" for Angular 10 or 11\n  import * as SentryAngular from '@sentry/angular-ivy';\n\n\n  Sentry.init(\n    {\n      dsn: '${dsn}',\n      // To set your release and dist versions\n      release: 'my-project-name@' + process.env.npm_package_version,\n      dist: '1',\n      // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n      // We recommend adjusting this value in production.\n      tracesSampleRate: 1.0,\n      integrations: [\n        new SentryAngular.BrowserTracing({\n          // Set \"tracePropagationTargets\" to control for which URLs distributed tracing should be enabled\n          tracePropagationTargets: [\"localhost\", /^https:\\/\\/yourserver\\.io\\/api/],\n          routingInstrumentation: SentryAngular.routingInstrumentation,\n        }),\n      ]\n    },\n    // Forward the init method from @sentry/angular\n    SentryAngular.init\n  );\n\n  @NgModule({\n    providers: [\n      {\n        provide: ErrorHandler,\n        // Attach the Sentry ErrorHandler\n        useValue: SentryAngular.createErrorHandler(),\n      },\n      {\n        provide: SentryAngular.TraceService,\n        deps: [Router],\n      },\n      {\n        provide: APP_INITIALIZER,\n        useFactory: () => () => {},\n        deps: [SentryAngular.TraceService],\n        multi: true,\n      },\n    ],\n  })\n  `,\n      },\n      {\n        description: t('Standalone:'),\n        language: 'javascript',\n        code: `\n// App.js\nimport * as Sentry from \"@sentry/capacitor\";\n\nSentry.init({\n  dsn: \"${dsn}\",\n\n  // Set your release version, such as 'getsentry@1.0.0'\n  release: \"my-project-name@<release-name>\",\n  // Set your dist version, such as \"1\"\n  dist: \"<dist>\",\n});\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.VERIFY,\n    description: t(\n      'This snippet includes an intentional error, so you can test that everything is working as soon as you set it up:'\n    ),\n    configurations: [\n      {\n        language: 'javascript',\n        code: `\nimport * as Sentry from \"@sentry/capacitor\";\n\nSentry.captureException(\"Test Captured Exception\");\n        `,\n      },\n      {\n        language: 'javascript',\n        description: t('You can also throw an error anywhere in your application:'),\n        code: `\n// Must be thrown after Sentry.init is called to be captured.\nthrow new Error(\"Test Thrown Error\");\n        `,\n      },\n      {\n        language: 'javascript',\n        description: t('Or trigger a native crash:'),\n        code: `\nimport * as Sentry from \"@sentry/capacitor\";\n\nSentry.nativeCrash();\n        `,\n      },\n    ],\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithCapacitor({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} {...props} />;\n}\n\nexport default GettingStartedWithCapacitor;\n"],"names":["steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","t","configurations","language","code","_jsxs","Fragment","children","_jsx","tct","sentryCapacitorCode","onCreateCode","mainActivityCode","additionalInfo","CONFIGURE","VERIFY","GettingStartedWithCapacitor","_ref","props","Layout","displayName"],"sourceRoot":""}