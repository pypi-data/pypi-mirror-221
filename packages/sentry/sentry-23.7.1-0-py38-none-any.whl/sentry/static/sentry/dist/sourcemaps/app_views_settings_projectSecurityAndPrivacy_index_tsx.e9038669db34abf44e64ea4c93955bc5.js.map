{"version":3,"file":"chunks/app_views_settings_projectSecurityAndPrivacy_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/projectSecurityAndPrivacyGroups.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectSecurityAndPrivacy/index.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'sentry/utils';\nimport {\n  formatStoreCrashReports,\n  getStoreCrashReportsValues,\n  SettingScope,\n} from 'sentry/utils/crashReports';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/security-and-privacy/';\n\nconst ORG_DISABLED_REASON = t(\n  \"This option is enforced by your organization's settings and cannot be customized per-project.\"\n);\n\n// Check if a field has been set AND IS TRUTHY at the organization level.\nconst hasOrgOverride = ({organization, name}) => organization[name];\n\nconst formGroups: JsonFormObject[] = [\n  {\n    title: t('Security & Privacy'),\n    fields: [\n      {\n        name: 'storeCrashReports',\n        type: 'select',\n        label: t('Store Native Crash Reports'),\n        help: ({organization}) =>\n          tct(\n            'Store native crash reports such as Minidumps for improved processing and download in issue details. Overrides [organizationSettingsLink: organization settings].',\n            {\n              organizationSettingsLink: (\n                <Link to={`/settings/${organization.slug}/security-and-privacy/`} />\n              ),\n            }\n          ),\n        visible: ({features}) => features.has('event-attachments'),\n        placeholder: ({organization, value}) => {\n          // empty value means that this project should inherit organization settings\n          if (value === '') {\n            return tct('Inherit organization settings ([organizationValue])', {\n              organizationValue: formatStoreCrashReports(organization.storeCrashReports),\n            });\n          }\n\n          // HACK: some organization can have limit of stored crash reports a number that's not in the options (legacy reasons),\n          // we therefore display it in a placeholder\n          return formatStoreCrashReports(value);\n        },\n        choices: ({organization}) =>\n          getStoreCrashReportsValues(SettingScope.PROJECT).map(value => [\n            value,\n            formatStoreCrashReports(value, organization.storeCrashReports),\n          ]),\n      },\n    ],\n  },\n  {\n    title: t('Data Scrubbing'),\n    fields: [\n      {\n        name: 'dataScrubber',\n        type: 'boolean',\n        label: t('Data Scrubber'),\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        help: t('Enable server-side data scrubbing'),\n        'aria-label': t('Enable server-side data scrubbing'),\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        confirm: {\n          false: t('Are you sure you want to disable server-side data scrubbing?'),\n        },\n      },\n      {\n        name: 'dataScrubberDefaults',\n        type: 'boolean',\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        label: t('Use Default Scrubbers'),\n        help: t(\n          'Apply default scrubbers to prevent things like passwords and credit cards from being stored'\n        ),\n        'aria-label': t(\n          'Enable to apply default scrubbers to prevent things like passwords and credit cards from being stored'\n        ),\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        confirm: {\n          false: t('Are you sure you want to disable using default scrubbers?'),\n        },\n      },\n      {\n        name: 'scrubIPAddresses',\n        type: 'boolean',\n        disabled: hasOrgOverride,\n        disabledReason: ORG_DISABLED_REASON,\n        // `props` are the props given to FormField\n        setValue: (val, props) =>\n          (props.organization && props.organization[props.name]) || val,\n        label: t('Prevent Storing of IP Addresses'),\n        help: t('Preventing IP addresses from being stored for new events'),\n        'aria-label': t(\n          'Enable to prevent IP addresses from being stored for new events'\n        ),\n        confirm: {\n          false: t('Are you sure you want to disable scrubbing IP addresses?'),\n        },\n      },\n      {\n        name: 'sensitiveFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        rows: 1,\n        placeholder: t('email'),\n        label: t('Additional Sensitive Fields'),\n        help: t(\n          'Additional field names to match against when scrubbing data. Separate multiple entries with a newline'\n        ),\n        'aria-label': t(\n          'Enter additional field names to match against when scrubbing data. Separate multiple entries with a newline'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'safeFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        rows: 1,\n        placeholder: t('business-email'),\n        label: t('Safe Fields'),\n        help: t(\n          'Field names which data scrubbers should ignore. Separate multiple entries with a newline'\n        ),\n        'aria-label': t(\n          'Enter field names which data scrubbers should ignore. Separate multiple entries with a newline'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {Fragment} from 'react';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport Link from 'sentry/components/links/link';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport projectSecurityAndPrivacyGroups from 'sentry/data/forms/projectSecurityAndPrivacyGroups';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {Organization, Project} from 'sentry/types';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\nimport {DataScrubbing} from '../components/dataScrubbing';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nexport default function ProjectSecurityAndPrivacy({organization, project}: Props) {\n  function handleUpdateProject(data: Project) {\n    // This will update our project global state\n    ProjectsStore.onUpdateSuccess(data);\n  }\n\n  const initialData = project;\n  const projectSlug = project.slug;\n  const endpoint = `/projects/${organization.slug}/${projectSlug}/`;\n  const features = new Set(organization.features);\n  const relayPiiConfig = project.relayPiiConfig;\n  const apiMethod = 'PUT';\n  const title = t('Security & Privacy');\n\n  const hasAccess = hasEveryAccess(['project:write'], {organization, project});\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={title} projectSlug={projectSlug} />\n      <SettingsPageHeader title={title} />\n      <PermissionAlert project={project} />\n\n      <Form\n        saveOnBlur\n        allowUndo\n        initialData={initialData}\n        apiMethod={apiMethod}\n        apiEndpoint={endpoint}\n        onSubmitSuccess={handleUpdateProject}\n        onSubmitError={() => addErrorMessage('Unable to save change')}\n      >\n        <JsonForm\n          additionalFieldProps={{organization}}\n          features={features}\n          disabled={!hasAccess}\n          forms={projectSecurityAndPrivacyGroups}\n        />\n      </Form>\n      <DataScrubbing\n        additionalContext={\n          <span>\n            {tct(\n              'These rules can be configured at the organization level in [linkToOrganizationSecurityAndPrivacy].',\n              {\n                linkToOrganizationSecurityAndPrivacy: (\n                  <Link to={`/settings/${organization.slug}/security-and-privacy/`}>\n                    {title}\n                  </Link>\n                ),\n              }\n            )}\n          </span>\n        }\n        endpoint={endpoint}\n        relayPiiConfig={relayPiiConfig}\n        disabled={!hasAccess}\n        organization={organization}\n        project={project}\n        onSubmitSuccess={data => handleUpdateProject({...project, ...data})}\n      />\n    </Fragment>\n  );\n}\n"],"names":["route","ORG_DISABLED_REASON","t","hasOrgOverride","_ref","organization","name","title","fields","type","label","help","_ref2","tct","organizationSettingsLink","_jsx","Link","to","slug","visible","_ref3","features","has","placeholder","_ref4","value","organizationValue","formatStoreCrashReports","storeCrashReports","choices","_ref5","getStoreCrashReportsValues","SettingScope","PROJECT","map","disabled","disabledReason","setValue","val","props","confirm","false","multiline","autosize","maxRows","rows","getValue","extractMultilineFields","convertMultilineFieldValue","permissionAlertText","PermissionAlert","access","project","team","Access","children","hasAccess","Alert","displayName","ProjectSecurityAndPrivacy","handleUpdateProject","data","ProjectsStore","onUpdateSuccess","initialData","projectSlug","endpoint","Set","relayPiiConfig","hasEveryAccess","_jsxs","Fragment","SentryDocumentTitle","SettingsPageHeader","Form","saveOnBlur","allowUndo","apiMethod","apiEndpoint","onSubmitSuccess","onSubmitError","addErrorMessage","JsonForm","additionalFieldProps","forms","projectSecurityAndPrivacyGroups","DataScrubbing","additionalContext","linkToOrganizationSecurityAndPrivacy"],"sourceRoot":""}