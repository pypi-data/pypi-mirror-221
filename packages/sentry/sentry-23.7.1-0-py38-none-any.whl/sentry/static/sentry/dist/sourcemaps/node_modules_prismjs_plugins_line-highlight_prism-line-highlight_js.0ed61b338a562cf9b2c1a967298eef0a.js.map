{"version":3,"file":"chunks/node_modules_prismjs_plugins_line-highlight_prism-line-highlight_js.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///../node_modules/prismjs/plugins/line-highlight/prism-line-highlight.js"],"sourcesContent":["(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined' || !document.querySelector) {\n\t\treturn;\n\t}\n\n\tvar LINE_NUMBERS_CLASS = 'line-numbers';\n\tvar LINKABLE_LINE_NUMBERS_CLASS = 'linkable-line-numbers';\n\tvar NEW_LINE_EXP = /\\n(?!$)/g;\n\n\t/**\n\t * @param {string} selector\n\t * @param {ParentNode} [container]\n\t * @returns {HTMLElement[]}\n\t */\n\tfunction $$(selector, container) {\n\t\treturn Array.prototype.slice.call((container || document).querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Returns whether the given element has the given class.\n\t *\n\t * @param {Element} element\n\t * @param {string} className\n\t * @returns {boolean}\n\t */\n\tfunction hasClass(element, className) {\n\t\treturn element.classList.contains(className);\n\t}\n\n\t/**\n\t * Calls the given function.\n\t *\n\t * @param {() => any} func\n\t * @returns {void}\n\t */\n\tfunction callFunction(func) {\n\t\tfunc();\n\t}\n\n\t// Some browsers round the line-height, others don't.\n\t// We need to test for it to position the elements properly.\n\tvar isLineHeightRounded = (function () {\n\t\tvar res;\n\t\treturn function () {\n\t\t\tif (typeof res === 'undefined') {\n\t\t\t\tvar d = document.createElement('div');\n\t\t\t\td.style.fontSize = '13px';\n\t\t\t\td.style.lineHeight = '1.5';\n\t\t\t\td.style.padding = '0';\n\t\t\t\td.style.border = '0';\n\t\t\t\td.innerHTML = '&nbsp;<br />&nbsp;';\n\t\t\t\tdocument.body.appendChild(d);\n\t\t\t\t// Browsers that round the line-height should have offsetHeight === 38\n\t\t\t\t// The others should have 39.\n\t\t\t\tres = d.offsetHeight === 38;\n\t\t\t\tdocument.body.removeChild(d);\n\t\t\t}\n\t\t\treturn res;\n\t\t};\n\t}());\n\n\t/**\n\t * Returns the top offset of the content box of the given parent and the content box of one of its children.\n\t *\n\t * @param {HTMLElement} parent\n\t * @param {HTMLElement} child\n\t */\n\tfunction getContentBoxTopOffset(parent, child) {\n\t\tvar parentStyle = getComputedStyle(parent);\n\t\tvar childStyle = getComputedStyle(child);\n\n\t\t/**\n\t\t * Returns the numeric value of the given pixel value.\n\t\t *\n\t\t * @param {string} px\n\t\t */\n\t\tfunction pxToNumber(px) {\n\t\t\treturn +px.substr(0, px.length - 2);\n\t\t}\n\n\t\treturn child.offsetTop\n\t\t\t+ pxToNumber(childStyle.borderTopWidth)\n\t\t\t+ pxToNumber(childStyle.paddingTop)\n\t\t\t- pxToNumber(parentStyle.paddingTop);\n\t}\n\n\t/**\n\t * Returns whether the Line Highlight plugin is active for the given element.\n\t *\n\t * If this function returns `false`, do not call `highlightLines` for the given element.\n\t *\n\t * @param {HTMLElement | null | undefined} pre\n\t * @returns {boolean}\n\t */\n\tfunction isActiveFor(pre) {\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (pre.hasAttribute('data-line')) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (pre.id && Prism.util.isActive(pre, LINKABLE_LINE_NUMBERS_CLASS)) {\n\t\t\t// Technically, the line numbers plugin is also necessary but this plugin doesn't control the classes of\n\t\t\t// the line numbers plugin, so we can't assume that they are present.\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tvar scrollIntoView = true;\n\n\tPrism.plugins.lineHighlight = {\n\t\t/**\n\t\t * Highlights the lines of the given pre.\n\t\t *\n\t\t * This function is split into a DOM measuring and mutate phase to improve performance.\n\t\t * The returned function mutates the DOM when called.\n\t\t *\n\t\t * @param {HTMLElement} pre\n\t\t * @param {string | null} [lines]\n\t\t * @param {string} [classes='']\n\t\t * @returns {() => void}\n\t\t */\n\t\thighlightLines: function highlightLines(pre, lines, classes) {\n\t\t\tlines = typeof lines === 'string' ? lines : (pre.getAttribute('data-line') || '');\n\n\t\t\tvar ranges = lines.replace(/\\s+/g, '').split(',').filter(Boolean);\n\t\t\tvar offset = +pre.getAttribute('data-line-offset') || 0;\n\n\t\t\tvar parseMethod = isLineHeightRounded() ? parseInt : parseFloat;\n\t\t\tvar lineHeight = parseMethod(getComputedStyle(pre).lineHeight);\n\t\t\tvar hasLineNumbers = Prism.util.isActive(pre, LINE_NUMBERS_CLASS);\n\t\t\tvar codeElement = pre.querySelector('code');\n\t\t\tvar parentElement = hasLineNumbers ? pre : codeElement || pre;\n\t\t\tvar mutateActions = /** @type {(() => void)[]} */ ([]);\n\t\t\tvar lineBreakMatch = codeElement.textContent.match(NEW_LINE_EXP);\n\t\t\tvar numberOfLines = lineBreakMatch ? lineBreakMatch.length + 1 : 1;\n\t\t\t/**\n\t\t\t * The top offset between the content box of the <code> element and the content box of the parent element of\n\t\t\t * the line highlight element (either `<pre>` or `<code>`).\n\t\t\t *\n\t\t\t * This offset might not be zero for some themes where the <code> element has a top margin. Some plugins\n\t\t\t * (or users) might also add element above the <code> element. Because the line highlight is aligned relative\n\t\t\t * to the <pre> element, we have to take this into account.\n\t\t\t *\n\t\t\t * This offset will be 0 if the parent element of the line highlight element is the `<code>` element.\n\t\t\t */\n\t\t\tvar codePreOffset = !codeElement || parentElement == codeElement ? 0 : getContentBoxTopOffset(pre, codeElement);\n\n\t\t\tranges.forEach(function (currentRange) {\n\t\t\t\tvar range = currentRange.split('-');\n\n\t\t\t\tvar start = +range[0];\n\t\t\t\tvar end = +range[1] || start;\n\t\t\t\tend = Math.min(numberOfLines + offset, end);\n\n\t\t\t\tif (end < start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t/** @type {HTMLElement} */\n\t\t\t\tvar line = pre.querySelector('.line-highlight[data-range=\"' + currentRange + '\"]') || document.createElement('div');\n\n\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\tline.setAttribute('aria-hidden', 'true');\n\t\t\t\t\tline.setAttribute('data-range', currentRange);\n\t\t\t\t\tline.className = (classes || '') + ' line-highlight';\n\t\t\t\t});\n\n\t\t\t\t// if the line-numbers plugin is enabled, then there is no reason for this plugin to display the line numbers\n\t\t\t\tif (hasLineNumbers && Prism.plugins.lineNumbers) {\n\t\t\t\t\tvar startNode = Prism.plugins.lineNumbers.getLine(pre, start);\n\t\t\t\t\tvar endNode = Prism.plugins.lineNumbers.getLine(pre, end);\n\n\t\t\t\t\tif (startNode) {\n\t\t\t\t\t\tvar top = startNode.offsetTop + codePreOffset + 'px';\n\t\t\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\t\t\tline.style.top = top;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (endNode) {\n\t\t\t\t\t\tvar height = (endNode.offsetTop - startNode.offsetTop) + endNode.offsetHeight + 'px';\n\t\t\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\t\t\tline.style.height = height;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\t\tline.setAttribute('data-start', String(start));\n\n\t\t\t\t\t\tif (end > start) {\n\t\t\t\t\t\t\tline.setAttribute('data-end', String(end));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tline.style.top = (start - offset - 1) * lineHeight + codePreOffset + 'px';\n\n\t\t\t\t\t\tline.textContent = new Array(end - start + 2).join(' \\n');\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\tline.style.width = pre.scrollWidth + 'px';\n\t\t\t\t});\n\n\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\t// allow this to play nicely with the line-numbers plugin\n\t\t\t\t\t// need to attack to pre as when line-numbers is enabled, the code tag is relatively which screws up the positioning\n\t\t\t\t\tparentElement.appendChild(line);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tvar id = pre.id;\n\t\t\tif (hasLineNumbers && Prism.util.isActive(pre, LINKABLE_LINE_NUMBERS_CLASS) && id) {\n\t\t\t\t// This implements linkable line numbers. Linkable line numbers use Line Highlight to create a link to a\n\t\t\t\t// specific line. For this to work, the pre element has to:\n\t\t\t\t//  1) have line numbers,\n\t\t\t\t//  2) have the `linkable-line-numbers` class or an ascendant that has that class, and\n\t\t\t\t//  3) have an id.\n\n\t\t\t\tif (!hasClass(pre, LINKABLE_LINE_NUMBERS_CLASS)) {\n\t\t\t\t\t// add class to pre\n\t\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\t\tpre.classList.add(LINKABLE_LINE_NUMBERS_CLASS);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tvar start = parseInt(pre.getAttribute('data-start') || '1');\n\n\t\t\t\t// iterate all line number spans\n\t\t\t\t$$('.line-numbers-rows > span', pre).forEach(function (lineSpan, i) {\n\t\t\t\t\tvar lineNumber = i + start;\n\t\t\t\t\tlineSpan.onclick = function () {\n\t\t\t\t\t\tvar hash = id + '.' + lineNumber;\n\n\t\t\t\t\t\t// this will prevent scrolling since the span is obviously in view\n\t\t\t\t\t\tscrollIntoView = false;\n\t\t\t\t\t\tlocation.hash = hash;\n\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\tscrollIntoView = true;\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn function () {\n\t\t\t\tmutateActions.forEach(callFunction);\n\t\t\t};\n\t\t}\n\t};\n\n\n\tfunction applyHash() {\n\t\tvar hash = location.hash.slice(1);\n\n\t\t// Remove pre-existing temporary lines\n\t\t$$('.temporary.line-highlight').forEach(function (line) {\n\t\t\tline.parentNode.removeChild(line);\n\t\t});\n\n\t\tvar range = (hash.match(/\\.([\\d,-]+)$/) || [, ''])[1];\n\n\t\tif (!range || document.getElementById(hash)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar id = hash.slice(0, hash.lastIndexOf('.'));\n\t\tvar pre = document.getElementById(id);\n\n\t\tif (!pre) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!pre.hasAttribute('data-line')) {\n\t\t\tpre.setAttribute('data-line', '');\n\t\t}\n\n\t\tvar mutateDom = Prism.plugins.lineHighlight.highlightLines(pre, range, 'temporary ');\n\t\tmutateDom();\n\n\t\tif (scrollIntoView) {\n\t\t\tdocument.querySelector('.temporary.line-highlight').scrollIntoView();\n\t\t}\n\t}\n\n\tvar fakeTimer = 0; // Hack to limit the number of times applyHash() runs\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = env.element.parentElement;\n\t\tif (!isActiveFor(pre)) {\n\t\t\treturn;\n\t\t}\n\n\t\t/*\n\t\t * Cleanup for other plugins (e.g. autoloader).\n\t\t *\n\t\t * Sometimes <code> blocks are highlighted multiple times. It is necessary\n\t\t * to cleanup any left-over tags, because the whitespace inside of the <div>\n\t\t * tags change the content of the <code> tag.\n\t\t */\n\t\tvar num = 0;\n\t\t$$('.line-highlight', pre).forEach(function (line) {\n\t\t\tnum += line.textContent.length;\n\t\t\tline.parentNode.removeChild(line);\n\t\t});\n\t\t// Remove extra whitespace\n\t\tif (num && /^(?: \\n)+$/.test(env.code.slice(-num))) {\n\t\t\tenv.code = env.code.slice(0, -num);\n\t\t}\n\t});\n\n\tPrism.hooks.add('complete', function completeHook(env) {\n\t\tvar pre = env.element.parentElement;\n\t\tif (!isActiveFor(pre)) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearTimeout(fakeTimer);\n\n\t\tvar hasLineNumbers = Prism.plugins.lineNumbers;\n\t\tvar isLineNumbersLoaded = env.plugins && env.plugins.lineNumbers;\n\n\t\tif (hasClass(pre, LINE_NUMBERS_CLASS) && hasLineNumbers && !isLineNumbersLoaded) {\n\t\t\tPrism.hooks.add('line-numbers', completeHook);\n\t\t} else {\n\t\t\tvar mutateDom = Prism.plugins.lineHighlight.highlightLines(pre);\n\t\t\tmutateDom();\n\t\t\tfakeTimer = setTimeout(applyHash, 1);\n\t\t}\n\t});\n\n\twindow.addEventListener('hashchange', applyHash);\n\twindow.addEventListener('resize', function () {\n\t\tvar actions = $$('pre')\n\t\t\t.filter(isActiveFor)\n\t\t\t.map(function (pre) {\n\t\t\t\treturn Prism.plugins.lineHighlight.highlightLines(pre);\n\t\t\t});\n\t\tactions.forEach(callFunction);\n\t});\n\n}());\n"],"names":["Prism","document","querySelector","res","LINE_NUMBERS_CLASS","LINKABLE_LINE_NUMBERS_CLASS","NEW_LINE_EXP","scrollIntoView","plugins","lineHighlight","highlightLines","pre","lines","classes","ranges","getAttribute","replace","split","filter","Boolean","offset","lineHeight","d","createElement","style","fontSize","padding","border","innerHTML","body","appendChild","offsetHeight","removeChild","isLineHeightRounded","parseInt","parseFloat","getComputedStyle","hasLineNumbers","util","isActive","codeElement","parentElement","mutateActions","lineBreakMatch","textContent","match","numberOfLines","length","codePreOffset","parent","child","parentStyle","childStyle","pxToNumber","px","substr","offsetTop","borderTopWidth","paddingTop","getContentBoxTopOffset","forEach","currentRange","range","start","end","Math","min","line","push","setAttribute","className","lineNumbers","startNode","getLine","endNode","top","height","String","Array","join","width","scrollWidth","id","hasClass","classList","add","$$","lineSpan","i","lineNumber","onclick","hash","location","setTimeout","callFunction","fakeTimer","hooks","env","element","isActiveFor","num","parentNode","test","code","slice","completeHook","clearTimeout","isLineNumbersLoaded","mutateDom","applyHash","window","addEventListener","map","selector","container","prototype","call","querySelectorAll","contains","func","nodeName","hasAttribute","getElementById","lastIndexOf"],"sourceRoot":""}