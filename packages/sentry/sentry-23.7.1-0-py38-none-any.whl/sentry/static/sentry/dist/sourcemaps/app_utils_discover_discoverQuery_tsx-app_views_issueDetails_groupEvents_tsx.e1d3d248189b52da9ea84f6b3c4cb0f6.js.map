{"version":3,"file":"chunks/app_utils_discover_discoverQuery_tsx-app_views_issueDetails_groupEvents_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"+XA6CA,SAASA,EACPC,EACAC,GAEA,OACED,EAAUE,kBAAoBD,EAAUC,iBACxCF,EAAUG,uBAAyBF,EAAUE,sBAC7CH,EAAUI,6BAA+BH,EAAUG,0BAEvD,CAEA,SAASC,EAAcC,GAQrB,OACEC,EAAAA,EAAAA,IAACC,EAAAA,GAAoB,CACnBC,MAAM,SACNV,kBAAmBA,EACnBW,WAXeA,CAACC,EAAMC,KACxB,MAAM,OAACC,KAAWC,GAAaH,EAAKI,MAAQ,CAAC,EAC7C,MAAO,IACFJ,EACHI,KAAM,IAAIF,KAAWC,GACtB,KAOKR,GAGV,CAEO,SAASU,EAAiBV,GAC/B,MAQMW,GAAMC,EAAAA,EAAAA,IAAqE,CAC/ET,MAAO,SACPV,oBACAW,WAXiBA,CAACC,EAAMC,KACxB,MAAM,OAACC,KAAWC,GAAaH,EAAKI,MAAQ,CAAC,EAC7C,MAAO,IACFJ,EACHI,KAAM,IAAIF,KAAWC,GACtB,KAOER,IAGCa,EAAYF,EAAIG,UAAUC,kBAAkB,cAAWC,EAE7D,MAAO,IAAIL,EAAKE,YAClB,CArCSd,EAAakB,YAAA,gBAuCtB,S,4MCjCA,QAnBA,SAAwCC,GAAwB,IAAvB,cAACC,GAAoBD,EAC5D,MAAME,GAAWC,EAAAA,EAAAA,KAEXC,GAAeC,EAAAA,EAAAA,cACnBC,KArCG,SAAyBC,GAQ7B,IARgD,cACjDN,EAAa,YACbK,EAAW,YACXE,GAKDD,EACC,MAAME,EAAgBR,EAAcS,MAClCC,QAAsCb,IAA7BQ,EAAYM,MAAMD,KAG7B,GAAIL,EAAYO,WAAaL,IAAgBC,EAC3C,OAKF,MAAMG,EAAQX,EAAca,QAC1B,CAACC,EAAUJ,KACTI,EAASJ,QAASb,EACXiB,IAET,IAAIT,EAAYM,QAGlBI,EAAAA,eAAeC,QAAQ,CACrBJ,SAAUP,EAAYO,SACtBD,SAEJ,CAOMM,CAAiB,CACfjB,gBACAK,cACAE,YAAaN,EAASW,UACtB,GAEJ,CAACX,EAASW,SAAUZ,KAGtBkB,EAAAA,EAAAA,YAAU,IACDH,EAAAA,eAAeI,OAAOhB,IAC5B,CAACA,GACN,C,qlCC7BA,SAASiB,EAAevC,GACtB,MAAM,SAACoB,EAAQ,aAAEoB,EAAY,QAAEC,EAAO,aAAEC,EAAY,MAAEC,GAAS3C,EACzD4C,GAASC,EAAAA,EAAAA,GAAsB7C,EAAM2C,QACpCG,EAAOC,IAAYC,EAAAA,EAAAA,UAAiB,IACrCC,GAASC,EAAAA,EAAAA,MACT,OAAC3C,EAAM,aAAE4C,GAAgBC,EAAWT,EAAOH,GAE3Ca,EAX2B5B,KAAkC,IAAjC,QAAC6B,GAA2B7B,EAC9D,MAAQ,WAAU6B,kBAAwB,EAUtBC,CAA2B,CAC7CD,QAASX,EAAMa,KAGXC,EAAed,EAAMe,gBAAkBC,EAAAA,GAAcC,aACrD,KAACvD,EAAI,UAAEwD,EAAS,eAAEC,IAAkBC,EAAAA,EAAAA,IAA8B,CAACV,GAAc,CACrFW,UAAW,IACXC,QAASR,IAMLS,IAA4B7D,GAAM8D,WAElCC,EAAuBC,EAAAA,GAAUC,aAAatE,EAAMoB,WAExDwB,EAAO2B,mBACN5B,EAAMe,gBAAkBC,EAAAA,GAAcC,aAAeM,KAEtDE,EAAUI,QAAUC,EAAAA,GAAiBC,gBAEvCN,EAAU7D,OAASA,EAAOoE,KAAIC,IAAa,CAAE/C,MAAO+C,MAEpDR,EAAUS,OAAQC,EAAAA,EAAAA,IAAY1D,GAAU2D,QAAOC,GAAQzE,EAAO0E,SAASD,EAAKnD,UAE5EQ,EAAAA,EAAAA,YAAU,KACRU,EAAS,GAAG,GACX,CAACqB,EAAUtC,QAETsC,EAAUS,MAAMK,SACnBd,EAAUS,MAAQ,CAAC,CAAChD,MAAO,YAAasD,KAAM,UAGhD,MAAMC,EACJzC,EAAMe,gBAAkBC,EAAAA,GAAcC,aAAgBM,EAEjD,YAAWzB,IADX,yBAAwBA,2BAM/B,OAJA2B,EAAUiB,QAAU,CAACC,SAAS3C,EAAM0C,QAAQ7B,GAAI,KAChDY,EAAUtC,MAAS,GAAEsD,KAAWpF,EAAMoB,SAASU,MAAMA,OAAS,KAC9DsC,EAAUmB,YAAc,MAEpBzC,GAASgB,GAET7D,EAAAA,EAAAA,IAACuF,EAAAA,EAAY,CAACC,QAAS3C,GAASgB,EAAgB4B,QAASA,IAAM3C,EAAS,OAK1E9C,EAAAA,EAAAA,IAAC0F,EAAAA,EAAW,CACVvB,UAAWA,EACXhD,SAAUA,EACVqB,QAASA,EACTD,aAAcA,EACdS,OAAQA,EACRP,aAAcA,EACdkD,YAAajD,EAAM0C,QAAQQ,KAC3BC,cAAe,CAAC,YAChB/C,SAAWgD,GAA4BhD,EAASgD,GAAO,IACvDnG,gBAAgB,GAChBuD,aAAcA,EAAa6C,QAC3BC,SAAS,0BACTC,iBAAgBzC,GAAeI,GAGrC,CAxEStB,EAActB,YAAA,iBA4EvB,MAAMmC,EAAaA,CAACT,EAAcH,KAChC,MAAM2D,EAAcxD,EAAMe,gBAAkBC,EAAAA,GAAcC,YACpDwC,EAAkB5D,EAAa6D,SAASpB,SAAS,kBAIjDqB,EAAqBH,GAAe3D,EAAa6D,SAASpB,SAAS,cAElE1E,OAAQgG,EAAwBpD,aAAcqD,GACnDC,EAAmB9D,EAAM0C,QAAQqB,UAAY/D,EAAM+D,SAAU,CAC3DJ,qBACAF,oBAgCJ,MAAO,CACL7F,OA9BuB,CACvB,KACA,cACA,QACA,UACA,cACA,eACA,SACA,QACGgG,KACCJ,EAAc,CAAC,wBAA0B,GAC7C,aAoBAhD,aAjB6B,EAC7BwD,EAAAA,EAAAA,GAAE,aACFA,EAAAA,EAAAA,GAAE,gBACFA,EAAAA,EAAAA,GAAE,UACFA,EAAAA,EAAAA,GAAE,YACFA,EAAAA,EAAAA,GAAE,gBACFA,EAAAA,EAAAA,GAAE,SACFA,EAAAA,EAAAA,GAAE,WACFA,EAAAA,EAAAA,GAAE,SACCH,KACCL,EAAc,EAACQ,EAAAA,EAAAA,GAAE,mBAAqB,IAC1CA,EAAAA,EAAAA,GAAE,cACFA,EAAAA,EAAAA,GAAE,aAMH,EAGGF,EAAqBA,CACzBC,EACAE,KAEA,MAAMC,EAA8B,CAClCtG,OAAQ,CAAC,MAAO,WAChB4C,aAAc,EAACwD,EAAAA,EAAAA,GAAE,QAAQA,EAAAA,EAAAA,GAAE,aAyBvBG,EAtB4D,CAChE,CAACC,EAAAA,GAAiBC,SAAUH,EAC5B,CAACE,EAAAA,GAAiBE,YAAaJ,EAC/B,CAACE,EAAAA,GAAiBG,UAAW,CAC3B3G,OAAQ,CAAC,MAAO,WAChB4C,aAAc,EAACwD,EAAAA,EAAAA,GAAE,QAAQA,EAAAA,EAAAA,GAAE,aAE7B,CAACI,EAAAA,GAAiBI,QAAS,CACzB5G,OAAQ,CAAC,OACT4C,aAAc,EAACwD,EAAAA,EAAAA,GAAE,SAEnB,CAACI,EAAAA,GAAiBK,SAAU,CAC1B7G,OAAQ,GACR4C,aAAc,IAEhB,CAAC4D,EAAAA,GAAiBM,OAAQ,CACxB9G,OAAQ,GACR4C,aAAc,MAIOmE,EAAAA,EAAAA,IAAmBZ,IAa5C,OAVIE,EAAQR,kBACVU,EAAgBvG,OAAOgH,KAAK,YAC5BT,EAAgB3D,aAAaoE,MAAKZ,EAAAA,EAAAA,GAAE,YAGlCC,EAAQN,oBAAsBI,GAAYc,EAAAA,GAAoBvC,SAASyB,KACzEI,EAAgB3D,aAAaoE,MAAKZ,EAAAA,EAAAA,GAAE,YACpCG,EAAgBvG,OAAOgH,KAAK,eAGvBT,CAAe,EAGxB,ICxLMpE,EAAe,CACnB,cACA,QACA,WACA,wBACA,iBACA,sBAGF,SAAS+E,EAAWhG,GAAmC,IAAlC,OAACiG,EAAM,SAAEtG,EAAQ,MAAEuB,GAAalB,EACnD,MAAMe,GAAemF,EAAAA,EAAAA,MAEf,QAACrE,GAAWoE,GAElBE,EAAAA,EAAAA,GAAgC,CAACzG,cAAe,CAAC,SAAU,WAE3D,MAAM0G,GAAetG,EAAAA,EAAAA,cAClBO,GACCI,EAAAA,eAAeqF,MACbO,EAAAA,EAAAA,GAAa,CACX/F,SAAW,kBAAiBS,EAAaqD,eAAevC,YACxDxB,MAAO,IAAIV,EAASU,MAAOA,aAGjC,CAACV,EAAUoB,EAAcc,IAG3B,OACErD,EAAAA,EAAAA,IAAC8H,EAAAA,GAAW,CAAAC,UACVC,EAAAA,EAAAA,IAACF,EAAAA,GAAW,CAACG,WAAS,EAAAF,SAAA,EACpB/H,EAAAA,EAAAA,IAACkI,EAAgB,CAAAH,UACf/H,EAAAA,EAAAA,IAACmI,EAAAA,EAAc,CACb5F,aAAcA,EACd6F,aAAa,GACbC,SAAUT,EACVnF,aAAcA,EACdZ,MAAOV,EAASU,OAAOA,OAAS,GAChCyG,mBAAmB,OAGvBtI,EAAAA,EAAAA,IAACsC,EAAc,CACbE,QAASE,EAAMa,GACfpC,SAAUA,EACVoB,aAAcA,EACdG,MAAOA,EACPD,aAAcA,QAKxB,CAzCS+E,EAAWxG,YAAA,cA2CpB,MAAMkH,GAAmBK,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,YAAZD,CAAa,kBACnBE,EAAAA,EAAAA,GAAM,GAAE,KAG3B,G","sources":["webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/useCleanQueryParamsOnRouteLeave.tsx","webpack:///./app/views/issueDetails/allEventsTable.tsx","webpack:///./app/views/issueDetails/groupEvents.tsx"],"sourcesContent":["import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n  useGenericDiscoverQuery,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\nexport type DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\nexport type DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route=\"events\"\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport function useDiscoverQuery(props: Omit<DiscoverQueryComponentProps, 'children'>) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n\n  const res = useGenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>({\n    route: 'events',\n    shouldRefetchData,\n    afterFetch,\n    ...props,\n  });\n\n  const pageLinks = res.response?.getResponseHeader('Link') ?? undefined;\n\n  return {...res, pageLinks};\n}\n\nexport default DiscoverQuery;\n","import {useCallback, useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport type {Location} from 'history';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\ntype Opts = {\n  fieldsToClean: string[];\n};\n\nexport function handleRouteLeave<Q extends object>({\n  fieldsToClean,\n  newLocation,\n  oldPathname,\n}: {\n  fieldsToClean: string[];\n  newLocation: Location<Q>;\n  oldPathname: string;\n}) {\n  const hasSomeValues = fieldsToClean.some(\n    field => newLocation.query[field] !== undefined\n  );\n\n  if (newLocation.pathname === oldPathname || !hasSomeValues) {\n    return;\n  }\n\n  // Removes fields from the URL on route leave so that the parameters will\n  // not interfere with other pages\n  const query = fieldsToClean.reduce(\n    (newQuery, field) => {\n      newQuery[field] = undefined;\n      return newQuery;\n    },\n    {...newLocation.query}\n  );\n\n  browserHistory.replace({\n    pathname: newLocation.pathname,\n    query,\n  });\n}\n\nfunction useCleanQueryParamsOnRouteLeave({fieldsToClean}: Opts) {\n  const location = useLocation();\n\n  const onRouteLeave = useCallback(\n    newLocation => {\n      handleRouteLeave({\n        fieldsToClean,\n        newLocation,\n        oldPathname: location.pathname,\n      });\n    },\n    [location.pathname, fieldsToClean]\n  );\n\n  useEffect(() => {\n    return browserHistory.listen(onRouteLeave);\n  }, [onRouteLeave]);\n}\n\nexport default useCleanQueryParamsOnRouteLeave;\n","import {useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport LoadingError from 'sentry/components/loadingError';\nimport {\n  PlatformCategory,\n  PlatformKey,\n  profiling as PROFILING_PLATFORMS,\n} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {EventTransaction, Group, IssueCategory, Organization} from 'sentry/types';\nimport EventView, {decodeSorts} from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {getConfigForIssueType} from 'sentry/utils/issueTypeConfig';\nimport {platformToCategory} from 'sentry/utils/platform';\nimport {useApiQuery} from 'sentry/utils/queryClient';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport EventsTable from 'sentry/views/performance/transactionSummary/transactionEvents/eventsTable';\n\nexport interface Props {\n  group: Group;\n  issueId: string;\n  location: Location;\n  organization: Organization;\n  excludedTags?: string[];\n}\n\nconst makeGroupPreviewRequestUrl = ({groupId}: {groupId: string}) => {\n  return `/issues/${groupId}/events/latest/`;\n};\n\nfunction AllEventsTable(props: Props) {\n  const {location, organization, issueId, excludedTags, group} = props;\n  const config = getConfigForIssueType(props.group);\n  const [error, setError] = useState<string>('');\n  const routes = useRoutes();\n  const {fields, columnTitles} = getColumns(group, organization);\n\n  const endpointUrl = makeGroupPreviewRequestUrl({\n    groupId: group.id,\n  });\n\n  const queryEnabled = group.issueCategory === IssueCategory.PERFORMANCE;\n  const {data, isLoading, isLoadingError} = useApiQuery<EventTransaction>([endpointUrl], {\n    staleTime: 60000,\n    enabled: queryEnabled,\n  });\n\n  // TODO: this is a temporary way to check whether\n  // perf issue is backed by occurrences or transactions\n  // Once migration to the issue platform is complete a call to /latest should be removed\n  const groupIsOccurrenceBacked = !!data?.occurrence;\n\n  const eventView: EventView = EventView.fromLocation(props.location);\n  if (\n    config.usesIssuePlatform ||\n    (group.issueCategory === IssueCategory.PERFORMANCE && groupIsOccurrenceBacked)\n  ) {\n    eventView.dataset = DiscoverDatasets.ISSUE_PLATFORM;\n  }\n  eventView.fields = fields.map(fieldName => ({field: fieldName}));\n\n  eventView.sorts = decodeSorts(location).filter(sort => fields.includes(sort.field));\n\n  useEffect(() => {\n    setError('');\n  }, [eventView.query]);\n\n  if (!eventView.sorts.length) {\n    eventView.sorts = [{field: 'timestamp', kind: 'desc'}];\n  }\n\n  const idQuery =\n    group.issueCategory === IssueCategory.PERFORMANCE && !groupIsOccurrenceBacked\n      ? `performance.issue_ids:${issueId} event.type:transaction`\n      : `issue.id:${issueId}`;\n  eventView.project = [parseInt(group.project.id, 10)];\n  eventView.query = `${idQuery} ${props.location.query.query || ''}`;\n  eventView.statsPeriod = '90d';\n\n  if (error || isLoadingError) {\n    return (\n      <LoadingError message={error || isLoadingError} onRetry={() => setError('')} />\n    );\n  }\n\n  return (\n    <EventsTable\n      eventView={eventView}\n      location={location}\n      issueId={issueId}\n      organization={organization}\n      routes={routes}\n      excludedTags={excludedTags}\n      projectSlug={group.project.slug}\n      customColumns={['minidump']}\n      setError={(msg: string | undefined) => setError(msg ?? '')}\n      transactionName=\"\"\n      columnTitles={columnTitles.slice()}\n      referrer=\"api.issues.issue_events\"\n      isEventLoading={queryEnabled ? isLoading : false}\n    />\n  );\n}\n\ntype ColumnInfo = {columnTitles: string[]; fields: string[]};\n\nconst getColumns = (group: Group, organization: Organization): ColumnInfo => {\n  const isPerfIssue = group.issueCategory === IssueCategory.PERFORMANCE;\n  const isReplayEnabled = organization.features.includes('session-replay');\n\n  // profiles only exist on transactions, so this only works with\n  // performance issues, and not errors\n  const isProfilingEnabled = isPerfIssue && organization.features.includes('profiling');\n\n  const {fields: platformSpecificFields, columnTitles: platformSpecificColumnTitles} =\n    getPlatformColumns(group.project.platform ?? group.platform, {\n      isProfilingEnabled,\n      isReplayEnabled,\n    });\n\n  const fields: string[] = [\n    'id',\n    'transaction',\n    'title',\n    'release',\n    'environment',\n    'user.display',\n    'device',\n    'os',\n    ...platformSpecificFields,\n    ...(isPerfIssue ? ['transaction.duration'] : []),\n    'timestamp',\n  ];\n\n  const columnTitles: string[] = [\n    t('event id'),\n    t('transaction'),\n    t('title'),\n    t('release'),\n    t('environment'),\n    t('user'),\n    t('device'),\n    t('os'),\n    ...platformSpecificColumnTitles,\n    ...(isPerfIssue ? [t('total duration')] : []),\n    t('timestamp'),\n    t('minidump'),\n  ];\n\n  return {\n    fields,\n    columnTitles,\n  };\n};\n\nconst getPlatformColumns = (\n  platform: PlatformKey | undefined,\n  options: {isProfilingEnabled: boolean; isReplayEnabled: boolean}\n): ColumnInfo => {\n  const backendServerlessColumnInfo = {\n    fields: ['url', 'runtime'],\n    columnTitles: [t('url'), t('runtime')],\n  };\n\n  const categoryToColumnMap: Record<PlatformCategory, ColumnInfo> = {\n    [PlatformCategory.BACKEND]: backendServerlessColumnInfo,\n    [PlatformCategory.SERVERLESS]: backendServerlessColumnInfo,\n    [PlatformCategory.FRONTEND]: {\n      fields: ['url', 'browser'],\n      columnTitles: [t('url'), t('browser')],\n    },\n    [PlatformCategory.MOBILE]: {\n      fields: ['url'],\n      columnTitles: [t('url')],\n    },\n    [PlatformCategory.DESKTOP]: {\n      fields: [],\n      columnTitles: [],\n    },\n    [PlatformCategory.OTHER]: {\n      fields: [],\n      columnTitles: [],\n    },\n  };\n\n  const platformCategory = platformToCategory(platform);\n  const platformColumns = categoryToColumnMap[platformCategory];\n\n  if (options.isReplayEnabled) {\n    platformColumns.fields.push('replayId');\n    platformColumns.columnTitles.push(t('replay'));\n  }\n\n  if (options.isProfilingEnabled && platform && PROFILING_PLATFORMS.includes(platform)) {\n    platformColumns.columnTitles.push(t('profile'));\n    platformColumns.fields.push('profile.id');\n  }\n\n  return platformColumns;\n};\n\nexport default AllEventsTable;\n","import {useCallback} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport EventSearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {space} from 'sentry/styles/space';\nimport {Group} from 'sentry/types';\nimport useCleanQueryParamsOnRouteLeave from 'sentry/utils/useCleanQueryParamsOnRouteLeave';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nimport AllEventsTable from './allEventsTable';\n\ninterface Props extends RouteComponentProps<{groupId: string}, {}> {\n  group: Group;\n}\n\nconst excludedTags = [\n  'environment',\n  'issue',\n  'issue.id',\n  'performance.issue_ids',\n  'transaction.op',\n  'transaction.status',\n];\n\nfunction GroupEvents({params, location, group}: Props) {\n  const organization = useOrganization();\n\n  const {groupId} = params;\n\n  useCleanQueryParamsOnRouteLeave({fieldsToClean: ['cursor', 'query']});\n\n  const handleSearch = useCallback(\n    (query: string) =>\n      browserHistory.push(\n        normalizeUrl({\n          pathname: `/organizations/${organization.slug}/issues/${groupId}/events/`,\n          query: {...location.query, query},\n        })\n      ),\n    [location, organization, groupId]\n  );\n\n  return (\n    <Layout.Body>\n      <Layout.Main fullWidth>\n        <AllEventsFilters>\n          <EventSearchBar\n            organization={organization}\n            defaultQuery=\"\"\n            onSearch={handleSearch}\n            excludedTags={excludedTags}\n            query={location.query?.query ?? ''}\n            hasRecentSearches={false}\n          />\n        </AllEventsFilters>\n        <AllEventsTable\n          issueId={group.id}\n          location={location}\n          organization={organization}\n          group={group}\n          excludedTags={excludedTags}\n        />\n      </Layout.Main>\n    </Layout.Body>\n  );\n}\n\nconst AllEventsFilters = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nexport default GroupEvents;\n"],"names":["shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","props","_jsx","GenericDiscoverQuery","route","afterFetch","data","_","fields","otherMeta","meta","useDiscoverQuery","res","useGenericDiscoverQuery","pageLinks","response","getResponseHeader","undefined","displayName","_ref2","fieldsToClean","location","useLocation","onRouteLeave","useCallback","newLocation","_ref","oldPathname","hasSomeValues","some","field","query","pathname","reduce","newQuery","browserHistory","replace","handleRouteLeave","useEffect","listen","AllEventsTable","organization","issueId","excludedTags","group","config","getConfigForIssueType","error","setError","useState","routes","useRoutes","columnTitles","getColumns","endpointUrl","groupId","makeGroupPreviewRequestUrl","id","queryEnabled","issueCategory","IssueCategory","PERFORMANCE","isLoading","isLoadingError","useApiQuery","staleTime","enabled","groupIsOccurrenceBacked","occurrence","eventView","EventView","fromLocation","usesIssuePlatform","dataset","DiscoverDatasets","ISSUE_PLATFORM","map","fieldName","sorts","decodeSorts","filter","sort","includes","length","kind","idQuery","project","parseInt","statsPeriod","LoadingError","message","onRetry","EventsTable","projectSlug","slug","customColumns","msg","slice","referrer","isEventLoading","isPerfIssue","isReplayEnabled","features","isProfilingEnabled","platformSpecificFields","platformSpecificColumnTitles","getPlatformColumns","platform","t","options","backendServerlessColumnInfo","platformColumns","PlatformCategory","BACKEND","SERVERLESS","FRONTEND","MOBILE","DESKTOP","OTHER","platformToCategory","push","PROFILING_PLATFORMS","GroupEvents","params","useOrganization","useCleanQueryParamsOnRouteLeave","handleSearch","normalizeUrl","Layout","children","_jsxs","fullWidth","AllEventsFilters","EventSearchBar","defaultQuery","onSearch","hasRecentSearches","_styled","target","space"],"sourceRoot":""}