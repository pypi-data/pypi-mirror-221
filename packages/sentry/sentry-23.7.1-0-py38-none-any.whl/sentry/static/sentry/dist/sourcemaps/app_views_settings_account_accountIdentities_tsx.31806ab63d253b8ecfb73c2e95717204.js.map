{"version":3,"file":"chunks/app_views_settings_account_accountIdentities_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/components/identityIcon.tsx","webpack:///./app/views/settings/account/accountIdentities.tsx"],"sourcesContent":["import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\nimport asana from 'sentry-logos/logo-asana.svg';\nimport auth0 from 'sentry-logos/logo-auth0.svg';\nimport vsts from 'sentry-logos/logo-azure.svg';\nimport bitbucket from 'sentry-logos/logo-bitbucket.svg';\nimport bitbucketserver from 'sentry-logos/logo-bitbucket-server.svg';\nimport placeholder from 'sentry-logos/logo-default.svg';\nimport github from 'sentry-logos/logo-github.svg';\nimport githubEnterprise from 'sentry-logos/logo-github-enterprise.svg';\nimport gitlab from 'sentry-logos/logo-gitlab.svg';\nimport google from 'sentry-logos/logo-google.svg';\nimport jiraserver from 'sentry-logos/logo-jira-server.svg';\nimport jumpcloud from 'sentry-logos/logo-jumpcloud.svg';\nimport msteams from 'sentry-logos/logo-msteams.svg';\nimport okta from 'sentry-logos/logo-okta.svg';\nimport onelogin from 'sentry-logos/logo-onelogin.svg';\nimport rippling from 'sentry-logos/logo-rippling.svg';\nimport saml2 from 'sentry-logos/logo-saml2.svg';\nimport slack from 'sentry-logos/logo-slack.svg';\nimport visualstudio from 'sentry-logos/logo-visualstudio.svg';\n\n// Map of plugin id -> logo filename\nexport const DEFAULT_ICON = placeholder;\n\nexport const ICON_PATHS: Record<string, string> = {\n  _default: DEFAULT_ICON,\n\n  'active-directory': vsts,\n  asana,\n  auth0,\n  bitbucket,\n  bitbucket_server: bitbucketserver,\n  github,\n  github_enterprise: githubEnterprise,\n  gitlab,\n  google,\n  jira_server: jiraserver,\n  jumpcloud,\n  msteams,\n  okta,\n  onelogin,\n  rippling,\n  saml2,\n  slack,\n  visualstudio,\n  vsts,\n};\n\ntype Props = {\n  providerId?: string;\n  size?: number;\n};\n\nconst IdentityIcon = styled('div')<Props>`\n  position: relative;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n  border-radius: 2px;\n  border: 0;\n  display: inline-block;\n  background-size: contain;\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-image: url(${p =>\n    (p.providerId !== undefined && ICON_PATHS[p.providerId]) || DEFAULT_ICON});\n`;\n\nIdentityIcon.defaultProps = {\n  providerId: '_default',\n  size: 36,\n};\n\nexport default IdentityIcon;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport {disconnectIdentity} from 'sentry/actionCreators/account';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport DateTime from 'sentry/components/dateTime';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport Tag from 'sentry/components/tag';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {UserIdentityCategory, UserIdentityConfig, UserIdentityStatus} from 'sentry/types';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport IdentityIcon from 'sentry/views/settings/components/identityIcon';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nconst ENDPOINT = '/users/me/user-identities/';\n\ntype Props = RouteComponentProps<{}, {}>;\n\ntype State = {\n  identities: UserIdentityConfig[] | null;\n} & DeprecatedAsyncView['state'];\n\nclass AccountIdentities extends DeprecatedAsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      identities: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    return [['identities', ENDPOINT]];\n  }\n\n  getTitle() {\n    return t('Identities');\n  }\n\n  renderItem = (identity: UserIdentityConfig) => {\n    return (\n      <IdentityPanelItem key={`${identity.category}:${identity.id}`}>\n        <InternalContainer>\n          <IdentityIcon providerId={identity.provider.key} />\n          <IdentityText isSingleLine={!identity.dateAdded}>\n            <IdentityName>{identity.provider.name}</IdentityName>\n            {identity.dateAdded && <IdentityDateTime date={moment(identity.dateAdded)} />}\n          </IdentityText>\n        </InternalContainer>\n        <InternalContainer>\n          <TagWrapper>\n            {identity.category === UserIdentityCategory.SOCIAL_IDENTITY && (\n              <Tag type=\"default\">{t('Legacy')}</Tag>\n            )}\n            {identity.category !== UserIdentityCategory.ORG_IDENTITY && (\n              <Tag type=\"default\">\n                {identity.isLogin ? t('Sign In') : t('Integration')}\n              </Tag>\n            )}\n            {identity.organization && (\n              <Tag type=\"highlight\">{identity.organization.slug}</Tag>\n            )}\n          </TagWrapper>\n\n          {this.renderButton(identity)}\n        </InternalContainer>\n      </IdentityPanelItem>\n    );\n  };\n\n  renderButton(identity: UserIdentityConfig) {\n    return identity.status === UserIdentityStatus.CAN_DISCONNECT ? (\n      <Confirm\n        onConfirm={() => this.handleDisconnect(identity)}\n        priority=\"danger\"\n        confirmText={t('Disconnect')}\n        message={\n          <Fragment>\n            <Alert type=\"error\" showIcon>\n              {tct('Disconnect Your [provider] Identity?', {\n                provider: identity.provider.name,\n              })}\n            </Alert>\n            <TextBlock>\n              {identity.isLogin\n                ? t(\n                    'After disconnecting, you will need to use a password or another identity to sign in.'\n                  )\n                : t(\"This action can't be undone.\")}\n            </TextBlock>\n          </Fragment>\n        }\n      >\n        <Button size=\"sm\">{t('Disconnect')}</Button>\n      </Confirm>\n    ) : (\n      <Button\n        size=\"sm\"\n        disabled\n        title={\n          identity.status === UserIdentityStatus.NEEDED_FOR_GLOBAL_AUTH\n            ? t(\n                'You need this identity to sign into your account. If you want to disconnect it, set a password first.'\n              )\n            : identity.status === UserIdentityStatus.NEEDED_FOR_ORG_AUTH\n            ? t('You need this identity to access your organization.')\n            : null\n        }\n      >\n        {t('Disconnect')}\n      </Button>\n    );\n  }\n\n  handleDisconnect = (identity: UserIdentityConfig) => {\n    disconnectIdentity(identity, () => this.reloadData());\n  };\n\n  itemOrder = (a: UserIdentityConfig, b: UserIdentityConfig) => {\n    function categoryRank(c: UserIdentityConfig) {\n      return [\n        UserIdentityCategory.GLOBAL_IDENTITY,\n        UserIdentityCategory.SOCIAL_IDENTITY,\n        UserIdentityCategory.ORG_IDENTITY,\n      ].indexOf(c.category);\n    }\n\n    if (a.provider.name !== b.provider.name) {\n      return a.provider.name < b.provider.name ? -1 : 1;\n    }\n    if (a.category !== b.category) {\n      return categoryRank(a) - categoryRank(b);\n    }\n    if ((a.organization?.name ?? '') !== (b.organization?.name ?? '')) {\n      return (a.organization?.name ?? '') < (b.organization?.name ?? '') ? -1 : 1;\n    }\n    return 0;\n  };\n\n  renderBody() {\n    const appIdentities = this.state.identities\n      ?.filter(identity => identity.category !== UserIdentityCategory.ORG_IDENTITY)\n      .sort(this.itemOrder);\n    const orgIdentities = this.state.identities\n      ?.filter(identity => identity.category === UserIdentityCategory.ORG_IDENTITY)\n      .sort(this.itemOrder);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Identities\" />\n\n        <Panel>\n          <PanelHeader>{t('Application Identities')}</PanelHeader>\n          <PanelBody>\n            {!appIdentities?.length ? (\n              <EmptyMessage>\n                {t(\n                  'There are no application identities associated with your Sentry account'\n                )}\n              </EmptyMessage>\n            ) : (\n              appIdentities.map(this.renderItem)\n            )}\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Organization Identities')}</PanelHeader>\n          <PanelBody>\n            {!orgIdentities?.length ? (\n              <EmptyMessage>\n                {t(\n                  'There are no organization identities associated with your Sentry account'\n                )}\n              </EmptyMessage>\n            ) : (\n              orgIdentities.map(this.renderItem)\n            )}\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nconst IdentityPanelItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst InternalContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst IdentityText = styled('div')<{isSingleLine?: boolean}>`\n  height: 36px;\n  display: flex;\n  flex-direction: column;\n  justify-content: ${p => (p.isSingleLine ? 'center' : 'space-between')};\n  margin-left: ${space(1.5)};\n`;\nconst IdentityName = styled('div')`\n  font-weight: bold;\n`;\nconst IdentityDateTime = styled(DateTime)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  color: ${p => p.theme.subText};\n`;\n\nconst TagWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  flex-grow: 1;\n  margin-right: ${space(1)};\n`;\n\nexport default AccountIdentities;\n"],"names":["getPadding","_ref","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","render","_jsx","SentryDocumentTitle","title","this","children","renderComponent","displayName","DEFAULT_ICON","placeholder","ICON_PATHS","_default","vsts","asana","auth0","bitbucket","bitbucket_server","bitbucketserver","github","github_enterprise","githubEnterprise","gitlab","google","jira_server","jiraserver","jumpcloud","msteams","okta","onelogin","rippling","saml2","slack","visualstudio","IdentityIcon","size","undefined","providerId","defaultProps","AccountIdentities","constructor","arguments","_defineProperty","identity","_jsxs","IdentityPanelItem","InternalContainer","provider","key","IdentityText","isSingleLine","dateAdded","IdentityName","name","IdentityDateTime","date","moment","TagWrapper","category","UserIdentityCategory","SOCIAL_IDENTITY","Tag","type","t","ORG_IDENTITY","isLogin","organization","slug","renderButton","id","disconnectIdentity","reloadData","a","b","categoryRank","c","GLOBAL_IDENTITY","indexOf","getDefaultState","super","identities","getEndpoints","status","UserIdentityStatus","CAN_DISCONNECT","Confirm","onConfirm","handleDisconnect","priority","confirmText","message","Fragment","Alert","showIcon","tct","TextBlock","Button","disabled","NEEDED_FOR_GLOBAL_AUTH","NEEDED_FOR_ORG_AUTH","renderBody","appIdentities","state","filter","sort","itemOrder","orgIdentities","SettingsPageHeader","Panel","PanelHeader","PanelBody","length","map","renderItem","EmptyMessage","PanelItem","styles","DateTime","fontSizeRelativeSmall","subText"],"sourceRoot":""}