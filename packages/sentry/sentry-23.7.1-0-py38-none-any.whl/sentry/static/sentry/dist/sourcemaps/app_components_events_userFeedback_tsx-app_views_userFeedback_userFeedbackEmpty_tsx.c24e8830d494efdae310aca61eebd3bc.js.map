{"version":3,"file":"chunks/app_components_events_userFeedback_tsx-app_views_userFeedback_userFeedbackEmpty_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/userFeedback.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/userFeedback/userFeedbackEmpty.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {ActivityAuthor} from 'sentry/components/activity/author';\nimport {ActivityItem} from 'sentry/components/activity/item';\nimport {Button} from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {UserReport} from 'sentry/types';\nimport {escape, nl2br} from 'sentry/utils';\nimport useCopyToClipboard from 'sentry/utils/useCopyToClipboard';\n\ntype Props = {\n  issueId: string;\n  orgId: string;\n  report: UserReport;\n  className?: string;\n};\n\nexport function EventUserFeedback({className, report, orgId, issueId}: Props) {\n  const user = report.user || {\n    name: report.name,\n    email: report.email,\n    id: '',\n    username: '',\n    ip_address: '',\n  };\n\n  const {onClick, label} = useCopyToClipboard({text: report.email});\n\n  return (\n    <div className={className}>\n      <StyledActivityItem\n        date={report.dateCreated}\n        author={{type: 'user', user}}\n        header={\n          <Items>\n            <ActivityAuthor>{report.name}</ActivityAuthor>\n            <CopyButton\n              aria-label={label}\n              borderless\n              onClick={onClick}\n              size=\"zero\"\n              title={label}\n              tooltipProps={{delay: 0}}\n              translucentBorder\n              icon={<StyledIconCopy size=\"xs\" />}\n            >\n              {report.email}\n            </CopyButton>\n\n            {report.eventID && (\n              <ViewEventLink\n                to={`/organizations/${orgId}/issues/${issueId}/events/${report.eventID}/?referrer=user-feedback`}\n              >\n                {t('View event')}\n              </ViewEventLink>\n            )}\n          </Items>\n        }\n      >\n        <p\n          dangerouslySetInnerHTML={{\n            __html: nl2br(escape(report.comments)),\n          }}\n        />\n      </StyledActivityItem>\n    </div>\n  );\n}\n\nconst StyledActivityItem = styled(ActivityItem)`\n  margin-bottom: 0;\n`;\n\nconst Items = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst CopyButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: normal;\n`;\n\nconst StyledIconCopy = styled(IconCopy)``;\n\nconst ViewEventLink = styled(Link)`\n  font-weight: 300;\n  font-size: 0.9em;\n`;\n","import styled from '@emotion/styled';\n\nimport Panel from 'sentry/components/panels/panel';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n  noCenter?: boolean;\n}\n\nfunction OnboardingPanel({image, noCenter, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image && !noCenter}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  min-width: 0;\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  min-width: 150px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useEffect} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/feedback-empty-state.svg';\n\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\n\ntype Props = {\n  projectIds?: string[];\n};\n\nexport function UserFeedbackEmpty({projectIds}: Props) {\n  const {projects, initiallyLoaded} = useProjects();\n  const loadingProjects = !initiallyLoaded;\n  const organization = useOrganization();\n\n  const selectedProjects =\n    projectIds && projectIds.length\n      ? projects.filter(({id}) => projectIds.includes(id))\n      : projects;\n\n  const hasAnyFeedback = selectedProjects.some(({hasUserReports}) => hasUserReports);\n\n  useEffect(() => {\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n\n    if (hasAnyFeedback === false) {\n      // send to reload only due to higher event volume\n      trackAnalytics('user_feedback.viewed', {\n        organization,\n        projects: projectIds?.join(',') || '',\n      });\n    }\n    return () => {\n      window.sentryEmbedCallback = null;\n    };\n  }, [hasAnyFeedback, organization, projectIds]);\n\n  function trackAnalyticsInternal(\n    eventKey: 'user_feedback.docs_clicked' | 'user_feedback.dialog_opened'\n  ) {\n    trackAnalytics(eventKey, {\n      organization,\n      projects: selectedProjects?.join(','),\n    });\n  }\n\n  // Show no user reports if waiting for projects to load or if there is no feedback\n  if (loadingProjects || hasAnyFeedback !== false) {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no user reports match your filters.')}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  // Show landing page after projects have loaded and it is confirmed no projects have feedback\n  return (\n    <OnboardingPanel\n      data-test-id=\"user-feedback-empty\"\n      image={<img src={emptyStateImg} />}\n    >\n      <h3>{t('What do users think?')}</h3>\n      <p>\n        {t(\n          `You can't read minds. At least we hope not. Ask users for feedback on the impact of their crashes or bugs and you shall receive.`\n        )}\n      </p>\n      <ButtonList gap={1}>\n        <Button\n          external\n          priority=\"primary\"\n          onClick={() => trackAnalyticsInternal('user_feedback.docs_clicked')}\n          href=\"https://docs.sentry.io/product/user-feedback/\"\n        >\n          {t('Read the docs')}\n        </Button>\n        <Button\n          onClick={() => {\n            Sentry.showReportDialog({\n              // should never make it to the Sentry API, but just in case, use throwaway id\n              eventId: '00000000000000000000000000000000',\n            });\n            trackAnalyticsInternal('user_feedback.dialog_opened');\n          }}\n        >\n          {t('See an example')}\n        </Button>\n      </ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n"],"names":["EventUserFeedback","_ref","className","report","orgId","issueId","user","name","email","id","username","ip_address","onClick","label","useCopyToClipboard","text","_jsx","children","StyledActivityItem","date","dateCreated","author","type","header","_jsxs","Items","ActivityAuthor","CopyButton","borderless","size","title","tooltipProps","delay","translucentBorder","icon","StyledIconCopy","eventID","ViewEventLink","to","t","dangerouslySetInnerHTML","__html","nl2br","escape","comments","displayName","_styled","ActivityItem","target","styles","space","Button","p","theme","subText","fontSizeSmall","IconCopy","Link","OnboardingPanel","image","noCenter","props","Panel","Container","IlloBox","StyledBox","centered","breakpoints","small","medium","UserFeedbackEmpty","projectIds","projects","initiallyLoaded","useProjects","loadingProjects","organization","useOrganization","selectedProjects","length","filter","_ref2","includes","hasAnyFeedback","some","_ref3","hasUserReports","trackAnalyticsInternal","eventKey","trackAnalytics","join","useEffect","window","sentryEmbedCallback","embed","submit","_body","this","_submitInProgress","setTimeout","onSuccess","EmptyStateWarning","src","emptyStateImg","ButtonList","gap","external","priority","href","Sentry","eventId","ButtonBar"],"sourceRoot":""}