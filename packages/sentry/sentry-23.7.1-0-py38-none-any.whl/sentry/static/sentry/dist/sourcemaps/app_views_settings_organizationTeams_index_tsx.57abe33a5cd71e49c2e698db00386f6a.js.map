{"version":3,"file":"chunks/app_views_settings_organizationTeams_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/components/teamRoleUtils.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/organizationTeams/allTeamsRow.tsx","webpack:///./app/views/settings/organizationTeams/allTeamsList.tsx","webpack:///./app/views/settings/organizationTeams/organizationAccessRequests.tsx","webpack:///./app/views/settings/organizationTeams/organizationTeams.tsx","webpack:///./app/views/settings/organizationTeams/index.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx","webpack:///./app/views/settings/organizationTeams/utils.tsx"],"sourcesContent":["import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import {Fragment} from 'react';\n\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport {t} from 'sentry/locale';\n\nconst LabelHook = HookOrDefault({\n  hookName: 'sidebar:item-label',\n  defaultComponent: ({children}) => <Fragment>{children}</Fragment>,\n});\n\nexport function TeamRoleColumnLabel() {\n  return <LabelHook id=\"team-roles-upsell\">{t('Team Roles')}</LabelHook>;\n}\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport startCase from 'lodash/startCase';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {fetchOrganizationDetails} from 'sentry/actionCreators/organizations';\nimport {joinTeam, leaveTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport {t, tct, tn} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Team} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport {getButtonHelpText} from 'sentry/views/settings/organizationTeams/utils';\n\ntype Props = {\n  api: Client;\n  openMembership: boolean;\n  organization: Organization;\n  team: Team;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n};\n\nclass AllTeamsRow extends Component<Props, State> {\n  state: State = {\n    loading: false,\n    error: false,\n  };\n\n  reloadProjects() {\n    const {api, organization} = this.props;\n    // After a change in teams has happened, refresh the project store\n    fetchOrganizationDetails(api, organization.slug, {\n      loadProjects: true,\n    });\n  }\n\n  handleRequestAccess = () => {\n    const {team} = this.props;\n\n    try {\n      this.joinTeam({\n        successMessage: tct('You have requested access to [team]', {\n          team: `#${team.slug}`,\n        }),\n\n        errorMessage: tct('Unable to request access to [team]', {\n          team: `#${team.slug}`,\n        }),\n      });\n\n      // Update team so that `isPending` is true\n      TeamStore.onUpdateSuccess(team.slug, {\n        ...team,\n        isPending: true,\n      });\n    } catch (_err) {\n      // No need to do anything\n    }\n  };\n\n  handleJoinTeam = async () => {\n    const {team} = this.props;\n\n    await this.joinTeam({\n      successMessage: tct('You have joined [team]', {\n        team: `#${team.slug}`,\n      }),\n      errorMessage: tct('Unable to join [team]', {\n        team: `#${team.slug}`,\n      }),\n    });\n\n    this.reloadProjects();\n  };\n\n  joinTeam = ({\n    successMessage,\n    errorMessage,\n  }: {\n    errorMessage: React.ReactNode;\n    successMessage: React.ReactNode;\n  }) => {\n    const {api, organization, team} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    return new Promise<void>((resolve, reject) =>\n      joinTeam(\n        api,\n        {\n          orgId: organization.slug,\n          teamId: team.slug,\n        },\n        {\n          success: () => {\n            this.setState({\n              loading: false,\n              error: false,\n            });\n            addSuccessMessage(successMessage);\n            resolve();\n          },\n          error: () => {\n            this.setState({\n              loading: false,\n              error: true,\n            });\n            addErrorMessage(errorMessage);\n            reject(new Error('Unable to join team'));\n          },\n        }\n      )\n    );\n  };\n\n  handleLeaveTeam = () => {\n    const {api, organization, team} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    leaveTeam(\n      api,\n      {\n        orgId: organization.slug,\n        teamId: team.slug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n          addSuccessMessage(\n            tct('You have left [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n\n          // Reload ProjectsStore\n          this.reloadProjects();\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(\n            tct('Unable to leave [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n        },\n      }\n    );\n  };\n\n  getTeamRoleName = () => {\n    const {organization, team} = this.props;\n    const {teamRoleList} = organization;\n    const roleName = teamRoleList.find(r => r.id === team.teamRole)?.name;\n\n    return roleName;\n  };\n\n  render() {\n    const {team, openMembership, organization} = this.props;\n    const {access} = organization;\n    const urlPrefix = `/settings/${organization.slug}/teams/`;\n    const canEditTeam = access.includes('org:write') || access.includes('team:admin');\n\n    // TODO(team-roles): team admins can also manage membership\n    // org:admin is a unique scope that only org owners have\n    const isOrgOwner = access.includes('org:admin');\n    const isPermissionGroup = (team.orgRole && (!canEditTeam || !isOrgOwner)) as boolean;\n    const isIdpProvisioned = team.flags['idp:provisioned'];\n\n    const buttonHelpText = getButtonHelpText(isIdpProvisioned, isPermissionGroup);\n\n    const display = (\n      <IdBadge\n        team={team}\n        avatarSize={36}\n        description={tn('%s Member', '%s Members', team.memberCount)}\n      />\n    );\n\n    // You can only view team details if you have access to team -- this should account\n    // for your role + org open membership\n    const canViewTeam = team.hasAccess;\n\n    const orgRoleFromTeam = team.orgRole ? `${startCase(team.orgRole)} Team` : null;\n    const isHidden = orgRoleFromTeam === null && this.getTeamRoleName() === null;\n    const isDisabled = isIdpProvisioned || isPermissionGroup;\n\n    return (\n      <TeamPanelItem>\n        <div>\n          {canViewTeam ? (\n            <TeamLink data-test-id=\"team-link\" to={`${urlPrefix}${team.slug}/`}>\n              {display}\n            </TeamLink>\n          ) : (\n            display\n          )}\n        </div>\n        <DisplayRole isHidden={isHidden}>{orgRoleFromTeam}</DisplayRole>\n        <DisplayRole isHidden={isHidden}>{this.getTeamRoleName()}</DisplayRole>\n        <div>\n          {this.state.loading ? (\n            <Button size=\"sm\" disabled>\n              ...\n            </Button>\n          ) : team.isMember ? (\n            <Button\n              size=\"sm\"\n              onClick={this.handleLeaveTeam}\n              disabled={isDisabled}\n              title={buttonHelpText}\n            >\n              {t('Leave Team')}\n            </Button>\n          ) : team.isPending ? (\n            <Button\n              size=\"sm\"\n              disabled\n              title={t(\n                'Your request to join this team is being reviewed by organization owners'\n              )}\n            >\n              {t('Request Pending')}\n            </Button>\n          ) : openMembership ? (\n            <Button\n              size=\"sm\"\n              onClick={this.handleJoinTeam}\n              disabled={isDisabled}\n              title={buttonHelpText}\n            >\n              {t('Join Team')}\n            </Button>\n          ) : (\n            <Button\n              size=\"sm\"\n              onClick={this.handleRequestAccess}\n              disabled={isDisabled}\n              title={buttonHelpText}\n            >\n              {t('Request Access')}\n            </Button>\n          )}\n        </div>\n      </TeamPanelItem>\n    );\n  }\n}\n\nconst TeamLink = styled(Link)`\n  display: inline-block;\n\n  &.focus-visible {\n    margin: -${space(1)};\n    padding: ${space(1)};\n    background: #f2eff5;\n    border-radius: 3px;\n    outline: none;\n  }\n`;\n\nexport {AllTeamsRow};\nexport default withApi(AllTeamsRow);\n\nexport const GRID_TEMPLATE = `\n  display: grid;\n  grid-template-columns: minmax(150px, 4fr) minmax(0px, 100px) 125px 110px;\n  gap: ${space(1)};\n`;\n\nconst TeamPanelItem = styled(PanelItem)`\n  ${GRID_TEMPLATE}\n  align-items: center;\n  display: flex;\n\n  > div:last-child {\n    margin-left: auto;\n  }\n`;\n\nconst DisplayRole = styled('div')<{isHidden: boolean}>`\n  display: ${props => (props.isHidden ? 'none' : 'block')};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Team} from 'sentry/types';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport AllTeamsRow from './allTeamsRow';\n\ntype Props = {\n  access: Record<string, any>;\n  openMembership: boolean;\n  organization: Organization;\n  teamList: Array<Team>;\n};\n\nfunction AllTeamsList({organization, openMembership, teamList, access}: Props) {\n  const teamNodes = teamList.map(team => (\n    <AllTeamsRow\n      team={team}\n      organization={organization}\n      openMembership={openMembership}\n      key={team.slug}\n    />\n  ));\n\n  if (!teamNodes.length) {\n    const canCreateTeam = access.has('project:admin');\n\n    return (\n      <EmptyMessage>\n        {tct('No teams here. [teamCreate]', {\n          root: <TextBlock noMargin />,\n          teamCreate: canCreateTeam\n            ? tct('You can always [link:create one].', {\n                link: (\n                  <StyledButton\n                    priority=\"link\"\n                    onClick={() =>\n                      openCreateTeamModal({\n                        organization,\n                      })\n                    }\n                    aria-label={t('Create team')}\n                  />\n                ),\n              })\n            : null,\n        })}\n      </EmptyMessage>\n    );\n  }\n\n  return <Fragment>{teamNodes}</Fragment>;\n}\n\nexport default AllTeamsList;\n\nconst StyledButton = styled(Button)`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {AccessRequest} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  onRemoveAccessRequest: (id: string, isApproved: boolean) => void;\n  orgId: string;\n  requestList: AccessRequest[];\n};\n\ntype State = {\n  accessRequestBusy: Record<string, boolean>;\n};\n\ntype HandleOpts = {\n  errorMessage: string;\n  id: string;\n  isApproved: boolean;\n  successMessage: string;\n};\n\nclass OrganizationAccessRequests extends Component<Props, State> {\n  state: State = {\n    accessRequestBusy: {},\n  };\n\n  async handleAction({id, isApproved, successMessage, errorMessage}: HandleOpts) {\n    const {api, orgId, onRemoveAccessRequest} = this.props;\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: true},\n    }));\n\n    try {\n      await api.requestPromise(`/organizations/${orgId}/access-requests/${id}/`, {\n        method: 'PUT',\n        data: {isApproved},\n      });\n      onRemoveAccessRequest(id, isApproved);\n      addSuccessMessage(successMessage);\n    } catch {\n      addErrorMessage(errorMessage);\n    }\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: false},\n    }));\n  }\n\n  handleApprove = (id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: true,\n      successMessage: t('Team request approved'),\n      errorMessage: t('Error approving team request'),\n    });\n  };\n\n  handleDeny = (id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: false,\n      successMessage: t('Team request denied'),\n      errorMessage: t('Error denying team request'),\n    });\n  };\n\n  render() {\n    const {requestList} = this.props;\n    const {accessRequestBusy} = this.state;\n\n    if (!requestList || !requestList.length) {\n      return null;\n    }\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Pending Team Requests')}</PanelHeader>\n\n        <PanelBody>\n          {requestList.map(({id, member, team, requester}) => {\n            const memberName =\n              member.user &&\n              (member.user.name || member.user.email || member.user.username);\n            const requesterName =\n              requester && (requester.name || requester.email || requester.username);\n            return (\n              <StyledPanelItem key={id}>\n                <div data-test-id=\"request-message\">\n                  {requesterName\n                    ? tct('[requesterName] requests to add [name] to the [team] team.', {\n                        requesterName,\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })\n                    : tct('[name] requests access to the [team] team.', {\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })}\n                </div>\n                <div>\n                  <StyledButton\n                    priority=\"primary\"\n                    size=\"sm\"\n                    onClick={e => this.handleApprove(id, e)}\n                    busy={accessRequestBusy[id]}\n                  >\n                    {t('Approve')}\n                  </StyledButton>\n                  <Button\n                    busy={accessRequestBusy[id]}\n                    onClick={e => this.handleDeny(id, e)}\n                    size=\"sm\"\n                  >\n                    {t('Deny')}\n                  </Button>\n                </div>\n              </StyledPanelItem>\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: auto max-content;\n  gap: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nexport default withApi(OrganizationAccessRequests);\n","import {useState} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\nimport partition from 'lodash/partition';\n\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport SearchBar from 'sentry/components/searchBar';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {TeamRoleColumnLabel} from 'sentry/components/teamRoleUtils';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {AccessRequest, Organization} from 'sentry/types';\nimport {useTeams} from 'sentry/utils/useTeams';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport {RoleOverwritePanelAlert} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\n\nimport AllTeamsList from './allTeamsList';\nimport {GRID_TEMPLATE} from './allTeamsRow';\nimport OrganizationAccessRequests from './organizationAccessRequests';\n\ntype Props = {\n  access: Set<string>;\n  features: Set<string>;\n  onRemoveAccessRequest: (id: string, isApproved: boolean) => void;\n  organization: Organization;\n  requestList: AccessRequest[];\n} & RouteComponentProps<{}, {}>;\n\nfunction OrganizationTeams({\n  organization,\n  access,\n  features,\n  requestList,\n  onRemoveAccessRequest,\n}: Props) {\n  const [teamQuery, setTeamQuery] = useState('');\n  const {initiallyLoaded} = useTeams({provideUserTeams: true});\n  const {teams, onSearch, loadMore, hasMore, fetching} = useTeams();\n\n  if (!organization) {\n    return null;\n  }\n  const canCreateTeams = access.has('project:admin');\n\n  const action = (\n    <Button\n      priority=\"primary\"\n      size=\"sm\"\n      disabled={!canCreateTeams}\n      title={\n        !canCreateTeams ? t('You do not have permission to create teams') : undefined\n      }\n      onClick={() =>\n        openCreateTeamModal({\n          organization,\n        })\n      }\n      icon={<IconAdd size=\"xs\" isCircled />}\n    >\n      {t('Create Team')}\n    </Button>\n  );\n\n  const title = t('Teams');\n\n  const debouncedSearch = debounce(onSearch, DEFAULT_DEBOUNCE_DURATION);\n  function handleSearch(query: string) {\n    setTeamQuery(query);\n    debouncedSearch(query);\n  }\n\n  const {slug: orgSlug, orgRole, orgRoleList, teamRoleList} = organization;\n  const filteredTeams = teams.filter(team =>\n    `#${team.slug}`.toLowerCase().includes(teamQuery.toLowerCase())\n  );\n  const [userTeams, otherTeams] = partition(filteredTeams, team => team.isMember);\n\n  return (\n    <div data-test-id=\"team-list\">\n      <SentryDocumentTitle title={title} orgSlug={orgSlug} />\n      <SettingsPageHeader title={title} action={action} />\n\n      <OrganizationAccessRequests\n        orgId={organization.slug}\n        requestList={requestList}\n        onRemoveAccessRequest={onRemoveAccessRequest}\n      />\n      <StyledSearchBar\n        placeholder={t('Search teams')}\n        onChange={handleSearch}\n        query={teamQuery}\n      />\n      <Panel>\n        <StyledPanelHeader>\n          <div>{t('Your Teams')}</div>\n          <div />\n          <div>\n            <TeamRoleColumnLabel />\n          </div>\n          <div />\n        </StyledPanelHeader>\n        <PanelBody>\n          <RoleOverwritePanelAlert\n            orgRole={orgRole}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n            isSelf\n          />\n          {initiallyLoaded ? (\n            <AllTeamsList\n              organization={organization}\n              teamList={userTeams.filter(team => team.slug.includes(teamQuery))}\n              access={access}\n              openMembership={false}\n            />\n          ) : (\n            <LoadingIndicator />\n          )}\n        </PanelBody>\n      </Panel>\n      <Panel>\n        <PanelHeader>{t('Other Teams')}</PanelHeader>\n        <PanelBody>\n          <AllTeamsList\n            organization={organization}\n            teamList={otherTeams}\n            access={access}\n            openMembership={\n              !!(features.has('open-membership') || access.has('org:write'))\n            }\n          />\n        </PanelBody>\n      </Panel>\n      {hasMore && (\n        <LoadMoreWrapper>\n          {fetching && <LoadingIndicator mini />}\n          <Button onClick={() => loadMore(teamQuery)}>{t('Show more')}</Button>\n        </LoadMoreWrapper>\n      )}\n    </div>\n  );\n}\n\nconst StyledSearchBar = styled(SearchBar)`\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPanelHeader = styled(PanelHeader)`\n  ${GRID_TEMPLATE}\n`;\n\nconst LoadMoreWrapper = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  align-items: center;\n  justify-content: end;\n  grid-auto-flow: column;\n`;\n\nexport default OrganizationTeams;\n","import {RouteComponentProps} from 'react-router';\n\nimport {loadStats} from 'sentry/actionCreators/projects';\nimport {Client} from 'sentry/api';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {AccessRequest, Organization, Team} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\n\nimport OrganizationTeams from './organizationTeams';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  teams: Team[];\n} & RouteComponentProps<{}, {}>;\n\ntype State = DeprecatedAsyncView['state'] & {\n  requestList: AccessRequest[];\n};\n\nclass OrganizationTeamsContainer extends DeprecatedAsyncView<Props, State> {\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {organization} = this.props;\n\n    return [['requestList', `/organizations/${organization.slug}/access-requests/`]];\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.fetchStats();\n  }\n\n  fetchStats() {\n    const {organization} = this.props;\n    loadStats(this.props.api, {\n      orgId: organization.slug,\n      query: {\n        since: (new Date().getTime() / 1000 - 3600 * 24).toString(),\n        stat: 'generated',\n        group: 'project',\n      },\n    });\n  }\n\n  removeAccessRequest = (id: string, isApproved: boolean) => {\n    const requestToRemove = this.state.requestList.find(request => request.id === id);\n    this.setState(state => ({\n      requestList: state.requestList.filter(request => request.id !== id),\n    }));\n    if (isApproved && requestToRemove) {\n      const team = requestToRemove.team;\n      TeamStore.onUpdateSuccess(team.slug, {\n        ...team,\n        memberCount: team.memberCount + 1,\n      });\n    }\n  };\n\n  renderBody() {\n    const {organization} = this.props;\n\n    if (!organization) {\n      return null;\n    }\n\n    return (\n      <OrganizationTeams\n        {...this.props}\n        access={new Set(organization.access)}\n        features={new Set(organization.features)}\n        organization={organization}\n        requestList={this.state.requestList}\n        onRemoveAccessRequest={this.removeAccessRequest}\n      />\n    );\n  }\n}\n\nexport {OrganizationTeamsContainer};\n\nexport default withApi(withOrganization(OrganizationTeamsContainer));\n","import PanelAlert from 'sentry/components/panels/panelAlert';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport function RoleOverwriteIcon(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n}\n\nexport function RoleOverwritePanelAlert(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n}\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n","import {t} from 'sentry/locale';\n\nexport function getButtonHelpText(\n  isIdpProvisioned: boolean = false,\n  isPermissionGroup: boolean = false\n) {\n  if (isIdpProvisioned) {\n    return t(\n      \"Membership to this team is managed through your organization's identity provider.\"\n    );\n  }\n\n  if (isPermissionGroup) {\n    return t('Membership to a team with an organization role is managed by org owners.');\n  }\n\n  return undefined;\n}\n"],"names":["getPadding","_ref","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","LabelHook","HookOrDefault","hookName","defaultComponent","children","_jsx","Fragment","TeamRoleColumnLabel","id","t","displayName","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","AllTeamsRow","Component","constructor","arguments","_defineProperty","loading","error","team","props","joinTeam","successMessage","tct","slug","errorMessage","TeamStore","onUpdateSuccess","isPending","_err","async","reloadProjects","api","organization","setState","Promise","resolve","reject","orgId","teamId","success","addSuccessMessage","addErrorMessage","Error","leaveTeam","teamRoleList","roleName","find","r","teamRole","name","fetchOrganizationDetails","loadProjects","openMembership","access","urlPrefix","canEditTeam","includes","isOrgOwner","isPermissionGroup","orgRole","isIdpProvisioned","flags","buttonHelpText","getButtonHelpText","display","IdBadge","avatarSize","description","tn","memberCount","canViewTeam","hasAccess","orgRoleFromTeam","startCase","isHidden","getTeamRoleName","isDisabled","_jsxs","TeamPanelItem","TeamLink","to","DisplayRole","state","Button","size","disabled","isMember","onClick","handleLeaveTeam","handleJoinTeam","handleRequestAccess","Link","withApi","GRID_TEMPLATE","PanelItem","AllTeamsList","teamList","teamNodes","map","length","canCreateTeam","has","EmptyMessage","root","TextBlock","noMargin","teamCreate","link","StyledButton","priority","openCreateTeamModal","fontSizeLarge","OrganizationAccessRequests","accessRequestBusy","e","stopPropagation","handleAction","isApproved","onRemoveAccessRequest","requestPromise","method","data","requestList","Panel","PanelHeader","PanelBody","_ref2","member","requester","memberName","user","email","username","requesterName","StyledPanelItem","handleApprove","busy","handleDeny","OrganizationTeams","features","teamQuery","setTeamQuery","useState","initiallyLoaded","useTeams","provideUserTeams","teams","onSearch","loadMore","hasMore","fetching","canCreateTeams","action","undefined","icon","IconAdd","isCircled","debouncedSearch","debounce","DEFAULT_DEBOUNCE_DURATION","orgSlug","orgRoleList","filteredTeams","filter","toLowerCase","userTeams","otherTeams","partition","SettingsPageHeader","StyledSearchBar","placeholder","onChange","query","StyledPanelHeader","RoleOverwritePanelAlert","isSelf","LoadingIndicator","LoadMoreWrapper","mini","SearchBar","OrganizationTeamsContainer","requestToRemove","request","getEndpoints","componentDidMount","super","fetchStats","loadStats","since","Date","getTime","toString","stat","group","renderBody","Set","removeAccessRequest","withOrganization","RoleOverwriteIcon","hasOrgRoleOverwrite","Tooltip","getOverwriteString","IconInfo","color","PanelAlert","orgRoleObj","findIndex","minimumTeamRole","teamRoleObj","selfNoun","selfPronoun","article"],"sourceRoot":""}