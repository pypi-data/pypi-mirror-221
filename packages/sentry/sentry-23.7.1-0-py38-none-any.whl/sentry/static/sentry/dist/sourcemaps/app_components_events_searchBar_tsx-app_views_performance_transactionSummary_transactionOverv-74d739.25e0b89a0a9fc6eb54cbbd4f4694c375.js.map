{"version":3,"file":"chunks/app_components_events_searchBar_tsx-app_views_performance_transactionSummary_transactionOverv-74d739.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/components/performanceDuration.tsx","webpack:///./app/utils/performance/segmentExplorer/segmentExplorerQuery.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/tagExplorer.tsx"],"sourcesContent":["import {useEffect, useMemo} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {CustomMeasurementCollection} from 'sentry/utils/customMeasurements/customMeasurements';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {\n  DEVICE_CLASS_TAG_VALUES,\n  FieldKey,\n  FieldKind,\n  isDeviceClass,\n} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\nimport {isCustomMeasurement} from 'sentry/views/dashboards/utils';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst STATIC_FIELD_TAGS_SET = new Set(Object.keys(FIELD_TAGS));\nconst getFunctionTags = (fields: Readonly<Field[]> | undefined) => {\n  if (!fields?.length) {\n    return [];\n  }\n  return fields.reduce((acc, item) => {\n    if (\n      !STATIC_FIELD_TAGS_SET.has(item.field) &&\n      !isEquation(item.field) &&\n      !isCustomMeasurement(item.field)\n    ) {\n      acc[item.field] = {key: item.field, name: item.field, kind: FieldKind.FUNCTION};\n    }\n\n    return acc;\n  }, {});\n};\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements'],\n  customMeasurements:\n    | Parameters<React.ComponentProps<typeof Measurements>['children']>[0]['measurements']\n    | undefined\n) => {\n  const measurementsWithKind = Object.keys(measurements).reduce((tags, key) => {\n    tags[key] = {\n      ...measurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, {});\n\n  if (!customMeasurements) {\n    return measurementsWithKind;\n  }\n\n  return Object.keys(customMeasurements).reduce((tags, key) => {\n    tags[key] = {\n      ...customMeasurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, measurementsWithKind);\n};\n\nconst STATIC_FIELD_TAGS = Object.keys(FIELD_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...FIELD_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nconst STATIC_FIELD_TAGS_WITHOUT_TRACING = omit(STATIC_FIELD_TAGS, TRACING_FIELDS);\n\nconst STATIC_SPAN_TAGS = SPAN_OP_BREAKDOWN_FIELDS.reduce((tags, key) => {\n  tags[key] = {name: key, kind: FieldKind.METRICS};\n  return tags;\n}, {});\n\nconst STATIC_SEMVER_TAGS = Object.keys(SEMVER_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...SEMVER_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  customMeasurements?: CustomMeasurementCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n    customMeasurements,\n  } = props;\n\n  const api = useApi();\n\n  const functionTags = useMemo(() => getFunctionTags(fields), [fields]);\n  const tagsWithKind = useMemo(() => {\n    return Object.keys(tags).reduce((acc, key) => {\n      acc[key] = {\n        ...tags[key],\n        kind: FieldKind.TAG,\n      };\n      return acc;\n    }, {});\n  }, [tags]);\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      // device.class is stored as \"numbers\" in snuba, but we want to suggest high, medium,\n      // and low search filter values because discover maps device.class to these values.\n      if (isDeviceClass(tag.key)) {\n        return Promise.resolve(DEVICE_CLASS_TAG_VALUES);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: query,\n        projectIds: projectIdStrings,\n        endpointParams,\n        // allows searching for tags on transactions as well\n        includeTransactions: true,\n        // allows searching for tags on sessions as well\n        includeSessions: includeSessionTagsValues,\n      }).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const measurementsWithKind = getMeasurementTags(measurements, customMeasurements);\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: TagCollection = orgHasPerformanceView\n      ? Object.assign(\n          {},\n          measurementsWithKind,\n          functionTags,\n          STATIC_SPAN_TAGS,\n          STATIC_FIELD_TAGS\n        )\n      : Object.assign({}, STATIC_FIELD_TAGS_WITHOUT_TRACING);\n\n    assign(combinedTags, tagsWithKind, STATIC_FIELD_TAGS, STATIC_SEMVER_TAGS);\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: Object.keys(combinedTags).sort((a, b) => {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      }),\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    const list =\n      omitTags && omitTags.length > 0 ? omit(combinedTags, omitTags) : combinedTags;\n    return list;\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludedTags={[FieldKey.ENVIRONMENT, FieldKey.TOTAL_COUNT]}\n          maxMenuHeight={maxMenuHeight ?? 300}\n          customPerformanceMetrics={customMeasurements}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import Duration from 'sentry/components/duration';\nimport {defined} from 'sentry/utils';\n\ninterface DurationProps {\n  abbreviation?: boolean;\n}\n\ninterface SecondsProps extends DurationProps {\n  seconds: number;\n}\n\ninterface MillisecondsProps extends DurationProps {\n  milliseconds: number;\n}\n\ninterface NanosecondsProps extends DurationProps {\n  nanoseconds: number;\n}\n\ntype PerformanceDurationProps = SecondsProps | MillisecondsProps | NanosecondsProps;\n\nfunction isMilliseconds(props: PerformanceDurationProps): props is MillisecondsProps {\n  return defined((props as MillisecondsProps).milliseconds);\n}\n\nfunction isNanoseconds(props: PerformanceDurationProps): props is NanosecondsProps {\n  return defined((props as NanosecondsProps).nanoseconds);\n}\n\nfunction PerformanceDuration(props: PerformanceDurationProps) {\n  const normalizedSeconds = isNanoseconds(props)\n    ? props.nanoseconds / 1_000_000_000\n    : isMilliseconds(props)\n    ? props.milliseconds / 1000\n    : props.seconds;\n\n  return (\n    <Duration\n      abbreviation={props.abbreviation}\n      seconds={normalizedSeconds}\n      fixedDigits={2}\n    />\n  );\n}\n\nexport default PerformanceDuration;\n","import {EventQuery} from 'sentry/actionCreators/events';\nimport {LocationQuery} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\n/**\n * An individual row in a Segment explorer result\n */\nexport type TableDataRow = {\n  aggregate: number;\n  comparison: number;\n  count: number;\n  frequency: number;\n  sumdelta: number;\n  tags_key: string;\n  tags_value: string;\n};\n\nexport type TableData = {\n  data: TableDataRow[];\n  meta: {};\n};\n\n/**\n * A Segment Explorer result including rows and metadata.\n */\n\ntype ChildrenProps = Omit<GenericChildrenProps<TableData>, 'tableData'> & {\n  tableData: TableData | null;\n};\n\ntype QueryProps = DiscoverQueryProps & {\n  aggregateColumn: string;\n  children: (props: ChildrenProps) => React.ReactNode;\n  allTagKeys?: boolean;\n  sort?: string | string[];\n  tagKey?: string;\n};\n\ntype FacetQuery = LocationQuery &\n  EventQuery & {\n    aggregateColumn?: string;\n    allTagKeys?: boolean;\n    sort?: string | string[];\n    tagKey?: string;\n  };\n\nexport function getRequestFunction(_props: QueryProps) {\n  const {aggregateColumn} = _props;\n  function getTagExplorerRequestPayload(props: DiscoverQueryProps) {\n    const {eventView} = props;\n    const apiPayload: FacetQuery = eventView.getEventsAPIPayload(props.location);\n    apiPayload.aggregateColumn = aggregateColumn;\n    apiPayload.sort = _props.sort ? _props.sort : apiPayload.sort;\n    if (_props.allTagKeys) {\n      apiPayload.allTagKeys = _props.allTagKeys;\n    }\n    if (_props.tagKey) {\n      apiPayload.tagKey = _props.tagKey;\n    }\n    return apiPayload;\n  }\n  return getTagExplorerRequestPayload;\n}\n\nfunction shouldRefetchData(prevProps: QueryProps, nextProps: QueryProps) {\n  return (\n    prevProps.aggregateColumn !== nextProps.aggregateColumn ||\n    prevProps.sort !== nextProps.sort ||\n    prevProps.allTagKeys !== nextProps.allTagKeys ||\n    prevProps.tagKey !== nextProps.tagKey\n  );\n}\n\nfunction SegmentExplorerQuery(props: QueryProps) {\n  return (\n    <GenericDiscoverQuery<TableData, QueryProps>\n      route=\"events-facets-performance\"\n      getRequestPayload={getRequestFunction(props)}\n      shouldRefetchData={shouldRefetchData}\n      {...props}\n    />\n  );\n}\n\nexport default SegmentExplorerQuery;\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getState(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport {Button} from 'sentry/components/button';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport PerformanceDuration from 'sentry/components/performanceDuration';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport EventView, {fromSorts, isFieldSortable} from 'sentry/utils/discover/eventView';\nimport {fieldAlignment} from 'sentry/utils/discover/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport SegmentExplorerQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/performance/segmentExplorer/segmentExplorerQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport CellAction, {Actions, updateQuery} from 'sentry/views/discover/table/cellAction';\nimport {TableColumn} from 'sentry/views/discover/table/types';\n\nimport {\n  platformAndConditionsToPerformanceType,\n  ProjectPerformanceType,\n} from '../../utils';\nimport {\n  SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD,\n  SpanOperationBreakdownFilter,\n} from '../filter';\nimport {tagsRouteWithQuery} from '../transactionTags/utils';\nimport {normalizeSearchConditions} from '../utils';\n\nconst TAGS_CURSOR_NAME = 'tags_cursor';\n\ntype ColumnKeys =\n  | 'key'\n  | 'tagValue'\n  | 'aggregate'\n  | 'frequency'\n  | 'comparison'\n  | 'sumdelta';\ntype TagColumn = GridColumnOrder<ColumnKeys> & {\n  column: {\n    kind: string;\n  };\n  field: string;\n  canSort?: boolean;\n};\nexport const TAG_EXPLORER_COLUMN_ORDER: TagColumn[] = [\n  {\n    key: 'key',\n    field: 'key',\n    name: 'Tag Key',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'tagValue',\n    field: 'tagValue',\n    name: 'Tag Values',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n  },\n  {\n    key: 'aggregate',\n    field: 'aggregate',\n    name: 'Avg Duration',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'frequency',\n    field: 'frequency',\n    name: 'Frequency',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'comparison',\n    field: 'comparison',\n    name: 'Compared To Avg',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n  {\n    key: 'sumdelta',\n    field: 'sumdelta',\n    name: 'Total Time Lost',\n    width: -1,\n    column: {\n      kind: 'field',\n    },\n    canSort: true,\n  },\n];\n\nexport const getTransactionField = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    return fieldFromFilter;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === ProjectPerformanceType.FRONTEND) {\n    return 'measurements.lcp';\n  }\n\n  return 'transaction.duration';\n};\n\nconst getColumnsWithReplacedDuration = (\n  currentFilter: SpanOperationBreakdownFilter,\n  projects: Project[],\n  eventView: EventView\n) => {\n  const columns = TAG_EXPLORER_COLUMN_ORDER.map(c => ({...c}));\n  const durationColumn = columns.find(c => c.key === 'aggregate');\n\n  if (!durationColumn) {\n    return columns;\n  }\n\n  const fieldFromFilter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter];\n  if (fieldFromFilter) {\n    durationColumn.name = 'Avg Span Duration';\n    return columns;\n  }\n\n  const performanceType = platformAndConditionsToPerformanceType(projects, eventView);\n  if (performanceType === ProjectPerformanceType.FRONTEND) {\n    durationColumn.name = 'Avg LCP';\n    return columns;\n  }\n\n  return columns;\n};\n\ntype TagValueProps = {\n  row: TableDataRow;\n};\n\nexport function TagValue(props: TagValueProps) {\n  return <div className=\"truncate\">{props.row.tags_value}</div>;\n}\n\ntype Props = {\n  currentFilter: SpanOperationBreakdownFilter;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n};\n\ntype State = {\n  widths: number[];\n};\nexport class TagExplorer extends Component<Props> {\n  state: State = {\n    widths: [],\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getColumnOrder = (columns: GridColumnOrder[]) => {\n    const {widths} = this.state;\n    return columns.map((col: GridColumnOrder, i: number) => {\n      if (typeof widths[i] === 'number') {\n        return {...col, width: widths[i]};\n      }\n      return col;\n    });\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAnalytics('performance_views.summary.tag_explorer.sort', {\n      organization,\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  renderHeadCell(\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    column: TableColumn<ColumnKeys>,\n    columnInfo: TagColumn\n  ): React.ReactNode {\n    const {location} = this.props;\n    const align = fieldAlignment(column.key, column.type, tableMeta);\n    const field = {field: column.key, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = sortedEventView.sortOnField(field, tableMeta);\n      const {sort} = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, [TAGS_CURSOR_NAME]: undefined, tagSort: sort},\n      };\n    }\n    const currentSort = sortedEventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    return (\n      <SortLink\n        align={align}\n        title={columnInfo.name}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n  }\n\n  renderHeadCellWithMeta = (\n    sortedEventView: EventView,\n    tableMeta: TableData['meta'],\n    columns: TagColumn[]\n  ) => {\n    return (column: TableColumn<ColumnKeys>, index: number): React.ReactNode =>\n      this.renderHeadCell(sortedEventView, tableMeta, column, columns[index]);\n  };\n\n  handleTagValueClick = (location: Location, tagKey: string, tagValue: string) => {\n    const {organization} = this.props;\n    trackAnalytics('performance_views.summary.tag_explorer.tag_value', {\n      organization,\n    });\n\n    const queryString = decodeScalar(location.query.query);\n    const conditions = new MutableSearch(queryString ?? '');\n\n    conditions.addFilterValues(tagKey, [tagValue]);\n\n    const query = conditions.formatString();\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        query: String(query).trim(),\n      },\n    });\n  };\n\n  handleCellAction = (\n    column: TableColumn<ColumnKeys>,\n    tagValue: React.ReactText,\n    actionRow: any\n  ) => {\n    return (action: Actions) => {\n      const {eventView, location, organization} = this.props;\n      trackAnalytics('performance_views.summary.tag_explorer.cell_action', {\n        organization,\n      });\n\n      const searchConditions = normalizeSearchConditions(eventView.query);\n\n      updateQuery(searchConditions, action, {...column, name: actionRow.id}, tagValue);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          [TAGS_CURSOR_NAME]: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  onTagKeyClick() {\n    const {organization} = this.props;\n    trackAnalytics('performance_views.summary.tag_explorer.visit_tag_key', {\n      organization,\n    });\n  }\n\n  renderBodyCell = (\n    parentProps: Props,\n    column: TableColumn<ColumnKeys>,\n    dataRow: TableDataRow\n  ): React.ReactNode => {\n    const value = dataRow[column.key];\n    const {location, organization, transactionName} = parentProps;\n\n    if (column.key === 'key') {\n      const target = tagsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        projectID: decodeScalar(location.query.project),\n        query: {...location.query, tagKey: dataRow.tags_key},\n      });\n      return (\n        <Link to={target} onClick={() => this.onTagKeyClick()}>\n          {dataRow.tags_key}\n        </Link>\n      );\n    }\n\n    const allowActions = [Actions.ADD, Actions.EXCLUDE];\n\n    if (column.key === 'tagValue') {\n      const actionRow = {...dataRow, id: dataRow.tags_key};\n      return (\n        <CellAction\n          column={column}\n          dataRow={actionRow}\n          handleCellAction={this.handleCellAction(column, dataRow.tags_value, actionRow)}\n          allowActions={allowActions}\n        >\n          <div className=\"truncate\">{dataRow.tags_value}</div>\n        </CellAction>\n      );\n    }\n\n    if (column.key === 'frequency') {\n      return <AlignRight>{formatPercentage(dataRow.frequency, 0)}</AlignRight>;\n    }\n\n    if (column.key === 'comparison') {\n      const localValue = dataRow.comparison;\n      const pct = formatPercentage(localValue - 1, 0);\n      return (\n        <AlignRight>\n          {localValue > 1 ? t('+%s slower', pct) : t('%s faster', pct)}\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'aggregate') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.aggregate} />\n        </AlignRight>\n      );\n    }\n\n    if (column.key === 'sumdelta') {\n      return (\n        <AlignRight>\n          <PerformanceDuration abbreviation milliseconds={dataRow.sumdelta} />\n        </AlignRight>\n      );\n    }\n    return value;\n  };\n\n  renderBodyCellWithData = (parentProps: Props) => {\n    return (column: TableColumn<ColumnKeys>, dataRow: TableDataRow): React.ReactNode =>\n      this.renderBodyCell(parentProps, column, dataRow);\n  };\n\n  render() {\n    const {eventView, organization, location, currentFilter, projects, transactionName} =\n      this.props;\n\n    const tagSort = decodeScalar(location.query?.tagSort);\n    const cursor = decodeScalar(location.query?.[TAGS_CURSOR_NAME]);\n\n    const tagEventView = eventView.clone();\n    tagEventView.fields = TAG_EXPLORER_COLUMN_ORDER;\n\n    const tagSorts = fromSorts(tagSort);\n\n    const sortedEventView = tagEventView.withSorts(\n      tagSorts.length\n        ? tagSorts\n        : [\n            {\n              field: 'sumdelta',\n              kind: 'desc',\n            },\n          ]\n    );\n\n    const aggregateColumn = getTransactionField(currentFilter, projects, sortedEventView);\n\n    const adjustedColumns = getColumnsWithReplacedDuration(\n      currentFilter,\n      projects,\n      sortedEventView\n    );\n    const columns = this.getColumnOrder(adjustedColumns);\n\n    const columnSortBy = sortedEventView.getSorts();\n\n    return (\n      <SegmentExplorerQuery\n        eventView={sortedEventView}\n        orgSlug={organization.slug}\n        location={location}\n        aggregateColumn={aggregateColumn}\n        limit={5}\n        cursor={cursor}\n      >\n        {({isLoading, tableData, pageLinks}) => {\n          return (\n            <Fragment>\n              <GuideAnchor target=\"tag_explorer\">\n                <TagsHeader\n                  transactionName={transactionName}\n                  location={location}\n                  organization={organization}\n                  pageLinks={pageLinks}\n                />\n              </GuideAnchor>\n              <GridEditable\n                isLoading={isLoading}\n                data={tableData && tableData.data ? tableData.data : []}\n                columnOrder={columns}\n                columnSortBy={columnSortBy}\n                grid={{\n                  renderHeadCell: this.renderHeadCellWithMeta(\n                    sortedEventView,\n                    tableData?.meta || {},\n                    adjustedColumns\n                  ) as any,\n                  renderBodyCell: this.renderBodyCellWithData(this.props) as any,\n                  onResizeColumn: this.handleResizeColumn as any,\n                }}\n                location={location}\n              />\n            </Fragment>\n          );\n        }}\n      </SegmentExplorerQuery>\n    );\n  }\n}\n\ntype HeaderProps = {\n  location: Location;\n  organization: Organization;\n  pageLinks: string | null;\n  transactionName: string;\n};\n\nfunction TagsHeader(props: HeaderProps) {\n  const {pageLinks, organization, location, transactionName} = props;\n\n  const handleCursor: CursorHandler = (cursor, pathname, query) => {\n    trackAnalytics('performance_views.summary.tag_explorer.change_page', {\n      organization,\n    });\n    browserHistory.push({\n      pathname,\n      query: {...query, [TAGS_CURSOR_NAME]: cursor},\n    });\n  };\n\n  const handleViewAllTagsClick = () => {\n    trackAnalytics('performance_views.summary.tag_explorer.change_page', {\n      organization,\n    });\n  };\n\n  const viewAllTarget = tagsRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: transactionName,\n    projectID: decodeScalar(location.query.project),\n    query: {...location.query},\n  });\n\n  return (\n    <Header>\n      <div>\n        <SectionHeading>{t('Suspect Tags')}</SectionHeading>\n      </div>\n      <Button\n        onClick={handleViewAllTagsClick}\n        to={viewAllTarget}\n        size=\"xs\"\n        data-test-id=\"tags-explorer-open-tags\"\n      >\n        {t('View All Tags')}\n      </Button>\n      <StyledPagination pageLinks={pageLinks} onCursor={handleCursor} size=\"xs\" />\n    </Header>\n  );\n}\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n  width: 100%;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto auto;\n  margin-bottom: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","STATIC_FIELD_TAGS_SET","Set","Object","keys","FIELD_TAGS","STATIC_FIELD_TAGS","reduce","tags","key","kind","FieldKind","FIELD","STATIC_FIELD_TAGS_WITHOUT_TRACING","omit","TRACING_FIELDS","STATIC_SPAN_TAGS","SPAN_OP_BREAKDOWN_FIELDS","name","METRICS","STATIC_SEMVER_TAGS","SEMVER_TAGS","SearchBar","props","maxSearchItems","organization","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","customMeasurements","api","useApi","functionTags","useMemo","length","acc","item","has","field","isEquation","isCustomMeasurement","FUNCTION","getFunctionTags","tagsWithKind","TAG","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","isMeasurement","Promise","resolve","isDeviceClass","DEVICE_CLASS_TAG_VALUES","fetchTagValues","orgSlug","slug","tagKey","search","includeTransactions","includeSessions","then","results","flatten","filter","_ref","defined","_ref2","Error","_ref3","getTagList","measurements","measurementsWithKind","getMeasurementTags","MEASUREMENT","combinedTags","features","includes","assign","FieldKey","HAS","values","sort","a","b","toLowerCase","localeCompare","predefined","_jsx","Measurements","children","_ref4","SmartSearchBar","hasRecentSearches","savedSearchType","SavedSearchType","EVENT","onGetTagValues","supportedTags","prepareQuery","replace","excludedTags","ENVIRONMENT","TOTAL_COUNT","customPerformanceMetrics","displayName","withTags","PerformanceDuration","normalizedSeconds","nanoseconds","isNanoseconds","milliseconds","isMilliseconds","seconds","Duration","abbreviation","fixedDigits","getRequestFunction","_props","aggregateColumn","eventView","apiPayload","getEventsAPIPayload","location","allTagKeys","shouldRefetchData","prevProps","nextProps","SegmentExplorerQuery","GenericDiscoverQuery","route","getRequestPayload","WrappedComponent","WithTags","Component","constructor","arguments","_defineProperty","TagStore","getState","listen","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","TAGS_CURSOR_NAME","TAG_EXPLORER_COLUMN_ORDER","width","column","canSort","getTransactionField","currentFilter","projects","fieldFromFilter","SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD","platformAndConditionsToPerformanceType","ProjectPerformanceType","FRONTEND","TagValue","className","row","tags_value","TagExplorer","widths","columnIndex","nextColumn","Number","COL_WIDTH_UNDEFINED","columns","col","i","sortedEventView","tableMeta","index","renderHeadCell","tagValue","trackAnalytics","queryString","decodeScalar","conditions","MutableSearch","addFilterValues","formatString","browserHistory","push","pathname","trim","actionRow","action","searchConditions","normalizeSearchConditions","updateQuery","id","parentProps","dataRow","value","transactionName","target","tagsRouteWithQuery","transaction","projectID","project","tags_key","Link","to","onClick","onTagKeyClick","allowActions","Actions","ADD","EXCLUDE","CellAction","handleCellAction","AlignRight","formatPercentage","frequency","localValue","comparison","pct","t","aggregate","sumdelta","renderBodyCell","onSortClick","currentSortKind","currentSortField","direction","columnInfo","align","fieldAlignment","type","currentSort","sortForField","isFieldSortable","SortLink","title","generateSortLink","nextEventView","sortOnField","generateQueryStringObject","tagSort","cursor","tagEventView","clone","tagSorts","fromSorts","withSorts","adjustedColumns","getColumnsWithReplacedDuration","c","durationColumn","find","getColumnOrder","columnSortBy","getSorts","limit","isLoading","tableData","pageLinks","_jsxs","Fragment","GuideAnchor","TagsHeader","GridEditable","data","columnOrder","grid","renderHeadCellWithMeta","meta","renderBodyCellWithData","onResizeColumn","handleResizeColumn","viewAllTarget","Header","SectionHeading","Button","handleViewAllTagsClick","size","StyledPagination","onCursor","handleCursor","_styled","styles","space","Pagination"],"sourceRoot":""}