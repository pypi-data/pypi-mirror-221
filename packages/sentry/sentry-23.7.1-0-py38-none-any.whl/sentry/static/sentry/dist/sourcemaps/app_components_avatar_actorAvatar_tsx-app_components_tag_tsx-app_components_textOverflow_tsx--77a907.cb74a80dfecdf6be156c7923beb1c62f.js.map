{"version":3,"file":"chunks/app_components_avatar_actorAvatar_tsx-app_components_tag_tsx-app_components_textOverflow_tsx--77a907.xxxxxxxxxxxxxxxxxxxx.js","mappings":"oYAWA,MAAMA,EAAa,eACjBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3BG,EAA2BH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,QAAAE,EAAAJ,UAAAC,OACxBI,EAAI,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,EAAA,GAAAP,UAAAO,GAAA,OACJR,EAAOI,QAAWE,EAAK,EAarBG,eAAeC,EAAeC,EAAaX,GAChD,MAAMY,QAAcD,EAAIE,eAAgB,kBAAiBb,EAAOc,qBAChEC,EAAAA,EAAUC,cAAcJ,EAC1B,CAkBO,SAASK,EAAkBC,EAAkCC,GAClEJ,EAAAA,EAAUK,gBAAgBF,EAAQC,EACpC,CAEO,SAASE,EACdV,EACAX,EACAsB,GAEA,MAAMC,EAAY,kBAAiBvB,EAAOc,iBACxCd,EAAOwB,UAAY,cACXxB,EAAOkB,UAEjB,OAAOP,EAAIc,QAAQF,EAAU,CAC3BG,OAAQ,OACRC,QAASR,IACPJ,EAAAA,EAAUK,gBAAgBpB,EAAOkB,OAAQC,GACzCpB,EAAWuB,EAAS,UAAWH,EAAK,EAEtCS,MAAOA,IACL7B,EAAWuB,EAAS,QAASM,EAAM,GAGzC,CAEO,SAASC,EACdlB,EACAX,EACAsB,GAEA,MAAMC,EAAY,kBAAiBvB,EAAOc,iBACxCd,EAAOwB,UAAY,cACXxB,EAAOkB,UAEjB,OAAOP,EAAIc,QAAQF,EAAU,CAC3BG,OAAQ,SACRC,QAASR,IACPJ,EAAAA,EAAUK,gBAAgBpB,EAAOkB,OAAQC,GACzCpB,EAAWuB,EAAS,UAAWH,EAAK,EAEtCS,MAAOA,IACL7B,EAAWuB,EAAS,QAASM,EAAM,GAGzC,CAEO,SAASE,EAAWnB,EAAaoB,EAA0B/B,GAChE,OAAOW,EACJE,eAAgB,kBAAiBb,EAAOc,eAAgB,CACvDY,OAAQ,OACRP,KAAMY,IAEPC,MACCb,IACEJ,EAAAA,EAAUkB,gBAAgBd,IAC1Be,EAAAA,EAAAA,KACEC,EAAAA,EAAAA,IAAI,2DAA4D,CAC9DJ,KAAO,IAAGZ,EAAKiB,OACfC,aAAcrC,EAAOc,SAGlBK,KAETmB,IAOE,MANAC,EAAAA,EAAAA,KACEJ,EAAAA,EAAAA,IAAI,6DAA8D,CAChEJ,KAAO,IAAGA,EAAKK,OACfC,aAAcrC,EAAOc,SAGnBwB,CAAG,GAGjB,CAEO,SAASE,EAAW7B,EAAaX,GACtC,OAAOW,EACJE,eAAgB,UAASb,EAAOc,SAASd,EAAOkB,UAAW,CAC1DQ,OAAQ,WAETM,MACCb,IACEJ,EAAAA,EAAU0B,gBAAgBzC,EAAOkB,SACjCgB,EAAAA,EAAAA,KACEC,EAAAA,EAAAA,IAAI,+DAAgE,CAClEJ,KAAO,IAAG/B,EAAOkB,SACjBmB,aAAcrC,EAAOc,SAGlBK,KAETmB,IAOE,MANAC,EAAAA,EAAAA,KACEJ,EAAAA,EAAAA,IAAI,+DAAgE,CAClEJ,KAAO,IAAG/B,EAAOkB,SACjBmB,aAAcrC,EAAOc,SAGnBwB,CAAG,GAGjB,C,ggBC3FA,QAlCA,SAAoBI,GAAyD,IAAxD,KAACC,EAAO,GAAE,WAAEC,GAAa,EAAI,MAAEC,KAAUC,GAAaJ,EACzE,MAAMK,EAAa,CACjBJ,OACAC,gBACGE,GAGL,GAAmB,SAAfD,EAAMG,KAAiB,CACzB,MAAMC,EAAOJ,EAAMK,GAAKC,EAAAA,EAAgBC,QAAQP,EAAMK,KAAOL,EAAQA,EACrE,OAAOQ,EAAAA,EAAAA,IAACC,EAAAA,EAAU,CAACL,KAAMA,KAAUF,GACrC,CAEA,MAAmB,SAAfF,EAAMG,MAENK,EAAAA,EAAAA,IAACE,EAAAA,EAAK,CAACC,IAAK,CAACX,EAAMK,IAAIO,SACpBC,IAAA,IAAC,gBAACC,EAAe,MAAE/C,GAAM8C,EAAA,OACxBC,GACEN,EAAAA,EAAAA,IAACO,EAAAA,EAAU,CAAC7B,KAAMnB,EAAM,MAAQmC,KAEhCM,EAAAA,EAAAA,IAACQ,EAAAA,EAAgB,CAACC,MAAI,GACvB,KAMTC,EAAAA,IAAiBC,IACfA,EAAMC,SAAS,QAASpB,GACxBkB,EAAAA,GAAwB,IAAIG,MAAM,uBAAuB,IAGpD,KACT,C,mmBCzCA,MAAMC,EAAa,OA2CnB,SAASC,EAAG1B,GAYF,IAZG,KACXM,EAAO,UAAS,KAChBqB,EAAI,YACJC,EAAW,aACXC,EAAY,GACZC,EAAE,QACFC,EAAO,KACPC,EAAI,UACJC,EAAS,SACTlB,EAAQ,aACRmB,EAAe,OACZ9B,GACGJ,EACN,MAAMmC,EAA2B,CAC/BlC,KAAM,KACNmC,MAAOC,EAAAA,GAAMC,IAAIhC,GAAMiC,WAGnBD,GACJ3B,EAAAA,EAAAA,IAAC6B,EAAAA,EAAO,CAACC,MAAOb,EAAac,qBAAqB,iBAAkBb,EAAYd,UAC9E4B,EAAAA,EAAAA,IAACC,EAAU,CAACtC,KAAMA,EAAKS,SAAA,EAiCrB8B,EAAAA,EAAAA,gBAAelB,IACVhB,EAAAA,EAAAA,IAACmC,EAAW,CAAA/B,UAAEgC,EAAAA,EAAAA,cAAapB,EAAM,IAAIQ,QAGzCa,EAAAA,EAAAA,IAAQhB,KAASgB,EAAAA,EAAAA,IAAQlB,UAAiBrE,IAATkE,GAElChB,EAAAA,EAAAA,IAACmC,EAAW,CAAA/B,UACVJ,EAAAA,EAAAA,IAACsC,EAAAA,GAAQ,IAAKd,MAKb,MA1CHxB,EAAAA,EAAAA,IAACuC,EAAI,CAAC5C,KAAMA,EAAM6C,SAAUjB,EAAanB,SACtCA,KAGFiC,EAAAA,EAAAA,IAAQf,KACPtB,EAAAA,EAAAA,IAACyC,EAAa,CACZrB,QAWV,SAAuBsB,GACrBA,EAAMC,iBACNrB,KACF,EAbUhC,KAAK,OACLsD,SAAS,OACT,cAAYC,EAAAA,EAAAA,GAAE,WACd7B,MAAMhB,EAAAA,EAAAA,IAAC8C,EAAAA,GAAS,CAACC,WAAS,KAAKvB,WAsDzC,OACExB,EAAAA,EAAAA,IAACgD,EAAU,IAAKvD,EAAO2B,QA3CD6B,MACtBC,EAAAA,EAAAA,IAAe,cAAe,CAC5BC,cAAcd,EAAAA,EAAAA,IAAQjB,KAAYiB,EAAAA,EAAAA,IAAQlB,KAAOkB,EAAAA,EAAAA,IAAQhB,GACzDrC,aAAc,MACd,EAuC8CoB,UAnB5CiC,EAAAA,EAAAA,IAAQhB,IACHrB,EAAAA,EAAAA,IAACoD,EAAAA,EAAY,CAAC/B,KAAMA,EAAKjB,SAAEuB,KAGhCU,EAAAA,EAAAA,IAAQlB,KAAOkB,EAAAA,EAAAA,IAAQjB,IAEvBpB,EAAAA,EAAAA,IAACqD,EAAAA,EAAI,CAAClC,GAAIA,EAAIC,QAASA,EAAQhB,SAC5BuB,KAIHU,EAAAA,EAAAA,IAAQlB,IACHnB,EAAAA,EAAAA,IAACqD,EAAAA,EAAI,CAAClC,GAAIA,EAAGf,SAAEuB,IAGjBA,GAQX,CA5FSZ,EAAGuC,YAAA,MA8FZ,MAAMN,GAAaO,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,WAAbD,CAAc,cAClBE,GAAKA,EAAE/B,MAAMgC,eAAa,KAG5BzB,GAAasB,EAAAA,EAAAA,GAAO,MAAK,CAAAC,OAAA,WAAZD,CAAa,iDAG3BzC,EAAU,kBACHA,EAAU,sBACP2C,GAAKA,EAAE/B,MAAMC,IAAI8B,EAAE9D,MAAMgE,YAAU,sBACnCF,GAAKA,EAAE/B,MAAMC,IAAI8B,EAAE9D,MAAMiE,QAAM,eACtCC,EAAAA,EAAAA,GAAM,GAAE,KAGjB1B,GAAcoB,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,WAAbD,CAAc,iBAChBM,EAAAA,EAAAA,GAAM,IAAI,yBAItBtB,GAAOgB,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,WAAbD,CAAc,UAChBE,GACP,CAAC,QAAS,SAASK,SAASL,EAAE9D,MAC1B8D,EAAE/B,MAAMC,IAAI8B,EAAE9D,MAAMiC,UACpB6B,EAAE/B,MAAMqC,WAAS,eACVN,GAAKA,EAAEjB,UAAQ,4EAIb1B,EAAU,KAGrB2B,GAAgBc,EAAAA,EAAAA,GAAOS,EAAAA,GAAM,CAAAR,OAAA,WAAbD,CAAc,gBACnBM,EAAAA,EAAAA,GAAM,IAAI,mBACRA,EAAAA,EAAAA,GAAM,IAAI,iBAI7B,G,yPCxKA,MAAMI,GAAeV,EAAAA,EAAAA,IACnBlE,IAMa,IANZ,SACCe,EAAQ,UACR8D,EAAS,kBACTC,EAAiB,YACjBC,EACA,eAAkBC,GACZhF,EACN,MAAMiF,EAAYF,EAAc,IAAM,MACtC,MAA0B,SAAtBD,GAEAnE,EAAAA,EAAAA,IAACsE,EAAS,CAACJ,UAAWA,EAAW,eAAcG,EAAWjE,UACxDJ,EAAAA,EAAAA,IAAA,OAAAI,SAAMA,OAKVJ,EAAAA,EAAAA,IAACsE,EAAS,CAACJ,UAAWA,EAAW,eAAcG,EAAWjE,SACvDA,GACS,GAEf,CAAAoD,OAAA,aArBkBD,EAuBjBE,GAAKA,EAAE/B,MAAM6C,kBAAgB,KAC7Bd,GACwB,SAAxBA,EAAEU,mBACD,0DAGA,gCAKLF,EAAaO,aAAe,CAC1BL,kBAAmB,QACnBC,aAAa,GAGf,S,+gBCjDA,SAASK,EAAWC,GAClB,OAAOC,IAASD,IAASE,IAASF,GAAQ,IAAIG,KAAKH,GAAQA,CAC7D,CAoFA,SAASI,EAASzF,GAaR,IAbS,KACjBqF,EAAI,wBACJK,EAAuB,mBACvBC,EACAC,cAAeC,EAAY,YAC3BC,EAAW,cACXC,EAAa,sBACbC,EAAqB,UACrBC,EAAS,OACTC,GAAS1C,EAAAA,EAAAA,GAAE,MAAK,OAChB2C,GAAS3C,EAAAA,EAAAA,GAAE,OAAM,mBACjB4C,EAAqB,YAClBhG,GACGJ,EACN,MAAMqG,GAAYC,EAAAA,EAAAA,UAEZC,GAAsBC,EAAAA,EAAAA,cAC1B,IAkEJ,SACEC,EACAN,EACAD,GAEQ,IADRD,EAAoB1I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,QAEvB,MAAMmJ,EAAaC,IAAOvB,EAAWqB,IAC/BG,EAAWF,EAAWG,QAAQF,OAEpC,IAAIG,EAAoB,GAexB,OAXEA,EAFgB,UAAdb,EAEUS,EAAWK,SAAQ,IAEnBC,EAAAA,EAAAA,IACVL,MAASM,KAAKP,EAAY,WAC1B,EACc,UAAdT,EACc,eAAdA,EACAW,GAICT,GAAWD,EAITU,EAAY,GAAEV,KAAUY,IAAe,GAAEA,KAAaX,IAHpDW,CAIX,CA/FUI,CAAgB7B,EAAMc,EAAQD,EAAQD,IAC5C,CAACZ,EAAMc,EAAQD,EAAQD,KAGlBkB,EAAUC,IAAeC,EAAAA,EAAAA,UAAiBd,MAEjDe,EAAAA,EAAAA,YAAU,KAERF,EAAYb,KAEZ,MAAMgB,EACmB,WAAvBnB,EACI,IACuB,WAAvBA,EACA,IACAA,EAQN,OALAC,EAAUmB,QAAUC,OAAOC,aACzB,IAAMN,EAAYb,MAClBgB,GAGK,IAAME,OAAOE,cAActB,EAAUmB,QAAQ,GACnD,CAACpB,EAAoBG,IAExB,MAAMqB,EAAUxC,EAAWC,GACrB9E,EAAOsH,EAAAA,EAAYC,IAAI,QACvBlJ,EAAU2B,EAAOA,EAAK3B,QAAU,KAIhCmJ,EAAgBpC,EAClB,0BACA,wBACEqC,EAASpJ,GAASqJ,aAAe,uBAAyBF,EAE1DG,GAAUC,EAAAA,EAAAA,GAAe,CAC7BC,MAAOxJ,GAASqJ,aACZ,6BACA,+BACJI,MAAO1B,IAAAA,GAAUiB,EAAShJ,GAAS0J,UAAY,IAAIN,OAAOA,KAG5D,OACErH,EAAAA,EAAAA,IAAC6B,EAAAA,EAAO,CACN+F,SAAU7C,EACV8C,eAAgBxC,EAChByC,eAAa,EACbhG,OACEE,EAAAA,EAAAA,IAAC+F,EAAAA,SAAQ,CAAA3H,SAAA,CACN8E,IAAgBlF,EAAAA,EAAAA,IAAA,OAAAI,SAAM8E,IACtBC,GAAeoC,EACfnC,IAAiBpF,EAAAA,EAAAA,IAAA,OAAAI,SAAMgF,OAE3BhF,UAEDJ,EAAAA,EAAAA,IAAA,QAAMgI,SAAUf,GAASgB,iBAAmBxI,EAAKW,SAC9CoG,KAIT,CA/ES1B,EAASxB,YAAA,YAiFlB,S,gEC3JA,MAAM4E,EAAyC,CAC7CC,MAAO,CACLC,QAAS,GACTC,SAAS,EACTC,QAAS,KACTC,OAAQ,MAGVC,OAIEC,KAAKC,OACP,EAEAA,QACED,KAAKN,MAAQ,CACXC,QAAS,GACTC,SAAS,EACTC,QAAS,KACTC,OAAQ,KAEZ,EAEAI,gBAAgBC,EAAeN,EAASC,GACtCE,KAAKN,MAAQ,CACXC,QAASQ,EACTP,SAAS,EACTC,QAASA,GAAWG,KAAKN,MAAMG,QAC/BC,OAAQA,GAAUE,KAAKN,MAAMI,QAG/BE,KAAKI,QAAQJ,KAAKN,MAAO,UAC3B,EAEApI,QAAQ5B,GACN,OAAOsK,KAAKN,MAAMC,QAAQU,MAAKzJ,IAAA,IAAC,GAACQ,GAAGR,EAAA,OAAKlB,IAAa0B,CAAE,GAC1D,EAEAkJ,SACE,OAAON,KAAKN,MAAMC,OACpB,EAEAY,WACE,OAAOP,KAAKN,KACd,GAIF,GADwBc,E,yCAAAA,aAAYf,E,6JCpEpC,MAAMgB,EAAwBpC,OAAOqC,qBAAuB,KACtDC,EAA0BtC,OAAOuC,sBAYhC,SAASC,IACd,MAAM,YAACC,GAAerC,EAAAA,EAAYC,IAAI,SAAW,CAAC,EAElD,GAAIoC,EAAa,CACf,MAAMJ,EACJjC,EAAAA,EAAYC,IAAI,wBAA0B+B,EACtCG,EACJnC,EAAAA,EAAYC,IAAI,0BAA4BiC,EAU9C,GAJAI,EAAAA,EAAQC,IAAIN,EAAqB,2BAA4B,CAC3DO,OAAQL,SAG+BvM,IAArC0M,EAAAA,EAAQrC,IAAIgC,GACd,OAAO,CAEX,CAEA,OAAO,CACT,C,+NCzBA,SAASjJ,EAAKb,GAA8B,IAA7B,SAACe,KAAaX,GAAaJ,EACxC,MAAMsK,GAAcC,EAAAA,EAAAA,GAASnK,GAE7B,OAAOO,EAAAA,EAAAA,IAAC+H,EAAAA,SAAQ,CAAA3H,SAAEA,EAASuJ,IAC7B,CAJSzJ,EAAKoD,YAAA,QAMd,S,0ZC2EAlG,eAAeyM,EACbvM,EACAG,GAEA,IADA,MAACqM,EAAK,IAAE3J,EAAG,OAAE4J,EAAM,MAAEC,EAAK,WAAEC,EAAU,OAAE1B,GAAyB3L,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAErE,MAAMsN,EAIF,CAAC,OAESpN,IAAVgN,GAAuBA,EAAMjN,OAAS,IACxCqN,EAAMA,MAAQJ,EAAMK,KAAIpL,GAAS,QAAOA,MAAQqL,KAAK,WAG3CtN,IAARqD,GAAqBA,EAAItD,OAAS,IACpCqN,EAAMA,MAAQ/J,EAAIgK,KAAItK,GAAO,MAAKA,MAAMuK,KAAK,MAG3CL,IACFG,EAAMA,MAAS,GAAEA,EAAMA,OAAS,MAAMH,IAASM,SAG5BJ,IAAeF,IAAYE,IAAeF,IAE3CxB,IAClB2B,EAAM3B,OAASA,QAGHzL,IAAVkN,IACFE,EAAMI,SAAWN,GAGnB,IAAI1B,GAA0B,EAC1BiC,EAA4B,KAChC,MAAOzM,EAAK,CAAG0M,SAAclN,EAAIE,eAAgB,kBAAiBC,WAAgB,CAChFgN,gBAAgB,EAChBP,UAGIQ,EAAYF,GAAMG,kBAAkB,QAC1C,GAAID,EAAW,CACb,MAAME,GAAmBC,EAAAA,EAAAA,GAAgBH,GACzCpC,EAAUsC,GAAkBE,MAAMC,QAClCR,EAAaK,GAAkBE,MAAMvC,MACvC,CAEA,MAAO,CAACwC,QAASjN,EAAMwK,UAASiC,aAClC,CAiBO,SAASX,IAA8D,IAArD,MAACI,EAAK,MAAEF,EAAK,IAAE3J,EAAG,iBAAE6K,GAA0BpO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzE,MAAMU,GAAM2N,EAAAA,EAAAA,MACN,aAACjM,IAAgBkM,EAAAA,EAAAA,GAAeC,EAAAA,GAChCC,GAAQF,EAAAA,EAAAA,GAAexN,EAAAA,GAEvBD,EAAQuB,GAAcD,KAEtBsM,GAAaC,EAAAA,EAAAA,UAAQ,IAAM,IAAIC,IAAIH,EAAM7N,MAAM4M,KAAItH,GAAKA,EAAE9D,SAAQ,CAACqM,EAAM7N,QACzEiO,GAAWF,EAAAA,EAAAA,UAAQ,IAAM,IAAIC,IAAIH,EAAM7N,MAAM4M,KAAItH,GAAKA,EAAEhD,OAAM,CAACuL,EAAM7N,QAErEkO,GAAcH,EAAAA,EAAAA,UAClB,IAAMxB,GAAO4B,QAAO3M,IAASsM,EAAWM,IAAI5M,MAAU,IACtD,CAAC+K,EAAOuB,IAGJO,GAAYN,EAAAA,EAAAA,UAChB,IAAMnL,GAAKuL,QAAO7L,IAAO2L,EAASG,IAAI9L,MAAQ,IAC9C,CAACM,EAAKqL,IAGFK,EAAoBJ,EAAY5O,OAAS,GAAK+O,EAAU/O,OAAS,EACjEiP,EAAsBd,IAAqBI,EAAMW,gBAIjDzL,GAAmBwL,IAAwBD,GAE1C1D,EAAO6D,IAAYtF,EAAAA,EAAAA,UAAgB,CACxCpG,kBACA2L,UAAU,EACV3D,QAAS8C,EAAM9C,QACf2B,WAAY,KACZM,WAAYa,EAAM7C,OAClB2D,WAAY,OAGRvO,GAAgBkI,EAAAA,EAAAA,cACpBzI,iBACE,QAAcN,IAAVW,EAAJ,CAIAuO,GAASG,IAAQ,IAAKA,EAAMF,UAAU,MACtC,UACQ5O,EAAAA,EAAAA,IAAeC,EAAK,CAACG,UAE3BuO,GAASG,IAAQ,IAAKA,EAAMF,UAAU,EAAO3L,iBAAiB,KAChE,CAAE,MAAOrB,GACPmN,QAAQ7N,MAAMU,GAEd+M,GAASG,IAAQ,IACZA,EACHF,UAAU,EACV3L,iBAAiB,EACjB4L,WAAYjN,KAEhB,CAhBA,CAiBF,GACA,CAAC3B,EAAKG,IAGF4O,GAAmBxG,EAAAA,EAAAA,cACvBzI,iBACE,QAAcN,IAAVW,EAAJ,CAIAuO,GAASG,IAAQ,IAAKA,EAAMF,UAAU,MACtC,IACE,MAAM,QAAClB,EAAO,QAAEzC,EAAO,WAAEiC,SAAoBV,EAAWvM,EAAKG,EAAO,CAClEqM,MAAO2B,EACPtL,IAAKyL,EACL5B,UAIIsC,EAAeC,IAAa,IAAIxB,KAAYK,EAAM7N,QAAQ8B,IAAA,IAAC,GAACQ,GAAGR,EAAA,OAAKQ,CAAE,IAC5EnC,EAAAA,EAAUiL,gBAAgB2D,GAE1BN,GAASG,IAAQ,IACZA,EACH7D,UACA2D,UAAU,EACV3L,iBAAiB,EACjBiK,gBAEJ,CAAE,MAAOtL,GACPmN,QAAQ7N,MAAMU,GAEd+M,GAASG,IAAQ,IACZA,EACHF,UAAU,EACV3L,iBAAiB,EACjB4L,WAAYjN,KAEhB,CA9BA,CA+BF,GACA,CAAC3B,EAAKsO,EAAW5B,EAAOvM,EAAOgO,EAAaL,EAAM7N,QAG9CiP,GAA6B3G,EAAAA,EAAAA,cACjCzI,eAAgB2M,GACd,MAAME,EAAa9B,EAAM8B,WAEnB1B,EAASwB,EAAS5B,EAAMoC,WAAaa,EAAM7C,OAEjD,QAAczL,IAAVW,EAAJ,CAMAuO,GAASG,IAAQ,IAAKA,EAAMF,UAAU,MAEtC,IACE3O,EAAImP,QACJ,MAAM,QAAC1B,EAAO,QAAEzC,EAAO,WAAEiC,SAAoBV,EAAWvM,EAAKG,EAAO,CAClEsM,SACAC,QACAC,aACA1B,WAGI+D,EAAeC,IAAa,IAAInB,EAAM7N,SAAUwN,IAAU1K,IAAA,IAAC,KAACtB,GAAKsB,EAAA,OAAKtB,CAAI,IAE5EgL,EAEEuC,EAAazP,OAASuO,EAAM7N,MAAMV,QACpCa,EAAAA,EAAUiL,gBAAgB2D,GAI5B5O,EAAAA,EAAUiL,gBAAgB2D,EAAchE,EAASiC,GAGnDyB,GAASG,IAAQ,IACZA,EACH7D,QAASA,GAAW8C,EAAM9C,QAC1B2D,UAAU,EACVhC,WAAYF,GAAU,KACtBQ,gBAEJ,CAAE,MAAOtL,GACPmN,QAAQ7N,MAAMU,GAEd+M,GAASG,IAAQ,IAAKA,EAAMF,UAAU,EAAOC,WAAYjN,KAC3D,CApCA,MAFEmN,QAAQ7N,MAAM,wDAuClB,GACA,CACEjB,EACA0M,EACAvM,EACA0K,EAAM8B,WACN9B,EAAMoC,WACNa,EAAM7C,OACN6C,EAAM9C,QACN8C,EAAM7N,QAIJmP,GAAe7G,EAAAA,EAAAA,cACnB,SAAUkE,GACR,MAAe,KAAXA,EACKyC,EAA2BzC,IAIhC5B,EAAMG,UAAY8C,EAAM9C,SAAWH,EAAMoC,aAAea,EAAM7C,QAChEyD,GAASG,IAAQ,IACZA,EACHlC,WAAYF,EACZzB,QAAS8C,EAAM9C,QACfiC,WAAYa,EAAM7C,WAIfoE,QAAQC,UACjB,GACA,CACEJ,EACArE,EAAMG,QACNH,EAAMoC,WACNa,EAAM7C,OACN6C,EAAM9C,WAKV3B,EAAAA,EAAAA,YAAU,KACJkF,GACFQ,GACF,GACC,CAACR,EAAmBQ,KAEvB1F,EAAAA,EAAAA,YAAU,KACJmF,GACFnO,GACF,GACC,CAACmO,EAAqBnO,IAEzB,MAAM4L,GAAcD,EAAAA,EAAAA,KAsBpB,MAVuB,CACrB/L,OAXoB+N,EAAAA,EAAAA,UAAQ,IACrBxB,EACHsB,EAAM7N,MAAMmO,QAAO7I,GAAKiH,EAAMhG,SAASjB,EAAE9D,QACzCoB,EACAiL,EAAM7N,MAAMmO,QAAO7I,GAAK1C,EAAI2D,SAASjB,EAAEhD,MACvCmL,IAAqBzB,EACrB6B,EAAM7N,MAAMmO,QAAO7I,GAAKA,EAAEgK,WAC1BzB,EAAM7N,OACT,CAAC6N,EAAM7N,MAAO4C,EAAK2J,EAAOkB,EAAkBzB,IAI7C0C,SAAU9D,EAAM8D,UAAYb,EAAM/C,QAClC/H,gBAAiB6H,EAAM7H,gBACvB4L,WAAY/D,EAAM+D,WAClB5D,QAASH,EAAMG,SAAW8C,EAAM9C,QAChCwE,SAAUJ,EACVK,SAAUP,EAId,C","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/components/avatar/actorAvatar.tsx","webpack:///./app/components/tag.tsx","webpack:///./app/components/textOverflow.tsx","webpack:///./app/components/timeSince.tsx","webpack:///./app/stores/memberListStore.tsx","webpack:///./app/utils/isActiveSuperuser.tsx","webpack:///./app/utils/teams.tsx","webpack:///./app/utils/useTeams.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {tct} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {Team} from 'sentry/types';\n\ntype CallbackOptions = {\n  error?: Function;\n  success?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => params[name]?.(...args);\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch user teams for current org and place them in the team store\nexport async function fetchUserTeams(api: Client, params: OrgSlug) {\n  const teams = await api.requestPromise(`/organizations/${params.orgId}/user-teams/`);\n  TeamStore.loadUserTeams(teams);\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamStore.onUpdateSuccess(teamId, data);\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamStore.onCreateSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamStore.onRemoveSuccess(params.teamId);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import * as Sentry from '@sentry/react';\n\nimport TeamAvatar from 'sentry/components/avatar/teamAvatar';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {TooltipProps} from 'sentry/components/tooltip';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport {Actor} from 'sentry/types';\nimport Teams from 'sentry/utils/teams';\n\ntype Props = {\n  actor: Actor;\n  className?: string;\n  default?: string;\n  gravatar?: boolean;\n  hasTooltip?: boolean;\n  onClick?: () => void;\n  round?: boolean;\n  size?: number;\n  suggested?: boolean;\n  title?: string;\n  tooltip?: React.ReactNode;\n  tooltipOptions?: Omit<TooltipProps, 'children' | 'title'>;\n};\n\nfunction ActorAvatar({size = 24, hasTooltip = true, actor, ...props}: Props) {\n  const otherProps = {\n    size,\n    hasTooltip,\n    ...props,\n  };\n\n  if (actor.type === 'user') {\n    const user = actor.id ? MemberListStore.getById(actor.id) ?? actor : actor;\n    return <UserAvatar user={user} {...otherProps} />;\n  }\n\n  if (actor.type === 'team') {\n    return (\n      <Teams ids={[actor.id]}>\n        {({initiallyLoaded, teams}) =>\n          initiallyLoaded ? (\n            <TeamAvatar team={teams[0]} {...otherProps} />\n          ) : (\n            <LoadingIndicator mini />\n          )\n        }\n      </Teams>\n    );\n  }\n\n  Sentry.withScope(scope => {\n    scope.setExtra('actor', actor);\n    Sentry.captureException(new Error('Unknown avatar type'));\n  });\n\n  return null;\n}\n\nexport default ActorAvatar;\n","import {cloneElement, isValidElement} from 'react';\nimport {Theme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport {Tooltip, TooltipProps} from 'sentry/components/tooltip';\nimport {IconClose, IconOpen} from 'sentry/icons';\nimport {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport theme, {Color} from 'sentry/utils/theme';\n\nconst TAG_HEIGHT = '20px';\n\ninterface Props extends React.HTMLAttributes<HTMLSpanElement> {\n  /**\n   * Makes the tag clickable. Use for external links.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  href?: string;\n  /**\n   * Icon on the left side.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Triggered when the item is clicked\n   */\n  onClick?: (eventKey: any) => void;\n  /**\n   * Shows clickable IconClose on the right side.\n   */\n  onDismiss?: () => void;\n  /**\n   * Max width of the tag's text\n   */\n  textMaxWidth?: number;\n  /**\n   * Makes the tag clickable. Use for internal links handled by react router.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  to?: LinkProps['to'];\n  /**\n   * Additional properites for the Tooltip when `tooltipText` is set.\n   */\n  tooltipProps?: Omit<TooltipProps, 'children' | 'title' | 'skipWrapper'>;\n  /**\n   * Text to show up on a hover.\n   */\n  tooltipText?: TooltipProps['title'];\n  /**\n   * Dictates color scheme of the tag.\n   */\n  type?: keyof Theme['tag'];\n}\n\nfunction Tag({\n  type = 'default',\n  icon,\n  tooltipText,\n  tooltipProps,\n  to,\n  onClick,\n  href,\n  onDismiss,\n  children,\n  textMaxWidth = 150,\n  ...props\n}: Props) {\n  const iconsProps: SVGIconProps = {\n    size: 'xs',\n    color: theme.tag[type].iconColor as Color,\n  };\n\n  const tag = (\n    <Tooltip title={tooltipText} containerDisplayMode=\"inline-flex\" {...tooltipProps}>\n      <Background type={type}>\n        {tagIcon()}\n\n        <Text type={type} maxWidth={textMaxWidth}>\n          {children}\n        </Text>\n\n        {defined(onDismiss) && (\n          <DismissButton\n            onClick={handleDismiss}\n            size=\"zero\"\n            priority=\"link\"\n            aria-label={t('Dismiss')}\n            icon={<IconClose isCircled {...iconsProps} />}\n          />\n        )}\n      </Background>\n    </Tooltip>\n  );\n\n  function handleDismiss(event: React.MouseEvent) {\n    event.preventDefault();\n    onDismiss?.();\n  }\n\n  const trackClickEvent = () => {\n    trackAnalytics('tag.clicked', {\n      is_clickable: defined(onClick) || defined(to) || defined(href),\n      organization: null,\n    });\n  };\n\n  function tagIcon() {\n    if (isValidElement(icon)) {\n      return <IconWrapper>{cloneElement(icon, {...iconsProps})}</IconWrapper>;\n    }\n\n    if ((defined(href) || defined(to)) && icon === undefined) {\n      return (\n        <IconWrapper>\n          <IconOpen {...iconsProps} />\n        </IconWrapper>\n      );\n    }\n\n    return null;\n  }\n\n  function tagWithParent() {\n    if (defined(href)) {\n      return <ExternalLink href={href}>{tag}</ExternalLink>;\n    }\n\n    if (defined(to) && defined(onClick)) {\n      return (\n        <Link to={to} onClick={onClick}>\n          {tag}\n        </Link>\n      );\n    }\n    if (defined(to)) {\n      return <Link to={to}>{tag}</Link>;\n    }\n\n    return tag;\n  }\n\n  return (\n    <TagWrapper {...props} onClick={trackClickEvent}>\n      {tagWithParent()}\n    </TagWrapper>\n  );\n}\n\nconst TagWrapper = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport const Background = styled('div')<{type: keyof Theme['tag']}>`\n  display: inline-flex;\n  align-items: center;\n  height: ${TAG_HEIGHT};\n  border-radius: ${TAG_HEIGHT};\n  background-color: ${p => p.theme.tag[p.type].background};\n  border: solid 1px ${p => p.theme.tag[p.type].border};\n  padding: 0 ${space(1)};\n`;\n\nconst IconWrapper = styled('span')`\n  margin-right: ${space(0.5)};\n  display: inline-flex;\n`;\n\nconst Text = styled('span')<{maxWidth: number; type: keyof Theme['tag']}>`\n  color: ${p =>\n    ['black', 'white'].includes(p.type)\n      ? p.theme.tag[p.type].iconColor\n      : p.theme.textColor};\n  max-width: ${p => p.maxWidth}px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  line-height: ${TAG_HEIGHT};\n`;\n\nconst DismissButton = styled(Button)`\n  margin-left: ${space(0.5)};\n  margin-right: -${space(0.5)};\n  border: none;\n`;\n\nexport default Tag;\n","import styled from '@emotion/styled';\n\ntype Props = {\n  children: React.ReactNode;\n  className?: string;\n  ['data-test-id']?: string;\n  /**\n   * Change which side of the text is elided.\n   * Default: 'right'\n   *\n   * BROWSER COMPAT:\n   * When set to `left` the intention is for something like: `...xample.com/foo/`\n   * In Chrome & Firefox this is what happens.\n   *\n   * In Safari (July 2022) you will see this instead: `...https://example.co`.\n   *\n   * See: https://stackoverflow.com/a/24800788\n   */\n  ellipsisDirection?: 'left' | 'right';\n  isParagraph?: boolean;\n};\n\nconst TextOverflow = styled(\n  ({\n    children,\n    className,\n    ellipsisDirection,\n    isParagraph,\n    ['data-test-id']: dataTestId,\n  }: Props) => {\n    const Component = isParagraph ? 'p' : 'div';\n    if (ellipsisDirection === 'left') {\n      return (\n        <Component className={className} data-test-id={dataTestId}>\n          <bdi>{children}</bdi>\n        </Component>\n      );\n    }\n    return (\n      <Component className={className} data-test-id={dataTestId}>\n        {children}\n      </Component>\n    );\n  }\n)`\n  ${p => p.theme.overflowEllipsis}\n  ${p =>\n    p.ellipsisDirection === 'left' &&\n    `\n      direction: rtl;\n      text-align: left;\n    `};\n  width: auto;\n  line-height: 1.2;\n`;\n\nTextOverflow.defaultProps = {\n  ellipsisDirection: 'right',\n  isParagraph: false,\n};\n\nexport default TextOverflow;\n","import {Fragment, useCallback, useEffect, useRef, useState} from 'react';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\nimport moment from 'moment-timezone';\n\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {getDuration} from 'sentry/utils/formatters';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {ColorOrAlias} from 'sentry/utils/theme';\n\nfunction getDateObj(date: RelaxedDateType): Date {\n  return isString(date) || isNumber(date) ? new Date(date) : date;\n}\n\ntype RelaxedDateType = string | number | Date;\n\ntype UnitStyle = 'human' | 'regular' | 'short' | 'extraShort';\n\ninterface Props extends React.TimeHTMLAttributes<HTMLTimeElement> {\n  /**\n   * The date value, can be string, number (e.g. timestamp), or instance of Date\n   *\n   * May be in the future\n   */\n  date: RelaxedDateType;\n  /**\n   * By default we show tooltip with absolute date on hover, this prop disables\n   * that\n   */\n  disabledAbsoluteTooltip?: boolean;\n  /**\n   * How often should the component live update the timestamp.\n   *\n   * You may specify a custom interval in milliseconds if necissary.\n   *\n   * @default minute\n   */\n  liveUpdateInterval?: 'minute' | 'second' | number;\n  /**\n   * Prefix before upcoming time (when the date is in the future)\n   *\n   * @default \"in\"\n   */\n  prefix?: string;\n  /**\n   * Suffix after elapsed time e.g. \"ago\" in \"5 minutes ago\"\n   *\n   * @default \"ago\"\n   */\n  suffix?: string;\n  /**\n   * Customize the tooltip content. This replaces the long form of the timestamp\n   * completely.\n   */\n  tooltipBody?: React.ReactNode;\n  /**\n   * Prefix content to add to the tooltip. Useful to indicate what the relative\n   * time is for\n   */\n  tooltipPrefix?: React.ReactNode;\n  /**\n   * Include seconds in the tooltip\n   */\n  tooltipShowSeconds?: boolean;\n  /**\n   * Suffix content to add to the tooltip. Useful to indicate what the relative\n   * time is for\n   */\n  tooltipSuffix?: React.ReactNode;\n  /**\n   * Change the color of the underline\n   */\n  tooltipUnderlineColor?: ColorOrAlias;\n  /**\n   * How much text should be used for the suffix:\n   *\n   * human:\n   *   hour, minute, second. Uses 'human' fuzzy foormatting for values such as 'a\n   *   minute' or 'a few seconds'. (This is the default)\n   *\n   * regular:\n   *   Shows the full units (hours, minutes, seconds)\n   *\n   * short:\n   *   Like exact but uses shorter units (hr, min, sec)\n   *\n   * extraShort:\n   *   Like short but uses very short units (h, m, s)\n   *\n   * NOTE: shot and extraShort do NOT currently support times in the future.\n   *\n   * @default human\n   */\n  unitStyle?: UnitStyle;\n}\n\nfunction TimeSince({\n  date,\n  disabledAbsoluteTooltip,\n  tooltipShowSeconds,\n  tooltipPrefix: tooltipTitle,\n  tooltipBody,\n  tooltipSuffix,\n  tooltipUnderlineColor,\n  unitStyle,\n  prefix = t('in'),\n  suffix = t('ago'),\n  liveUpdateInterval = 'minute',\n  ...props\n}: Props) {\n  const tickerRef = useRef<number | undefined>();\n\n  const computeRelativeDate = useCallback(\n    () => getRelativeDate(date, suffix, prefix, unitStyle),\n    [date, suffix, prefix, unitStyle]\n  );\n\n  const [relative, setRelative] = useState<string>(computeRelativeDate());\n\n  useEffect(() => {\n    // Immediately update if props change\n    setRelative(computeRelativeDate());\n\n    const interval =\n      liveUpdateInterval === 'minute'\n        ? 60 * 1000\n        : liveUpdateInterval === 'second'\n        ? 1000\n        : liveUpdateInterval;\n\n    // Start a ticker to update the relative time\n    tickerRef.current = window.setInterval(\n      () => setRelative(computeRelativeDate()),\n      interval\n    );\n\n    return () => window.clearInterval(tickerRef.current);\n  }, [liveUpdateInterval, computeRelativeDate]);\n\n  const dateObj = getDateObj(date);\n  const user = ConfigStore.get('user');\n  const options = user ? user.options : null;\n\n  // Use short months when showing seconds, because \"September\" causes the\n  // tooltip to overflow.\n  const tooltipFormat = tooltipShowSeconds\n    ? 'MMM D, YYYY h:mm:ss A z'\n    : 'MMMM D, YYYY h:mm A z';\n  const format = options?.clock24Hours ? 'MMMM D, YYYY HH:mm z' : tooltipFormat;\n\n  const tooltip = getDynamicText({\n    fixed: options?.clock24Hours\n      ? 'November 3, 2020 08:57 UTC'\n      : 'November 3, 2020 8:58 AM UTC',\n    value: moment.tz(dateObj, options?.timezone ?? '').format(format),\n  });\n\n  return (\n    <Tooltip\n      disabled={disabledAbsoluteTooltip}\n      underlineColor={tooltipUnderlineColor}\n      showUnderline\n      title={\n        <Fragment>\n          {tooltipTitle && <div>{tooltipTitle}</div>}\n          {tooltipBody ?? tooltip}\n          {tooltipSuffix && <div>{tooltipSuffix}</div>}\n        </Fragment>\n      }\n    >\n      <time dateTime={dateObj?.toISOString()} {...props}>\n        {relative}\n      </time>\n    </Tooltip>\n  );\n}\n\nexport default TimeSince;\n\nfunction getRelativeDate(\n  currentDateTime: RelaxedDateType,\n  suffix?: string,\n  prefix?: string,\n  unitStyle: UnitStyle = 'human'\n): string {\n  const momentDate = moment(getDateObj(currentDateTime));\n  const isFuture = momentDate.isAfter(moment());\n\n  let deltaText: string = '';\n\n  if (unitStyle === 'human') {\n    // Moment provides a nice human relative date that uses \"a few\" for various units\n    deltaText = momentDate.fromNow(true);\n  } else {\n    deltaText = getDuration(\n      moment().diff(momentDate, 'seconds'),\n      0,\n      unitStyle === 'short',\n      unitStyle === 'extraShort',\n      isFuture\n    );\n  }\n\n  if (!suffix && !prefix) {\n    return deltaText;\n  }\n\n  return isFuture ? `${prefix} ${deltaText}` : `${deltaText} ${suffix}`;\n}\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport {User} from 'sentry/types';\n\ntype State = {\n  cursor: string | null;\n  hasMore: boolean | null;\n  loading: boolean;\n  members: User[];\n};\n\n// XXX(epurkhiser): Either this store is completely wrong, or it is misnamed, a\n// `Member` has one `User`, this stores users not members.\n\ninterface MemberListStoreDefinition extends StoreDefinition {\n  getAll(): User[];\n  getById(memberId: string): User | undefined;\n  getState(): State;\n  init(): void;\n  loadInitialData(items: User[], hasMore?: boolean | null, cursor?: string | null): void;\n  reset(): void;\n  state: State;\n}\n\nconst storeConfig: MemberListStoreDefinition = {\n  state: {\n    members: [],\n    loading: true,\n    hasMore: null,\n    cursor: null,\n  },\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    this.reset();\n  },\n\n  reset() {\n    this.state = {\n      members: [],\n      loading: true,\n      hasMore: null,\n      cursor: null,\n    };\n  },\n\n  loadInitialData(items: User[], hasMore, cursor) {\n    this.state = {\n      members: items,\n      loading: false,\n      hasMore: hasMore ?? this.state.hasMore,\n      cursor: cursor ?? this.state.cursor,\n    };\n\n    this.trigger(this.state, 'initial');\n  },\n\n  getById(memberId) {\n    return this.state.members.find(({id}) => memberId === id);\n  },\n\n  getAll() {\n    return this.state.members;\n  },\n\n  getState() {\n    return this.state;\n  },\n};\n\nconst MemberListStore = createStore(storeConfig);\nexport default MemberListStore;\n","import Cookies from 'js-cookie';\n\nimport ConfigStore from 'sentry/stores/configStore';\n\nconst SUPERUSER_COOKIE_NAME = window.superUserCookieName ?? 'su';\nconst SUPERUSER_COOKIE_DOMAIN = window.superUserCookieDomain;\n\n/**\n * Checking for just isSuperuser on a config object may not be enough as backend\n * often checks for *active* superuser. We check both isSuperuser flag\n * AND superuser session cookie.\n *\n * Note that this function does not work all the time. It is possible to have\n * an expired superuser cookie.\n *\n * Documented here: https://getsentry.atlassian.net/browse/ER-1602\n */\nexport function isActiveSuperuser() {\n  const {isSuperuser} = ConfigStore.get('user') || {};\n\n  if (isSuperuser) {\n    const superUserCookieName =\n      ConfigStore.get('superUserCookieName') || SUPERUSER_COOKIE_NAME;\n    const superUserCookieDomain =\n      ConfigStore.get('superUserCookieDomain') || SUPERUSER_COOKIE_DOMAIN;\n\n    /**\n     * Superuser cookie cannot be checked for existence as it is HttpOnly. As a workaround, we try\n     * to change it to something else and if that fails we can assume that it's being present.\n     */\n    Cookies.set(superUserCookieName, 'set-in-isActiveSuperuser', {\n      domain: superUserCookieDomain,\n    });\n\n    if (Cookies.get(superUserCookieName) === undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import {Fragment} from 'react';\n\nimport {useTeams} from 'sentry/utils/useTeams';\n\ntype RenderProps = ReturnType<typeof useTeams>;\n\ntype Props = Parameters<typeof useTeams>[0] & {\n  children: (props: RenderProps) => React.ReactNode;\n};\n\n/**\n * This is a utility component to leverage the useTeams hook to provide\n * a render props component which returns teams through a variety of inputs\n * such as a list of slugs or user teams.\n */\nfunction Teams({children, ...props}: Props) {\n  const renderProps = useTeams(props);\n\n  return <Fragment>{children(renderProps)}</Fragment>;\n}\n\nexport default Teams;\n","import {useCallback, useEffect, useMemo, useState} from 'react';\nimport uniqBy from 'lodash/uniqBy';\n\nimport {fetchUserTeams} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport OrganizationStore from 'sentry/stores/organizationStore';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {Team} from 'sentry/types';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport RequestError from 'sentry/utils/requestError/requestError';\nimport useApi from 'sentry/utils/useApi';\n\ntype State = {\n  /**\n   * The error that occurred if fetching failed\n   */\n  fetchError: null | RequestError;\n  /**\n   * This is state for when fetching data from API\n   */\n  fetching: boolean;\n  /**\n   * Indicates that Team results (from API) are paginated and there are more\n   * Teams that are not in the initial response.\n   *\n   * A null value indicates that we don't know if there are more values.\n   */\n  hasMore: null | boolean;\n  /**\n   * Reflects whether or not the initial fetch for the requested teams was\n   * fulfilled\n   */\n  initiallyLoaded: boolean;\n  /**\n   * The last query we searched. Used to validate the cursor\n   */\n  lastSearch: null | string;\n  /**\n   * Pagination\n   */\n  nextCursor?: null | string;\n};\n\ntype Result = {\n  /**\n   * This is an action provided to consumers for them to request more teams\n   * to be loaded. Additional teams will be fetched and loaded into the store.\n   */\n  loadMore: (searchTerm?: string) => Promise<void>;\n  /**\n   * This is an action provided to consumers for them to update the current\n   * teams result set using a simple search query.\n   *\n   * Will always add new options into the store.\n   */\n  onSearch: (searchTerm: string) => Promise<void>;\n  /**\n   * The loaded teams list\n   */\n  teams: Team[];\n} & Pick<State, 'fetching' | 'hasMore' | 'fetchError' | 'initiallyLoaded'>;\n\ntype Options = {\n  /**\n   * When provided, fetches specified teams by id if necessary and only provides those teams.\n   */\n  ids?: string[];\n  /**\n   * Number of teams to return when not using `props.slugs`\n   */\n  limit?: number;\n  /**\n   * When true, fetches user's teams if necessary and only provides user's\n   * teams (isMember = true).\n   */\n  provideUserTeams?: boolean;\n  /**\n   * When provided, fetches specified teams by slug if necessary and only provides those teams.\n   */\n  slugs?: string[];\n};\n\ntype FetchTeamOptions = {\n  cursor?: State['nextCursor'];\n  ids?: string[];\n  lastSearch?: State['lastSearch'];\n  limit?: Options['limit'];\n  search?: State['lastSearch'];\n  slugs?: string[];\n};\n\n/**\n * Helper function to actually load teams\n */\nasync function fetchTeams(\n  api: Client,\n  orgId: string,\n  {slugs, ids, search, limit, lastSearch, cursor}: FetchTeamOptions = {}\n) {\n  const query: {\n    cursor?: typeof cursor;\n    per_page?: number;\n    query?: string;\n  } = {};\n\n  if (slugs !== undefined && slugs.length > 0) {\n    query.query = slugs.map(slug => `slug:${slug}`).join(' ');\n  }\n\n  if (ids !== undefined && ids.length > 0) {\n    query.query = ids.map(id => `id:${id}`).join(' ');\n  }\n\n  if (search) {\n    query.query = `${query.query ?? ''} ${search}`.trim();\n  }\n\n  const isSameSearch = lastSearch === search || (!lastSearch && !search);\n\n  if (isSameSearch && cursor) {\n    query.cursor = cursor;\n  }\n\n  if (limit !== undefined) {\n    query.per_page = limit;\n  }\n\n  let hasMore: null | boolean = false;\n  let nextCursor: null | string = null;\n  const [data, , resp] = await api.requestPromise(`/organizations/${orgId}/teams/`, {\n    includeAllArgs: true,\n    query,\n  });\n\n  const pageLinks = resp?.getResponseHeader('Link');\n  if (pageLinks) {\n    const paginationObject = parseLinkHeader(pageLinks);\n    hasMore = paginationObject?.next?.results;\n    nextCursor = paginationObject?.next?.cursor;\n  }\n\n  return {results: data, hasMore, nextCursor};\n}\n\n// TODO: Paging for items which have already exist in the store is not\n// correctly implemented.\n\n/**\n * Provides teams from the TeamStore\n *\n * This hook also provides a way to select specific slugs to ensure they are\n * loaded, as well as search (type-ahead) for more slugs that may not be in the\n * TeamsStore.\n *\n * NOTE: It is NOT guaranteed that all teams for an organization will be\n * loaded, so you should use this hook with the intention of providing specific\n * slugs, or loading more through search.\n *\n */\nexport function useTeams({limit, slugs, ids, provideUserTeams}: Options = {}) {\n  const api = useApi();\n  const {organization} = useLegacyStore(OrganizationStore);\n  const store = useLegacyStore(TeamStore);\n\n  const orgId = organization?.slug;\n\n  const storeSlugs = useMemo(() => new Set(store.teams.map(t => t.slug)), [store.teams]);\n  const storeIds = useMemo(() => new Set(store.teams.map(t => t.id)), [store.teams]);\n\n  const slugsToLoad = useMemo(\n    () => slugs?.filter(slug => !storeSlugs.has(slug)) ?? [],\n    [slugs, storeSlugs]\n  );\n\n  const idsToLoad = useMemo(\n    () => ids?.filter(id => !storeIds.has(id)) ?? [],\n    [ids, storeIds]\n  );\n\n  const shouldLoadByQuery = slugsToLoad.length > 0 || idsToLoad.length > 0;\n  const shouldLoadUserTeams = provideUserTeams && !store.loadedUserTeams;\n\n  // If we don't need to make a request either for slugs or user teams, set\n  // initiallyLoaded to true\n  const initiallyLoaded = !shouldLoadUserTeams && !shouldLoadByQuery;\n\n  const [state, setState] = useState<State>({\n    initiallyLoaded,\n    fetching: false,\n    hasMore: store.hasMore,\n    lastSearch: null,\n    nextCursor: store.cursor,\n    fetchError: null,\n  });\n\n  const loadUserTeams = useCallback(\n    async function () {\n      if (orgId === undefined) {\n        return;\n      }\n\n      setState(prev => ({...prev, fetching: true}));\n      try {\n        await fetchUserTeams(api, {orgId});\n\n        setState(prev => ({...prev, fetching: false, initiallyLoaded: true}));\n      } catch (err) {\n        console.error(err); // eslint-disable-line no-console\n\n        setState(prev => ({\n          ...prev,\n          fetching: false,\n          initiallyLoaded: true,\n          fetchError: err,\n        }));\n      }\n    },\n    [api, orgId]\n  );\n\n  const loadTeamsByQuery = useCallback(\n    async function () {\n      if (orgId === undefined) {\n        return;\n      }\n\n      setState(prev => ({...prev, fetching: true}));\n      try {\n        const {results, hasMore, nextCursor} = await fetchTeams(api, orgId, {\n          slugs: slugsToLoad,\n          ids: idsToLoad,\n          limit,\n        });\n\n        // Unique by `id` to avoid duplicates due to renames and state store data\n        const fetchedTeams = uniqBy<Team>([...results, ...store.teams], ({id}) => id);\n        TeamStore.loadInitialData(fetchedTeams);\n\n        setState(prev => ({\n          ...prev,\n          hasMore,\n          fetching: false,\n          initiallyLoaded: true,\n          nextCursor,\n        }));\n      } catch (err) {\n        console.error(err); // eslint-disable-line no-console\n\n        setState(prev => ({\n          ...prev,\n          fetching: false,\n          initiallyLoaded: true,\n          fetchError: err,\n        }));\n      }\n    },\n    [api, idsToLoad, limit, orgId, slugsToLoad, store.teams]\n  );\n\n  const handleFetchAdditionalTeams = useCallback(\n    async function (search?: string) {\n      const lastSearch = state.lastSearch;\n      // Use the store cursor if there is no search keyword provided\n      const cursor = search ? state.nextCursor : store.cursor;\n\n      if (orgId === undefined) {\n        // eslint-disable-next-line no-console\n        console.error('Cannot fetch teams without an organization in context');\n        return;\n      }\n\n      setState(prev => ({...prev, fetching: true}));\n\n      try {\n        api.clear();\n        const {results, hasMore, nextCursor} = await fetchTeams(api, orgId, {\n          search,\n          limit,\n          lastSearch,\n          cursor,\n        });\n\n        const fetchedTeams = uniqBy<Team>([...store.teams, ...results], ({slug}) => slug);\n\n        if (search) {\n          // Only update the store if we have more items\n          if (fetchedTeams.length > store.teams.length) {\n            TeamStore.loadInitialData(fetchedTeams);\n          }\n        } else {\n          // If we fetched a page of teams without a search query, add cursor data to the store\n          TeamStore.loadInitialData(fetchedTeams, hasMore, nextCursor);\n        }\n\n        setState(prev => ({\n          ...prev,\n          hasMore: hasMore && store.hasMore,\n          fetching: false,\n          lastSearch: search ?? null,\n          nextCursor,\n        }));\n      } catch (err) {\n        console.error(err); // eslint-disable-line no-console\n\n        setState(prev => ({...prev, fetching: false, fetchError: err}));\n      }\n    },\n    [\n      api,\n      limit,\n      orgId,\n      state.lastSearch,\n      state.nextCursor,\n      store.cursor,\n      store.hasMore,\n      store.teams,\n    ]\n  );\n\n  const handleSearch = useCallback(\n    function (search: string) {\n      if (search !== '') {\n        return handleFetchAdditionalTeams(search);\n      }\n\n      // Reset pagination state to match store if doing an empty search\n      if (state.hasMore !== store.hasMore || state.nextCursor !== store.cursor) {\n        setState(prev => ({\n          ...prev,\n          lastSearch: search,\n          hasMore: store.hasMore,\n          nextCursor: store.cursor,\n        }));\n      }\n\n      return Promise.resolve();\n    },\n    [\n      handleFetchAdditionalTeams,\n      state.hasMore,\n      state.nextCursor,\n      store.cursor,\n      store.hasMore,\n    ]\n  );\n\n  // Load specified team slugs\n  useEffect(() => {\n    if (shouldLoadByQuery) {\n      loadTeamsByQuery();\n    }\n  }, [shouldLoadByQuery, loadTeamsByQuery]);\n\n  useEffect(() => {\n    if (shouldLoadUserTeams) {\n      loadUserTeams();\n    }\n  }, [shouldLoadUserTeams, loadUserTeams]);\n\n  const isSuperuser = isActiveSuperuser();\n\n  const filteredTeams = useMemo(() => {\n    return slugs\n      ? store.teams.filter(t => slugs.includes(t.slug))\n      : ids\n      ? store.teams.filter(t => ids.includes(t.id))\n      : provideUserTeams && !isSuperuser\n      ? store.teams.filter(t => t.isMember)\n      : store.teams;\n  }, [store.teams, ids, slugs, provideUserTeams, isSuperuser]);\n\n  const result: Result = {\n    teams: filteredTeams,\n    fetching: state.fetching || store.loading,\n    initiallyLoaded: state.initiallyLoaded,\n    fetchError: state.fetchError,\n    hasMore: state.hasMore ?? store.hasMore,\n    onSearch: handleSearch,\n    loadMore: handleFetchAdditionalTeams,\n  };\n\n  return result;\n}\n"],"names":["doCallback","params","arguments","length","undefined","name","_len","args","Array","_key","async","fetchUserTeams","api","teams","requestPromise","orgId","TeamStore","loadUserTeams","updateTeamSuccess","teamId","data","onUpdateSuccess","joinTeam","options","endpoint","memberId","request","method","success","error","leaveTeam","createTeam","team","then","onCreateSuccess","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","onRemoveSuccess","_ref","size","hasTooltip","actor","props","otherProps","type","user","id","MemberListStore","getById","_jsx","UserAvatar","Teams","ids","children","_ref2","initiallyLoaded","TeamAvatar","LoadingIndicator","mini","Sentry","scope","setExtra","Error","TAG_HEIGHT","Tag","icon","tooltipText","tooltipProps","to","onClick","href","onDismiss","textMaxWidth","iconsProps","color","theme","tag","iconColor","Tooltip","title","containerDisplayMode","_jsxs","Background","isValidElement","IconWrapper","cloneElement","defined","IconOpen","Text","maxWidth","DismissButton","event","preventDefault","priority","t","IconClose","isCircled","TagWrapper","trackClickEvent","trackAnalytics","is_clickable","ExternalLink","Link","displayName","_styled","target","p","fontSizeSmall","background","border","space","includes","textColor","Button","TextOverflow","className","ellipsisDirection","isParagraph","dataTestId","Component","overflowEllipsis","defaultProps","getDateObj","date","isString","isNumber","Date","TimeSince","disabledAbsoluteTooltip","tooltipShowSeconds","tooltipPrefix","tooltipTitle","tooltipBody","tooltipSuffix","tooltipUnderlineColor","unitStyle","prefix","suffix","liveUpdateInterval","tickerRef","useRef","computeRelativeDate","useCallback","currentDateTime","momentDate","moment","isFuture","isAfter","deltaText","fromNow","getDuration","diff","getRelativeDate","relative","setRelative","useState","useEffect","interval","current","window","setInterval","clearInterval","dateObj","ConfigStore","get","tooltipFormat","format","clock24Hours","tooltip","getDynamicText","fixed","value","timezone","disabled","underlineColor","showUnderline","Fragment","dateTime","toISOString","storeConfig","state","members","loading","hasMore","cursor","init","this","reset","loadInitialData","items","trigger","find","getAll","getState","createStore","SUPERUSER_COOKIE_NAME","superUserCookieName","SUPERUSER_COOKIE_DOMAIN","superUserCookieDomain","isActiveSuperuser","isSuperuser","Cookies","set","domain","renderProps","useTeams","fetchTeams","slugs","search","limit","lastSearch","query","map","join","trim","per_page","nextCursor","resp","includeAllArgs","pageLinks","getResponseHeader","paginationObject","parseLinkHeader","next","results","provideUserTeams","useApi","useLegacyStore","OrganizationStore","store","storeSlugs","useMemo","Set","storeIds","slugsToLoad","filter","has","idsToLoad","shouldLoadByQuery","shouldLoadUserTeams","loadedUserTeams","setState","fetching","fetchError","prev","console","loadTeamsByQuery","fetchedTeams","uniqBy","handleFetchAdditionalTeams","clear","handleSearch","Promise","resolve","isMember","onSearch","loadMore"],"sourceRoot":""}