{"version":3,"file":"chunks/app_views_releases_list_releasesPromo_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/useApiRequests.tsx","webpack:///./app/utils/useEffectAfterFirstRender.ts","webpack:///./app/views/releases/list/releasesPromo.tsx"],"sourcesContent":["import {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {ResponseMeta} from 'sentry/api';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {metric} from 'sentry/utils/analytics';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport useApi from 'sentry/utils/useApi';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {useParams} from 'sentry/utils/useParams';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport PermissionDenied from 'sentry/views/permissionDenied';\nimport RouteError from 'sentry/views/routeError';\n\nimport RequestError from './requestError/requestError';\nimport {useEffectAfterFirstRender} from './useEffectAfterFirstRender';\n\n/**\n * Turn {foo: X} into {foo: X, fooPageLinks: string}\n */\ntype UseApiRequestData<T extends Record<string, any>> = {\n  // Keys can be null on error\n  [Property in keyof T]: T[Property] | null;\n} & {\n  // Make request cursors available\n  [Property in keyof T as `${Property & string}PageLinks`]: string | null;\n};\n\ninterface State<T extends Record<string, any>> {\n  /**\n   * Mapping of results from the configured endpoints\n   */\n  data: UseApiRequestData<T>;\n  /**\n   * Errors from the configured endpoionts\n   */\n  errors: Record<string, RequestError>;\n  /**\n   * Did *any* of the endpoints fail?\n   */\n  hasError: boolean;\n  /**\n   * Are the endpoints currently loading?\n   */\n  isLoading: boolean;\n  /**\n   * Are we *reloading* data without the loading state being set to true?\n   */\n  isReloading: boolean;\n  /**\n   * How many requests are still pending?\n   */\n  remainingRequests: number;\n}\n\ninterface Result<T extends Record<string, any>> extends State<T> {\n  /**\n   * renderComponent is a helper function that is used to render loading and\n   * errors state for you, and will only render your component once all endpoints\n   * have resolved.\n   *\n   * Typically you would use this when returning react for your component.\n   *\n   *   return renderComponent(\n   *     <div>{data.someEndpoint.resultKey}</div>\n   *   )\n   *\n   * The react element will only be rendered once all endpoints have been loaded.\n   */\n  renderComponent: (children: React.ReactElement) => React.ReactElement;\n}\n\ntype EndpointRequestOptions = {\n  /**\n   * Function to check if the error is allowed\n   */\n  allowError?: (error: any) => void;\n  /**\n   * Do not pass query parameters to the API\n   */\n  disableEntireQuery?: boolean;\n  /**\n   * If set then pass entire `query` object to API call\n   */\n  paginate?: boolean;\n};\n\nexport type EndpointDefinition<T extends Record<string, any>> = [\n  key: keyof T,\n  url: string,\n  urlOptions?: {query?: Record<string, string>},\n  requestOptions?: EndpointRequestOptions\n];\n\ntype Options<T extends Record<string, any>> = {\n  endpoints: EndpointDefinition<T>[];\n  /**\n   * If a request fails and is not a bad request, and if `disableErrorReport`\n   * is set to false, the UI will display an error modal.\n   *\n   * It is recommended to enable this property ideally only when the subclass\n   * is used by a top level route.\n   */\n  disableErrorReport?: boolean;\n  onLoadAllEndpointsSuccess?: () => void;\n  onRequestError?: (error: RequestError, args: Options<T>['endpoints'][0]) => void;\n  onRequestSuccess?: (data: {data: any; stateKey: keyof T; resp?: ResponseMeta}) => void;\n  /**\n   * Override this flag to have the component reload its state when the window\n   * becomes visible again. This will set the loading and reloading state, but\n   * will not render a loading state during reloading.\n   *\n   * eslint-disable-next-line react/sort-comp\n   */\n  reloadOnVisible?: boolean;\n  /**\n   * This affects how the component behaves when `remountComponent` is called\n   *\n   * By default, the component gets put back into a \"loading\" state when\n   * re-fetching data. If this is true, then when we fetch data, the original\n   * ready component remains mounted and it will need to handle any additional\n   * \"reloading\" states\n   */\n  shouldReload?: boolean;\n  /**\n   * should `renderError` render the `detail` attribute of a 400 error\n   */\n  shouldRenderBadRequests?: boolean;\n};\n\nfunction renderLoading() {\n  return <LoadingIndicator />;\n}\n\nfunction useApiRequests<T extends Record<string, any>>({\n  endpoints,\n  reloadOnVisible = false,\n  shouldReload = false,\n  shouldRenderBadRequests = false,\n  disableErrorReport = true,\n  onLoadAllEndpointsSuccess = () => {},\n  onRequestSuccess = _data => {},\n  onRequestError = (_error, _args) => {},\n}: Options<T>): Result<T> {\n  const api = useApi();\n  const location = useLocation<any>();\n  const params = useParams();\n\n  // Memoize the initialState so we can easily reuse it later\n  const initialState = useMemo<State<T>>(\n    () => ({\n      data: {} as T,\n      isLoading: true,\n      hasError: false,\n      isReloading: false,\n      errors: {},\n      remainingRequests: endpoints.length,\n    }),\n    [endpoints.length]\n  );\n\n  const [state, setState] = useState<State<T>>(initialState);\n\n  // Begin measuring the use of the hook for the given route\n  const triggerMeasurement = useMeasureApiRequests();\n\n  const handleRequestSuccess = useCallback(\n    (\n      {stateKey, data, resp}: {data: any; stateKey: keyof T; resp?: ResponseMeta},\n      initialRequest?: boolean\n    ) => {\n      setState(prevState => {\n        const newState = {\n          ...prevState,\n          data: {\n            ...prevState.data,\n            [stateKey]: data,\n            [`${stateKey as string}PageLinks`]: resp?.getResponseHeader('Link'),\n          },\n        };\n\n        if (initialRequest) {\n          newState.remainingRequests = prevState.remainingRequests - 1;\n          newState.isLoading = prevState.remainingRequests > 1;\n          newState.isReloading = prevState.isReloading && newState.isLoading;\n          triggerMeasurement({finished: newState.remainingRequests === 0});\n        }\n\n        return newState;\n      });\n\n      // if everything is loaded and we don't have an error, call the callback\n      onRequestSuccess({stateKey, data, resp});\n    },\n    [onRequestSuccess, triggerMeasurement]\n  );\n\n  const handleError = useCallback(\n    (error: RequestError, args: EndpointDefinition<T>) => {\n      const [stateKey] = args;\n\n      if (error && error.responseText) {\n        Sentry.addBreadcrumb({\n          message: error.responseText,\n          category: 'xhr',\n          level: 'error',\n        });\n      }\n\n      setState(prevState => {\n        const isLoading = prevState.remainingRequests > 1;\n        const newState = {\n          errors: {\n            ...prevState.errors,\n            [stateKey]: error,\n          },\n          data: {\n            ...prevState.data,\n            [stateKey]: null,\n          },\n          hasError: prevState.hasError || !!error,\n          remainingRequests: prevState.remainingRequests - 1,\n          isLoading,\n          isReloading: prevState.isReloading && isLoading,\n        };\n        triggerMeasurement({finished: newState.remainingRequests === 0, error: true});\n        return newState;\n      });\n\n      onRequestError(error, args);\n    },\n    [triggerMeasurement, onRequestError]\n  );\n\n  const fetchData = useCallback(\n    async (extraState: Partial<State<T>> = {}) => {\n      // Nothing to fetch if endpoints are empty\n      if (!endpoints.length) {\n        setState(prevState => ({\n          ...prevState,\n          data: {} as T,\n          isLoading: false,\n          hasError: false,\n        }));\n\n        return;\n      }\n\n      // Cancel any in flight requests\n      api.clear();\n\n      setState(prevState => ({\n        ...prevState,\n        isLoading: true,\n        hasError: false,\n        remainingRequests: endpoints.length,\n        ...extraState,\n      }));\n\n      await Promise.all(\n        endpoints.map(async ([stateKey, endpoint, parameters, options]) => {\n          options = options ?? {};\n          // If you're using nested async components/views make sure to pass the\n          // props through so that the child component has access to props.location\n          const locationQuery = (location && location.query) || {};\n          let query = (parameters && parameters.query) || {};\n          // If paginate option then pass entire `query` object to API call\n          // It should only be expecting `query.cursor` for pagination\n          if ((options.paginate || locationQuery.cursor) && !options.disableEntireQuery) {\n            query = {...locationQuery, ...query};\n          }\n          try {\n            const results = await api.requestPromise(endpoint, {\n              method: 'GET',\n              ...parameters,\n              query,\n              includeAllArgs: true,\n            });\n            const [data, _, resp] = results;\n            handleRequestSuccess({stateKey, data, resp}, true);\n          } catch (error) {\n            handleError(error, [stateKey, endpoint, parameters, options]);\n          }\n        })\n      );\n    },\n    [api, endpoints, handleError, handleRequestSuccess, location]\n  );\n  const reloadData = useCallback(() => fetchData({isReloading: true}), [fetchData]);\n\n  const handleMount = useCallback(async () => {\n    try {\n      await fetchData();\n    } catch (error) {\n      setState(prevState => ({...prevState, hasError: true}));\n      throw error;\n    }\n  }, [fetchData]);\n\n  // Trigger fetch on mount\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => void handleMount(), []);\n\n  const handleFullReload = useCallback(() => {\n    if (shouldReload) {\n      return reloadData();\n    }\n    setState({...initialState});\n    return fetchData();\n  }, [initialState, reloadData, fetchData, shouldReload]);\n\n  // Trigger fetch on location or parameter change\n  // useEffectAfterFirstRender to avoid calling at the same time as handleMount\n  useEffectAfterFirstRender(\n    () => void handleFullReload(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [location?.search, location?.state, params]\n  );\n\n  const visibilityReloader = useCallback(\n    () => !state.isLoading && !document.hidden && reloadData(),\n    [state.isLoading, reloadData]\n  );\n\n  // Trigger fetch on visible change when using visibilityReloader\n  useEffect(() => {\n    if (reloadOnVisible) {\n      document.addEventListener('visibilitychange', visibilityReloader);\n    }\n\n    return () => document.removeEventListener('visibilitychange', visibilityReloader);\n  }, [reloadOnVisible, visibilityReloader]);\n\n  // Trigger onLoadAllEndpointsSuccess when everything has been loaded\n  useEffect(\n    () => {\n      if (endpoints.length && state.remainingRequests === 0 && !state.hasError) {\n        onLoadAllEndpointsSuccess();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [state.remainingRequests, state.hasError, endpoints.length]\n  );\n\n  const renderError = useCallback(\n    (error?: Error, disableLog = false): React.ReactElement => {\n      const errors = state.errors;\n\n      // 401s are captured by SudoModal, but may be passed back to AsyncComponent\n      // if they close the modal without identifying\n      const unauthorizedErrors = Object.values(errors).some(resp => resp?.status === 401);\n\n      // Look through endpoint results to see if we had any 403s, means their\n      // role can not access resource\n      const permissionErrors = Object.values(errors).some(resp => resp?.status === 403);\n\n      // If all error responses have status code === 0, then show error message\n      // but don't log it to sentry\n      const shouldLogSentry =\n        !!Object.values(errors).some(resp => resp?.status !== 0) || disableLog;\n\n      if (unauthorizedErrors) {\n        return (\n          <LoadingError message={t('You are not authorized to access this resource.')} />\n        );\n      }\n\n      if (permissionErrors) {\n        return <PermissionDenied />;\n      }\n\n      if (shouldRenderBadRequests) {\n        const badRequests = Object.values(errors)\n          .filter(resp => resp?.status === 400 && resp?.responseJSON?.detail)\n          .map(resp => resp.responseJSON?.detail);\n\n        if (badRequests.length) {\n          return <LoadingError message={[...new Set(badRequests)].join('\\n')} />;\n        }\n      }\n\n      return (\n        <RouteError\n          error={error}\n          disableLogSentry={!shouldLogSentry}\n          disableReport={disableErrorReport}\n        />\n      );\n    },\n    [state.errors, disableErrorReport, shouldRenderBadRequests]\n  );\n\n  const shouldRenderLoading = state.isLoading && (!shouldReload || !state.isReloading);\n\n  const renderComponent = useCallback(\n    (children: React.ReactElement) =>\n      shouldRenderLoading ? renderLoading() : state.hasError ? renderError() : children,\n    [shouldRenderLoading, state.hasError, renderError]\n  );\n\n  return {...state, renderComponent};\n}\n\nexport default useApiRequests;\n\ntype MetricsState = {\n  error: boolean;\n  finished: boolean;\n  hasMeasured: boolean;\n};\n\ntype MetricUpdate = Partial<Pick<MetricsState, 'finished' | 'error'>>;\n\n/**\n * Helper hook that marks a measurement when the component mounts.\n *\n * Use the `triggerMeasurement` function to trigger a measurement when the\n * useApiRequests hook has finished loading all requests. Will only trigger once\n */\nfunction useMeasureApiRequests() {\n  const routes = useRoutes();\n\n  const measurement = useRef<MetricsState>({\n    hasMeasured: false,\n    finished: false,\n    error: false,\n  });\n\n  // Start measuring immediately upon mount. We re-mark if the route list has\n  // changed, since the component is now being used under a different route\n  useEffect(() => {\n    // Reset the measurement object\n    measurement.current = {\n      hasMeasured: false,\n      finished: false,\n      error: false,\n    };\n\n    if (routes && routes.length) {\n      metric.mark({name: `async-component-${getRouteStringFromRoutes(routes)}`});\n    }\n  }, [routes]);\n\n  const triggerMeasurement = useCallback(\n    ({finished, error}: MetricUpdate) => {\n      if (!routes) {\n        return;\n      }\n\n      if (finished) {\n        measurement.current.finished = true;\n      }\n\n      if (error) {\n        measurement.current.error = true;\n      }\n\n      if (!measurement.current.hasMeasured && measurement.current.finished) {\n        const routeString = getRouteStringFromRoutes(routes);\n        metric.measure({\n          name: 'app.component.async-component',\n          start: `async-component-${routeString}`,\n          data: {\n            route: routeString,\n            error: measurement.current.error,\n          },\n        });\n\n        measurement.current.hasMeasured = true;\n      }\n    },\n    [routes]\n  );\n\n  return triggerMeasurement;\n}\n","import {useEffect, useRef} from 'react';\n\nconst useEffectAfterFirstRender = (\n  cb: React.EffectCallback,\n  deps: React.DependencyList\n): void => {\n  const firstRender = useRef<boolean>(true);\n\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n      return;\n    }\n\n    cb();\n    // Dependencies are explicitly managed and the deps warning is enabled for the custom hook.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n};\n\nexport {useEffectAfterFirstRender};\n","import {useCallback, useEffect, useMemo, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport commitImage from 'sentry-images/spot/releases-tour-commits.svg';\nimport emailImage from 'sentry-images/spot/releases-tour-email.svg';\nimport resolutionImage from 'sentry-images/spot/releases-tour-resolution.svg';\nimport statsImage from 'sentry-images/spot/releases-tour-stats.svg';\n\nimport {openCreateReleaseIntegration} from 'sentry/actionCreators/modal';\nimport Access from 'sentry/components/acl/access';\nimport {Button} from 'sentry/components/button';\nimport {CodeSnippet} from 'sentry/components/codeSnippet';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport Link from 'sentry/components/links/link';\nimport {TourImage, TourStep, TourText} from 'sentry/components/modals/featureTourModal';\nimport Panel from 'sentry/components/panels/panel';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project, SentryApp} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useApi from 'sentry/utils/useApi';\nimport useApiRequests from 'sentry/utils/useApiRequests';\n\nconst releasesSetupUrl = 'https://docs.sentry.io/product/releases/';\n\nconst docsLink = (\n  <Button external href={releasesSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const RELEASES_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Suspect Commits'),\n    image: <TourImage src={commitImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Sentry suggests which commit caused an issue and who is likely responsible so you can triage.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Release Stats'),\n    image: <TourImage src={statsImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Get an overview of the commits in each release, and which issues were introduced or fixed.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Easily Resolve'),\n    image: <TourImage src={resolutionImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Automatically resolve issues by including the issue number in your commit message.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Deploy Emails'),\n    image: <TourImage src={emailImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Receive email notifications about when your code gets deployed. This can be customized in settings.'\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nconst ReleasesPromo = ({organization, project}: Props) => {\n  const {data, renderComponent, isLoading} = useApiRequests<{\n    internalIntegrations: SentryApp[];\n  }>({\n    endpoints: [\n      [\n        'internalIntegrations',\n        `/organizations/${organization.slug}/sentry-apps/`,\n        {query: {status: 'internal'}},\n      ],\n    ],\n  });\n  const api = useApi();\n  const [token, setToken] = useState(null);\n  const [integrations, setIntegrations] = useState<SentryApp[]>([]);\n  const [selectedItem, selectItem] = useState<Pick<Item, 'label' | 'value'> | null>(null);\n\n  useEffect(() => {\n    if (!isLoading && data.internalIntegrations) {\n      setIntegrations(data.internalIntegrations);\n    }\n  }, [isLoading, data.internalIntegrations]);\n  useEffect(() => {\n    trackAnalytics('releases.quickstart_viewed', {\n      organization,\n      project_id: project.id,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const trackQuickstartCopy = useCallback(() => {\n    trackAnalytics('releases.quickstart_copied', {\n      organization,\n      project_id: project.id,\n    });\n  }, [organization, project]);\n\n  const trackQuickstartCreatedIntegration = useCallback(\n    (integration: SentryApp) => {\n      trackAnalytics('releases.quickstart_create_integration.success', {\n        organization,\n        project_id: project.id,\n        integration_uuid: integration.uuid,\n      });\n    },\n    [organization, project]\n  );\n\n  const trackCreateIntegrationModalClose = useCallback(() => {\n    trackAnalytics('releases.quickstart_create_integration_modal.close', {\n      organization,\n      project_id: project.id,\n    });\n  }, [organization, project.id]);\n\n  const fetchToken = async sentryAppSlug => {\n    const tokens = await api.requestPromise(`/sentry-apps/${sentryAppSlug}/api-tokens/`);\n    if (!tokens.length) {\n      const newToken = await generateToken(sentryAppSlug);\n      return setToken(newToken);\n    }\n    return setToken(tokens[0].token);\n  };\n\n  const generateToken = async (sentryAppSlug: string) => {\n    const newToken = await api.requestPromise(\n      `/sentry-apps/${sentryAppSlug}/api-tokens/`,\n      {\n        method: 'POST',\n      }\n    );\n    return newToken.token;\n  };\n\n  const renderIntegrationNode = (integration: SentryApp) => {\n    return {\n      value: {slug: integration.slug, name: integration.name},\n      searchKey: `${integration.name}`,\n      label: (\n        <MenuItemWrapper data-test-id=\"integration-option\" key={integration.uuid}>\n          <Label>{integration.name}</Label>\n        </MenuItemWrapper>\n      ),\n    };\n  };\n\n  const codeChunks = useMemo(\n    () => [\n      `# Install the cli\ncurl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION=\"2.2.0\" bash\n\n# Setup configuration values\nSENTRY_AUTH_TOKEN=`,\n\n      token && selectedItem\n        ? `${token} # From internal integration: ${selectedItem.value.name}`\n        : '<click-here-for-your-token>',\n      `\nSENTRY_ORG=${organization.slug}\nSENTRY_PROJECT=${project.slug}\nVERSION=\\`sentry-cli releases propose-version\\`\n\n# Workflow to create releases\nsentry-cli releases new \"$VERSION\"\nsentry-cli releases set-commits \"$VERSION\" --auto\nsentry-cli releases finalize \"$VERSION\"`,\n    ],\n    [token, selectedItem, organization.slug, project.slug]\n  );\n\n  return renderComponent(\n    <Panel>\n      <Container>\n        <ContainerHeader>\n          <h3>{t('Set up Releases')}</h3>\n\n          <Button priority=\"default\" size=\"sm\" href={releasesSetupUrl} external>\n            {t('Full Documentation')}\n          </Button>\n        </ContainerHeader>\n\n        <p>\n          {t(\n            'Find which release caused an issue, apply source maps, and get notified about your deploys.'\n          )}\n        </p>\n        <p>\n          {t(\n            'Add the following commands to your CI config when you deploy your application.'\n          )}\n        </p>\n\n        <CodeSnippetWrapper>\n          <CodeSnippet\n            dark\n            language=\"bash\"\n            hideCopyButton={!token || !selectedItem}\n            onCopy={trackQuickstartCopy}\n          >\n            {codeChunks.join('')}\n          </CodeSnippet>\n          <CodeSnippetOverlay className=\"prism-dark language-bash\">\n            <CodeSnippetOverlaySpan>{codeChunks[0]}</CodeSnippetOverlaySpan>\n            <CodeSnippetDropdownWrapper>\n              <CodeSnippetDropdown\n                minWidth={300}\n                maxHeight={400}\n                onOpen={e => {\n                  // This can be called multiple times and does not always have `event`\n                  e?.stopPropagation();\n                }}\n                items={[\n                  {\n                    label: <GroupHeader>{t('Available Integrations')}</GroupHeader>,\n                    id: 'available-integrations',\n                    items: (integrations || []).map(renderIntegrationNode),\n                  },\n                ]}\n                alignMenu=\"left\"\n                onSelect={({label, value}) => {\n                  selectItem({label, value});\n                  fetchToken(value.slug);\n                }}\n                itemSize=\"small\"\n                searchPlaceholder={t('Select Internal Integration')}\n                menuFooter={\n                  <Access access={['org:integrations']}>\n                    {({hasAccess}) => (\n                      <Tooltip\n                        title={t(\n                          'You must be an organization owner, manager or admin to create an integration.'\n                        )}\n                        disabled={hasAccess}\n                      >\n                        <CreateIntegrationLink\n                          to=\"\"\n                          data-test-id=\"create-release-integration\"\n                          disabled={!hasAccess}\n                          onClick={() =>\n                            openCreateReleaseIntegration({\n                              organization,\n                              project,\n                              onCreateSuccess: (integration: SentryApp) => {\n                                setIntegrations([integration, ...integrations]);\n                                const {label, value} = renderIntegrationNode(integration);\n                                selectItem({\n                                  label,\n                                  value,\n                                });\n                                fetchToken(value.slug);\n                                trackQuickstartCreatedIntegration(integration);\n                              },\n                              onCancel: () => {\n                                trackCreateIntegrationModalClose();\n                              },\n                            })\n                          }\n                        >\n                          <MenuItemFooterWrapper>\n                            <IconContainer>\n                              <IconAdd color=\"activeText\" isCircled legacySize=\"14px\" />\n                            </IconContainer>\n                            <Label>{t('Create New Integration')}</Label>\n                          </MenuItemFooterWrapper>\n                        </CreateIntegrationLink>\n                      </Tooltip>\n                    )}\n                  </Access>\n                }\n                disableLabelPadding\n                emptyHidesInput\n              >\n                {() => <CodeSnippetOverlaySpan>{codeChunks[1]}</CodeSnippetOverlaySpan>}\n              </CodeSnippetDropdown>\n            </CodeSnippetDropdownWrapper>\n            <CodeSnippetOverlaySpan>{codeChunks[2]}</CodeSnippetOverlaySpan>\n          </CodeSnippetOverlay>\n        </CodeSnippetWrapper>\n      </Container>\n    </Panel>\n  );\n};\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n`;\n\nconst ContainerHeader = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: ${space(3)};\n  min-height: 32px;\n\n  h3 {\n    margin: 0;\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    flex-direction: column;\n    align-items: flex-start;\n\n    h3 {\n      margin-bottom: ${space(2)};\n    }\n  }\n`;\n\nconst CodeSnippetWrapper = styled('div')`\n  position: relative;\n`;\n\n/**\n * CodeSnippet stringifies all inner children (due to Prism code highlighting), so we\n * can't put CodeSnippetDropdown inside of it. Instead, we can render a pre wrap\n * containing the same code (without Prism highlighting) with CodeSnippetDropdown in the\n * middle and overlay it on top of CodeSnippet.\n */\nconst CodeSnippetOverlay = styled('pre')`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 2;\n  margin-bottom: 0;\n  pointer-events: none;\n\n  && {\n    background: transparent;\n  }\n`;\n\n/**\n * Invisible code span overlaid on top of the highlighted code. Exists only to\n * properly position <CodeSnippetDropdown /> inside <CodeSnippetOverlay />.\n */\nconst CodeSnippetOverlaySpan = styled('span')`\n  visibility: hidden;\n`;\n\nconst CodeSnippetDropdownWrapper = styled('span')`\n  /* Re-enable pointer events (disabled by CodeSnippetOverlay) */\n  pointer-events: initial;\n`;\n\nconst CodeSnippetDropdown = styled(DropdownAutoComplete)`\n  position: absolute;\n  font-family: ${p => p.theme.text.family};\n  border: none;\n  border-radius: 4px;\n  width: 300px;\n`;\n\nconst GroupHeader = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-family: ${p => p.theme.text.family};\n  font-weight: 600;\n  margin: ${space(1)} 0;\n  color: ${p => p.theme.subText};\n  line-height: ${p => p.theme.fontSizeSmall};\n  text-align: left;\n`;\nconst CreateIntegrationLink = styled(Link)`\n  color: ${p => (p.disabled ? p.theme.disabled : p.theme.textColor)};\n`;\n\nconst MenuItemWrapper = styled('div')<{\n  disabled?: boolean;\n  py?: number;\n}>`\n  cursor: ${p => (p.disabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  align-items: center;\n  font-family: ${p => p.theme.text.family};\n  font-size: 13px;\n  ${p =>\n    typeof p.py !== 'undefined' &&\n    `\n      padding-top: ${p.py};\n      padding-bottom: ${p.py};\n    `};\n`;\n\nconst MenuItemFooterWrapper = styled(MenuItemWrapper)`\n  padding: ${space(0.25)} ${space(1)};\n  border-top: 1px solid ${p => p.theme.innerBorder};\n  background-color: ${p => p.theme.tag.highlight.background};\n  color: ${p => p.theme.active};\n  :hover {\n    color: ${p => p.theme.activeHover};\n    svg {\n      fill: ${p => p.theme.activeHover};\n    }\n  }\n`;\n\nconst IconContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  flex-shrink: 0;\n`;\n\nconst Label = styled(TextOverflow)`\n  margin-left: 6px;\n`;\n\nexport default ReleasesPromo;\n"],"names":["renderLoading","_jsx","LoadingIndicator","displayName","_ref","endpoints","reloadOnVisible","shouldReload","shouldRenderBadRequests","disableErrorReport","onLoadAllEndpointsSuccess","onRequestSuccess","_data","onRequestError","_error","_args","api","useApi","location","useLocation","params","useParams","initialState","useMemo","data","isLoading","hasError","isReloading","errors","remainingRequests","length","state","setState","useState","triggerMeasurement","routes","useRoutes","measurement","useRef","hasMeasured","finished","error","useEffect","current","metric","mark","name","getRouteStringFromRoutes","useCallback","_ref4","routeString","measure","start","route","useMeasureApiRequests","handleRequestSuccess","_ref2","initialRequest","stateKey","resp","prevState","newState","getResponseHeader","handleError","args","responseText","Sentry","message","category","level","fetchData","async","extraState","arguments","undefined","clear","Promise","all","map","endpoint","parameters","options","_ref3","locationQuery","query","paginate","cursor","disableEntireQuery","results","requestPromise","method","includeAllArgs","_","reloadData","handleMount","handleFullReload","useEffectAfterFirstRender","search","visibilityReloader","document","hidden","addEventListener","removeEventListener","renderError","disableLog","unauthorizedErrors","Object","values","some","status","permissionErrors","shouldLogSentry","LoadingError","t","PermissionDenied","badRequests","filter","responseJSON","detail","Set","join","RouteError","disableLogSentry","disableReport","shouldRenderLoading","renderComponent","children","cb","deps","firstRender","releasesSetupUrl","docsLink","Button","external","href","RELEASES_TOUR_STEPS","title","image","TourImage","src","body","TourText","actions","Container","_styled","target","space","ContainerHeader","p","theme","breakpoints","small","CodeSnippetWrapper","styles","CodeSnippetOverlay","CodeSnippetOverlaySpan","CodeSnippetDropdownWrapper","CodeSnippetDropdown","DropdownAutoComplete","text","family","GroupHeader","fontSizeSmall","subText","CreateIntegrationLink","Link","disabled","textColor","MenuItemWrapper","py","MenuItemFooterWrapper","innerBorder","tag","highlight","background","active","activeHover","IconContainer","Label","TextOverflow","organization","project","useApiRequests","slug","token","setToken","integrations","setIntegrations","selectedItem","selectItem","internalIntegrations","trackAnalytics","project_id","id","trackQuickstartCopy","trackQuickstartCreatedIntegration","integration","integration_uuid","uuid","trackCreateIntegrationModalClose","fetchToken","tokens","sentryAppSlug","newToken","generateToken","renderIntegrationNode","value","searchKey","label","codeChunks","Panel","_jsxs","priority","size","CodeSnippet","dark","language","hideCopyButton","onCopy","className","minWidth","maxHeight","onOpen","e","stopPropagation","items","alignMenu","onSelect","itemSize","searchPlaceholder","menuFooter","Access","access","hasAccess","Tooltip","to","onClick","openCreateReleaseIntegration","onCreateSuccess","onCancel","IconAdd","color","isCircled","legacySize","disableLabelPadding","emptyHidesInput"],"sourceRoot":""}