{"version":3,"file":"chunks/app_components_errorRobot_tsx-images_spot_sentry-robot_png.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/errorRobot.tsx","webpack:///./app/views/onboarding/createSampleEventButton.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport robotBackground from 'sentry-images/spot/sentry-robot.png';\n\nimport {Button} from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport CreateSampleEventButton from 'sentry/views/onboarding/createSampleEventButton';\n\ntype Props = {\n  org: Organization;\n  project?: Project;\n  /**\n   * sampleIssueId can have 3 values:\n   * - empty string to indicate it doesn't exist (render \"create sample event\")\n   * - non-empty string to indicate it exists (render \"see sample event\")\n   * - undefined to indicate the project API should be consulted to find out\n   */\n  sampleIssueId?: string;\n};\n\nfunction ErrorRobot({org, project, sampleIssueId: sampleIssueIdProp}: Props) {\n  const api = useApi();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<boolean | string>(false);\n  const [sampleIssueId, setSampleIssueId] = useState(sampleIssueIdProp);\n\n  useEffect(() => {\n    async function loadSampleData() {\n      if (!project) {\n        return;\n      }\n\n      if (sampleIssueIdProp !== undefined) {\n        return;\n      }\n\n      setLoading(true);\n\n      try {\n        const data = await api.requestPromise(\n          `/projects/${org.slug}/${project.slug}/issues/`,\n          {\n            method: 'GET',\n            data: {limit: 1},\n          }\n        );\n        setSampleIssueId((data.length > 0 && data[0].id) || '');\n      } catch (err) {\n        setError(err?.responseJSON?.detail ?? true);\n      }\n    }\n\n    loadSampleData();\n  }, [api, org, project, sampleIssueIdProp]);\n\n  const sampleLink =\n    project && (loading || error ? null : sampleIssueId) ? (\n      <p>\n        <Link to={`/${org.slug}/${project.slug}/issues/${sampleIssueId}/?sample`}>\n          {t('Or see your sample event')}\n        </Link>\n      </p>\n    ) : (\n      <p>\n        <CreateSampleEventButton\n          priority=\"link\"\n          project={project}\n          source=\"issues_list\"\n          disabled={!project}\n          title={!project ? t('Select a project to create a sample event') : undefined}\n        >\n          {t('Create a sample event')}\n        </CreateSampleEventButton>\n      </p>\n    );\n\n  return (\n    <ErrorRobotWrapper data-test-id=\"awaiting-events\" className=\"awaiting-events\">\n      <Robot aria-hidden>\n        <Eye />\n      </Robot>\n      <MessageContainer>\n        <h3>{t('Waiting for eventsâ€¦')}</h3>\n        <p>\n          {tct(\n            'Our error robot is waiting to [strike:devour] receive your first event.',\n            {\n              strike: <Strikethrough />,\n            }\n          )}\n        </p>\n        <p>\n          {project && (\n            <Button\n              data-test-id=\"install-instructions\"\n              priority=\"primary\"\n              to={`/${org.slug}/${project.slug}/getting-started/${\n                project.platform || ''\n              }`}\n            >\n              {t('Installation Instructions')}\n            </Button>\n          )}\n        </p>\n        {sampleLink}\n      </MessageContainer>\n    </ErrorRobotWrapper>\n  );\n}\n\nexport default ErrorRobot;\n\nconst ErrorRobotWrapper = styled('div')`\n  display: flex;\n  justify-content: center;\n  font-size: ${p => p.theme.fontSizeLarge};\n  border-radius: 0 0 3px 3px;\n  padding: 40px ${space(3)} ${space(3)};\n  min-height: 260px;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    flex-direction: column;\n    align-items: center;\n    padding: ${space(3)};\n    text-align: center;\n  }\n`;\n\nconst Robot = styled('div')`\n  display: block;\n  position: relative;\n  width: 220px;\n  height: 260px;\n  background: url(${robotBackground});\n  background-size: cover;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: 110px;\n    height: 130px;\n  }\n`;\n\nconst Eye = styled('span')`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  top: 70px;\n  left: 81px;\n  transform: translateZ(0);\n  animation: blink-eye 0.6s infinite;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: 6px;\n    height: 6px;\n    top: 35px;\n    left: 41px;\n  }\n\n  @keyframes blink-eye {\n    0% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n\n    50% {\n      background: #4a4d67;\n      box-shadow: none;\n    }\n\n    100% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n  }\n`;\n\nconst MessageContainer = styled('div')`\n  align-self: center;\n  max-width: 480px;\n  margin-left: 40px;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    margin: 0;\n  }\n`;\n\nconst Strikethrough = styled('span')`\n  text-decoration: line-through;\n`;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Button, ButtonProps} from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport withApi from 'sentry/utils/withApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype CreateSampleEventButtonProps = ButtonProps & {\n  api: Client;\n  organization: Organization;\n  source: string;\n  onClick?: () => void;\n  onCreateSampleGroup?: () => void;\n  project?: Project;\n};\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 30;\nconst EVENT_POLL_INTERVAL = 1000;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n\n    await new Promise(resolve => window.setTimeout(resolve, EVENT_POLL_INTERVAL));\n\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends Component<CreateSampleEventButtonProps, State> {\n  state: State = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAnalytics('sample_event.button_viewed', {\n      organization,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted = true;\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}` as const;\n\n    trackAnalytics(eventKey, {\n      organization,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project, onCreateSampleGroup} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    if (onCreateSampleGroup) {\n      onCreateSampleGroup();\n    } else {\n      trackAnalytics('growth.onboarding_view_sample_event', {\n        platform: project.platform,\n        organization,\n      });\n    }\n\n    addLoadingMessage(t('Processing sample event...'), {\n      duration: EVENT_POLL_RETRIES * EVENT_POLL_INTERVAL,\n    });\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      clearIndicators();\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n\n    // Navigated away before event was created - skip analytics and error messages\n    // latestEventAvailable will succeed even if the request was cancelled\n    if (!this._isMounted) {\n      return;\n    }\n\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel('warning');\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    this.props.onClick?.();\n\n    browserHistory.push(\n      normalizeUrl(\n        `/organizations/${organization.slug}/issues/${eventData.groupID}/?project=${project.id}&referrer=sample-error`\n      )\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n"],"names":["ErrorRobot","_ref","org","project","sampleIssueId","sampleIssueIdProp","api","useApi","loading","setLoading","useState","error","setError","setSampleIssueId","useEffect","async","undefined","data","requestPromise","slug","method","limit","length","id","err","responseJSON","detail","loadSampleData","sampleLink","_jsx","children","Link","to","t","CreateSampleEventButton","priority","source","disabled","title","_jsxs","ErrorRobotWrapper","className","Robot","Eye","MessageContainer","tct","strike","Strikethrough","Button","platform","displayName","_styled","target","p","theme","fontSizeLarge","space","breakpoints","small","robotBackground","name","styles","EVENT_POLL_INTERVAL","Component","constructor","arguments","_defineProperty","creating","organization","onCreateSampleGroup","this","props","eventData","trackAnalytics","addLoadingMessage","duration","EVENT_POLL_RETRIES","setState","url","Sentry","scope","setExtra","Error","clearIndicators","addErrorMessage","t0","performance","now","eventCreated","retries","groupID","Promise","resolve","window","setTimeout","latestEventAvailable","_isMounted","t1","Math","ceil","recordAnalytics","setTag","toString","setLevel","onClick","browserHistory","push","normalizeUrl","componentDidMount","project_id","componentWillUnmount","eventKey","interval","render","_api","_organization","_project","_source","state","createSampleGroup","withApi","withOrganization"],"sourceRoot":""}