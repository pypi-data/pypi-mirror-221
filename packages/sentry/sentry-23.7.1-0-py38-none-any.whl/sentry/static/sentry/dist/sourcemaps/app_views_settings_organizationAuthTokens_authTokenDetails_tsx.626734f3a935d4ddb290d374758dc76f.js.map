{"version":3,"file":"chunks/app_views_settings_organizationAuthTokens_authTokenDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/views/settings/organizationAuthTokens/authTokenDetails.tsx"],"sourcesContent":["import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import {useCallback} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form from 'sentry/components/forms/form';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, OrgAuthToken} from 'sentry/types';\nimport {handleXhrErrorResponse} from 'sentry/utils/handleXhrErrorResponse';\nimport {\n  getApiQueryData,\n  setApiQueryData,\n  useApiQuery,\n  useMutation,\n  useQueryClient,\n} from 'sentry/utils/queryClient';\nimport RequestError from 'sentry/utils/requestError/requestError';\nimport useApi from 'sentry/utils/useApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {\n  makeFetchOrgAuthTokensForOrgQueryKey,\n  tokenPreview,\n} from 'sentry/views/settings/organizationAuthTokens';\n\ntype Props = {\n  organization: Organization;\n  params: {tokenId: string};\n};\n\ntype FetchOrgAuthTokenParameters = {\n  orgSlug: string;\n  tokenId: string;\n};\ntype FetchOrgAuthTokenResponse = OrgAuthToken;\ntype UpdateTokenQueryVariables = {\n  name: string;\n};\n\nexport const makeFetchOrgAuthTokenKey = ({\n  orgSlug,\n  tokenId,\n}: FetchOrgAuthTokenParameters) =>\n  [`/organizations/${orgSlug}/org-auth-tokens/${tokenId}/`] as const;\n\nfunction AuthTokenDetailsForm({\n  token,\n  organization,\n}: {\n  organization: Organization;\n  token: OrgAuthToken;\n}) {\n  const initialData = {\n    name: token.name,\n    tokenPreview: tokenPreview(token.tokenLastCharacters || '****'),\n  };\n\n  const api = useApi();\n  const queryClient = useQueryClient();\n\n  const handleGoBack = useCallback(() => {\n    browserHistory.push(normalizeUrl(`/settings/${organization.slug}/auth-tokens/`));\n  }, [organization.slug]);\n\n  const {mutate: submitToken} = useMutation<{}, RequestError, UpdateTokenQueryVariables>({\n    mutationFn: ({name}) =>\n      api.requestPromise(\n        `/organizations/${organization.slug}/org-auth-tokens/${token.id}/`,\n        {\n          method: 'PUT',\n          data: {\n            name,\n          },\n        }\n      ),\n\n    onSuccess: (_data, {name}) => {\n      addSuccessMessage(t('Updated auth token.'));\n\n      // Update get by id query\n      setApiQueryData(\n        queryClient,\n        makeFetchOrgAuthTokenKey({orgSlug: organization.slug, tokenId: token.id}),\n        (oldData: OrgAuthToken | undefined) => {\n          if (!oldData) {\n            return oldData;\n          }\n\n          oldData.name = name;\n\n          return oldData;\n        }\n      );\n\n      // Update get list query\n      if (\n        getApiQueryData(\n          queryClient,\n          makeFetchOrgAuthTokensForOrgQueryKey({orgSlug: organization.slug})\n        )\n      ) {\n        setApiQueryData(\n          queryClient,\n          makeFetchOrgAuthTokensForOrgQueryKey({orgSlug: organization.slug}),\n          (oldData: OrgAuthToken[] | undefined) => {\n            if (!Array.isArray(oldData)) {\n              return oldData;\n            }\n\n            const existingToken = oldData.find(oldToken => oldToken.id === token.id);\n\n            if (existingToken) {\n              existingToken.name = name;\n            }\n\n            return oldData;\n          }\n        );\n      }\n\n      handleGoBack();\n    },\n    onError: error => {\n      const message = t('Failed to update the auth token.');\n      handleXhrErrorResponse(message, error);\n      addErrorMessage(message);\n    },\n  });\n\n  return (\n    <Form\n      apiMethod=\"PUT\"\n      initialData={initialData}\n      apiEndpoint={`/organizations/${organization.slug}/org-auth-tokens/${token.id}/`}\n      onSubmit={({name}) => {\n        addLoadingMessage();\n\n        return submitToken({\n          name,\n        });\n      }}\n      onCancel={handleGoBack}\n    >\n      <TextField\n        name=\"name\"\n        label={t('Name')}\n        required\n        help={t('A name to help you identify this token.')}\n      />\n\n      <TextField\n        name=\"tokenPreview\"\n        label={t('Token')}\n        disabled\n        help={t('You can only view the token once after creation.')}\n      />\n\n      <FieldGroup\n        label={t('Scopes')}\n        help={t('You cannot change the scopes of an existing token.')}\n      >\n        <div>{token.scopes.slice().sort().join(', ')}</div>\n      </FieldGroup>\n    </Form>\n  );\n}\n\nexport function OrganizationAuthTokensDetails({params, organization}: Props) {\n  const {tokenId} = params;\n\n  const {\n    isLoading,\n    isError,\n    data: token,\n    refetch: refetchToken,\n  } = useApiQuery<FetchOrgAuthTokenResponse>(\n    makeFetchOrgAuthTokenKey({orgSlug: organization.slug, tokenId}),\n    {\n      staleTime: Infinity,\n    }\n  );\n\n  return (\n    <div>\n      <SentryDocumentTitle title={t('Edit Auth Token')} />\n      <SettingsPageHeader title={t('Edit Auth Token')} />\n\n      <TextBlock>\n        {t(\n          \"Authentication tokens allow you to perform actions against the Sentry API on behalf of your organization. They're the easiest way to get started using the API.\"\n        )}\n      </TextBlock>\n      <TextBlock>\n        {tct(\n          'For more information on how to use the web API, see our [link:documentation].',\n          {\n            link: <ExternalLink href=\"https://docs.sentry.io/api/\" />,\n          }\n        )}\n      </TextBlock>\n      <Panel>\n        <PanelHeader>{t('Auth Token Details')}</PanelHeader>\n\n        <PanelBody>\n          {isError && (\n            <LoadingError\n              message={t('Failed to load auth token.')}\n              onRetry={refetchToken}\n            />\n          )}\n\n          {isLoading && <LoadingIndicator />}\n\n          {!isLoading && !isError && token && (\n            <AuthTokenDetailsForm token={token} organization={organization} />\n          )}\n        </PanelBody>\n      </Panel>\n    </div>\n  );\n}\n\nexport default withOrganization(OrganizationAuthTokensDetails);\n"],"names":["getPadding","_ref","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","makeFetchOrgAuthTokenKey","orgSlug","tokenId","AuthTokenDetailsForm","_ref2","token","organization","initialData","name","tokenPreview","tokenLastCharacters","api","useApi","queryClient","useQueryClient","handleGoBack","useCallback","browserHistory","push","normalizeUrl","slug","mutate","submitToken","useMutation","mutationFn","_ref3","requestPromise","id","method","data","onSuccess","_data","_ref4","addSuccessMessage","t","setApiQueryData","oldData","getApiQueryData","makeFetchOrgAuthTokensForOrgQueryKey","Array","isArray","existingToken","find","oldToken","onError","error","message","handleXhrErrorResponse","addErrorMessage","_jsxs","Form","apiMethod","apiEndpoint","onSubmit","_ref5","addLoadingMessage","onCancel","children","_jsx","TextField","label","required","help","disabled","FieldGroup","scopes","slice","sort","join","OrganizationAuthTokensDetails","_ref6","params","isLoading","isError","refetch","refetchToken","useApiQuery","staleTime","Infinity","SentryDocumentTitle","title","SettingsPageHeader","TextBlock","tct","link","ExternalLink","href","Panel","PanelHeader","PanelBody","LoadingError","onRetry","LoadingIndicator","displayName","withOrganization"],"sourceRoot":""}