{"version":3,"file":"chunks/app_components_modals_importDashboardFromFileModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/codeSnippet.tsx","webpack:///./app/components/modals/importDashboardFromFileModal.tsx"],"sourcesContent":["import {useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\nimport Prism from 'prismjs';\n\nimport {Button} from 'sentry/components/button';\nimport {IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {loadPrismLanguage} from 'sentry/utils/loadPrismLanguage';\n\ninterface CodeSnippetProps {\n  children: string;\n  language: string;\n  className?: string;\n  dark?: boolean;\n  filename?: string;\n  hideCopyButton?: boolean;\n  onCopy?: (copiedCode: string) => void;\n  /**\n   * Fired when the user selects and copies code snippet manually\n   */\n  onSelectAndCopy?: () => void;\n}\n\nexport function CodeSnippet({\n  children,\n  language,\n  dark,\n  filename,\n  hideCopyButton,\n  onCopy,\n  className,\n  onSelectAndCopy,\n}: CodeSnippetProps) {\n  const ref = useRef<HTMLModElement | null>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) {\n      return;\n    }\n\n    if (language in Prism.languages) {\n      Prism.highlightElement(element);\n      return;\n    }\n\n    loadPrismLanguage(language, {onLoad: () => Prism.highlightElement(element)});\n  }, [children, language]);\n\n  const [tooltipState, setTooltipState] = useState<'copy' | 'copied' | 'error'>('copy');\n\n  const handleCopy = () => {\n    navigator.clipboard\n      .writeText(children)\n      .then(() => {\n        setTooltipState('copied');\n      })\n      .catch(() => {\n        setTooltipState('error');\n      });\n    onCopy?.(children);\n  };\n\n  const tooltipTitle =\n    tooltipState === 'copy'\n      ? t('Copy')\n      : tooltipState === 'copied'\n      ? t('Copied')\n      : t('Unable to copy');\n\n  return (\n    <Wrapper className={`${dark ? 'prism-dark ' : ''}${className ?? ''}`}>\n      <Header hasFileName={!!filename}>\n        {filename && <FileName>{filename}</FileName>}\n        {!hideCopyButton && (\n          <CopyButton\n            type=\"button\"\n            size=\"xs\"\n            translucentBorder\n            borderless={!!filename}\n            onClick={handleCopy}\n            title={tooltipTitle}\n            tooltipProps={{delay: 0, isHoverable: false, position: 'left'}}\n            onMouseLeave={() => setTooltipState('copy')}\n          >\n            <IconCopy size=\"xs\" />\n          </CopyButton>\n        )}\n      </Header>\n\n      <pre className={`language-${String(language)}`}>\n        <code\n          ref={ref}\n          className={`language-${String(language)}`}\n          onCopy={onSelectAndCopy}\n        >\n          {children}\n        </code>\n      </pre>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled('div')`\n  position: relative;\n  background: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n\n  pre {\n    margin: 0;\n  }\n`;\n\nconst Header = styled('div')<{hasFileName: boolean}>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  font-family: ${p => p.theme.text.familyMono};\n  font-size: ${p => p.theme.codeFontSize};\n  color: ${p => p.theme.headingColor};\n  font-weight: 600;\n  z-index: 2;\n\n  ${p =>\n    p.hasFileName\n      ? `\n      padding: ${space(0.5)} 0;\n      margin: 0 ${space(0.5)} 0 ${space(2)};\n      border-bottom: solid 1px ${p.theme.innerBorder};\n    `\n      : `\n      justify-content: flex-end;\n      position: absolute;\n      top: 0;\n      right: 0;\n      width: max-content;\n      height: max-content;\n      max-height: 100%;\n      padding: ${space(1)};\n    `}\n`;\n\nconst FileName = styled('p')`\n  ${p => p.theme.overflowEllipsis}\n  margin: 0;\n`;\n\nconst CopyButton = styled(Button)`\n  color: ${p => p.theme.subText};\n\n  transition: opacity 0.1s ease-out;\n  opacity: 0;\n\n  p + &, /* if preceded by FileName */\n  div:hover > div > &, /* if Wrapper is hovered */\n  &.focus-visible {\n    opacity: 1;\n  }\n`;\n","import {Fragment, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport {css} from '@emotion/react';\n\nimport {createDashboard} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport {CodeSnippet} from 'sentry/components/codeSnippet';\nimport {IconUpload} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport {\n  assignDefaultLayout,\n  getInitialColumnDepths,\n} from 'sentry/views/dashboards/layoutUtils';\nimport {Wrapper} from 'sentry/views/discover/table/quickContext/styles';\n\n// Internal feature - no specs written.\nfunction ImportDashboardFromFileModal({\n  Header,\n  Body,\n  Footer,\n  organization,\n  api,\n  location,\n}) {\n  const [dashboardData, setDashboardData] = useState('');\n  const [validated, setValidated] = useState(false);\n\n  function validateFile(fileToUpload) {\n    if (!fileToUpload || !(fileToUpload.type === 'application/json')) {\n      addErrorMessage('You must upload a JSON file');\n      setValidated(false);\n      setDashboardData('');\n      return false;\n    }\n\n    setValidated(true);\n    return true;\n  }\n\n  const handleFileChange = e => {\n    const fileToUpload = e.target.files[0];\n    if (validateFile(fileToUpload)) {\n      const fileReader = new FileReader();\n      fileReader.readAsText(fileToUpload, 'UTF-8');\n      fileReader.onload = event => {\n        const target = event.target;\n        if (target && typeof target.result === 'string') {\n          const parsed = JSON.parse(target.result);\n          const formatted = JSON.stringify(parsed, null, '\\t');\n          setDashboardData(formatted);\n        }\n      };\n    }\n  };\n\n  const handleUploadClick = async () => {\n    const dashboard = JSON.parse(dashboardData);\n\n    try {\n      const newDashboard = await createDashboard(\n        api,\n        organization.slug,\n        {\n          ...dashboard,\n          widgets: assignDefaultLayout(dashboard.widgets, getInitialColumnDepths()),\n        },\n        true\n      );\n\n      addSuccessMessage(`${dashboard.title} dashboard template successfully added`);\n      loadDashboard(newDashboard.id);\n    } catch (error) {\n      addErrorMessage('Could not upload dashboard, JSON may be invalid');\n    }\n  };\n\n  const loadDashboard = (dashboardId: string) => {\n    browserHistory.push(\n      normalizeUrl({\n        pathname: `/organizations/${organization.slug}/dashboards/${dashboardId}/`,\n        query: location.query,\n      })\n    );\n  };\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Import Dashboard from JSON File')}</h4>\n      </Header>\n      <Body>\n        <Wrapper>\n          <input type=\"file\" onChange={handleFileChange} />\n        </Wrapper>\n        <Wrapper>\n          <Button\n            onClick={handleUploadClick}\n            size=\"md\"\n            disabled={!validated}\n            priority=\"primary\"\n            icon={<IconUpload />}\n          >\n            {t('Import')}\n          </Button>\n        </Wrapper>\n      </Body>\n      {validated && (\n        <Fragment>\n          <Footer />\n          <Wrapper>\n            <h4>{t('Preview')}</h4>\n          </Wrapper>\n          <CodeSnippet language=\"json\">{dashboardData}</CodeSnippet>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n}\n\nexport default ImportDashboardFromFileModal;\n\nexport const modalCss = css`\n  max-width: 700px;\n  margin: 70px auto;\n`;\n"],"names":["CodeSnippet","_ref","children","language","dark","filename","hideCopyButton","onCopy","className","onSelectAndCopy","ref","useRef","useEffect","element","current","Prism","loadPrismLanguage","onLoad","tooltipState","setTooltipState","useState","tooltipTitle","t","_jsxs","Wrapper","Header","hasFileName","_jsx","FileName","CopyButton","type","size","translucentBorder","borderless","onClick","handleCopy","navigator","clipboard","writeText","then","catch","title","tooltipProps","delay","isHoverable","position","onMouseLeave","IconCopy","String","displayName","_styled","target","p","theme","backgroundSecondary","borderRadius","text","familyMono","codeFontSize","headingColor","space","innerBorder","overflowEllipsis","Button","subText","ImportDashboardFromFileModal","Body","Footer","organization","api","location","dashboardData","setDashboardData","validated","setValidated","Fragment","closeButton","onChange","e","fileToUpload","files","addErrorMessage","validateFile","fileReader","FileReader","readAsText","onload","event","result","parsed","JSON","parse","formatted","stringify","async","dashboard","newDashboard","createDashboard","slug","widgets","assignDefaultLayout","getInitialColumnDepths","addSuccessMessage","dashboardId","id","browserHistory","push","normalizeUrl","pathname","query","error","disabled","priority","icon","IconUpload","modalCss","name","styles"],"sourceRoot":""}