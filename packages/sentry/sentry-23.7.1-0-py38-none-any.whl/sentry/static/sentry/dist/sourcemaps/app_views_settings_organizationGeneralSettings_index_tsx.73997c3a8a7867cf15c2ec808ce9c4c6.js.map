{"version":3,"file":"chunks/app_views_settings_organizationGeneralSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/organizationGeneralSettings.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationGeneralSettings/organizationSettingsForm.tsx","webpack:///./app/views/settings/organizationGeneralSettings/index.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport {MemberRole} from 'sentry/types';\nimport slugify from 'sentry/utils/slugify';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: t('General'),\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Organization Slug'),\n        help: t('A unique ID used to identify this organization'),\n        transformInput: slugify,\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t(\n          'You will be redirected to the new organization slug after saving'\n        ),\n      },\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n        label: t('Display Name'),\n        help: t('A human-friendly name for the organization'),\n      },\n      {\n        name: 'isEarlyAdopter',\n        type: 'boolean',\n        label: t('Early Adopter'),\n        help: tct(\"Opt-in to [link:new features] before they're released to the public\", {\n          link: (\n            <ExternalLink href=\"https://docs.sentry.io/product/accounts/early-adopter/\" />\n          ),\n        }),\n      },\n      {\n        name: 'aiSuggestedSolution',\n        type: 'boolean',\n        label: t('AI Suggested Solution'),\n        visible: ({features}) => features.has('open-ai-suggestion'),\n        help: tct(\n          'Opt-in to [link:ai suggested solution] to get AI help on how to solve an issue.',\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/product/issues/issue-details/ai-suggested-solution/\" />\n            ),\n          }\n        ),\n      },\n    ],\n  },\n\n  {\n    title: 'Membership',\n    fields: [\n      {\n        name: 'defaultRole',\n        type: 'select',\n        required: true,\n        label: t('Default Role'),\n        // seems weird to have choices in initial form data\n        choices: ({initialData} = {}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        help: t('The default role new members will receive'),\n        disabled: ({access}) => !access.has('org:admin'),\n      },\n      {\n        name: 'openMembership',\n        type: 'boolean',\n        required: true,\n        label: t('Open Membership'),\n        help: t('Allow organization members to freely join any team'),\n      },\n      {\n        name: 'eventsMemberAdmin',\n        type: 'boolean',\n        label: t('Let Members Delete Events'),\n        help: t(\n          'Allow members to delete events (including the delete & discard action) by granting them the `event:admin` scope.'\n        ),\n      },\n      {\n        name: 'alertsMemberWrite',\n        type: 'boolean',\n        label: t('Let Members Create and Edit Alerts'),\n        help: t(\n          'Allow members to create, edit, and delete alert rules by granting them the `alerts:write` scope.'\n        ),\n      },\n      {\n        name: 'attachmentsRole',\n        type: 'select',\n        choices: ({initialData = {}}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Attachments Access'),\n        help: t(\n          'Role required to download event attachments, such as native crash reports or log files.'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n      },\n      {\n        name: 'debugFilesRole',\n        type: 'select',\n        choices: ({initialData = {}}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Debug Files Access'),\n        help: t(\n          'Role required to download debug information files, proguard mappings and source maps.'\n        ),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import {ReactNode} from 'react';\n\nimport Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Scope} from 'sentry/types';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> & {\n  access?: Scope[];\n  message?: ReactNode;\n};\n\nfunction PermissionAlert({\n  access = ['org:write'],\n  message = t(\n    'These settings can only be edited by users with the organization owner or manager role.'\n  ),\n  ...props\n}: Props) {\n  return (\n    <Access access={access}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"org-permission-alert\" type=\"warning\" showIcon {...props}>\n            {message}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {updateOrganization} from 'sentry/actionCreators/organizations';\nimport Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport AvatarChooser from 'sentry/components/avatarChooser';\nimport DeprecatedAsyncComponent, {\n  AsyncComponentState,\n} from 'sentry/components/deprecatedAsyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport Tag from 'sentry/components/tag';\nimport organizationSettingsFields from 'sentry/data/forms/organizationGeneralSettings';\nimport {IconCodecov, IconLock} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport type {Organization, OrganizationAuthProvider, Scope} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst HookCodecovSettingsLink = HookOrDefault({\n  hookName: 'component:codecov-integration-settings-link',\n});\n\ninterface Props extends RouteComponentProps<{}, {}> {\n  access: Set<Scope>;\n  initialData: Organization;\n  location: Location;\n  onSave: (previous: Organization, updated: Organization) => void;\n  organization: Organization;\n}\n\ninterface State extends AsyncComponentState {\n  authProvider: OrganizationAuthProvider;\n}\n\nclass OrganizationSettingsForm extends DeprecatedAsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<DeprecatedAsyncComponent['getEndpoints']> {\n    const {organization} = this.props;\n    return [['authProvider', `/organizations/${organization.slug}/auth-provider/`]];\n  }\n\n  render() {\n    const {initialData, organization, onSave, access} = this.props;\n    const {authProvider} = this.state;\n    const endpoint = `/organizations/${organization.slug}/`;\n\n    const jsonFormSettings = {\n      additionalFieldProps: {hasSsoEnabled: !!authProvider},\n      features: new Set(organization.features),\n      access,\n      location: this.props.location,\n      disabled: !access.has('org:write'),\n    };\n\n    const forms = cloneDeep(organizationSettingsFields);\n    forms[0].fields = [\n      ...forms[0].fields,\n      {\n        name: 'codecovAccess',\n        type: 'boolean',\n        disabled: !organization.features.includes('codecov-integration'),\n        label: (\n          <PoweredByCodecov>\n            {t('Enable Code Coverage Insights')}{' '}\n            <Feature\n              hookName=\"feature-disabled:codecov-integration-setting\"\n              renderDisabled={p => (\n                <Hovercard\n                  body={\n                    <FeatureDisabled\n                      features={p.features}\n                      hideHelpToggle\n                      featureName={t('Codecov Coverage')}\n                    />\n                  }\n                >\n                  <Tag role=\"status\" icon={<IconLock isSolid />}>\n                    {t('disabled')}\n                  </Tag>\n                </Hovercard>\n              )}\n              features={['organizations:codecov-integration']}\n            >\n              {() => null}\n            </Feature>\n          </PoweredByCodecov>\n        ),\n        formatMessageValue: (value: boolean) => {\n          const onOff = value ? t('on') : t('off');\n          return t('Codecov access was turned %s', onOff);\n        },\n        help: (\n          <PoweredByCodecov>\n            {t('powered by')} <IconCodecov /> Codecov{' '}\n            <HookCodecovSettingsLink organization={organization} />\n          </PoweredByCodecov>\n        ),\n      },\n    ];\n\n    return (\n      <Form\n        data-test-id=\"organization-settings\"\n        apiMethod=\"PUT\"\n        apiEndpoint={endpoint}\n        saveOnBlur\n        allowUndo\n        initialData={initialData}\n        onSubmitSuccess={(updated, _model) => {\n          // Special case for slug, need to forward to new slug\n          if (typeof onSave === 'function') {\n            onSave(initialData, updated);\n          }\n        }}\n        onSubmitError={() => addErrorMessage('Unable to save change')}\n      >\n        <JsonForm {...jsonFormSettings} forms={forms} />\n        <AvatarChooser\n          type=\"organization\"\n          allowGravatar={false}\n          endpoint={`${endpoint}avatar/`}\n          model={initialData}\n          onSave={updateOrganization}\n          disabled={!access.has('org:write')}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSettingsForm);\n\nconst PoweredByCodecov = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n\n  & > span {\n    display: flex;\n    align-items: center;\n  }\n`;\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addLoadingMessage} from 'sentry/actionCreators/indicator';\nimport {\n  changeOrganizationSlug,\n  removeAndRedirectToRemainingOrganization,\n  updateOrganization,\n} from 'sentry/actionCreators/organizations';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/organization/permissionAlert';\n\nimport OrganizationSettingsForm from './organizationSettingsForm';\n\ntype Props = {\n  organization: Organization;\n  projects: Project[];\n} & RouteComponentProps<{}, {}>;\n\nfunction OrganizationGeneralSettings(props: Props) {\n  const api = useApi();\n\n  const {organization, projects} = props;\n  const access = new Set(organization.access);\n\n  const removeConfirmMessage = (\n    <Fragment>\n      <TextBlock>\n        {tct(\n          'Removing the organization, [name] is permanent and cannot be undone! Are you sure you want to continue?',\n          {\n            name: organization && <strong>{organization.name}</strong>,\n          }\n        )}\n      </TextBlock>\n\n      {!!projects.length && (\n        <Fragment>\n          <TextBlock>\n            {t('This will also remove the following associated projects:')}\n          </TextBlock>\n          <List symbol=\"bullet\" data-test-id=\"removed-projects-list\">\n            {projects.map(project => (\n              <ListItem key={project.slug}>{project.slug}</ListItem>\n            ))}\n          </List>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n\n  const handleSaveForm: React.ComponentProps<\n    typeof OrganizationSettingsForm\n  >['onSave'] = (prevData: Organization, updated: Organization) => {\n    if (updated.slug && updated.slug !== prevData.slug) {\n      changeOrganizationSlug(prevData, updated);\n\n      if (updated.features.includes('customer-domains')) {\n        const {organizationUrl} = updated.links;\n        window.location.replace(`${organizationUrl}/settings/organization/`);\n      } else {\n        browserHistory.replace(`/settings/${updated.slug}/`);\n      }\n    } else {\n      if (prevData.codecovAccess !== updated.codecovAccess) {\n        trackAnalytics('organization_settings.codecov_access_updated', {\n          organization: updated,\n          has_access: updated.codecovAccess,\n        });\n      }\n\n      // This will update OrganizationStore (as well as OrganizationsStore\n      // which is slightly incorrect because it has summaries vs a detailed org)\n      updateOrganization(updated);\n    }\n  };\n\n  const handleConfirmRemoveOrg = () => {\n    if (!organization) {\n      return;\n    }\n\n    addLoadingMessage();\n    removeAndRedirectToRemainingOrganization(api, {\n      orgId: organization.slug,\n      successMessage: `${organization.name} is queued for deletion.`,\n      errorMessage: `Error removing the ${organization.name} organization`,\n    });\n  };\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={t('General Settings')} orgSlug={organization.slug} />\n      <div>\n        <SettingsPageHeader title={t('Organization Settings')} />\n        <PermissionAlert />\n\n        <OrganizationSettingsForm\n          {...props}\n          initialData={organization}\n          access={access}\n          onSave={handleSaveForm}\n        />\n\n        {access.has('org:admin') && !organization.isDefault && (\n          <Panel>\n            <PanelHeader>{t('Remove Organization')}</PanelHeader>\n            <FieldGroup\n              label={t('Remove Organization')}\n              help={t(\n                'Removing this organization will delete all data including projects and their associated events.'\n              )}\n            >\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  confirmText={t('Remove Organization')}\n                  message={removeConfirmMessage}\n                  onConfirm={handleConfirmRemoveOrg}\n                >\n                  <Button priority=\"danger\">{t('Remove Organization')}</Button>\n                </Confirm>\n              </div>\n            </FieldGroup>\n          </Panel>\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default withProjects(withOrganization(OrganizationGeneralSettings));\n"],"names":["route","title","t","fields","name","type","required","label","help","transformInput","slugify","saveOnBlur","saveMessageAlertType","saveMessage","tct","link","_jsx","ExternalLink","href","visible","_ref","features","has","choices","initialData","arguments","length","undefined","orgRoleList","map","r","id","disabled","_ref2","access","_ref3","_ref4","_ref5","str","normalize","toLowerCase","replace","PermissionAlert","message","props","Access","children","hasAccess","Alert","showIcon","displayName","HookCodecovSettingsLink","HookOrDefault","hookName","OrganizationSettingsForm","DeprecatedAsyncComponent","getEndpoints","organization","this","slug","render","onSave","authProvider","state","endpoint","jsonFormSettings","additionalFieldProps","hasSsoEnabled","Set","location","forms","cloneDeep","organizationSettingsFields","includes","_jsxs","PoweredByCodecov","Feature","renderDisabled","p","Hovercard","body","FeatureDisabled","hideHelpToggle","featureName","Tag","role","icon","IconLock","isSolid","formatMessageValue","value","onOff","IconCodecov","Form","apiMethod","apiEndpoint","allowUndo","onSubmitSuccess","updated","_model","onSubmitError","addErrorMessage","JsonForm","AvatarChooser","allowGravatar","model","updateOrganization","withOrganization","_styled","target","space","OrganizationGeneralSettings","api","useApi","projects","removeConfirmMessage","Fragment","TextBlock","List","symbol","project","ListItem","SentryDocumentTitle","orgSlug","SettingsPageHeader","handleSaveForm","prevData","changeOrganizationSlug","organizationUrl","links","window","browserHistory","codecovAccess","trackAnalytics","has_access","isDefault","Panel","PanelHeader","FieldGroup","Confirm","priority","confirmText","onConfirm","handleConfirmRemoveOrg","addLoadingMessage","removeAndRedirectToRemainingOrganization","orgId","successMessage","errorMessage","Button","withProjects"],"sourceRoot":""}