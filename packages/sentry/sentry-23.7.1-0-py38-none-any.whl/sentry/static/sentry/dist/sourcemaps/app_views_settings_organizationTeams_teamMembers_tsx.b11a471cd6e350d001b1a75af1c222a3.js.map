{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamMembers_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/components/teamRoleSelect.tsx","webpack:///./app/components/teamRoleUtils.tsx","webpack:///./app/utils/orgRole.tsx","webpack:///./app/views/deprecatedAsyncView.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx","webpack:///./app/views/settings/organizationTeams/teamMembersRow.tsx","webpack:///./app/views/settings/organizationTeams/teamMembers.tsx","webpack:///./app/views/settings/organizationTeams/utils.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx"],"sourcesContent":["import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: calc(${p => p.theme.panelBorderRadius} - 1px)\n    calc(${p => p.theme.panelBorderRadius} - 1px) 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import styled from '@emotion/styled';\n\nimport SelectControl, {\n  ControlProps,\n} from 'sentry/components/forms/controls/selectControl';\nimport {MemberRole} from 'sentry/types';\n\ntype OptionType = {\n  details: React.ReactNode;\n  disabled: boolean;\n  label: string;\n  value: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  disableUnallowed: boolean;\n  roles: MemberRole[];\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n  value?: string | null;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: (disableUnallowed && !r.allowed) || r.isRetired,\n            details: <Details>{r.desc}</Details>,\n          } as OptionType)\n      )}\n      showDividers\n      {...props}\n    />\n  );\n}\n\nexport default RoleSelectControl;\n\nconst Details = styled('span')`\n  display: inline-block;\n  width: 20rem;\n`;\n","import styled from '@emotion/styled';\n\nimport {ControlProps} from 'sentry/components/forms/controls/selectControl';\nimport RoleSelectControl from 'sentry/components/roleSelectControl';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Team, TeamMember, TeamRole} from 'sentry/types';\nimport {getEffectiveOrgRole} from 'sentry/utils/orgRole';\nimport {\n  hasOrgRoleOverwrite,\n  RoleOverwriteIcon,\n} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\n\ninterface Props {\n  member: TeamMember;\n  onChangeTeamRole: (newRole: TeamRole['id'] | string) => void;\n  organization: Organization;\n  team: Team;\n  disabled?: boolean;\n  size?: ControlProps['size'];\n}\n\nfunction TeamRoleSelect({\n  organization,\n  team,\n  member,\n  onChangeTeamRole,\n  disabled,\n  size,\n}: Props) {\n  const {orgRoleList, teamRoleList, features} = organization;\n  const hasTeamRoles = features.includes('team-roles');\n\n  // Determine the org-role, including if the current team has an org role\n  // and adding the user to the current team changes their minimum team-role\n  const possibleOrgRoles = [member.orgRole];\n  if (member.groupOrgRoles && member.groupOrgRoles.length > 0) {\n    possibleOrgRoles.push(member.groupOrgRoles[0].role.id);\n  }\n  if (team.orgRole) {\n    possibleOrgRoles.push(team.orgRole);\n  }\n  const effectiveOrgRole = getEffectiveOrgRole(possibleOrgRoles, orgRoleList);\n\n  // If the member's org-role has elevated permission, their team-role will\n  // inherit scopes from it\n  if (hasOrgRoleOverwrite({orgRole: effectiveOrgRole?.id, orgRoleList, teamRoleList})) {\n    const effectiveTeamRole = teamRoleList.find(\n      r => r.id === effectiveOrgRole?.minimumTeamRole\n    );\n\n    return (\n      <RoleName>\n        {effectiveTeamRole?.name || effectiveOrgRole?.minimumTeamRole}\n        <IconWrapper>\n          <RoleOverwriteIcon\n            orgRole={effectiveOrgRole?.id}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n          />\n        </IconWrapper>\n      </RoleName>\n    );\n  }\n\n  const teamRoleId =\n    member.teamRole || // From TeamMemberEndpoint\n    member.teamRoles?.find(tr => tr.teamSlug === team.slug)?.role || // From OrgMemberDetailEndpoint\n    null;\n  const teamRole = teamRoleList.find(r => r.id === teamRoleId) || teamRoleList[0];\n\n  return (\n    <RoleSelectControl\n      disabled={disabled || !hasTeamRoles}\n      disableUnallowed={false}\n      roles={teamRoleList}\n      value={teamRole.id}\n      onChange={option => onChangeTeamRole(option.value)}\n      size={size}\n    />\n  );\n}\n\nexport default TeamRoleSelect;\n\nconst RoleName = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst IconWrapper = styled('div')`\n  height: ${space(2)};\n  margin-left: ${space(1)};\n`;\n","import {Fragment} from 'react';\n\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport {t} from 'sentry/locale';\n\nconst LabelHook = HookOrDefault({\n  hookName: 'sidebar:item-label',\n  defaultComponent: ({children}) => <Fragment>{children}</Fragment>,\n});\n\nexport function TeamRoleColumnLabel() {\n  return <LabelHook id=\"team-roles-upsell\">{t('Team Roles')}</LabelHook>;\n}\n","import {OrgRole} from 'sentry/types';\n\nexport function getEffectiveOrgRole(\n  memberOrgRoles: string[],\n  orgRoleList: OrgRole[]\n): OrgRole {\n  const orgRoleMap = orgRoleList.reduce((acc, role, index) => {\n    acc[role.id] = {index, role};\n    return acc;\n  }, {});\n\n  // sort by ascending index (high to low priority)\n  memberOrgRoles.sort((a, b) => orgRoleMap[b].index - orgRoleMap[a].index);\n\n  return orgRoleMap[memberOrgRoles[0]]?.role;\n}\n","import DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = DeprecatedAsyncComponent['state'];\nexport type AsyncViewProps = DeprecatedAsyncComponent['props'];\n\n/**\n * @deprecated use useApiQuery instead.\n *\n * Read the dev docs page on network requests for more information [1].\n *\n * [1]: https://develop.sentry.dev/frontend/network-requests/\n */\nexport default class DeprecatedAsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends DeprecatedAsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import PanelAlert from 'sentry/components/panels/panelAlert';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport function RoleOverwriteIcon(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n}\n\nexport function RoleOverwritePanelAlert(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n}\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n","import styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport TeamRoleSelect from 'sentry/components/teamRoleSelect';\nimport {IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Member, Organization, Team, TeamMember, User} from 'sentry/types';\nimport {getButtonHelpText} from 'sentry/views/settings/organizationTeams/utils';\n\ninterface Props {\n  hasWriteAccess: boolean;\n  isOrgOwner: boolean;\n  member: TeamMember;\n  organization: Organization;\n  removeMember: (member: Member) => void;\n  team: Team;\n  updateMemberRole: (member: Member, newRole: string) => void;\n  user: User;\n}\n\nfunction TeamMembersRow({\n  organization,\n  team,\n  member,\n  user,\n  hasWriteAccess,\n  isOrgOwner,\n  removeMember,\n  updateMemberRole,\n}: Props) {\n  const isSelf = user.email === member.email;\n\n  return (\n    <TeamRolesPanelItem key={member.id}>\n      <div>\n        <IdBadge avatarSize={36} member={member} useLink orgId={organization.slug} />\n      </div>\n      <RoleSelectWrapper>\n        <TeamRoleSelect\n          disabled={isSelf || !hasWriteAccess}\n          organization={organization}\n          team={team}\n          member={member}\n          onChangeTeamRole={newRole => updateMemberRole(member, newRole)}\n        />\n      </RoleSelectWrapper>\n      <div>\n        <RemoveButton\n          hasWriteAccess={hasWriteAccess}\n          hasOrgRoleFromTeam={team.orgRole !== null}\n          isOrgOwner={isOrgOwner}\n          isSelf={isSelf}\n          onClick={() => removeMember(member)}\n          member={member}\n        />\n      </div>\n    </TeamRolesPanelItem>\n  );\n}\n\nfunction RemoveButton(props: {\n  hasOrgRoleFromTeam: boolean;\n  hasWriteAccess: boolean;\n  isOrgOwner: boolean;\n  isSelf: boolean;\n  member: TeamMember;\n  onClick: () => void;\n}) {\n  const {member, hasWriteAccess, isOrgOwner, isSelf, hasOrgRoleFromTeam, onClick} = props;\n\n  const canRemoveMember = hasWriteAccess || isSelf;\n  if (!canRemoveMember) {\n    return (\n      <Button\n        size=\"xs\"\n        disabled\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        aria-label={t('Remove')}\n        title={t('You do not have permission to remove a member from this team.')}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n\n  const isIdpProvisioned = member.flags['idp:provisioned'];\n  const isPermissionGroup = hasOrgRoleFromTeam && !isOrgOwner;\n  const buttonHelpText = getButtonHelpText(isIdpProvisioned, isPermissionGroup);\n  if (isIdpProvisioned || isPermissionGroup) {\n    return (\n      <Button\n        size=\"xs\"\n        disabled\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        aria-label={t('Remove')}\n        title={buttonHelpText}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n\n  const buttonRemoveText = isSelf ? t('Leave') : t('Remove');\n  return (\n    <Button\n      data-test-id={`button-remove-${member.id}`}\n      size=\"xs\"\n      disabled={!canRemoveMember}\n      icon={<IconSubtract size=\"xs\" isCircled />}\n      onClick={onClick}\n      aria-label={buttonRemoveText}\n    >\n      {buttonRemoveText}\n    </Button>\n  );\n}\n\nconst RoleSelectWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  > div:first-child {\n    flex-grow: 1;\n  }\n`;\n\nexport const GRID_TEMPLATE = `\n  display: grid;\n  grid-template-columns: minmax(100px, 1fr) 200px 95px;\n  gap: ${space(1)};\n`;\n\nconst TeamRolesPanelItem = styled(PanelItem)`\n  ${GRID_TEMPLATE};\n  align-items: center;\n\n  > div:last-child {\n    margin-left: auto;\n  }\n`;\n\nexport default TeamMembersRow;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  openInviteMembersModal,\n  openTeamAccessRequestModal,\n} from 'sentry/actionCreators/modal';\nimport {joinTeam, leaveTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport Pagination from 'sentry/components/pagination';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport {TeamRoleColumnLabel} from 'sentry/components/teamRoleUtils';\nimport {IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Config, Member, Organization, Team, TeamMember} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport DeprecatedAsyncView, {AsyncViewState} from 'sentry/views/deprecatedAsyncView';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport TeamMembersRow, {\n  GRID_TEMPLATE,\n} from 'sentry/views/settings/organizationTeams/teamMembersRow';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\nimport {getButtonHelpText} from './utils';\n\ntype RouteParams = {\n  teamId: string;\n};\n\ninterface Props extends RouteComponentProps<RouteParams, {}> {\n  api: Client;\n  config: Config;\n  organization: Organization;\n  team: Team;\n}\n\ninterface State extends AsyncViewState {\n  dropdownBusy: boolean;\n  error: boolean;\n  orgMembers: Member[];\n  teamMembers: TeamMember[];\n}\n\nclass TeamMembers extends DeprecatedAsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      error: false,\n      dropdownBusy: false,\n      teamMembers: [],\n      orgMembers: [],\n    };\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    // Initialize \"add member\" dropdown with data\n    this.fetchMembersRequest('');\n  }\n\n  debouncedFetchMembersRequest = debounce(\n    (query: string) =>\n      this.setState({dropdownBusy: true}, () => this.fetchMembersRequest(query)),\n    200\n  );\n\n  fetchMembersRequest = async (query: string) => {\n    const {organization, api} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/organizations/${organization.slug}/members/`,\n        {\n          query: {query},\n        }\n      );\n      this.setState({\n        orgMembers: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n\n    return [\n      [\n        'teamMembers',\n        `/teams/${organization.slug}/${params.teamId}/members/`,\n        {},\n        {paginate: true},\n      ],\n    ];\n  }\n\n  addTeamMember = (selection: Item) => {\n    const {organization, params} = this.props;\n    const {orgMembers, teamMembers} = this.state;\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: organization.slug,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = orgMembers.find(member => member.id === selection.value);\n          if (orgMember === undefined) {\n            return;\n          }\n          this.setState({\n            error: false,\n            teamMembers: teamMembers.concat([orgMember as TeamMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  removeTeamMember = (member: Member) => {\n    const {organization, params} = this.props;\n    const {teamMembers} = this.state;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: organization.slug,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMembers: teamMembers.filter(m => m.id !== member.id),\n          });\n          addSuccessMessage(t('Successfully removed member from team.'));\n        },\n        error: () =>\n          addErrorMessage(\n            t('There was an error while trying to remove a member from the team.')\n          ),\n      }\n    );\n  };\n\n  updateTeamMemberRole = (member: Member, newRole: string) => {\n    const {organization} = this.props;\n    const {teamId} = this.props.params;\n    const endpoint = `/organizations/${organization.slug}/members/${member.id}/teams/${teamId}/`;\n\n    this.props.api.request(endpoint, {\n      method: 'PUT',\n      data: {teamRole: newRole},\n      success: data => {\n        const teamMembers: any = [...this.state.teamMembers];\n        const i = teamMembers.findIndex(m => m.id === member.id);\n        teamMembers[i] = {\n          ...member,\n          teamRole: data.teamRole,\n        };\n        this.setState({teamMembers});\n        addSuccessMessage(t('Successfully changed role for team member.'));\n      },\n      error: () => {\n        addErrorMessage(\n          t('There was an error while trying to change the roles for a team member.')\n        );\n      },\n    });\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown(isTeamAdmin: boolean) {\n    const {organization, params, team} = this.props;\n    const {orgMembers} = this.state;\n    const existingMembers = new Set(this.state.teamMembers.map(member => member.id));\n\n    // members can add other members to a team if the `Open Membership` setting is enabled\n    // otherwise, `org:write` or `team:admin` permissions are required\n    const hasOpenMembership = !!organization?.openMembership;\n    const canAddMembers = hasOpenMembership || isTeamAdmin;\n\n    const isDropdownDisabled = team.flags['idp:provisioned'];\n\n    const items = (orgMembers || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => ({\n        searchKey: `${m.name} ${m.email}`,\n        value: m.id,\n        label: (\n          <StyledUserListElement>\n            <StyledAvatar user={m} size={24} className=\"avatar\" />\n            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n          </StyledUserListElement>\n        ),\n      }));\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          to=\"\"\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        closeOnSelect={false}\n        items={items}\n        alignMenu=\"right\"\n        onSelect={\n          canAddMembers\n            ? this.addTeamMember\n            : selection =>\n                openTeamAccessRequestModal({\n                  teamId: params.teamId,\n                  orgId: organization.slug,\n                  memberId: selection.value,\n                })\n        }\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n        disabled={isDropdownDisabled}\n        data-test-id=\"add-member-menu\"\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            isOpen={isOpen}\n            size=\"xs\"\n            data-test-id=\"add-member\"\n            disabled={isDropdownDisabled}\n          >\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  renderPageTextBlock() {\n    const {organization, team} = this.props;\n    const {openMembership} = organization;\n    const isIdpProvisioned = team.flags['idp:provisioned'];\n\n    if (isIdpProvisioned) {\n      return getButtonHelpText(isIdpProvisioned);\n    }\n\n    return openMembership\n      ? t(\n          '\"Open Membership\" is enabled for the organization. Anyone can add members for this team.'\n        )\n      : t(\n          '\"Open Membership\" is disabled for the organization. Org Owner/Manager/Admin, or Team Admins can add members for this team.'\n        );\n  }\n\n  render() {\n    if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {organization, config, team} = this.props;\n    const {teamMembersPageLinks} = this.state;\n    const {access, openMembership} = organization;\n\n    const hasOrgWriteAccess = hasEveryAccess(['org:write'], {organization, team});\n    const hasTeamAdminAccess = hasEveryAccess(['team:admin'], {organization, team});\n    const isTeamAdmin = hasOrgWriteAccess || hasTeamAdminAccess;\n\n    // org:admin is a unique scope that only org owners have\n    const isOrgOwner = access.includes('org:admin');\n\n    return (\n      <Fragment>\n        <TextBlock>{this.renderPageTextBlock()}</TextBlock>\n\n        <PermissionAlert\n          access={openMembership ? ['org:read'] : ['team:write']}\n          team={team}\n        />\n\n        <Panel>\n          <StyledPanelHeader hasButtons>\n            <div>{t('Members')}</div>\n            <div>\n              <TeamRoleColumnLabel />\n            </div>\n            <div style={{textTransform: 'none'}}>{this.renderDropdown(isTeamAdmin)}</div>\n          </StyledPanelHeader>\n          {this.state.teamMembers.length ? (\n            this.state.teamMembers.map(member => {\n              return (\n                <TeamMembersRow\n                  key={member.id}\n                  hasWriteAccess={isTeamAdmin}\n                  isOrgOwner={isOrgOwner}\n                  organization={organization}\n                  team={team}\n                  member={member}\n                  user={config.user}\n                  removeMember={this.removeTeamMember}\n                  updateMemberRole={this.updateTeamMemberRole}\n                />\n              );\n            })\n          ) : (\n            <EmptyMessage icon={<IconUser size=\"xl\" />} size=\"large\">\n              {t('This team has no members')}\n            </EmptyMessage>\n          )}\n        </Panel>\n        <Pagination pageLinks={teamMembersPageLinks} />\n      </Fragment>\n    );\n  }\n}\n\nconst StyledUserListElement = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n`;\n\nconst StyledMembersLabel = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  padding: ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  text-transform: none;\n`;\n\nconst StyledPanelHeader = styled(PanelHeader)`\n  ${GRID_TEMPLATE}\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n","import {t} from 'sentry/locale';\n\nexport function getButtonHelpText(\n  isIdpProvisioned: boolean = false,\n  isPermissionGroup: boolean = false\n) {\n  if (isIdpProvisioned) {\n    return t(\n      \"Membership to this team is managed through your organization's identity provider.\"\n    );\n  }\n\n  if (isPermissionGroup) {\n    return t('Membership to a team with an organization role is managed by org owners.');\n  }\n\n  return undefined;\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n"],"names":["getPadding","_ref","disablePadding","hasButtons","css","space","_styled","target","p","lightText","theme","gray300","gray400","fontSizeSmall","border","panelBorderRadius","backgroundSecondary","RoleSelectControl","roles","disableUnallowed","props","_jsx","SelectControl","options","map","r","value","id","label","name","disabled","allowed","isRetired","details","Details","children","desc","showDividers","displayName","styles","TeamRoleSelect","organization","team","member","onChangeTeamRole","size","orgRoleList","teamRoleList","features","hasTeamRoles","includes","possibleOrgRoles","orgRole","groupOrgRoles","length","push","role","effectiveOrgRole","getEffectiveOrgRole","hasOrgRoleOverwrite","effectiveTeamRole","find","minimumTeamRole","_jsxs","RoleName","IconWrapper","RoleOverwriteIcon","teamRoleId","teamRole","teamRoles","tr","teamSlug","slug","onChange","option","LabelHook","HookOrDefault","hookName","defaultComponent","Fragment","TeamRoleColumnLabel","t","memberOrgRoles","orgRoleMap","reduce","acc","index","sort","a","b","DeprecatedAsyncView","DeprecatedAsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","Tooltip","getOverwriteString","IconInfo","color","RoleOverwritePanelAlert","PanelAlert","orgRoleObj","findIndex","isSelf","teamRoleObj","tct","selfNoun","selfPronoun","article","TeamMembersRow","user","hasWriteAccess","isOrgOwner","removeMember","updateMemberRole","email","TeamRolesPanelItem","IdBadge","avatarSize","useLink","orgId","RoleSelectWrapper","newRole","RemoveButton","hasOrgRoleFromTeam","onClick","canRemoveMember","Button","icon","IconSubtract","isCircled","isIdpProvisioned","flags","isPermissionGroup","buttonHelpText","getButtonHelpText","buttonRemoveText","GRID_TEMPLATE","PanelItem","TeamMembers","constructor","arguments","_defineProperty","debounce","query","setState","dropdownBusy","fetchMembersRequest","async","api","data","requestPromise","orgMembers","_err","addErrorMessage","duration","selection","params","teamMembers","state","debouncedFetchMembersRequest","joinTeam","teamId","memberId","success","orgMember","undefined","error","concat","addSuccessMessage","leaveTeam","filter","m","endpoint","request","method","i","e","getDefaultState","super","componentDidMount","getEndpoints","paginate","renderDropdown","isTeamAdmin","existingMembers","Set","canAddMembers","openMembership","isDropdownDisabled","items","has","searchKey","StyledUserListElement","StyledAvatar","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","to","openInviteMembersModal","source","DropdownAutoComplete","closeOnSelect","alignMenu","onSelect","addTeamMember","openTeamAccessRequestModal","emptyMessage","handleMemberFilterChange","busy","onClose","isOpen","DropdownButton","renderPageTextBlock","LoadingError","onRetry","fetchData","config","teamMembersPageLinks","access","hasOrgWriteAccess","hasEveryAccess","hasTeamAdminAccess","TextBlock","PermissionAlert","Panel","StyledPanelHeader","style","textTransform","removeTeamMember","updateTeamMemberRole","EmptyMessage","IconUser","Pagination","pageLinks","overflowEllipsis","UserAvatar","fontSizeExtraSmall","Link","PanelHeader","withConfig","withApi","withOrganization","permissionAlertText","project","Access","_ref2","hasAccess","Alert","type"],"sourceRoot":""}