{"version":3,"file":"chunks/app_gettingStartedDocs_elixir_elixir_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/gettingStartedDocs/elixir/elixir.tsx"],"sourcesContent":["import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Layout, LayoutProps} from 'sentry/components/onboarding/gettingStartedDoc/layout';\nimport {ModuleProps} from 'sentry/components/onboarding/gettingStartedDoc/sdkDocumentation';\nimport {StepType} from 'sentry/components/onboarding/gettingStartedDoc/step';\nimport {t, tct} from 'sentry/locale';\n\n// Configuration Start\nexport const steps = ({\n  dsn,\n}: {\n  dsn?: string;\n} = {}): LayoutProps['steps'] => [\n  {\n    type: StepType.INSTALL,\n    description: (\n      <p>\n        {tct(\n          'Edit your [mixCode:mix.exs] file to add it as a dependency and add the [sentryCode::sentry] package to your applications:',\n          {sentryCode: <code />, mixCode: <code />}\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'elixir',\n        description: <p>{tct('Install [code:sentry-sdk]:', {code: <code />})}</p>,\n        code: `\ndefp deps do\n  [\n    # ...\n    {:sentry, \"~> 8.0\"},\n    {:jason, \"~> 1.1\"},\n    {:hackney, \"~> 1.8\"},\n    # if you are using plug_cowboy\n    {:plug_cowboy, \"~> 2.3\"}\n  ]\nend\n        `,\n      },\n    ],\n  },\n  {\n    type: StepType.CONFIGURE,\n    description: (\n      <p>\n        {tct(\n          'Setup the application production environment in your [code:config/prod.exs]',\n          {\n            code: <code />,\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'elixir',\n        code: `\nconfig :sentry,\ndsn: \"${dsn}\",\nenvironment_name: :prod,\nenable_source_code_context: true,\nroot_source_code_path: File.cwd!(),\ntags: %{\n  env: \"production\"\n},\nincluded_environments: [:prod]\n        `,\n      },\n      {\n        description: (\n          <Fragment>\n            <p>\n              {tct(\n                'The [environmentNameCode:environment_name] and [includedEnvironmentsCode:included_environments] work together to determine if and when Sentry should record exceptions. The [environmentNameCode:environment_name] is the name of the current environment. In the example above, we have explicitly set the environment to [prodCode::prod] which works well if you are inside an environment specific configuration like [configCode:config/prod.exs].',\n                {\n                  environmentNameCode: <code />,\n                  includedEnvironmentsCode: <code />,\n                  prodCode: <code />,\n                  configCode: <code />,\n                }\n              )}\n            </p>\n            <p>\n              {tct(\n                'An alternative is to use [code:Mix.env] in your general configuration file:',\n                {code: <code />}\n              )}\n            </p>\n          </Fragment>\n        ),\n        configurations: [\n          {\n            language: 'elixir',\n            code: `\nconfig :sentry, dsn: \"${dsn}\",\nincluded_environments: [:prod],\nenvironment_name: Mix.env\n            `,\n          },\n        ],\n      },\n      {\n        description: (\n          <Fragment>\n            <p>\n              {tct(\n                'This will set the environment name to whatever the current Mix environment atom is, but it will only send events if the current environment is [prodCode::prod], since that is the only entry in the [includedEnvironmentsCode:included_environments] key.',\n                {\n                  prodCode: <code />,\n                  includedEnvironmentsCode: <code />,\n                }\n              )}\n            </p>\n            {t(\n              \"You can even rely on more custom determinations of the environment name. It's not uncommon for most applications to have a 'staging' environment. In order to handle this without adding an additional Mix environment, you can set an environment variable that determines the release level.\"\n            )}\n          </Fragment>\n        ),\n        language: 'elixir',\n        code: `\nconfig :sentry, dsn: \"${dsn}\",\nincluded_environments: ~w(production staging),\nenvironment_name: System.get_env(\"RELEASE_LEVEL\") || \"development\"\n        `,\n      },\n      {\n        description: (\n          <Fragment>\n            <p>\n              {tct(\n                \"In this example, we are getting the environment name from the [code:RELEASE_LEVEL] environment variable. If that variable does not exist, it will default to [code:'development']. Now, on our servers, we can set the environment variable appropriately. On our local development machines, exceptions will never be sent, because the default value is not in the list of [code:included_environments].\",\n                {\n                  code: <code />,\n                }\n              )}\n            </p>\n            <p>\n              {tct(\n                'If using an environment with Plug or Phoenix, add the following to [plugRouterCode:Plug.Router] or [phoenixEndpointCode:Phoenix.Endpoint]:',\n                {plugRouterCode: <code />, phoenixEndpointCode: <code />}\n              )}\n            </p>\n          </Fragment>\n        ),\n        language: 'elixir',\n        code: `\n# Phoenix\nuse Sentry.PlugCapture\nuse Phoenix.Endpoint, otp_app: :my_app\n# ...\nplug Plug.Parsers,\n  parsers: [:urlencoded, :multipart, :json],\n  pass: [\"*/*\"],\n  json_decoder: Phoenix.json_library()\nplug Sentry.PlugContext\n# Plug\nuse Plug.Router\nuse Sentry.PlugCapture\n# ...\nplug Plug.Parsers,\n  parsers: [:urlencoded, :multipart, :json],\n  pass: [\"*/*\"],\n  json_decoder: Phoenix.json_library()\nplug Sentry.PlugContext\n        `,\n        additionalInfo: (\n          <p>\n            {tct(\n              '[sentryPlugContextCode:Sentry.PlugContext] gathers the contextual information for errors, and [sentryPlugCaptureCode:Sentry.PlugCapture] captures and sends any errors that occur in the Plug stack. [sentryPlugContextCode:Sentry.PlugContext] should be below [sentryPlugParsersCode:Plug.Parsers] if you are using it.',\n              {\n                sentryPlugCaptureCode: <code />,\n                sentryPlugContextCode: <code />,\n                sentryPlugParsersCode: <code />,\n              }\n            )}\n          </p>\n        ),\n      },\n    ],\n  },\n  {\n    title: t('Capture Crashed Process Exceptions'),\n    description: (\n      <p>\n        {tct(\n          'This library comes with an extension to capture all error messages that the Plug handler might not. This is based on [link:Logger.Backend]. You can add it as a backend when your application starts:',\n          {\n            link: (\n              <ExternalLink href=\"https://hexdocs.pm/logger/Logger.html#module-backends\" />\n            ),\n          }\n        )}\n      </p>\n    ),\n    configurations: [\n      {\n        language: 'elixir',\n        code: `\n# lib/my_app/application.ex\n\ndef start(_type, _args) do\n  Logger.add_backend(Sentry.LoggerBackend)\n        `,\n      },\n    ],\n  },\n  {\n    title: t('Capturing Errors'),\n    description: (\n      <Fragment>\n        {t(\n          'If you use the LoggerBackend and set up the Plug/Phoenix integrations, all errors will bubble up to Sentry.'\n        )}\n        <p>{t('Otherwise, we provide a simple way to capture exceptions manually:')}</p>\n      </Fragment>\n    ),\n    configurations: [\n      {\n        language: 'elixir',\n        code: `\ntry do\n  ThisWillError.really()\nrescue\n  my_exception ->\n    Sentry.capture_exception(my_exception, [stacktrace: __STACKTRACE__, extra: %{extra: information}])\nend\n        `,\n      },\n    ],\n  },\n];\n// Configuration End\n\nexport function GettingStartedWithElixir({dsn, ...props}: ModuleProps) {\n  return <Layout steps={steps({dsn})} {...props} />;\n}\n\nexport default GettingStartedWithElixir;\n"],"names":["steps","dsn","arguments","length","undefined","type","StepType","INSTALL","description","_jsx","children","tct","sentryCode","mixCode","configurations","language","code","CONFIGURE","_jsxs","Fragment","environmentNameCode","includedEnvironmentsCode","prodCode","configCode","t","plugRouterCode","phoenixEndpointCode","additionalInfo","sentryPlugCaptureCode","sentryPlugContextCode","sentryPlugParsersCode","title","link","ExternalLink","href","GettingStartedWithElixir","_ref","props","Layout","displayName"],"sourceRoot":""}