{"version":3,"file":"chunks/app_components_forms_fields_textareaField_tsx-app_views_settings_organizationIntegrations_plu-1003d8.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/fields/textareaField.tsx","webpack:///./app/components/switchButton.tsx","webpack:///./app/views/settings/organizationIntegrations/pluginDeprecationAlert.tsx","webpack:///./app/views/settings/organizationIntegrations/installedPlugin.tsx","webpack:///./app/views/settings/organizationIntegrations/pluginDetailedView.tsx"],"sourcesContent":["import omit from 'lodash/omit';\n\nimport FormField from 'sentry/components/forms/formField';\nimport FormFieldControlState from 'sentry/components/forms/formField/controlState';\nimport FormModel from 'sentry/components/forms/model';\nimport {InputGroup, TextAreaProps} from 'sentry/components/inputGroup';\n\n// XXX(epurkhiser): This is wrong, it should not be inheriting these props\nimport {InputFieldProps} from './inputField';\n\nexport interface TextareaFieldProps\n  extends Omit<InputFieldProps, 'field'>,\n    Pick<TextAreaProps, 'monospace' | 'autosize' | 'rows' | 'maxRows'> {}\n\nfunction TextareaField({\n  monospace,\n  rows,\n  autosize,\n  hideControlState,\n  ...props\n}: TextareaFieldProps) {\n  return (\n    <FormField {...props} hideControlState flexibleControlStateSize>\n      {({\n        children: _children,\n        model,\n        name,\n        ...fieldProps\n      }: {\n        children: React.ReactNode;\n        model: FormModel;\n        name: string;\n      }) => (\n        <InputGroup>\n          <InputGroup.TextArea\n            {...{monospace, rows, autosize, name}}\n            // Do not forward required to `textarea` to avoid default browser behavior\n            {...omit(fieldProps, ['onKeyDown', 'children', 'required'])}\n          />\n          {!hideControlState && (\n            <InputGroup.TrailingItems>\n              <FormFieldControlState model={model} name={name} />\n            </InputGroup.TrailingItems>\n          )}\n        </InputGroup>\n      )}\n    </FormField>\n  );\n}\n\nexport default TextareaField;\n","import {forwardRef} from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  toggle: React.MouseEventHandler<HTMLButtonElement>;\n  className?: string;\n  /**\n   * Toggle color is always active.\n   */\n  forceActiveColor?: boolean;\n  forwardedRef?: React.Ref<HTMLButtonElement>;\n  id?: string;\n  isActive?: boolean;\n  isDisabled?: boolean;\n  isLoading?: boolean;\n  name?: string;\n  size?: 'sm' | 'lg';\n};\n\nfunction Switch({\n  forwardedRef,\n  size = 'sm',\n  isActive,\n  forceActiveColor,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  name,\n  className,\n  ...props\n}: Props) {\n  return (\n    <SwitchButton\n      ref={forwardedRef}\n      id={id}\n      name={name}\n      type=\"button\"\n      className={className}\n      onClick={isDisabled ? undefined : toggle}\n      role=\"checkbox\"\n      aria-checked={isActive}\n      isLoading={isLoading}\n      disabled={isDisabled}\n      isActive={isActive}\n      size={size}\n      data-test-id=\"switch\"\n      {...props}\n    >\n      <Toggle\n        isDisabled={isDisabled}\n        isActive={isActive}\n        forceActiveColor={forceActiveColor}\n        size={size}\n      />\n    </SwitchButton>\n  );\n}\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 4 : 8);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 1 : 3);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) * 0.875 : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => p.theme.border};\n  position: relative;\n  box-shadow: inset ${p => p.theme.dropShadowMedium};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 1.875}px;\n  border-radius: ${getSize}px;\n  transition: border 0.1s, box-shadow 0.1s;\n\n  &[disabled] {\n    cursor: not-allowed;\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    border-color: ${p => p.theme.focusBorder};\n    box-shadow: ${p => p.theme.focusBorder} 0 0 0 1px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p =>\n    p.isActive || p.forceActiveColor ? p.theme.active : p.theme.border};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\n\nexport default forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <Switch {...props} forwardedRef={ref} />\n));\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, PluginWithProjectList} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  organization: Organization;\n  plugin: PluginWithProjectList;\n};\n\ntype State = {};\n\nclass PluginDeprecationAlert extends Component<Props, State> {\n  render() {\n    const {organization, plugin} = this.props;\n\n    // Short-circuit if not deprecated.\n    if (!plugin.deprecationDate) {\n      return <Fragment />;\n    }\n    const resource = plugin.altIsSentryApp ? 'sentry-apps' : 'integrations';\n    const upgradeUrl = `/settings/${organization.slug}/${resource}/${plugin.firstPartyAlternative}/`;\n    const queryParams = `?${\n      plugin.altIsSentryApp ? '' : 'tab=configurations&'\n    }referrer=directory_upgrade_now`;\n    return (\n      <div>\n        <Alert\n          type=\"warning\"\n          showIcon\n          trailingItems={\n            <UpgradeNowButton\n              href={`${upgradeUrl}${queryParams}`}\n              size=\"xs\"\n              onClick={() =>\n                trackIntegrationAnalytics('integrations.resolve_now_clicked', {\n                  integration_type: 'plugin',\n                  integration: plugin.slug,\n                  organization,\n                })\n              }\n            >\n              {t('Upgrade Now')}\n            </UpgradeNowButton>\n          }\n        >\n          {`This integration is being deprecated on ${plugin.deprecationDate}. Please upgrade to avoid any disruption.`}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nconst UpgradeNowButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  float: right;\n`;\n\nexport default PluginDeprecationAlert;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport Switch from 'sentry/components/switchButton';\nimport {IconDelete, IconSettings} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {\n  AvatarProject,\n  Organization,\n  PluginNoProject,\n  PluginProjectItem,\n} from 'sentry/types';\nimport {IntegrationAnalyticsKey} from 'sentry/utils/analytics/integrations';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  onPluginEnableStatusChange: (projectId: string, status: boolean) => void;\n  onResetConfiguration: (projectId: string) => void;\n  organization: Organization;\n  plugin: PluginNoProject;\n  projectItem: PluginProjectItem;\n  trackIntegrationAnalytics: (eventKey: IntegrationAnalyticsKey) => void; // analytics callback\n  className?: string;\n};\n\nexport class InstalledPlugin extends Component<Props> {\n  get projectId() {\n    return this.props.projectItem.projectId;\n  }\n  getConfirmMessage() {\n    return (\n      <Fragment>\n        <Alert type=\"error\" showIcon>\n          {t(\n            'Deleting this installation will disable the integration for this project and remove any configurations.'\n          )}\n        </Alert>\n      </Fragment>\n    );\n  }\n\n  pluginUpdate = async (data: object, method: 'POST' | 'DELETE' = 'POST') => {\n    const {organization, projectItem, plugin} = this.props;\n    // no try/catch so the caller will have to have it\n    await this.props.api.requestPromise(\n      `/projects/${organization.slug}/${projectItem.projectSlug}/plugins/${plugin.id}/`,\n      {\n        method,\n        data,\n      }\n    );\n  };\n\n  updatePluginEnableStatus = async (enabled: boolean) => {\n    if (enabled) {\n      await this.pluginUpdate({enabled});\n    } else {\n      await this.pluginUpdate({}, 'DELETE');\n    }\n  };\n\n  handleReset = async () => {\n    try {\n      addLoadingMessage(t('Removing...'));\n      await this.pluginUpdate({reset: true});\n      addSuccessMessage(t('Configuration was removed'));\n      this.props.onResetConfiguration(this.projectId);\n      this.props.trackIntegrationAnalytics('integrations.uninstall_completed');\n    } catch (_err) {\n      addErrorMessage(t('Unable to remove configuration'));\n    }\n  };\n\n  handleUninstallClick = () => {\n    this.props.trackIntegrationAnalytics('integrations.uninstall_clicked');\n  };\n\n  toggleEnablePlugin = async (projectId: string, status: boolean = true) => {\n    try {\n      addLoadingMessage(t('Enabling...'));\n      await this.updatePluginEnableStatus(status);\n      addSuccessMessage(\n        status ? t('Configuration was enabled.') : t('Configuration was disabled.')\n      );\n      this.props.onPluginEnableStatusChange(projectId, status);\n      this.props.trackIntegrationAnalytics(\n        status ? 'integrations.enabled' : 'integrations.disabled'\n      );\n    } catch (_err) {\n      addErrorMessage(\n        status\n          ? t('Unable to enable configuration.')\n          : t('Unable to disable configuration.')\n      );\n    }\n  };\n\n  get projectForBadge(): AvatarProject {\n    // this function returns the project as needed for the ProjectBadge component\n    const {projectItem} = this.props;\n    return {\n      slug: projectItem.projectSlug,\n      platform: projectItem.projectPlatform ? projectItem.projectPlatform : undefined,\n    };\n  }\n\n  render() {\n    const {className, plugin, organization, projectItem} = this.props;\n    return (\n      <Container data-test-id=\"installed-plugin\">\n        <Access access={['org:integrations']}>\n          {({hasAccess}) => (\n            <IntegrationFlex className={className}>\n              <IntegrationItemBox>\n                <ProjectBadge project={this.projectForBadge} />\n              </IntegrationItemBox>\n              <div>\n                <StyledButton\n                  borderless\n                  icon={<IconSettings />}\n                  disabled={!hasAccess}\n                  to={`/settings/${organization.slug}/projects/${projectItem.projectSlug}/plugins/${plugin.id}/`}\n                  data-test-id=\"integration-configure-button\"\n                >\n                  {t('Configure')}\n                </StyledButton>\n              </div>\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  onConfirming={this.handleUninstallClick}\n                  disabled={!hasAccess}\n                  confirmText=\"Delete Installation\"\n                  onConfirm={() => this.handleReset()}\n                  message={this.getConfirmMessage()}\n                >\n                  <StyledButton\n                    disabled={!hasAccess}\n                    borderless\n                    icon={<IconDelete />}\n                    data-test-id=\"integration-remove-button\"\n                  >\n                    {t('Uninstall')}\n                  </StyledButton>\n                </Confirm>\n              </div>\n              <Switch\n                isActive={projectItem.enabled}\n                toggle={() =>\n                  this.toggleEnablePlugin(projectItem.projectId, !projectItem.enabled)\n                }\n                isDisabled={!hasAccess}\n              />\n            </IntegrationFlex>\n          )}\n        </Access>\n      </Container>\n    );\n  }\n}\n\nexport default withApi(InstalledPlugin);\n\nconst Container = styled('div')`\n  padding: ${space(2)};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  background-color: ${p => p.theme.background};\n\n  &:last-child {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IntegrationFlex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationItemBox = styled('div')`\n  flex: 1 0 fit-content;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  min-width: 0;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport * as modal from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport ContextPickerModal from 'sentry/components/contextPickerModal';\nimport DeprecatedAsyncComponent from 'sentry/components/deprecatedAsyncComponent';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {PluginProjectItem, PluginWithProjectList} from 'sentry/types';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';\nimport InstalledPlugin from './installedPlugin';\nimport PluginDeprecationAlert from './pluginDeprecationAlert';\n\ntype State = {\n  plugins: PluginWithProjectList[];\n};\n\ntype Tab = AbstractIntegrationDetailedView['state']['tab'];\n\nclass PluginDetailedView extends AbstractIntegrationDetailedView<\n  AbstractIntegrationDetailedView['props'],\n  State & AbstractIntegrationDetailedView['state']\n> {\n  getEndpoints(): ReturnType<DeprecatedAsyncComponent['getEndpoints']> {\n    const {organization} = this.props;\n    const {integrationSlug} = this.props.params;\n    return [\n      [\n        'plugins',\n        `/organizations/${organization.slug}/plugins/configs/?plugins=${integrationSlug}`,\n      ],\n    ];\n  }\n\n  get integrationType() {\n    return 'plugin' as const;\n  }\n\n  get plugin() {\n    return this.state.plugins[0];\n  }\n\n  get description() {\n    return this.plugin.description || '';\n  }\n\n  get author() {\n    return this.plugin.author?.name;\n  }\n\n  get resourceLinks() {\n    return this.plugin.resourceLinks || [];\n  }\n\n  get installationStatus() {\n    return this.plugin.projectList.length > 0 ? 'Installed' : 'Not Installed';\n  }\n\n  get integrationName() {\n    return `${this.plugin.name}${this.plugin.isHidden ? ' (Legacy)' : ''}`;\n  }\n\n  get featureData() {\n    return this.plugin.featureDescriptions;\n  }\n\n  handleResetConfiguration = (projectId: string) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n    // remove from array\n    projectList.splice(index, 1);\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handlePluginEnableStatus = (projectId: string, enable: boolean = true) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n\n    // update item in array\n    projectList[index] = {\n      ...projectList[index],\n      enabled: enable,\n    };\n\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handleAddToProject = () => {\n    const plugin = this.plugin;\n    const {organization, router} = this.props;\n    this.trackIntegrationAnalytics('integrations.plugin_add_to_project_clicked');\n    modal.openModal(\n      modalProps => (\n        <ContextPickerModal\n          {...modalProps}\n          nextPath={`/settings/${organization.slug}/projects/:projectId/plugins/${plugin.id}/`}\n          needProject\n          needOrg={false}\n          onFinish={path => {\n            modalProps.closeModal();\n            router.push(normalizeUrl(path));\n          }}\n        />\n      ),\n      {closeEvents: 'escape-key'}\n    );\n  };\n\n  getTabDisplay(tab: Tab) {\n    // we want to show project configurations to make it more clear\n    if (tab === 'configurations') {\n      return 'project configurations';\n    }\n    return 'overview';\n  }\n\n  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {\n    if (userHasAccess) {\n      return (\n        <AddButton\n          data-test-id=\"install-button\"\n          disabled={disabledFromFeatures}\n          onClick={this.handleAddToProject}\n          size=\"sm\"\n          priority=\"primary\"\n        >\n          {t('Add to Project')}\n        </AddButton>\n      );\n    }\n\n    return this.renderRequestIntegrationButton();\n  }\n\n  renderConfigurations() {\n    const plugin = this.plugin;\n    const {organization} = this.props;\n\n    if (plugin.projectList.length) {\n      return (\n        <Fragment>\n          <PluginDeprecationAlert organization={organization} plugin={plugin} />\n          <div>\n            {plugin.projectList.map((projectItem: PluginProjectItem) => (\n              <InstalledPlugin\n                key={projectItem.projectId}\n                organization={organization}\n                plugin={plugin}\n                projectItem={projectItem}\n                onResetConfiguration={this.handleResetConfiguration}\n                onPluginEnableStatusChange={this.handlePluginEnableStatus}\n                trackIntegrationAnalytics={this.trackIntegrationAnalytics}\n              />\n            ))}\n          </div>\n        </Fragment>\n      );\n    }\n    return this.renderEmptyConfigurations();\n  }\n}\n\nconst AddButton = styled(Button)`\n  margin-bottom: ${space(1)};\n`;\n\nexport default withOrganization(PluginDetailedView);\n"],"names":["TextareaField","_ref","monospace","rows","autosize","hideControlState","props","_jsx","FormField","flexibleControlStateSize","children","_ref2","_children","model","name","fieldProps","_jsxs","InputGroup","TextArea","omit","TrailingItems","FormFieldControlState","displayName","Switch","forwardedRef","size","isActive","forceActiveColor","isLoading","isDisabled","toggle","id","className","SwitchButton","ref","type","onClick","undefined","role","disabled","Toggle","getSize","p","getToggleSize","getToggleTop","getTranslateX","_styled","target","theme","border","dropShadowMedium","focusBorder","active","forwardRef","PluginDeprecationAlert","Component","render","organization","plugin","this","deprecationDate","Fragment","resource","altIsSentryApp","upgradeUrl","slug","firstPartyAlternative","queryParams","Alert","showIcon","trailingItems","UpgradeNowButton","href","trackIntegrationAnalytics","integration_type","integration","t","Button","subText","InstalledPlugin","constructor","_this","arguments","_defineProperty","async","data","method","length","projectItem","api","requestPromise","projectSlug","enabled","pluginUpdate","addLoadingMessage","reset","addSuccessMessage","onResetConfiguration","projectId","_err","addErrorMessage","status","updatePluginEnableStatus","onPluginEnableStatusChange","getConfirmMessage","projectForBadge","platform","projectPlatform","Container","Access","access","hasAccess","IntegrationFlex","IntegrationItemBox","ProjectBadge","project","StyledButton","borderless","icon","IconSettings","to","Confirm","priority","onConfirming","handleUninstallClick","confirmText","onConfirm","handleReset","message","IconDelete","toggleEnablePlugin","withApi","space","background","gray300","styles","PluginDetailedView","AbstractIntegrationDetailedView","projectList","slice","index","findIndex","item","splice","setState","plugins","state","enable","router","modal","openModal","modalProps","ContextPickerModal","nextPath","needProject","needOrg","onFinish","path","closeModal","push","normalizeUrl","closeEvents","getEndpoints","integrationSlug","params","integrationType","description","author","resourceLinks","installationStatus","integrationName","isHidden","featureData","featureDescriptions","getTabDisplay","tab","renderTopButton","disabledFromFeatures","userHasAccess","AddButton","handleAddToProject","renderRequestIntegrationButton","renderConfigurations","map","handleResetConfiguration","handlePluginEnableStatus","renderEmptyConfigurations","withOrganization"],"sourceRoot":""}