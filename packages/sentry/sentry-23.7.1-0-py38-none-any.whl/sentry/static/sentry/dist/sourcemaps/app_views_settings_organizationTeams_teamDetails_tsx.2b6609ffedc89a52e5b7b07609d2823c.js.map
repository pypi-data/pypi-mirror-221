{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"wlBA6BA,SAASA,EAAQC,GAUP,IAVQ,SAChBC,EAAQ,UACRC,EAAS,SACTC,EAAQ,MACRC,EAAK,GACLC,EAAE,gBACFC,EAAkB,SAAQ,MAC1BC,GAAQ,EAAK,SACbC,GAAW,KACRC,GACGT,EACN,MAAMU,GAASC,EAAAA,EAAAA,KACTC,EAAYR,EAAQS,EAAAA,MAAST,QAASU,EACtCC,EAA+B,iBAAPV,EAAkB,CAACW,SAAUX,EAAID,MAAOQ,GAAaP,EAC7EY,GAASC,EAAAA,EAAAA,GAAaH,GAEtBI,EAAShB,IAAWc,EAAQV,IAAUG,EAAOP,SAASc,EAAQV,GAEpE,OACEa,EAAAA,EAAAA,IAACC,EAAQ,CACPnB,UAAWoB,IAAW,CAAC,CAAChB,GAAkBa,GAASjB,GACnDM,SAAUA,EAASP,UAEnBmB,EAAAA,EAAAA,IAACG,EAAAA,KAAU,IAAKd,EAAOe,kBAAmBjB,EAAOF,GAAIG,EAAW,GAAKS,EAAOhB,SACzEA,KAIT,CA5BSF,EAAQ0B,YAAA,WA8BjB,UAEMJ,GAAWK,EAAAA,EAAAA,GAAO,KAAI,CAC1BC,kBAAmBC,GAAiB,aAATA,EAAmBX,OAAA,aAD/BS,EAGbG,GACAA,EAAErB,UACD,uBAEOqB,EAAEC,MAAMtB,+EAGLqB,EAAEC,MAAMtB,wCAGtB,I,00BCnDD,SAASuB,EAAW/B,GAAoB,IAAnB,SAACC,GAAgBD,EACpC,MAAMgC,GAAMC,EAAAA,EAAAA,KACNC,GAASC,EAAAA,EAAAA,KACTC,GAAUC,EAAAA,EAAAA,KAAkBC,MAC3BC,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,IACvC,MAACC,EAAK,gBAAEC,IAAmBC,EAAAA,EAAAA,GAAS,CAACC,MAAO,CAACX,EAAOY,UACpDC,EAAOL,EAAMM,MAAKC,IAAA,IAAC,KAACX,GAAKW,EAAA,OAAKX,IAASJ,EAAOY,MAAM,IAgCpDI,EAAe,aAAYd,WAAiBF,EAAOY,UACnDK,EAAiB,EACrB/B,EAAAA,EAAAA,IAACrB,EAAAA,EAAQ,CAASM,GAAK,GAAE6C,YAAsBjD,UAC5CmD,EAAAA,EAAAA,GAAE,YADU,IAGfhC,EAAAA,EAAAA,IAACrB,EAAAA,EAAQ,CAASM,GAAK,GAAE6C,aAAuBjD,UAC7CmD,EAAAA,EAAAA,GAAE,aADU,IAGfhC,EAAAA,EAAAA,IAACrB,EAAAA,EAAQ,CAASM,GAAK,GAAE6C,kBAA4BjD,UAClDmD,EAAAA,EAAAA,GAAE,kBADU,IAGfhC,EAAAA,EAAAA,IAACrB,EAAAA,EAAQ,CAASM,GAAK,GAAE6C,aAAuBjD,UAC7CmD,EAAAA,EAAAA,GAAE,aADU,IAKjB,OAAKT,EAIAI,GASHM,EAAAA,EAAAA,IAAA,OAAApD,SAAA,EACEmB,EAAAA,EAAAA,IAACkC,EAAAA,EAAmB,CAACC,OAAOH,EAAAA,EAAAA,GAAE,gBAAiBhB,QAASA,IACvDW,EAAKS,WACJH,EAAAA,EAAAA,IAAA,OAAApD,SAAA,EACEmB,EAAAA,EAAAA,IAAA,MAAAnB,UACEmB,EAAAA,EAAAA,IAACqC,EAAAA,EAAO,CAACC,YAAU,EAACX,KAAMA,EAAMY,WAAY,QAG9CvC,EAAAA,EAAAA,IAACwC,EAAAA,EAAO,CAACC,YAAU,EAAA5D,SAAEkD,KAEpBW,EAAAA,EAAAA,gBAAe7D,IAAY8D,EAAAA,EAAAA,cAAkB9D,EAAU,CAAC8C,SAAS,SAGpE3B,EAAAA,EAAAA,IAAC4C,EAAAA,GAAK,CAACC,KAAK,UAAShE,UACnBoD,EAAAA,EAAAA,IAACa,EAAoB,CAAAjE,SAAA,EACnBmB,EAAAA,EAAAA,IAAA,OAAAnB,UACGkE,EAAAA,EAAAA,IAAI,iDAAkD,CACrDC,UAAUhD,EAAAA,EAAAA,IAAA,UAAAnB,SAAU,IAAG8C,EAAKT,cAGhClB,EAAAA,EAAAA,IAACiD,EAAAA,GAAM,CACL7D,SAAU+B,GAAcQ,EAAKuB,UAC7BC,KAAK,KACLC,QAASA,KAAMC,OAlFEL,EAkFkBrB,EAAKT,KAjFlDE,GAAc,QAEdkC,EAAAA,EAAAA,IACE1C,EACA,CACE2C,MAAOvC,EACPU,OAAQsB,GAEV,CACEQ,QAASA,MACPC,EAAAA,EAAAA,KACEV,EAAAA,EAAAA,IAAI,sCAAuC,CACzCpB,KAAO,IAAGqB,OAGd5B,GAAc,EAAM,EAEtBsC,MAAOA,MACLC,EAAAA,EAAAA,KACEZ,EAAAA,EAAAA,IAAI,qCAAsC,CACxCpB,KAAO,IAAGqB,OAGd5B,GAAc,EAAM,IAxB5B,IAA6B4B,CAkF6B,EAAAnE,SAE7C8C,EAAKuB,WAAYlB,EAAAA,EAAAA,GAAE,oBAAqBA,EAAAA,EAAAA,GAAE,6BAhCnDhC,EAAAA,EAAAA,IAAC4C,EAAAA,GAAK,CAACC,KAAK,UAAShE,UACnBmB,EAAAA,EAAAA,IAAA,OAAAnB,UAAMmD,EAAAA,EAAAA,GAAE,mEANLhC,EAAAA,EAAAA,IAAC4D,EAAAA,EAAgB,GA4C5B,CAnGSjD,EAAWN,YAAA,cAqGpB,UAEMyC,GAAuBxC,EAAAA,EAAAA,GAAO,MAAK,CAAAT,OAAA,aAAZS,CAAa,CAAAuD,KAAA,UAAAC,OAAA,iE","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/views/settings/organizationTeams/teamDetails.tsx"],"sourcesContent":["import {Link as RouterLink} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\nimport useRouter from 'sentry/utils/useRouter';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = LinkProps & {\n  /**\n   * Link target. We don't want to expose the ToLocationFunction on this component.\n   */\n  to: LocationDescriptor;\n  /**\n   * The class to apply when the link is 'active'\n   */\n  activeClassName?: string;\n  disabled?: boolean;\n  index?: boolean;\n  /**\n   * Should be should be supplied by the parent component\n   */\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  query?: string;\n};\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const router = useRouter();\n  const queryData = query ? qs.parse(query) : undefined;\n  const targetLocation = typeof to === 'string' ? {pathname: to, query: queryData} : to;\n  const target = normalizeUrl(targetLocation);\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : target}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default ListLink;\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {cloneElement, isValidElement, useState} from 'react';\nimport type {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {joinTeam} from 'sentry/actionCreators/teams';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport ListLink from 'sentry/components/links/listLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useParams} from 'sentry/utils/useParams';\nimport {useTeams} from 'sentry/utils/useTeams';\n\ntype Props = {\n  children: React.ReactNode;\n} & RouteComponentProps<{teamId: string}, {}>;\n\nfunction TeamDetails({children}: Props) {\n  const api = useApi();\n  const params = useParams();\n  const orgSlug = useOrganization().slug;\n  const [requesting, setRequesting] = useState(false);\n  const {teams, initiallyLoaded} = useTeams({slugs: [params.teamId]});\n  const team = teams.find(({slug}) => slug === params.teamId);\n\n  function handleRequestAccess(teamSlug: string) {\n    setRequesting(true);\n\n    joinTeam(\n      api,\n      {\n        orgId: orgSlug,\n        teamId: teamSlug,\n      },\n      {\n        success: () => {\n          addSuccessMessage(\n            tct('You have requested access to [team]', {\n              team: `#${teamSlug}`,\n            })\n          );\n          setRequesting(false);\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to request access to [team]', {\n              team: `#${teamSlug}`,\n            })\n          );\n          setRequesting(false);\n        },\n      }\n    );\n  }\n\n  const routePrefix = `/settings/${orgSlug}/teams/${params.teamId}/`;\n  const navigationTabs = [\n    <ListLink key={0} to={`${routePrefix}members/`}>\n      {t('Members')}\n    </ListLink>,\n    <ListLink key={1} to={`${routePrefix}projects/`}>\n      {t('Projects')}\n    </ListLink>,\n    <ListLink key={2} to={`${routePrefix}notifications/`}>\n      {t('Notifications')}\n    </ListLink>,\n    <ListLink key={3} to={`${routePrefix}settings/`}>\n      {t('Settings')}\n    </ListLink>,\n  ];\n\n  if (!initiallyLoaded) {\n    return <LoadingIndicator />;\n  }\n\n  if (!team) {\n    return (\n      <Alert type=\"warning\">\n        <div>{t('This team does not exist, or you do not have access to it.')}</div>\n      </Alert>\n    );\n  }\n\n  return (\n    <div>\n      <SentryDocumentTitle title={t('Team Details')} orgSlug={orgSlug} />\n      {team.hasAccess ? (\n        <div>\n          <h3>\n            <IdBadge hideAvatar team={team} avatarSize={36} />\n          </h3>\n\n          <NavTabs underlined>{navigationTabs}</NavTabs>\n\n          {isValidElement(children) ? cloneElement<any>(children, {team}) : null}\n        </div>\n      ) : (\n        <Alert type=\"warning\">\n          <RequestAccessWrapper>\n            <div>\n              {tct('You do not have access to the [teamSlug] team.', {\n                teamSlug: <strong>{`#${team.slug}`}</strong>,\n              })}\n            </div>\n            <Button\n              disabled={requesting || team.isPending}\n              size=\"sm\"\n              onClick={() => handleRequestAccess(team.slug)}\n            >\n              {team.isPending ? t('Request Pending') : t('Request Access')}\n            </Button>\n          </RequestAccessWrapper>\n        </Alert>\n      )}\n    </div>\n  );\n}\n\nexport default TeamDetails;\n\nconst RequestAccessWrapper = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n"],"names":["ListLink","_ref","children","className","isActive","query","to","activeClassName","index","disabled","props","router","useRouter","queryData","qs","undefined","targetLocation","pathname","target","normalizeUrl","active","_jsx","StyledLi","classNames","RouterLink","onlyActiveOnIndex","displayName","_styled","shouldForwardProp","prop","p","theme","TeamDetails","api","useApi","params","useParams","orgSlug","useOrganization","slug","requesting","setRequesting","useState","teams","initiallyLoaded","useTeams","slugs","teamId","team","find","_ref2","routePrefix","navigationTabs","t","_jsxs","SentryDocumentTitle","title","hasAccess","IdBadge","hideAvatar","avatarSize","NavTabs","underlined","isValidElement","cloneElement","Alert","type","RequestAccessWrapper","tct","teamSlug","Button","isPending","size","onClick","handleRequestAccess","joinTeam","orgId","success","addSuccessMessage","error","addErrorMessage","LoadingIndicator","name","styles"],"sourceRoot":""}