{"version":3,"file":"chunks/app_views_settings_project_projectTeams_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/components/teamSelect/teamSelectForProject.tsx","webpack:///./app/views/settings/project/projectTeams.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {TeamBadge} from 'sentry/components/idBadge/teamBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Panel from 'sentry/components/panels/panel';\nimport PanelBody from 'sentry/components/panels/panelBody';\nimport PanelHeader from 'sentry/components/panels/panelHeader';\nimport PanelItem from 'sentry/components/panels/panelItem';\nimport {IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project, Team} from 'sentry/types';\nimport {useTeams} from 'sentry/utils/useTeams';\n\nimport {DropdownAddTeam, TeamSelectProps} from './utils';\n\ntype Props = TeamSelectProps & {\n  canCreateTeam: boolean;\n  project: Project;\n  /**\n   * Used when showing Teams for a Project\n   */\n  selectedTeams: Team[];\n};\n\nfunction TeamSelect({\n  disabled,\n  canCreateTeam,\n  project,\n  selectedTeams,\n  organization,\n  onAddTeam,\n  onRemoveTeam,\n  onCreateTeam,\n}: Props) {\n  const renderBody = () => {\n    const numTeams = selectedTeams.length;\n    if (numTeams === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n\n    // If the user is not a team-admin in any parent teams of this project, they will\n    // not be able to edit the configuration. Warn the user if this is their last team\n    // where they have team-admin role.\n    const isUserLastTeamWrite =\n      selectedTeams.reduce(\n        (count, team) => (team.access.includes('team:write') ? count + 1 : count),\n        0\n      ) === 1;\n    const isOnlyTeam = numTeams === 1;\n\n    const confirmMessage = isUserLastTeamWrite\n      ? t(\n          \"This is the last team that grants Team Admin access to you for this project. After removing this team, you will not be able to edit this project's configuration.\"\n        )\n      : isOnlyTeam\n      ? t(\n          'This is the last team with access to this project. After removing this team, only organization owners and managers will be able to access the project pages.'\n        )\n      : null;\n\n    return (\n      <React.Fragment>\n        {selectedTeams.map(team => (\n          <TeamRow\n            key={team.slug}\n            disabled={disabled || !team.access.includes('team:write')}\n            confirmMessage={confirmMessage}\n            organization={organization}\n            team={team}\n            onRemoveTeam={slug => onRemoveTeam(slug)}\n          />\n        ))}\n      </React.Fragment>\n    );\n  };\n\n  const {teams, onSearch, fetching: isLoadingTeams} = useTeams();\n\n  return (\n    <Panel>\n      <PanelHeader hasButtons>\n        {t('Team')}\n\n        <DropdownAddTeam\n          disabled={disabled}\n          isLoadingTeams={isLoadingTeams}\n          isAddingTeamToProject\n          canCreateTeam={canCreateTeam}\n          onSearch={onSearch}\n          onSelect={onAddTeam}\n          onCreateTeam={onCreateTeam}\n          organization={organization}\n          selectedTeams={selectedTeams.map(tm => tm.slug)}\n          teams={teams}\n          project={project}\n        />\n      </PanelHeader>\n\n      <PanelBody>{isLoadingTeams ? <LoadingIndicator /> : renderBody()}</PanelBody>\n    </Panel>\n  );\n}\n\nfunction TeamRow({\n  organization,\n  team,\n  onRemoveTeam,\n  disabled,\n  confirmMessage,\n}: {\n  confirmMessage: string | null;\n  disabled: boolean;\n  onRemoveTeam: Props['onRemoveTeam'];\n  organization: Organization;\n  team: Team;\n}) {\n  return (\n    <TeamPanelItem data-test-id=\"team-row-for-project\">\n      <TeamPanelItemLeft>\n        <Link to={`/settings/${organization.slug}/teams/${team.slug}/`}>\n          <TeamBadge team={team} />\n        </Link>\n      </TeamPanelItemLeft>\n\n      <Confirm\n        message={confirmMessage}\n        bypass={!confirmMessage}\n        onConfirm={() => onRemoveTeam(team.slug)}\n        disabled={disabled}\n      >\n        <Button size=\"xs\" icon={<IconSubtract isCircled size=\"xs\" />} disabled={disabled}>\n          {t('Remove')}\n        </Button>\n      </Confirm>\n    </TeamPanelItem>\n  );\n}\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst TeamPanelItemLeft = styled('div')`\n  flex-grow: 4;\n`;\n\nexport default TeamSelect;\n","import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport {addTeamToProject, removeTeamFromProject} from 'sentry/actionCreators/projects';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport {t, tct} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {Organization, Project, Team} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport DeprecatedAsyncView from 'sentry/views/deprecatedAsyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TeamSelectForProject from 'sentry/views/settings/components/teamSelect/teamSelectForProject';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<{projectId: string}, {}>;\n\ntype State = {\n  projectTeams: null | Team[];\n} & DeprecatedAsyncView['state'];\n\nclass ProjectTeams extends DeprecatedAsyncView<Props, State> {\n  getEndpoints(): ReturnType<DeprecatedAsyncView['getEndpoints']> {\n    const {organization, project} = this.props;\n    return [['projectTeams', `/projects/${organization.slug}/${project.slug}/teams/`]];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Project Teams'), projectId, false);\n  }\n\n  canCreateTeam = () => {\n    const access = this.props.organization.access;\n    return (\n      access.includes('org:write') &&\n      access.includes('team:write') &&\n      access.includes('project:write')\n    );\n  };\n\n  handleRemove = (teamSlug: Team['slug']) => {\n    if (this.state.loading) {\n      return;\n    }\n\n    const {organization, project} = this.props;\n\n    removeTeamFromProject(this.api, organization.slug, project.slug, teamSlug)\n      .then(() => this.handleRemovedTeam(teamSlug))\n      .catch(() => {\n        addErrorMessage(t('Could not remove the %s team', teamSlug));\n        this.setState({loading: false});\n      });\n  };\n\n  handleRemovedTeam = (teamSlug: Team['slug']) => {\n    this.setState(prevState => ({\n      projectTeams: [\n        ...(prevState.projectTeams || []).filter(team => team.slug !== teamSlug),\n      ],\n    }));\n  };\n\n  handleAddedTeam = (team: Team) => {\n    this.setState(prevState => ({\n      projectTeams: [...(prevState.projectTeams || []), team],\n    }));\n  };\n\n  handleAdd = (teamSlug: string) => {\n    if (this.state.loading) {\n      return;\n    }\n\n    const team = TeamStore.getBySlug(teamSlug);\n    if (!team) {\n      addErrorMessage(tct('Unable to find \"[teamSlug]\"', {teamSlug}));\n      this.setState({error: true});\n      return;\n    }\n\n    const {organization, project} = this.props;\n\n    addTeamToProject(this.api, organization.slug, project.slug, team).then(\n      () => {\n        this.handleAddedTeam(team);\n      },\n      () => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      }\n    );\n  };\n\n  handleCreateTeam = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const {project, organization} = this.props;\n\n    if (!this.canCreateTeam()) {\n      return;\n    }\n\n    openCreateTeamModal({\n      project,\n      organization,\n      onClose: data => {\n        addTeamToProject(this.api, organization.slug, project.slug, data).then(\n          this.remountComponent,\n          this.remountComponent\n        );\n      },\n    });\n  };\n\n  renderBody() {\n    const {project, organization} = this.props;\n    const {projectTeams} = this.state;\n\n    const canCreateTeam = this.canCreateTeam();\n    const hasWriteAccess = hasEveryAccess(['project:write'], {organization, project});\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Project Teams for %s', project.slug)} />\n        <TextBlock>\n          {t(\n            'These teams and their members have access to this project. They can be assigned to issues and alerts created in it.'\n          )}\n        </TextBlock>\n        <TextBlock>\n          {t(\n            'Team Admins can grant other teams access to this project. However, they cannot revoke access unless they are admins for the other teams too.'\n          )}\n        </TextBlock>\n        <PermissionAlert project={project} />\n\n        <TeamSelectForProject\n          disabled={!hasWriteAccess}\n          canCreateTeam={canCreateTeam}\n          organization={organization}\n          project={project}\n          selectedTeams={projectTeams ?? []}\n          onAddTeam={this.handleAdd}\n          onRemoveTeam={this.handleRemove}\n          onCreateTeam={(team: Team) => {\n            addTeamToProject(this.api, organization.slug, project.slug, team).then(\n              this.remountComponent,\n              this.remountComponent\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ProjectTeams;\n"],"names":["routeName","orgSlug","projectSlug","arguments","length","undefined","tmplBase","tmpl","permissionAlertText","t","PermissionAlert","_ref","access","project","team","props","_jsx","Access","children","_ref2","hasAccess","Alert","type","displayName","TeamSelect","disabled","canCreateTeam","selectedTeams","organization","onAddTeam","onRemoveTeam","onCreateTeam","teams","onSearch","fetching","isLoadingTeams","useTeams","_jsxs","Panel","PanelHeader","hasButtons","DropdownAddTeam","isAddingTeamToProject","onSelect","map","tm","slug","PanelBody","LoadingIndicator","renderBody","numTeams","EmptyMessage","isOnlyTeam","confirmMessage","reduce","count","includes","React","TeamRow","TeamPanelItem","TeamPanelItemLeft","Link","to","TeamBadge","Confirm","message","bypass","onConfirm","Button","size","icon","IconSubtract","isCircled","_styled","PanelItem","target","space","name","styles","ProjectTeams","DeprecatedAsyncView","constructor","_defineProperty","this","teamSlug","state","loading","removeTeamFromProject","api","then","handleRemovedTeam","catch","addErrorMessage","setState","prevState","projectTeams","filter","TeamStore","getBySlug","tct","error","addTeamToProject","handleAddedTeam","e","stopPropagation","preventDefault","openCreateTeamModal","onClose","data","remountComponent","getEndpoints","getTitle","projectId","params","routeTitleGen","hasWriteAccess","hasEveryAccess","SettingsPageHeader","title","TextBlock","TeamSelectForProject","handleAdd","handleRemove"],"sourceRoot":""}