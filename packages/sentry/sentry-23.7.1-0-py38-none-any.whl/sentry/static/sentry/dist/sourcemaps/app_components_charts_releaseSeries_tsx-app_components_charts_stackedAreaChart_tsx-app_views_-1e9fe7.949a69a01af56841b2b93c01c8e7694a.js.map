{"version":3,"file":"chunks/app_components_charts_releaseSeries_tsx-app_components_charts_stackedAreaChart_tsx-app_views_-1e9fe7.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/releaseSeries.tsx","webpack:///./app/components/charts/stackedAreaChart.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/performance/onboarding.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport {Theme, withTheme} from '@emotion/react';\nimport {Query} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport partition from 'lodash/partition';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {t} from 'sentry/locale';\nimport {DateString, Organization} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {escape} from 'sentry/utils';\nimport {getFormattedDate, getUtcDateString} from 'sentry/utils/dates';\nimport {formatVersion} from 'sentry/utils/formatters';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\ntype ReleaseMetaBasic = {\n  date: string;\n  version: string;\n};\n\ntype ReleaseConditions = {\n  end: DateString;\n  environment: Readonly<string[]>;\n  project: Readonly<number[]>;\n  start: DateString;\n  cursor?: string;\n  query?: string;\n  statsPeriod?: string | null;\n};\n\n// This is not an exported action/function because releases list uses AsyncComponent\n// and this is not re-used anywhere else afaict\nfunction getOrganizationReleases(\n  api: Client,\n  organization: Organization,\n  conditions: ReleaseConditions\n) {\n  const query = {};\n  Object.keys(conditions).forEach(key => {\n    let value = conditions[key];\n    if (value && (key === 'start' || key === 'end')) {\n      value = getUtcDateString(value);\n    }\n    if (value) {\n      query[key] = value;\n    }\n  });\n  api.clear();\n  return api.requestPromise(`/organizations/${organization.slug}/releases/stats/`, {\n    includeAllArgs: true,\n    method: 'GET',\n    query,\n  }) as Promise<[ReleaseMetaBasic[], any, ResponseMeta]>;\n}\n\nexport interface ReleaseSeriesProps extends WithRouterProps {\n  api: Client;\n  children: (s: State) => React.ReactNode;\n  end: DateString;\n  environments: Readonly<string[]>;\n  organization: Organization;\n  projects: Readonly<number[]>;\n  start: DateString;\n  theme: Theme;\n  emphasizeReleases?: string[];\n  memoized?: boolean;\n  period?: string | null;\n  preserveQueryParams?: boolean;\n  query?: string;\n  queryExtra?: Query;\n  releases?: ReleaseMetaBasic[] | null;\n  tooltip?: Exclude<Parameters<typeof MarkLine>[0], undefined>['tooltip'];\n  utc?: boolean | null;\n}\n\ntype State = {\n  releaseSeries: Series[];\n  releases: ReleaseMetaBasic[] | null;\n};\n\nclass ReleaseSeries extends Component<ReleaseSeriesProps, State> {\n  state: State = {\n    releases: null,\n    releaseSeries: [],\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    const {releases} = this.props;\n\n    if (releases) {\n      // No need to fetch releases if passed in from props\n      this.setReleasesWithSeries(releases);\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      !isEqual(prevProps.projects, this.props.projects) ||\n      !isEqual(prevProps.environments, this.props.environments) ||\n      !isEqual(prevProps.start, this.props.start) ||\n      !isEqual(prevProps.end, this.props.end) ||\n      !isEqual(prevProps.period, this.props.period) ||\n      !isEqual(prevProps.query, this.props.query)\n    ) {\n      this.fetchData();\n    } else if (!isEqual(prevProps.emphasizeReleases, this.props.emphasizeReleases)) {\n      this.setReleasesWithSeries(this.state.releases);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.props.api.clear();\n  }\n\n  _isMounted: boolean = false;\n\n  getOrganizationReleasesMemoized = memoize(\n    (api: Client, organization: Organization, conditions: ReleaseConditions) =>\n      getOrganizationReleases(api, organization, conditions),\n    (_, __, conditions) =>\n      Object.values(conditions)\n        .map(val => JSON.stringify(val))\n        .join('-')\n  );\n\n  async fetchData() {\n    const {\n      api,\n      organization,\n      projects,\n      environments,\n      period,\n      start,\n      end,\n      memoized,\n      query,\n    } = this.props;\n    const conditions: ReleaseConditions = {\n      start,\n      end,\n      project: projects,\n      environment: environments,\n      statsPeriod: period,\n      query,\n    };\n    let hasMore = true;\n    const releases: ReleaseMetaBasic[] = [];\n    while (hasMore) {\n      try {\n        const getReleases = memoized\n          ? this.getOrganizationReleasesMemoized\n          : getOrganizationReleases;\n        const [newReleases, , resp] = await getReleases(api, organization, conditions);\n        releases.push(...newReleases);\n        if (this._isMounted) {\n          this.setReleasesWithSeries(releases);\n        }\n\n        const pageLinks = resp?.getResponseHeader('Link');\n        if (pageLinks) {\n          const paginationObject = parseLinkHeader(pageLinks);\n          hasMore = paginationObject?.next?.results ?? false;\n          conditions.cursor = paginationObject.next.cursor;\n        } else {\n          hasMore = false;\n        }\n      } catch {\n        addErrorMessage(t('Error fetching releases'));\n        hasMore = false;\n      }\n    }\n  }\n\n  setReleasesWithSeries(releases) {\n    const {emphasizeReleases = []} = this.props;\n    const releaseSeries: Series[] = [];\n\n    if (emphasizeReleases.length) {\n      const [unemphasizedReleases, emphasizedReleases] = partition(\n        releases,\n        release => !emphasizeReleases.includes(release.version)\n      );\n      if (unemphasizedReleases.length) {\n        releaseSeries.push(this.getReleaseSeries(unemphasizedReleases, {type: 'dotted'}));\n      }\n      if (emphasizedReleases.length) {\n        releaseSeries.push(\n          this.getReleaseSeries(emphasizedReleases, {\n            opacity: 0.8,\n          })\n        );\n      }\n    } else {\n      releaseSeries.push(this.getReleaseSeries(releases));\n    }\n\n    this.setState({\n      releases,\n      releaseSeries,\n    });\n  }\n\n  getReleaseSeries = (releases, lineStyle = {}) => {\n    const {\n      organization,\n      router,\n      tooltip,\n      environments,\n      start,\n      end,\n      period,\n      preserveQueryParams,\n      queryExtra,\n      theme,\n    } = this.props;\n\n    const query = {...queryExtra};\n    if (organization.features.includes('global-views')) {\n      query.project = router.location.query.project;\n    }\n    if (preserveQueryParams) {\n      query.environment = [...environments];\n      query.start = start ? getUtcDateString(start) : undefined;\n      query.end = end ? getUtcDateString(end) : undefined;\n      query.statsPeriod = period || undefined;\n    }\n\n    const markLine = MarkLine({\n      animation: false,\n      lineStyle: {\n        color: theme.purple300,\n        opacity: 0.3,\n        type: 'solid',\n        ...lineStyle,\n      },\n      label: {\n        show: false,\n      },\n      data: releases.map(release => ({\n        xAxis: +new Date(release.date),\n        name: formatVersion(release.version, true),\n        value: formatVersion(release.version, true),\n        onClick: () => {\n          router.push({\n            pathname: `/organizations/${organization.slug}/releases/${release.version}/`,\n            query,\n          });\n        },\n        label: {\n          formatter: () => formatVersion(release.version, true),\n        },\n      })),\n      tooltip: tooltip || {\n        trigger: 'item',\n        formatter: ({data}: any) => {\n          // Should only happen when navigating pages\n          if (!data) {\n            return '';\n          }\n          // XXX using this.props here as this function does not get re-run\n          // unless projects are changed. Using a closure variable would result\n          // in stale values.\n          const time = getFormattedDate(data.value, 'MMM D, YYYY LT', {\n            local: !this.props.utc,\n          });\n          const version = escape(formatVersion(data.name, true));\n          return [\n            '<div class=\"tooltip-series\">',\n            `<div><span class=\"tooltip-label\"><strong>${t(\n              'Release'\n            )}</strong></span> ${version}</div>`,\n            '</div>',\n            '<div class=\"tooltip-footer\">',\n            time,\n            '</div>',\n            '</div>',\n            '<div class=\"tooltip-arrow\"></div>',\n          ].join('');\n        },\n      },\n    });\n\n    return {\n      seriesName: 'Releases',\n      color: theme.purple200,\n      data: [],\n      markLine,\n    };\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children({\n      releases: this.state.releases,\n      releaseSeries: this.state.releaseSeries,\n    });\n  }\n}\n\nexport default withSentryRouter(withOrganization(withApi(withTheme(ReleaseSeries))));\n","import {Component} from 'react';\n\nimport {AreaChart, AreaChartProps} from 'sentry/components/charts/areaChart';\n\nclass StackedAreaChart extends Component<AreaChartProps> {\n  render() {\n    return <AreaChart tooltip={{filter: val => val > 0}} {...this.props} stacked />;\n  }\n}\n\nexport default StackedAreaChart;\n","import styled from '@emotion/styled';\n\nimport Panel from 'sentry/components/panels/panel';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n  noCenter?: boolean;\n}\n\nfunction OnboardingPanel({image, noCenter, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image && !noCenter}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  min-width: 0;\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  min-width: 150px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/performance-empty-state.svg';\nimport tourAlert from 'sentry-images/spot/performance-tour-alert.svg';\nimport tourCorrelate from 'sentry-images/spot/performance-tour-correlate.svg';\nimport tourMetrics from 'sentry-images/spot/performance-tour-metrics.svg';\nimport tourTrace from 'sentry-images/spot/performance-tour-trace.svg';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport FeatureTourModal, {\n  TourImage,\n  TourStep,\n  TourText,\n} from 'sentry/components/modals/featureTourModal';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {filterProjects} from 'sentry/components/performanceOnboarding/utils';\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport {withPerformanceOnboarding} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useApi from 'sentry/utils/useApi';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useProjects from 'sentry/utils/useProjects';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nconst performanceSetupUrl =\n  'https://docs.sentry.io/performance-monitoring/getting-started/';\n\nconst docsLink = (\n  <Button external href={performanceSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const PERFORMANCE_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Track Application Metrics'),\n    image: <TourImage src={tourMetrics} />,\n    body: (\n      <TourText>\n        {t(\n          'Monitor your slowest pageloads and APIs to see which users are having the worst time.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Correlate Errors and Performance'),\n    image: <TourImage src={tourCorrelate} />,\n    body: (\n      <TourText>\n        {t(\n          'See what errors occurred within a transaction and the impact of those errors.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Watch and Alert'),\n    image: <TourImage src={tourAlert} />,\n    body: (\n      <TourText>\n        {t(\n          'Highlight mission-critical pages and APIs and set latency alerts to notify you before things go wrong.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Trace Across Systems'),\n    image: <TourImage src={tourTrace} />,\n    body: (\n      <TourText>\n        {t(\n          \"Follow a trace from a user's session and drill down to identify any bottlenecks that occur.\"\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nfunction Onboarding({organization, project}: Props) {\n  const api = useApi();\n  const {projects} = useProjects();\n  const location = useLocation();\n\n  const {projectsForOnboarding} = filterProjects(projects);\n\n  const showOnboardingChecklist = organization.features?.includes(\n    'performance-onboarding-checklist'\n  );\n\n  useEffect(() => {\n    if (\n      showOnboardingChecklist &&\n      location.hash === '#performance-sidequest' &&\n      projectsForOnboarding.some(p => p.id === project.id)\n    ) {\n      SidebarPanelStore.activatePanel(SidebarPanelKey.PERFORMANCE_ONBOARDING);\n    }\n  }, [location.hash, projectsForOnboarding, project.id, showOnboardingChecklist]);\n\n  function handleAdvance(step: number, duration: number) {\n    trackAnalytics('performance_views.tour.advance', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  function handleClose(step: number, duration: number) {\n    trackAnalytics('performance_views.tour.close', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  const currentPlatform = project.platform;\n  const hasPerformanceOnboarding = currentPlatform\n    ? withPerformanceOnboarding.has(currentPlatform)\n    : false;\n\n  let setupButton = (\n    <Button\n      priority=\"primary\"\n      href=\"https://docs.sentry.io/performance-monitoring/getting-started/\"\n      external\n    >\n      {t('Start Setup')}\n    </Button>\n  );\n\n  if (hasPerformanceOnboarding && showOnboardingChecklist) {\n    setupButton = (\n      <Button\n        priority=\"primary\"\n        onClick={event => {\n          event.preventDefault();\n          window.location.hash = 'performance-sidequest';\n          SidebarPanelStore.activatePanel(SidebarPanelKey.PERFORMANCE_ONBOARDING);\n        }}\n      >\n        {t('Start Checklist')}\n      </Button>\n    );\n  }\n\n  return (\n    <OnboardingPanel image={<PerfImage src={emptyStateImg} />}>\n      <h3>{t('Pinpoint problems')}</h3>\n      <p>\n        {t(\n          'Something seem slow? Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        {setupButton}\n        <Button\n          data-test-id=\"create-sample-transaction-btn\"\n          onClick={async () => {\n            trackAnalytics('performance_views.create_sample_transaction', {\n              platform: project.platform,\n              organization,\n            });\n            addLoadingMessage(t('Processing sample event...'), {\n              duration: 15000,\n            });\n            const url = `/projects/${organization.slug}/${project.slug}/create-sample-transaction/`;\n            try {\n              const eventData = await api.requestPromise(url, {method: 'POST'});\n              browserHistory.push(\n                normalizeUrl(\n                  `/organizations/${organization.slug}/performance/${project.slug}:${eventData.eventID}/`\n                )\n              );\n              clearIndicators();\n            } catch (error) {\n              Sentry.withScope(scope => {\n                scope.setExtra('error', error);\n                Sentry.captureException(new Error('Failed to create sample event'));\n              });\n              clearIndicators();\n              addErrorMessage(t('Failed to create a new sample event'));\n              return;\n            }\n          }}\n        >\n          {t('View Sample Transaction')}\n        </Button>\n      </ButtonList>\n      <FeatureTourModal\n        steps={PERFORMANCE_TOUR_STEPS}\n        onAdvance={handleAdvance}\n        onCloseModal={handleClose}\n        doneUrl={performanceSetupUrl}\n        doneText={t('Start Setup')}\n      >\n        {({showModal}) => (\n          <Button\n            priority=\"link\"\n            onClick={() => {\n              trackAnalytics('performance_views.tour.start', {organization});\n              showModal();\n            }}\n          >\n            {t('Take a Tour')}\n          </Button>\n        )}\n      </FeatureTourModal>\n    </OnboardingPanel>\n  );\n}\n\nconst PerfImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    max-width: unset;\n    user-select: none;\n    position: absolute;\n    top: 75px;\n    bottom: 0;\n    width: 450px;\n    margin-top: auto;\n    margin-bottom: auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 480px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 600px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n  margin-bottom: 16px;\n`;\n\nexport default Onboarding;\n"],"names":["getOrganizationReleases","api","organization","conditions","query","Object","keys","forEach","key","value","getUtcDateString","clear","requestPromise","slug","includeAllArgs","method","ReleaseSeries","Component","constructor","_this","arguments","this","_defineProperty","releases","releaseSeries","memoize","_","__","values","map","val","JSON","stringify","join","lineStyle","length","undefined","router","tooltip","environments","start","end","period","preserveQueryParams","queryExtra","theme","props","features","includes","project","location","environment","statsPeriod","markLine","MarkLine","animation","color","purple300","opacity","type","label","show","data","release","xAxis","Date","date","name","formatVersion","version","onClick","push","pathname","formatter","trigger","_ref","time","getFormattedDate","local","utc","escape","t","seriesName","purple200","componentDidMount","_isMounted","setReleasesWithSeries","fetchData","componentDidUpdate","prevProps","isEqual","projects","emphasizeReleases","state","componentWillUnmount","async","memoized","hasMore","getReleases","getOrganizationReleasesMemoized","newReleases","resp","pageLinks","getResponseHeader","paginationObject","parseLinkHeader","next","results","cursor","addErrorMessage","unemphasizedReleases","emphasizedReleases","partition","getReleaseSeries","setState","render","children","displayName","withSentryRouter","withOrganization","withApi","withTheme","StackedAreaChart","_jsx","AreaChart","filter","stacked","OnboardingPanel","image","noCenter","Panel","_jsxs","Container","IlloBox","StyledBox","centered","_styled","target","space","p","breakpoints","small","medium","performanceSetupUrl","docsLink","Button","external","href","PERFORMANCE_TOUR_STEPS","title","TourImage","src","tourMetrics","body","TourText","actions","Onboarding","useApi","useProjects","useLocation","projectsForOnboarding","filterProjects","showOnboardingChecklist","useEffect","hash","some","id","SidebarPanelStore","activatePanel","SidebarPanelKey","PERFORMANCE_ONBOARDING","currentPlatform","platform","hasPerformanceOnboarding","withPerformanceOnboarding","has","setupButton","priority","event","preventDefault","window","PerfImage","emptyStateImg","ButtonList","gap","trackAnalytics","addLoadingMessage","duration","url","eventData","browserHistory","normalizeUrl","eventID","clearIndicators","error","Sentry","scope","setExtra","Error","FeatureTourModal","steps","onAdvance","step","onCloseModal","doneUrl","doneText","_ref2","showModal","large","ButtonBar","styles"],"sourceRoot":""}