"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([["app_gettingStartedDocs_flutter_flutter_tsx"],{"./app/gettingStartedDocs/flutter/flutter.tsx":(t,e,n)=>{n.r(e),n.d(e,{GettingStartedWithFlutter:()=>d,default:()=>p,steps:()=>c});var o=n("./app/components/links/externalLink.tsx"),a=n("./app/components/onboarding/gettingStartedDoc/layout.tsx"),r=n("./app/components/onboarding/gettingStartedDoc/step.tsx"),i=n("./app/locale.tsx"),s=n("../node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js");const c=function(){let{dsn:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return[{type:r.WU.INSTALL,description:(0,s.tZ)("p",{children:(0,i._N)("Sentry captures data by using an SDK within your applicationâ€™s runtime. Add the following to your [pubspec: pubspec.yaml]",{pubspec:(0,s.tZ)("code",{})})}),configurations:[{language:"yml",code:"\ndependencies:\n  sentry_flutter: ^7.8.0\n        "}]},{type:r.WU.CONFIGURE,description:(0,s.tZ)("p",{children:(0,i._N)("Import [sentryFlutter: sentry_flutter] and initialize it",{sentryFlutter:(0,s.tZ)("code",{})})}),configurations:[{language:"dart",code:`\nimport 'package:flutter/widgets.dart';\nimport 'package:sentry_flutter/sentry_flutter.dart';\n\nFuture<void> main() async {\n  await SentryFlutter.init(\n    (options) {\n      options.dsn = '${t}';\n      // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n      // We recommend adjusting this value in production.\n      options.tracesSampleRate = 1.0;\n    },\n    appRunner: () => runApp(MyApp()),\n  );\n\n  // or define SENTRY_DSN via Dart environment variable (--dart-define)\n}\n        `,additionalInfo:(0,s.tZ)("p",{children:(0,i._N)("You can configure the [sentryDsn: SENTRY_DSN], [sentryRelease: SENTRY_RELEASE], [sentryDist: SENTRY_DIST], and [sentryEnv: SENTRY_ENVIRONMENT] via the Dart environment variables passing the [dartDefine: --dart-define] flag to the compiler, as noted in the code sample.",{sentryDsn:(0,s.tZ)("code",{}),sentryRelease:(0,s.tZ)("code",{}),sentryDist:(0,s.tZ)("code",{}),sentryEnv:(0,s.tZ)("code",{}),dartDefine:(0,s.tZ)("code",{})})})}]},{type:r.WU.VERIFY,description:(0,i.t)("Create an intentional error, so you can test that everything is working:"),configurations:[{language:"dart",code:"\nimport 'package:sentry/sentry.dart';\n\ntry {\n  aMethodThatMightFail();\n} catch (exception, stackTrace) {\n  await Sentry.captureException(\n    exception,\n    stackTrace: stackTrace,\n  );\n}\n        ",additionalInfo:(0,s.tZ)("p",{children:(0,i._N)("If you're new to Sentry, use the email alert to access your account and complete a product tour.[break] If you're an existing user and have disabled alerts, you won't receive this email.",{break:(0,s.tZ)("br",{})})})}]},{title:(0,i.t)("Performance"),description:(0,i.t)("You'll be able to monitor the performance of your app using the SDK. For example:"),configurations:[{language:"dart",code:"\nimport 'package:sentry/sentry.dart';\n\nfinal transaction = Sentry.startTransaction('processOrderBatch()', 'task');\n\ntry {\n  await processOrderBatch(transaction);\n} catch (exception) {\n  transaction.throwable = exception;\n  transaction.status = SpanStatus.internalError();\n} finally {\n  await transaction.finish();\n}\n\nFuture<void> processOrderBatch(ISentrySpan span) async {\n  // span operation: task, span description: operation\n  final innerSpan = span.startChild('task', description: 'operation');\n\n  try {\n    // omitted code\n  } catch (exception) {\n    innerSpan.throwable = exception;\n    innerSpan.status = SpanStatus.notFound();\n  } finally {\n    await innerSpan.finish();\n  }\n}\n        ",additionalInfo:(0,s.tZ)("p",{children:(0,i._N)("To learn more about the API and automatic instrumentations, check out the [perfDocs: performance documentation].",{perfDocs:(0,s.tZ)(o.Z,{href:"https://docs.sentry.io/platforms/flutter/performance/instrumentation/"})})})}]},{title:(0,i.t)("Debug Symbols"),configurations:[{description:(0,i.t)("We offer a range of methods to provide Sentry with debug symbols so that you can see symbolicated stack traces and triage issues faster.")},{description:(0,s.tZ)("p",{children:(0,i._N)("Complete stack traces will be shown for your Dart error by default, but if you use [splitDebugInfo: split-debug-info] and [obfuscate: obfuscate], you'll need to [uploadDebugSymbols: upload the debug information files] generated by the [flutter: flutter] build.",{splitDebugInfo:(0,s.tZ)("code",{}),obfuscate:(0,s.tZ)("code",{}),uploadDebugSymbols:(0,s.tZ)(o.Z,{href:"https://docs.sentry.io/platforms/flutter/upload-debug/"}),flutter:(0,s.tZ)("code",{})})})},{description:(0,s.tZ)("p",{children:(0,i._N)("You'll also need to [uploadDebug: upload the debug information files] generated by the [flutter: flutter] build for iOS, macOS, and Android NDK native crashes.",{uploadDebug:(0,s.tZ)(o.Z,{href:"https://docs.sentry.io/platforms/flutter/upload-debug/"}),flutter:(0,s.tZ)("code",{})})})}]},{title:(0,i.t)("Source Context"),configurations:[{description:(0,s.tZ)("p",{children:(0,i._N)("If Sentry has access to your application's source code, it can show snippets of code [sourceContext: source context] around the location of stack frames, which helps to quickly pinpoint problematic code.",{sourceContext:(0,s.tZ)("i",{})})})},{description:(0,s.tZ)("p",{children:(0,i._N)("To enable source context, you'll need to upload debug symbols to Sentry by following the [sourceContext: Uploading Source Code Context for Flutter Android, iOS, and macOS] guide.",{sourceContext:(0,s.tZ)(o.Z,{href:"https://docs.sentry.io/platforms/flutter/upload-debug/#uploading-source-code-context-for-flutter-android-ios-and-macos"})})})}]}]};function d(t){let{dsn:e,...n}=t;return(0,s.tZ)(a.A,{steps:c({dsn:e}),...n})}d.displayName="GettingStartedWithFlutter";const p=d}}]);
//# sourceMappingURL=../sourcemaps/app_gettingStartedDocs_flutter_flutter_tsx.d13e550144d26008673179bfe01655c1.js.map