"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([["app_gettingStartedDocs_dart_dart_tsx"],{"./app/gettingStartedDocs/dart/dart.tsx":(t,n,e)=>{e.r(n),e.d(n,{GettingStartedWithDart:()=>p,default:()=>d,steps:()=>c});var a=e("./app/components/links/externalLink.tsx"),r=e("./app/components/onboarding/gettingStartedDoc/layout.tsx"),o=e("./app/components/onboarding/gettingStartedDoc/step.tsx"),i=e("./app/locale.tsx"),s=e("../node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js");const c=function(){let{dsn:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return[{type:o.WU.INSTALL,description:(0,s.tZ)("p",{children:(0,i._N)("Sentry captures data by using an SDK within your applicationâ€™s runtime. Add the following to your [pubspec: pubspec.yaml]",{pubspec:(0,s.tZ)("code",{})})}),configurations:[{language:"yml",code:"\ndependencies:\n  sentry: ^7.8.0\n        "}]},{type:o.WU.CONFIGURE,description:(0,s.tZ)("p",{children:(0,i._N)("Import [sentry: sentry] and initialize it",{sentry:(0,s.tZ)("code",{})})}),configurations:[{language:"dart",code:`\nimport 'package:sentry/sentry.dart';\n\nFuture<void> main() async {\n  await Sentry.init((options) {\n      options.dsn = '${t}';\n      // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.\n      // We recommend adjusting this value in production.\n      options.tracesSampleRate = 1.0;\n    });\n\n  // or define SENTRY_DSN via Dart environment variable (--dart-define)\n}\n        `,additionalInfo:(0,s.tZ)("p",{children:(0,i._N)("You can configure the [sentryDsn: SENTRY_DSN], [sentryRelease: SENTRY_RELEASE], [sentryDist: SENTRY_DIST], and [sentryEnv: SENTRY_ENVIRONMENT] via the Dart environment variables passing the [dartDefine: --dart-define] flag to the compiler, as noted in the code sample.",{sentryDsn:(0,s.tZ)("code",{}),sentryRelease:(0,s.tZ)("code",{}),sentryDist:(0,s.tZ)("code",{}),sentryEnv:(0,s.tZ)("code",{}),dartDefine:(0,s.tZ)("code",{})})})}]},{type:o.WU.VERIFY,description:(0,i.t)("Create an intentional error, so you can test that everything is working:"),configurations:[{language:"dart",code:"\nimport 'package:sentry/sentry.dart';\n\ntry {\n  aMethodThatMightFail();\n} catch (exception, stackTrace) {\n  await Sentry.captureException(\n    exception,\n    stackTrace: stackTrace,\n  );\n}\n        ",additionalInfo:(0,s.tZ)("p",{children:(0,i._N)("If you're new to Sentry, use the email alert to access your account and complete a product tour.[break] If you're an existing user and have disabled alerts, you won't receive this email.",{break:(0,s.tZ)("br",{})})})}]},{title:(0,i.t)("Performance"),description:(0,i.t)("You'll be able to monitor the performance of your app using the SDK. For example:"),configurations:[{language:"dart",code:"\nimport 'package:sentry/sentry.dart';\n\nfinal transaction = Sentry.startTransaction('processOrderBatch()', 'task');\n\ntry {\n  await processOrderBatch(transaction);\n} catch (exception) {\n  transaction.throwable = exception;\n  transaction.status = SpanStatus.internalError();\n} finally {\n  await transaction.finish();\n}\n\nFuture<void> processOrderBatch(ISentrySpan span) async {\n  // span operation: task, span description: operation\n  final innerSpan = span.startChild('task', description: 'operation');\n\n  try {\n    // omitted code\n  } catch (exception) {\n    innerSpan.throwable = exception;\n    innerSpan.status = SpanStatus.notFound();\n  } finally {\n    await innerSpan.finish();\n  }\n}\n        ",additionalInfo:(0,s.tZ)("p",{children:(0,i._N)("To learn more about the API and automatic instrumentations, check out the [perfDocs: performance documentation].",{perfDocs:(0,s.tZ)(a.Z,{href:"https://docs.sentry.io/platforms/dart/performance/instrumentation/"})})})}]}]};function p(t){let{dsn:n,...e}=t;return(0,s.tZ)(r.A,{steps:c({dsn:n}),...e})}p.displayName="GettingStartedWithDart";const d=p}}]);
//# sourceMappingURL=../sourcemaps/app_gettingStartedDocs_dart_dart_tsx.65a6b077008ecec78553844be3d9a3b8.js.map