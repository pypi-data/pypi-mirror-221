"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([["app_gettingStartedDocs_javascript_remix_tsx"],{"./app/gettingStartedDocs/javascript/remix.tsx":(t,e,n)=>{n.r(e),n.d(e,{GettingStartedWithRemix:()=>g,default:()=>S,nextSteps:()=>y,steps:()=>h}),n("../node_modules/core-js/modules/es.array.push.js");var r=n("./app/components/links/externalLink.tsx"),o=n("./app/components/onboarding/gettingStartedDoc/layout.tsx"),a=n("./app/components/onboarding/gettingStartedDoc/step.tsx"),i=n("./app/components/onboarding/productSelection.tsx"),s=n("./app/locale.tsx"),c=n("../node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js");const p="\nnew Sentry.Replay(),\n",l="\n// Session Replay\nreplaysSessionSampleRate: 0.1, // This sets the sample rate at 10%. You may want to change it to 100% while in development and then sample at a lower rate in production.\nreplaysOnErrorSampleRate: 1.0, // If you're not already sampling the entire session, change the sample rate to 100% when sampling sessions where errors occur.\n",d='\nnew Sentry.BrowserTracing({\n  // Set \'tracePropagationTargets\' to control for which URLs distributed tracing should be enabled\n  tracePropagationTargets: ["localhost", "https:yourserver.io/api/"],\n  routingInstrumentation: Sentry.remixRouterInstrumentation(\n    useEffect,\n    useLocation,\n    useMatches\n  ),\n}),\n',u="\n// Performance Monitoring\ntracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!\n",m="\nnew Sentry.Integrations.Prisma({ client: prisma })\n",h=function(){let{sentryInitContent:t,sentryInitContentServer:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return[{type:a.WU.INSTALL,description:(0,s.t)("Sentry captures data by using an SDK within your applicationâ€™s runtime."),configurations:[{language:"bash",code:"\n# Using yarn\nyarn add @sentry/remix\n\n# Using npm\nnpm install --save @sentry/remix\n        "}]},{type:a.WU.CONFIGURE,description:(0,s.t)("Import and initialize Sentry in your Remix entry points for both the client and server:"),configurations:[{language:"javascript",code:`\n        import { useLocation, useMatches } from "@remix-run/react";\n        import * as Sentry from "@sentry/remix";\n        import { useEffect } from "react";\n\n        Sentry.init({\n          ${t}\n        });\n        `},{language:"javascript",description:(0,c.tZ)("p",{children:(0,s._N)("Initialize Sentry in your entry point for the server to capture exceptions and get performance metrics for your [action] and [loader] functions. You can also initialize Sentry's database integrations, such as Prisma, to get spans for your database calls:",{action:(0,c.tZ)(r.Z,{href:"https://remix.run/docs/en/v1/api/conventions#action"}),loader:(0,c.tZ)(r.Z,{href:"https://remix.run/docs/en/1.18.1/api/conventions#loader"})})}),code:`\n        ${(e??[]).length>1?'import { prisma } from "~/db.server";':""}\n\n        import * as Sentry from "@sentry/remix";\n\n        Sentry.init({\n          ${e?.join("\n")}\n        });\n        `},{description:(0,s.t)('Lastly, wrap your Remix root with "withSentry" to catch React component errors and to get parameterized router transactions:'),language:"javascript",code:'\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { withSentry } from "@sentry/remix";\n\nfunction App() {\n  return (\n    <html>\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n\nexport default withSentry(App);\n        '}]},{type:a.WU.VERIFY,description:(0,s.t)("This snippet contains an intentional error and can be used as a test to make sure that everything's working as expected."),configurations:[{language:"javascript",code:"\n        return <button onClick={() => methodDoesNotExist()}>Break the world</button>;\n        "}]}]},y=[{id:"source-maps",name:(0,s.t)("Source Maps"),description:(0,s.t)("Learn how to enable readable stack traces in your Sentry errors."),link:"https://docs.sentry.io/platforms/javascript/guides/remix/sourcemaps/"},{id:"performance-monitoring",name:(0,s.t)("Performance Monitoring"),description:(0,s.t)("Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries."),link:"https://docs.sentry.io/platforms/javascript/guides/remix/performance/"},{id:"session-replay",name:(0,s.t)("Session Replay"),description:(0,s.t)("Get to the root cause of an error or latency issue faster by seeing all the technical details related to that issue in one visual replay on your web application."),link:"https://docs.sentry.io/platforms/javascript/guides/remix/session-replay/"}];function g(t){let{dsn:e,activeProductSelection:n=[],...r}=t;const a=[],s=[];let g=[...y];const S=[`dsn: "${e}",`];n.includes(i.O.PERFORMANCE_MONITORING)&&(a.push(d.trim()),s.push(u.trim()),S.push(m.trim()),S.push(u.trim()),g=g.filter((t=>t.id!==i.O.PERFORMANCE_MONITORING))),n.includes(i.O.SESSION_REPLAY)&&(a.push(p.trim()),s.push(l.trim()),g=g.filter((t=>t.id!==i.O.SESSION_REPLAY)));let f=[`dsn: "${e}",`];return a.length>0&&(f=f.concat("integrations: [",a,"],")),s.length>0&&(f=f.concat(s)),(0,c.tZ)(o.A,{steps:h({sentryInitContent:f.join("\n"),sentryInitContentServer:S}),nextSteps:g,...r})}g.displayName="GettingStartedWithRemix";const S=g}}]);
//# sourceMappingURL=../sourcemaps/app_gettingStartedDocs_javascript_remix_tsx.d853fa3dc01de11be7a55bf566c1f332.js.map