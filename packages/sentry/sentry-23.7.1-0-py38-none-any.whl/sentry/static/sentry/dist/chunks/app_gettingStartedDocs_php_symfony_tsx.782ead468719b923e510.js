"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([["app_gettingStartedDocs_php_symfony_tsx"],{"./app/gettingStartedDocs/php/symfony.tsx":(e,n,o)=>{o.r(n),o.d(n,{GettingStartedWithSymfony:()=>g,default:()=>p,steps:()=>d});var t=o("../node_modules/react/index.js"),r=o("./app/components/links/externalLink.tsx"),s=o("./app/components/onboarding/gettingStartedDoc/layout.tsx"),i=o("./app/components/onboarding/gettingStartedDoc/step.tsx"),a=o("./app/locale.tsx"),l=o("../node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js");const c=(0,a._N)("Symfony is supported via the [code:sentry-symfony] package as a native bundle.",{code:(0,l.tZ)("code",{})}),d=function(){let{dsn:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return[{type:i.WU.INSTALL,configurations:[{language:"bash",description:(0,l.tZ)("p",{children:(0,a._N)("Install the [code:sentry/sentry-symfony] bundle:",{code:(0,l.tZ)("code",{})})}),code:"composer require sentry/sentry-symfony"},{language:"yaml",description:(0,l.tZ)("p",{children:(0,a._N)('Due to a bug in all versions below "6.0" of the [sensioFrameworkExtraBundleCode:SensioFrameworkExtraBundle] bundle, you will likely receive an error during the execution of the command above related to the missing [nyholmPsr7FactoryPsr17FactoryCode:NyholmPsr7FactoryPsr17Factory] class. To workaround the issue, if you are not using the PSR-7 bridge, please change the configuration of that bundle as follows:',{sensioFrameworkExtraBundleCode:(0,l.tZ)("code",{}),nyholmPsr7FactoryPsr17FactoryCode:(0,l.tZ)("code",{})})}),code:"\nsensio_framework_extra:\n  psr_message:\n  enabled: false\n        ",additionalInfo:(0,l.tZ)("p",{children:(0,a._N)("For more details about the issue see [link:https://github.com/sensiolabs/SensioFrameworkExtraBundle/pull/710].",{link:(0,l.tZ)(r.Z,{href:"https://github.com/sensiolabs/SensioFrameworkExtraBundle/pull/710"})})})}]},{type:i.WU.CONFIGURE,configurations:[{description:(0,l.tZ)("p",{children:(0,a._N)("Add your DSN to [code:config/packages/sentry.yaml]:",{code:(0,l.tZ)("code",{})})}),language:"php",code:`\nsentry:\n  dsn: "%env(${e})%"\n        `},{description:(0,l.tZ)("p",{children:(0,a._N)("And in your [code:.env] file:",{code:(0,l.tZ)("code",{})})}),language:"plain",code:`\n###> sentry/sentry-symfony ###\nSENTRY_DSN="${e}"\n###< sentry/sentry-symfony ###\n        `}]},{type:i.WU.VERIFY,description:(0,l.tZ)("p",{children:(0,a._N)("To test that both logger error and exception are correctly sent to [sentryLink:sentry.io], you can create the following controller:",{sentryLink:(0,l.tZ)(r.Z,{href:"https://sentry.io"})})}),configurations:[{language:"php",code:"\n<?php\n\nnamespace App\\Controller;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass SentryTestController extends AbstractController {\n  /**\n   * @var LoggerInterface\n   */\n  private $logger;\n\n  public function __construct(LoggerInterface $logger)\n  {\n    $this->logger = $logger;\n  }\n\n  /**\n   * @Route(name=\"sentry_test\", path=\"/_sentry-test\")\n   */\n  public function testLog()\n  {\n    // the following code will test if monolog integration logs to sentry\n    $this->logger->error('My custom logged error.');\n\n    // the following code will test if an uncaught exception logs to sentry\n    throw new \\RuntimeException('Example exception.');\n  }\n}\n        "}],additionalInfo:(0,l.tZ)("p",{children:(0,a._N)("After you visit the [code:/_sentry-test page], you can view and resolve the recorded error by logging into [sentryLink:sentry.io] and opening your project. Clicking on the error's title will open a page where you can see detailed information and mark it as resolved.",{sentryLink:(0,l.tZ)(r.Z,{href:"https://sentry.io"}),code:(0,l.tZ)("code",{})})})},{title:(0,a.t)("Performance monitoring"),description:(0,l.BX)(t.Fragment,{children:[(0,a.t)("Performance monitoring integrations to support tracing"),(0,l.tZ)("p",{children:(0,a.t)("The process of logging the events that took place during a request, often across multiple services are enabled by default. To use them, update to the latest version of the SDK.")}),(0,l.tZ)("p",{children:(0,a._N)("These integrations hook into critical paths of the framework and of the vendors. As a result, there may be a performance penalty. To disable tracing, please see the [integrationDocumentationLink:Integrations documentation].",{integrationDocumentationLink:(0,l.tZ)(r.Z,{href:"https://docs.sentry.io/platforms/php/guides/symfony/performance/instrumentation/automatic-instrumentation/"})})})]}),configurations:[{description:(0,l.tZ)("p",{children:(0,a._N)("If you [strong:are not] using Symfony Flex, you'll also need to enable the bundle in [code:config/bundles.php]:",{code:(0,l.tZ)("code",{}),strong:(0,l.tZ)("strong",{})})}),language:"php",code:"\n<?php\n\n  return [\n    // ...\n    Sentry\\SentryBundle\\SentryBundle::class => ['all' => true],\n  ];\n        "}]},{title:(0,a.t)("Monolog Integration"),configurations:[{description:(0,l.tZ)("p",{children:(0,a._N)("If you are using [monologLink:Monolog] to report events instead of the typical error listener approach, you need this additional configuration to log the errors correctly:",{monologLink:(0,l.tZ)(r.Z,{href:"https://github.com/Seldaek/monolog"})})}),language:"yaml",code:"\nsentry:\n  register_error_listener: false # Disables the ErrorListener to avoid duplicated log in sentry\n  register_error_handler: false # Disables the ErrorListener, ExceptionListener and FatalErrorListener integrations of the base PHP SDK\n\nmonolog:\n  handlers:\n    sentry:\n      type: sentry\n      level: !php/const Monolog\\Logger::ERROR\n      hub_id: Sentry\\State\\HubInterface\n        "},{description:(0,l.tZ)("p",{children:(0,a._N)("f you are using a version of [monologBundleLink:MonologBundle] prior to [code:3.7], you need to configure the handler as a service instead:",{monologBundleLink:(0,l.tZ)(r.Z,{href:"https://github.com/symfony/monolog-bundle"}),code:(0,l.tZ)("code",{})})}),language:"yaml",code:"\nmonolog:\n  handlers:\n    sentry:\n      type: service\n      id: Sentry\\Monolog\\Handler\n\nservices:\n  Sentry\\Monolog\\Handler:\n    arguments:\n      $hub: '@Sentry\\State\\HubInterface'\n      $level: !php/const Monolog\\Logger::ERROR\n        "},{description:(0,l.tZ)("p",{children:(0,a._N)("Additionally, you can register the [code:PsrLogMessageProcessor] to resolve PSR-3 placeholders in reported messages:",{code:(0,l.tZ)("code",{})})}),language:"yaml",code:"\nservices:\n  Monolog\\Processor\\PsrLogMessageProcessor:\n    tags: { name: monolog.processor, handler: sentry }\n        "}]}]};function g(e){let{dsn:n,...o}=e;return(0,l.tZ)(s.A,{steps:d({dsn:n}),introduction:c,...o})}g.displayName="GettingStartedWithSymfony";const p=g}}]);
//# sourceMappingURL=../sourcemaps/app_gettingStartedDocs_php_symfony_tsx.f0d7c50fe0d80b8a3ba1bc55a9b07f1d.js.map