"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([["app_gettingStartedDocs_node_koa_tsx"],{"./app/components/onboarding/gettingStartedDoc/utils.tsx":(n,t,e)=>{e.d(t,{a:()=>i});var r=e("./app/components/links/externalLink.tsx"),a=e("./app/locale.tsx"),o=e("./app/utils/analytics.tsx"),s=e("../node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js");function i(n){let{guideLink:t,organization:e,platformKey:i,projectId:c,newOrg:p}=n;return{title:(0,a.t)("Upload Source Maps"),description:(0,s.tZ)("p",{children:(0,a._N)("Automatically upload your source maps to enable readable stack traces for Errors. If you prefer to manually set up source maps, please follow [guideLink:this guide].",{guideLink:(0,s.tZ)(r.Z,{href:t})})}),configurations:[{language:"bash",code:"npx @sentry/wizard@latest -i sourcemaps",onCopy:()=>{e&&c&&i&&(0,o.Gi)(p?"onboarding.source_maps_wizard_button_copy_clicked":"project_creation.source_maps_wizard_button_copy_clicked",{project_id:c,platform:i,organization:e})},onSelectAndCopy:()=>{e&&c&&i&&(0,o.Gi)(p?"onboarding.source_maps_wizard_selected_and_copied":"project_creation.source_maps_wizard_selected_and_copied",{project_id:c,platform:i,organization:e})}}]}}},"./app/gettingStartedDocs/node/koa.tsx":(n,t,e)=>{e.r(t),e.d(t,{GettingStartedWithKoa:()=>u,default:()=>l,steps:()=>d});var r=e("./app/components/onboarding/gettingStartedDoc/layout.tsx"),a=e("./app/components/onboarding/gettingStartedDoc/step.tsx"),o=e("./app/components/onboarding/gettingStartedDoc/utils.tsx"),s=e("./app/locale.tsx"),i=e("../node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js");const c=["// Automatically instrument Node.js libraries and frameworks\n  ...Sentry.autoDiscoverNodePerformanceMonitoringIntegrations(),"],p="// Performance Monitoring\ntracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!",d=function(){let{sentryInitContent:n,...t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return[{type:a.WU.INSTALL,description:(0,s.t)("Add the Sentry Node SDK as a dependency:"),configurations:[{language:"bash",code:"\n# Using yarn\nyarn add @sentry/node @sentry/utils\n\n# Using npm\nnpm install --save @sentry/node @sentry/utils\n        "}]},{type:a.WU.CONFIGURE,description:(0,i.tZ)("p",{children:(0,s._N)("Initialize Sentry as early as possible in your application's lifecycle, for example in your [code:index.ts/js] entry point:",{code:(0,i.tZ)("code",{})})}),configurations:[{language:"javascript",code:`\n        const Sentry = require("@sentry/node");\n        const { stripUrlQueryAndFragment } = require("@sentry/utils");\n        const Koa = require("koa");\n        const app = new Koa();\n\n        Sentry.init({\n          ${n},\n        });\n\n        const requestHandler = (ctx, next) => {\n          return new Promise((resolve, reject) => {\n            Sentry.runWithAsyncContext(async () => {\n              const hub = Sentry.getCurrentHub();\n              hub.configureScope((scope) =>\n                scope.addEventProcessor((event) =>\n                  Sentry.addRequestDataToEvent(event, ctx.request, {\n                    include: {\n                      user: false,\n                    },\n                  })\n                )\n              );\n\n              try {\n                await next();\n              } catch (err) {\n                reject(err);\n              }\n              resolve();\n            });\n          });\n        };\n\n        // this tracing middleware creates a transaction per request\n        const tracingMiddleWare = async (ctx, next) => {\n          const reqMethod = (ctx.method || "").toUpperCase();\n          const reqUrl = ctx.url && stripUrlQueryAndFragment(ctx.url);\n\n          // connect to trace of upstream app\n          let traceparentData;\n          if (ctx.request.get("sentry-trace")) {\n            traceparentData = Sentry.extractTraceparentData(\n              ctx.request.get("sentry-trace")\n            );\n          }\n\n          const transaction = Sentry.startTransaction({\n            name: \`\${reqMethod} \${reqUrl}\`,\n            op: "http.server",\n            ...traceparentData,\n          });\n\n          ctx.__sentry_transaction = transaction;\n\n          // We put the transaction on the scope so users can attach children to it\n          Sentry.getCurrentHub().configureScope((scope) => {\n            scope.setSpan(transaction);\n          });\n\n          ctx.res.on("finish", () => {\n            // Push \`transaction.finish\` to the next event loop so open spans have a chance to finish before the transaction closes\n            setImmediate(() => {\n              // if you're using koa router, set the matched route as transaction name\n              if (ctx._matchedRoute) {\n                const mountPath = ctx.mountPath || "";\n                transaction.setName(\`\${reqMethod} \${mountPath}\${ctx._matchedRoute}\`);\n              }\n              transaction.setHttpStatus(ctx.status);\n              transaction.finish();\n            });\n          });\n\n          await next();\n        };\n\n        app.use(requestHandler);\n        app.use(tracingMiddleWare);\n\n        // usual error handler\n        app.on("error", (err, ctx) => {\n          Sentry.withScope((scope) => {\n            scope.addEventProcessor((event) => {\n              return Sentry.addRequestDataToEvent(event, ctx.request);\n            });\n            Sentry.captureException(err);\n          });\n        });\n\n        app.listen(3000);\n        `}]},(0,o.a)({guideLink:"https://docs.sentry.io/platforms/node/guides/koa/sourcemaps/",...t}),{type:a.WU.VERIFY,description:(0,s.t)("This snippet contains an intentional error and can be used as a test to make sure that everything's working as expected."),configurations:[{language:"javascript",code:'\n        app.use(async function () {\n          throw new Error("My first Sentry error!");\n        });\n        '}]}]};function u(n){let{dsn:t,organization:e,newOrg:a,platformKey:o,projectId:s}=n,u=[`dsn: "${t}",`];const l=[...c],g=[p];return l.length>0&&(u=u.concat("integrations: [",l,"],")),g.length>0&&(u=u.concat(g)),(0,i.tZ)(r.A,{steps:d({sentryInitContent:u.join("\n"),organization:e,newOrg:a,platformKey:o,projectId:s}),newOrg:a,platformKey:o})}u.displayName="GettingStartedWithKoa";const l=u}}]);
//# sourceMappingURL=../sourcemaps/app_gettingStartedDocs_node_koa_tsx.1b1061eacc96ec5f19bc9e19ab7c568c.js.map