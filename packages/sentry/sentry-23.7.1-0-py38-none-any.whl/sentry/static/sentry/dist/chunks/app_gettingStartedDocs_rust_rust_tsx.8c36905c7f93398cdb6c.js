"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([["app_gettingStartedDocs_rust_rust_tsx"],{"./app/gettingStartedDocs/rust/rust.tsx":(t,e,n)=>{n.r(e),n.d(e,{GettingStartedWithRust:()=>u,default:()=>d,steps:()=>a});var s=n("./app/components/onboarding/gettingStartedDoc/layout.tsx"),i=n("./app/components/onboarding/gettingStartedDoc/step.tsx"),o=n("./app/locale.tsx"),r=n("../node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js");const a=function(){let{dsn:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return[{type:i.WU.INSTALL,description:(0,r.tZ)("p",{children:(0,o._N)("To add Sentry to your Rust project you just need to add a new dependency to your [code:Cargo.toml]:",{code:(0,r.tZ)("code",{})})}),configurations:[{language:"toml",code:'\n[dependencies]\nsentry = "0.31.5"\n        '}]},{type:i.WU.CONFIGURE,description:(0,r.tZ)("p",{children:(0,o._N)("[code:Sentry.init()] will return you a guard that when freed, will prevent process exit until all events have been sent (within a timeout):",{code:(0,r.tZ)("code",{})})}),configurations:[{language:"rust",code:`\nlet _guard = sentry::init(("${t}", sentry::ClientOptions {\n  release: sentry::release_name!(),\n  ..Default::default()\n}));\n        `}]},{type:i.WU.VERIFY,description:(0,o.t)("The quickest way to verify Sentry in your Rust application is to cause a panic:"),configurations:[{language:"rust",code:`\nfn main() {\n  let _guard = sentry::init(("${t}", sentry::ClientOptions {\n    release: sentry::release_name!(),\n    ..Default::default()\n  }));\n\n  // Sentry will capture this\n  panic!("Everything is on fire!");\n}\n        `}]}]};function u(t){let{dsn:e,...n}=t;return(0,r.tZ)(s.A,{steps:a({dsn:e}),...n})}u.displayName="GettingStartedWithRust";const d=u}}]);
//# sourceMappingURL=../sourcemaps/app_gettingStartedDocs_rust_rust_tsx.0643b5839e17e263bd7788f5849063e6.js.map