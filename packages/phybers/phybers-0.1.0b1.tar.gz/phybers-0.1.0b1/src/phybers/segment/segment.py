"""
The segment package is a fibers segmentation tool based on a multi-subject atlas. It's purpose is clasifying subject fibers in function of a multisubject-fascicle atlas.
"""

import os
import sys
import numpy as np
from pathlib import Path
from .fiberseg.c_wrappers import segment
from ..utils import sampling
from . import read_write_bundle as rb


def fiberseg(file_in: str, id_subj: str, atlas_dir: str, atlas_info: str, dir_out: str) -> None:
    """
    >  Parameters
    The inputs are:

    - file_in: the tractography data file that contains the fibers of the whole brain of a subject. These must be in the same reference system as the used bundle atlas and be in bundles format.
    - id_subj: the subject identification number, used to label the results.
    - atlas_dir: the bundle atlas, with bundles in separated files, sampled at 21 equidistant points. The bundle atlases provided are in different folders.
    - atlas_info: a text file that stores information needed to apply the segmentation algorithm such as the name of the atlas fascicle and the segmentation threshold. Note that the segmentation threshold can be adjusted depending on the database to be used.
    - dir_out: the directory name to store all the results generated by the algorithm.

    The outputs files are:

    - Segmented fibers***_: the atlas fascicles extracted in the subject, which are labeled and saved in bundles format.
    - Centroids***: the centroid of each segmented fascicle.
    - Index of fibers per fasciculus***: a text file containing the indexes of the fibers that were segmented by each fascicle of the atlas.

    Example
    To test `fiberseg()`, download the data from the link provided [link to be provided][datafiberseg]. Then, open a Python terminal and run the following commands.

    >>> from phybers.segment import fiberseg
    >>> fiberseg('subject_01.bundles', '01', 'atlas/bundles', 'atlas/atlas_info.txt', 'resultseg')
"""

    id_seg_result= os.path.join(dir_out,'idx_bundles')
    os.makedirs(id_seg_result, exist_ok=True)

    has21points = True
    data=rb.read_bundle(file_in)

    for i in range(len(data)-1):
        if len(data[i]) != len(data[i+1]):
            has21points = False
            break

    final_bundles21p_dir = os.path.join(dir_out, 'FinalBundles21p')
    os.makedirs(final_bundles21p_dir, exist_ok=True)

    if not has21points:

        final_bundles_dir = os.path.join(dir_out, 'FinalBundles')
        os.makedirs(final_bundles_dir, exist_ok=True)

        outfile_dir= os.path.join(dir_out, 'outfile')
        os.makedirs(outfile_dir, exist_ok=True)

        fibers21p = os.path.join(outfile_dir,'fiberorig_21p.bundles')

        sampling(file_in, fibers21p, 21)

        segment(21, fibers21p, id_subj, atlas_dir, atlas_info,
                final_bundles21p_dir, id_seg_result)

        for i in os.listdir(id_seg_result):
            index=[]
            with open (os.path.join(id_seg_result,i)) as file:
                for line in file:
                    index.append(int(float(line.strip())))
            bun = np.array(data, dtype='object')[index]
            rb.write_bundle(os.path.join(final_bundles_dir,id_subj+'_to_'+i[:-4]+'.bundles'), bun)

    else:
        segment(21, file_in, id_subj, atlas_dir, atlas_info,
                final_bundles21p_dir, id_seg_result)
