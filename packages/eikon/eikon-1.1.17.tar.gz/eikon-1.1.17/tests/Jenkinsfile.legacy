pipeline {

    environment {
        TEST_AGENT = "EAPI-testagent-${JOB_BASE_NAME}-py"

        NPM_AUTH = credentials('npm_auth')
        NPM_EMAIL = credentials('npm_email')
        GIT_CI_CREDENTIALS = credentials('git_ci_credentials')

        DOCKER_NETWORK_NAME = "ealp-${UUID.randomUUID().toString()}-py"
        DOCKER_EIKON = "ealp-eikon-${UUID.randomUUID().toString()}-py"

        PROXY_UNIT_DOCKER_ID = "unit-tests-ealj-node10-${UUID.randomUUID().toString()}-py"

        EDP_USERNAME = credentials('RDP_LOGIN-1855')
        EDP_PASSWORD = credentials('RDP_PASSWORD-1855')
        DESKTOP_APP_KEY = credentials('APP_KEY-1855')
    }

    options {
        timestamps()
        disableConcurrentBuilds()
    }

    agent {label 'slave5'}

    stages {

        stage('Update related projects') {
            steps {
                script {
                    docker.withRegistry('https://bams-aws.refinitiv.com:5001/', 'DOCKER_BAMS_CREDENTIALS') {
                        def eikonDocker = docker.image('ramen-team/desktop-session-api-proxy:1.17')

                        eikonDocker.pull()
                    }
                    dir('jenkins_build') {
                        sh "docker network create ${DOCKER_NETWORK_NAME}"
                        sh '''
                            docker run \
                            --net ${DOCKER_NETWORK_NAME} \
                            -d \
                            --name ${DOCKER_EIKON} \
                            -w $WORKSPACE \
                            -v "$WORKSPACE":"$WORKSPACE":rw,z \
                            -e "NPM_AUTH=${NPM_AUTH}" \
                            -e "NPM_EMAIL=${NPM_EMAIL}" \
                            -e "PASSWORD=E1kon_P@ssword" \
                            -e "USERNAME=test.user12@refinitiv.com" \
                            -e "PROXY_SOURCE=${PACKAGE_PATH}/latest.tgz" \
                            bams-aws.refinitiv.com:5001/ramen-team/desktop-session-api-proxy:1.17
                        '''
                    }
                }
            }
        }

        stage('Run Unit, Integration, BDD tests') {
            steps {
                script {
                    docker.image("python:${PY_VER}").inside("--name ${TEST_AGENT} --net ${DOCKER_NETWORK_NAME} -v /var/run/docker.sock:/var/run/docker.sock -u 0") {
                        sh 'apt-get update'
                        sh 'apt-get -y install socat'
                        sh 'nohup socat TCP4-LISTEN:9000,fork "TCP4:${DOCKER_EIKON}:9001" &'
                        sh 'pip install tox==3.28.0'
                        dir('eikon/') {
                            sh 'rm *.log || true'
                            sh 'python -m tox -e tests-nix'
                            sh 'chmod -R o+rw ./allure-results'
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            sh "sudo chmod -R a+rwx ${WORKSPACE}"
            sh "docker rm -vf ${DOCKER_EIKON} || true"
            sh "docker network rm ${DOCKER_NETWORK_NAME} || true"

            allure([
                includeProperties: false,
                jdk: '',
                properties: [],
                reportBuildPolicy: 'ALWAYS',
                results: [[path: 'eikon/allure-results/']],
                report: 'eikon/allure-report/'
            ])
        }
    }
}
