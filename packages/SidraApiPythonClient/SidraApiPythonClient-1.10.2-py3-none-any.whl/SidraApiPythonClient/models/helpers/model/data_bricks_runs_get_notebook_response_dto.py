# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.10.2.post2
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DataBricksRunsGetNotebookResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task': 'NotebookSubmitRunResponseDto',
        'job_id': 'int',
        'run_id': 'int',
        'state': 'DataBricksRunState',
        'creator_user_name': 'str',
        'run_name': 'str',
        'run_page_url': 'str',
        'run_type': 'str'
    }

    attribute_map = {
        'task': 'task',
        'job_id': 'job_id',
        'run_id': 'run_id',
        'state': 'state',
        'creator_user_name': 'creator_user_name',
        'run_name': 'run_name',
        'run_page_url': 'run_page_url',
        'run_type': 'run_type'
    }

    def __init__(self, task=None, job_id=None, run_id=None, state=None, creator_user_name=None, run_name=None, run_page_url=None, run_type=None):  # noqa: E501
        """DataBricksRunsGetNotebookResponseDto - a model defined in Swagger"""  # noqa: E501
        self._task = None
        self._job_id = None
        self._run_id = None
        self._state = None
        self._creator_user_name = None
        self._run_name = None
        self._run_page_url = None
        self._run_type = None
        self.discriminator = None
        if task is not None:
            self.task = task
        if job_id is not None:
            self.job_id = job_id
        if run_id is not None:
            self.run_id = run_id
        if state is not None:
            self.state = state
        if creator_user_name is not None:
            self.creator_user_name = creator_user_name
        if run_name is not None:
            self.run_name = run_name
        if run_page_url is not None:
            self.run_page_url = run_page_url
        if run_type is not None:
            self.run_type = run_type

    @property
    def task(self):
        """Gets the task of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501


        :return: The task of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :rtype: NotebookSubmitRunResponseDto
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this DataBricksRunsGetNotebookResponseDto.


        :param task: The task of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :type: NotebookSubmitRunResponseDto
        """

        self._task = task

    @property
    def job_id(self):
        """Gets the job_id of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501


        :return: The job_id of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this DataBricksRunsGetNotebookResponseDto.


        :param job_id: The job_id of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def run_id(self):
        """Gets the run_id of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501


        :return: The run_id of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this DataBricksRunsGetNotebookResponseDto.


        :param run_id: The run_id of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :type: int
        """

        self._run_id = run_id

    @property
    def state(self):
        """Gets the state of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501


        :return: The state of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :rtype: DataBricksRunState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DataBricksRunsGetNotebookResponseDto.


        :param state: The state of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :type: DataBricksRunState
        """

        self._state = state

    @property
    def creator_user_name(self):
        """Gets the creator_user_name of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501


        :return: The creator_user_name of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._creator_user_name

    @creator_user_name.setter
    def creator_user_name(self, creator_user_name):
        """Sets the creator_user_name of this DataBricksRunsGetNotebookResponseDto.


        :param creator_user_name: The creator_user_name of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :type: str
        """

        self._creator_user_name = creator_user_name

    @property
    def run_name(self):
        """Gets the run_name of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501


        :return: The run_name of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this DataBricksRunsGetNotebookResponseDto.


        :param run_name: The run_name of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :type: str
        """

        self._run_name = run_name

    @property
    def run_page_url(self):
        """Gets the run_page_url of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501


        :return: The run_page_url of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._run_page_url

    @run_page_url.setter
    def run_page_url(self, run_page_url):
        """Sets the run_page_url of this DataBricksRunsGetNotebookResponseDto.


        :param run_page_url: The run_page_url of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :type: str
        """

        self._run_page_url = run_page_url

    @property
    def run_type(self):
        """Gets the run_type of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501


        :return: The run_type of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """Sets the run_type of this DataBricksRunsGetNotebookResponseDto.


        :param run_type: The run_type of this DataBricksRunsGetNotebookResponseDto.  # noqa: E501
        :type: str
        """

        self._run_type = run_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataBricksRunsGetNotebookResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataBricksRunsGetNotebookResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
