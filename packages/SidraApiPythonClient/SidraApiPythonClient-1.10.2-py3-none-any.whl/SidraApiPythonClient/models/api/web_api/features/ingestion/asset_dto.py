# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.10.2.post2
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AssetDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folder_path': 'str',
        'file_name': 'str',
        'local_azure_storage_linked_service_name': 'str',
        'key_vault_uri': 'str'
    }

    attribute_map = {
        'folder_path': 'folderPath',
        'file_name': 'fileName',
        'local_azure_storage_linked_service_name': 'localAzureStorageLinkedServiceName',
        'key_vault_uri': 'keyVaultUri'
    }

    def __init__(self, folder_path=None, file_name=None, local_azure_storage_linked_service_name=None, key_vault_uri=None):  # noqa: E501
        """AssetDto - a model defined in Swagger"""  # noqa: E501
        self._folder_path = None
        self._file_name = None
        self._local_azure_storage_linked_service_name = None
        self._key_vault_uri = None
        self.discriminator = None
        if folder_path is not None:
            self.folder_path = folder_path
        if file_name is not None:
            self.file_name = file_name
        if local_azure_storage_linked_service_name is not None:
            self.local_azure_storage_linked_service_name = local_azure_storage_linked_service_name
        if key_vault_uri is not None:
            self.key_vault_uri = key_vault_uri

    @property
    def folder_path(self):
        """Gets the folder_path of this AssetDto.  # noqa: E501

        Folder path where the asset is located  # noqa: E501

        :return: The folder_path of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this AssetDto.

        Folder path where the asset is located  # noqa: E501

        :param folder_path: The folder_path of this AssetDto.  # noqa: E501
        :type: str
        """

        self._folder_path = folder_path

    @property
    def file_name(self):
        """Gets the file_name of this AssetDto.  # noqa: E501

        Filename for the asset  # noqa: E501

        :return: The file_name of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this AssetDto.

        Filename for the asset  # noqa: E501

        :param file_name: The file_name of this AssetDto.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def local_azure_storage_linked_service_name(self):
        """Gets the local_azure_storage_linked_service_name of this AssetDto.  # noqa: E501

        Name of the ADF Linked Service of the Azure Storage where the asset is located  # noqa: E501

        :return: The local_azure_storage_linked_service_name of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._local_azure_storage_linked_service_name

    @local_azure_storage_linked_service_name.setter
    def local_azure_storage_linked_service_name(self, local_azure_storage_linked_service_name):
        """Sets the local_azure_storage_linked_service_name of this AssetDto.

        Name of the ADF Linked Service of the Azure Storage where the asset is located  # noqa: E501

        :param local_azure_storage_linked_service_name: The local_azure_storage_linked_service_name of this AssetDto.  # noqa: E501
        :type: str
        """

        self._local_azure_storage_linked_service_name = local_azure_storage_linked_service_name

    @property
    def key_vault_uri(self):
        """Gets the key_vault_uri of this AssetDto.  # noqa: E501

        Key vault uri to locate the connection string for the Azure Storage  # noqa: E501

        :return: The key_vault_uri of this AssetDto.  # noqa: E501
        :rtype: str
        """
        return self._key_vault_uri

    @key_vault_uri.setter
    def key_vault_uri(self, key_vault_uri):
        """Sets the key_vault_uri of this AssetDto.

        Key vault uri to locate the connection string for the Azure Storage  # noqa: E501

        :param key_vault_uri: The key_vault_uri of this AssetDto.  # noqa: E501
        :type: str
        """

        self._key_vault_uri = key_vault_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
