# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.10.2.post2
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PluginLlagarWithMediaVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'version_number': 'str',
        'notes': 'str',
        'release_date': 'datetime',
        'supported_versions': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'version_number': 'versionNumber',
        'notes': 'notes',
        'release_date': 'releaseDate',
        'supported_versions': 'supportedVersions'
    }

    def __init__(self, id=None, version_number=None, notes=None, release_date=None, supported_versions=None):  # noqa: E501
        """PluginLlagarWithMediaVersion - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._version_number = None
        self._notes = None
        self._release_date = None
        self._supported_versions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if version_number is not None:
            self.version_number = version_number
        if notes is not None:
            self.notes = notes
        if release_date is not None:
            self.release_date = release_date
        if supported_versions is not None:
            self.supported_versions = supported_versions

    @property
    def id(self):
        """Gets the id of this PluginLlagarWithMediaVersion.  # noqa: E501


        :return: The id of this PluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PluginLlagarWithMediaVersion.


        :param id: The id of this PluginLlagarWithMediaVersion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def version_number(self):
        """Gets the version_number of this PluginLlagarWithMediaVersion.  # noqa: E501


        :return: The version_number of this PluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: str
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this PluginLlagarWithMediaVersion.


        :param version_number: The version_number of this PluginLlagarWithMediaVersion.  # noqa: E501
        :type: str
        """

        self._version_number = version_number

    @property
    def notes(self):
        """Gets the notes of this PluginLlagarWithMediaVersion.  # noqa: E501


        :return: The notes of this PluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PluginLlagarWithMediaVersion.


        :param notes: The notes of this PluginLlagarWithMediaVersion.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def release_date(self):
        """Gets the release_date of this PluginLlagarWithMediaVersion.  # noqa: E501


        :return: The release_date of this PluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this PluginLlagarWithMediaVersion.


        :param release_date: The release_date of this PluginLlagarWithMediaVersion.  # noqa: E501
        :type: datetime
        """

        self._release_date = release_date

    @property
    def supported_versions(self):
        """Gets the supported_versions of this PluginLlagarWithMediaVersion.  # noqa: E501


        :return: The supported_versions of this PluginLlagarWithMediaVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_versions

    @supported_versions.setter
    def supported_versions(self, supported_versions):
        """Sets the supported_versions of this PluginLlagarWithMediaVersion.


        :param supported_versions: The supported_versions of this PluginLlagarWithMediaVersion.  # noqa: E501
        :type: list[str]
        """

        self._supported_versions = supported_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginLlagarWithMediaVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginLlagarWithMediaVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
