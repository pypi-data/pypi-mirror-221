# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.1.post1
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AssetStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'AssetStatusEnum',
        'status_name': 'str',
        'status_description': 'str',
        'asset': 'list[Asset]',
        'asset_indexing_status': 'list[AssetIndexingStatus]'
    }

    attribute_map = {
        'id': 'id',
        'status_name': 'statusName',
        'status_description': 'statusDescription',
        'asset': 'asset',
        'asset_indexing_status': 'assetIndexingStatus'
    }

    def __init__(self, id=None, status_name=None, status_description=None, asset=None, asset_indexing_status=None):  # noqa: E501
        """AssetStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status_name = None
        self._status_description = None
        self._asset = None
        self._asset_indexing_status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status_name is not None:
            self.status_name = status_name
        if status_description is not None:
            self.status_description = status_description
        if asset is not None:
            self.asset = asset
        if asset_indexing_status is not None:
            self.asset_indexing_status = asset_indexing_status

    @property
    def id(self):
        """Gets the id of this AssetStatus.  # noqa: E501


        :return: The id of this AssetStatus.  # noqa: E501
        :rtype: AssetStatusEnum
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetStatus.


        :param id: The id of this AssetStatus.  # noqa: E501
        :type: AssetStatusEnum
        """

        self._id = id

    @property
    def status_name(self):
        """Gets the status_name of this AssetStatus.  # noqa: E501


        :return: The status_name of this AssetStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this AssetStatus.


        :param status_name: The status_name of this AssetStatus.  # noqa: E501
        :type: str
        """

        self._status_name = status_name

    @property
    def status_description(self):
        """Gets the status_description of this AssetStatus.  # noqa: E501


        :return: The status_description of this AssetStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this AssetStatus.


        :param status_description: The status_description of this AssetStatus.  # noqa: E501
        :type: str
        """

        self._status_description = status_description

    @property
    def asset(self):
        """Gets the asset of this AssetStatus.  # noqa: E501


        :return: The asset of this AssetStatus.  # noqa: E501
        :rtype: list[Asset]
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this AssetStatus.


        :param asset: The asset of this AssetStatus.  # noqa: E501
        :type: list[Asset]
        """

        self._asset = asset

    @property
    def asset_indexing_status(self):
        """Gets the asset_indexing_status of this AssetStatus.  # noqa: E501


        :return: The asset_indexing_status of this AssetStatus.  # noqa: E501
        :rtype: list[AssetIndexingStatus]
        """
        return self._asset_indexing_status

    @asset_indexing_status.setter
    def asset_indexing_status(self, asset_indexing_status):
        """Sets the asset_indexing_status of this AssetStatus.


        :param asset_indexing_status: The asset_indexing_status of this AssetStatus.  # noqa: E501
        :type: list[AssetIndexingStatus]
        """

        self._asset_indexing_status = asset_indexing_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
