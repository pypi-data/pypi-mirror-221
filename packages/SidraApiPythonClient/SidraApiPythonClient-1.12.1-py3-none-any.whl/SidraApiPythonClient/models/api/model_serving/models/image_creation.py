# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.1.post1
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ImageCreation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_id': 'str',
        'id_model': 'str',
        'image_name': 'str',
        'parameters': 'list[KeyValueParameter]',
        'cluster_id': 'str',
        'run_name': 'str',
        'time_out_seconds': 'int'
    }

    attribute_map = {
        'run_id': 'runId',
        'id_model': 'idModel',
        'image_name': 'imageName',
        'parameters': 'parameters',
        'cluster_id': 'clusterId',
        'run_name': 'runName',
        'time_out_seconds': 'timeOutSeconds'
    }

    def __init__(self, run_id=None, id_model=None, image_name=None, parameters=None, cluster_id=None, run_name=None, time_out_seconds=None):  # noqa: E501
        """ImageCreation - a model defined in Swagger"""  # noqa: E501
        self._run_id = None
        self._id_model = None
        self._image_name = None
        self._parameters = None
        self._cluster_id = None
        self._run_name = None
        self._time_out_seconds = None
        self.discriminator = None
        if run_id is not None:
            self.run_id = run_id
        if id_model is not None:
            self.id_model = id_model
        if image_name is not None:
            self.image_name = image_name
        if parameters is not None:
            self.parameters = parameters
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if run_name is not None:
            self.run_name = run_name
        if time_out_seconds is not None:
            self.time_out_seconds = time_out_seconds

    @property
    def run_id(self):
        """Gets the run_id of this ImageCreation.  # noqa: E501


        :return: The run_id of this ImageCreation.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this ImageCreation.


        :param run_id: The run_id of this ImageCreation.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def id_model(self):
        """Gets the id_model of this ImageCreation.  # noqa: E501


        :return: The id_model of this ImageCreation.  # noqa: E501
        :rtype: str
        """
        return self._id_model

    @id_model.setter
    def id_model(self, id_model):
        """Sets the id_model of this ImageCreation.


        :param id_model: The id_model of this ImageCreation.  # noqa: E501
        :type: str
        """

        self._id_model = id_model

    @property
    def image_name(self):
        """Gets the image_name of this ImageCreation.  # noqa: E501


        :return: The image_name of this ImageCreation.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ImageCreation.


        :param image_name: The image_name of this ImageCreation.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def parameters(self):
        """Gets the parameters of this ImageCreation.  # noqa: E501


        :return: The parameters of this ImageCreation.  # noqa: E501
        :rtype: list[KeyValueParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ImageCreation.


        :param parameters: The parameters of this ImageCreation.  # noqa: E501
        :type: list[KeyValueParameter]
        """

        self._parameters = parameters

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ImageCreation.  # noqa: E501


        :return: The cluster_id of this ImageCreation.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ImageCreation.


        :param cluster_id: The cluster_id of this ImageCreation.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def run_name(self):
        """Gets the run_name of this ImageCreation.  # noqa: E501


        :return: The run_name of this ImageCreation.  # noqa: E501
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this ImageCreation.


        :param run_name: The run_name of this ImageCreation.  # noqa: E501
        :type: str
        """

        self._run_name = run_name

    @property
    def time_out_seconds(self):
        """Gets the time_out_seconds of this ImageCreation.  # noqa: E501


        :return: The time_out_seconds of this ImageCreation.  # noqa: E501
        :rtype: int
        """
        return self._time_out_seconds

    @time_out_seconds.setter
    def time_out_seconds(self, time_out_seconds):
        """Sets the time_out_seconds of this ImageCreation.


        :param time_out_seconds: The time_out_seconds of this ImageCreation.  # noqa: E501
        :type: int
        """

        self._time_out_seconds = time_out_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageCreation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageCreation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
