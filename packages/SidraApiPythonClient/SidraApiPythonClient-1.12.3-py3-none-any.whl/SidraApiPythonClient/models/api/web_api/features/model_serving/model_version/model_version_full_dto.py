# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.3.post2
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ModelVersionFullDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'model': 'ModelFullDto',
        'id_model': 'str',
        'experiment_id': 'str',
        'run_id': 'str',
        'version_number': 'int',
        'metrics': 'str',
        'last_trained': 'datetime',
        'image_name': 'str',
        'deployment_name': 'str',
        'end_point': 'str',
        'status': 'ModelVersionStatusEnum',
        'enabled': 'bool',
        'notes': 'str'
    }

    attribute_map = {
        'id': 'id',
        'model': 'model',
        'id_model': 'idModel',
        'experiment_id': 'experimentId',
        'run_id': 'runId',
        'version_number': 'versionNumber',
        'metrics': 'metrics',
        'last_trained': 'lastTrained',
        'image_name': 'imageName',
        'deployment_name': 'deploymentName',
        'end_point': 'endPoint',
        'status': 'status',
        'enabled': 'enabled',
        'notes': 'notes'
    }

    def __init__(self, id=None, model=None, id_model=None, experiment_id=None, run_id=None, version_number=None, metrics=None, last_trained=None, image_name=None, deployment_name=None, end_point=None, status=None, enabled=None, notes=None):  # noqa: E501
        """ModelVersionFullDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._model = None
        self._id_model = None
        self._experiment_id = None
        self._run_id = None
        self._version_number = None
        self._metrics = None
        self._last_trained = None
        self._image_name = None
        self._deployment_name = None
        self._end_point = None
        self._status = None
        self._enabled = None
        self._notes = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if model is not None:
            self.model = model
        if id_model is not None:
            self.id_model = id_model
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if run_id is not None:
            self.run_id = run_id
        if version_number is not None:
            self.version_number = version_number
        if metrics is not None:
            self.metrics = metrics
        if last_trained is not None:
            self.last_trained = last_trained
        if image_name is not None:
            self.image_name = image_name
        if deployment_name is not None:
            self.deployment_name = deployment_name
        if end_point is not None:
            self.end_point = end_point
        if status is not None:
            self.status = status
        if enabled is not None:
            self.enabled = enabled
        if notes is not None:
            self.notes = notes

    @property
    def id(self):
        """Gets the id of this ModelVersionFullDto.  # noqa: E501

        ModelVersion Identifier  # noqa: E501

        :return: The id of this ModelVersionFullDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelVersionFullDto.

        ModelVersion Identifier  # noqa: E501

        :param id: The id of this ModelVersionFullDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this ModelVersionFullDto.  # noqa: E501


        :return: The model of this ModelVersionFullDto.  # noqa: E501
        :rtype: ModelFullDto
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ModelVersionFullDto.


        :param model: The model of this ModelVersionFullDto.  # noqa: E501
        :type: ModelFullDto
        """

        self._model = model

    @property
    def id_model(self):
        """Gets the id_model of this ModelVersionFullDto.  # noqa: E501

        Model identifier  # noqa: E501

        :return: The id_model of this ModelVersionFullDto.  # noqa: E501
        :rtype: str
        """
        return self._id_model

    @id_model.setter
    def id_model(self, id_model):
        """Sets the id_model of this ModelVersionFullDto.

        Model identifier  # noqa: E501

        :param id_model: The id_model of this ModelVersionFullDto.  # noqa: E501
        :type: str
        """

        self._id_model = id_model

    @property
    def experiment_id(self):
        """Gets the experiment_id of this ModelVersionFullDto.  # noqa: E501

        MLflow Experiment identifier  # noqa: E501

        :return: The experiment_id of this ModelVersionFullDto.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this ModelVersionFullDto.

        MLflow Experiment identifier  # noqa: E501

        :param experiment_id: The experiment_id of this ModelVersionFullDto.  # noqa: E501
        :type: str
        """

        self._experiment_id = experiment_id

    @property
    def run_id(self):
        """Gets the run_id of this ModelVersionFullDto.  # noqa: E501

        Run id of the model trained  # noqa: E501

        :return: The run_id of this ModelVersionFullDto.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this ModelVersionFullDto.

        Run id of the model trained  # noqa: E501

        :param run_id: The run_id of this ModelVersionFullDto.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def version_number(self):
        """Gets the version_number of this ModelVersionFullDto.  # noqa: E501

        Version number of the model  # noqa: E501

        :return: The version_number of this ModelVersionFullDto.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this ModelVersionFullDto.

        Version number of the model  # noqa: E501

        :param version_number: The version_number of this ModelVersionFullDto.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    @property
    def metrics(self):
        """Gets the metrics of this ModelVersionFullDto.  # noqa: E501

        Metrics of the trained model  # noqa: E501

        :return: The metrics of this ModelVersionFullDto.  # noqa: E501
        :rtype: str
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ModelVersionFullDto.

        Metrics of the trained model  # noqa: E501

        :param metrics: The metrics of this ModelVersionFullDto.  # noqa: E501
        :type: str
        """

        self._metrics = metrics

    @property
    def last_trained(self):
        """Gets the last_trained of this ModelVersionFullDto.  # noqa: E501

        Date of the last training  # noqa: E501

        :return: The last_trained of this ModelVersionFullDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_trained

    @last_trained.setter
    def last_trained(self, last_trained):
        """Sets the last_trained of this ModelVersionFullDto.

        Date of the last training  # noqa: E501

        :param last_trained: The last_trained of this ModelVersionFullDto.  # noqa: E501
        :type: datetime
        """

        self._last_trained = last_trained

    @property
    def image_name(self):
        """Gets the image_name of this ModelVersionFullDto.  # noqa: E501

        Name of the docker image for this version  # noqa: E501

        :return: The image_name of this ModelVersionFullDto.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ModelVersionFullDto.

        Name of the docker image for this version  # noqa: E501

        :param image_name: The image_name of this ModelVersionFullDto.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def deployment_name(self):
        """Gets the deployment_name of this ModelVersionFullDto.  # noqa: E501

        Name of the deploymente for this version  # noqa: E501

        :return: The deployment_name of this ModelVersionFullDto.  # noqa: E501
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """Sets the deployment_name of this ModelVersionFullDto.

        Name of the deploymente for this version  # noqa: E501

        :param deployment_name: The deployment_name of this ModelVersionFullDto.  # noqa: E501
        :type: str
        """

        self._deployment_name = deployment_name

    @property
    def end_point(self):
        """Gets the end_point of this ModelVersionFullDto.  # noqa: E501

        Model endpoint of deployment  # noqa: E501

        :return: The end_point of this ModelVersionFullDto.  # noqa: E501
        :rtype: str
        """
        return self._end_point

    @end_point.setter
    def end_point(self, end_point):
        """Sets the end_point of this ModelVersionFullDto.

        Model endpoint of deployment  # noqa: E501

        :param end_point: The end_point of this ModelVersionFullDto.  # noqa: E501
        :type: str
        """

        self._end_point = end_point

    @property
    def status(self):
        """Gets the status of this ModelVersionFullDto.  # noqa: E501


        :return: The status of this ModelVersionFullDto.  # noqa: E501
        :rtype: ModelVersionStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelVersionFullDto.


        :param status: The status of this ModelVersionFullDto.  # noqa: E501
        :type: ModelVersionStatusEnum
        """

        self._status = status

    @property
    def enabled(self):
        """Gets the enabled of this ModelVersionFullDto.  # noqa: E501

        ModelVersion is enabled or not  # noqa: E501

        :return: The enabled of this ModelVersionFullDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ModelVersionFullDto.

        ModelVersion is enabled or not  # noqa: E501

        :param enabled: The enabled of this ModelVersionFullDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def notes(self):
        """Gets the notes of this ModelVersionFullDto.  # noqa: E501

        ModelVersion notes  # noqa: E501

        :return: The notes of this ModelVersionFullDto.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ModelVersionFullDto.

        ModelVersion notes  # noqa: E501

        :param notes: The notes of this ModelVersionFullDto.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelVersionFullDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelVersionFullDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
