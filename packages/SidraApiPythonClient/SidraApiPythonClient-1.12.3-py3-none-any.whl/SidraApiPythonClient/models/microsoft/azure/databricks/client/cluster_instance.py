# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.3.post2
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ClusterInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'spark_context_id': 'str'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'spark_context_id': 'spark_context_id'
    }

    def __init__(self, cluster_id=None, spark_context_id=None):  # noqa: E501
        """ClusterInstance - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._spark_context_id = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if spark_context_id is not None:
            self.spark_context_id = spark_context_id

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ClusterInstance.  # noqa: E501


        :return: The cluster_id of this ClusterInstance.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ClusterInstance.


        :param cluster_id: The cluster_id of this ClusterInstance.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def spark_context_id(self):
        """Gets the spark_context_id of this ClusterInstance.  # noqa: E501


        :return: The spark_context_id of this ClusterInstance.  # noqa: E501
        :rtype: str
        """
        return self._spark_context_id

    @spark_context_id.setter
    def spark_context_id(self, spark_context_id):
        """Sets the spark_context_id of this ClusterInstance.


        :param spark_context_id: The spark_context_id of this ClusterInstance.  # noqa: E501
        :type: str
        """

        self._spark_context_id = spark_context_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
