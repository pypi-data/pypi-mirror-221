# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.3.post2
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ClusterInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'spark_context_id': 'str',
        'num_workers': 'int',
        'autoscale': 'AutoScale',
        'creator_user_name': 'str',
        'driver': 'SparkNode',
        'executors': 'list[SparkNode]',
        'jdbc_port': 'int',
        'state': 'ClusterState',
        'state_message': 'str',
        'start_time': 'datetime',
        'terminated_time': 'datetime',
        'last_state_loss_time': 'datetime',
        'last_activity_time': 'datetime',
        'cluster_memory_mb': 'int',
        'cluster_cores': 'float',
        'default_tags': 'dict(str, str)',
        'cluster_log_status': 'LogSyncStatus',
        'termination_reason': 'TerminationReason',
        'pinned_by_user_name': 'str',
        'cluster_name': 'str',
        'spark_version': 'str',
        'spark_conf': 'dict(str, str)',
        'node_type_id': 'str',
        'driver_node_type_id': 'str',
        'ssh_public_keys': 'list[str]',
        'custom_tags': 'dict(str, str)',
        'cluster_log_conf': 'ClusterLogConf',
        'init_scripts': 'list[InitScriptInfo]',
        'spark_env_vars': 'dict(str, str)',
        'autotermination_minutes': 'int',
        'enable_elastic_disk': 'bool',
        'cluster_source': 'ClusterSource',
        'instance_pool_id': 'str',
        'docker_image': 'DockerImage',
        'enable_local_disk_encryption': 'bool',
        'policy_id': 'str',
        'apply_policy_default_values': 'bool',
        'azure_attributes': 'AzureAttributes'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'spark_context_id': 'spark_context_id',
        'num_workers': 'num_workers',
        'autoscale': 'autoscale',
        'creator_user_name': 'creator_user_name',
        'driver': 'driver',
        'executors': 'executors',
        'jdbc_port': 'jdbc_port',
        'state': 'state',
        'state_message': 'state_message',
        'start_time': 'start_time',
        'terminated_time': 'terminated_time',
        'last_state_loss_time': 'last_state_loss_time',
        'last_activity_time': 'last_activity_time',
        'cluster_memory_mb': 'cluster_memory_mb',
        'cluster_cores': 'cluster_cores',
        'default_tags': 'default_tags',
        'cluster_log_status': 'cluster_log_status',
        'termination_reason': 'termination_reason',
        'pinned_by_user_name': 'pinned_by_user_name',
        'cluster_name': 'cluster_name',
        'spark_version': 'spark_version',
        'spark_conf': 'spark_conf',
        'node_type_id': 'node_type_id',
        'driver_node_type_id': 'driver_node_type_id',
        'ssh_public_keys': 'ssh_public_keys',
        'custom_tags': 'custom_tags',
        'cluster_log_conf': 'cluster_log_conf',
        'init_scripts': 'init_scripts',
        'spark_env_vars': 'spark_env_vars',
        'autotermination_minutes': 'autotermination_minutes',
        'enable_elastic_disk': 'enable_elastic_disk',
        'cluster_source': 'cluster_source',
        'instance_pool_id': 'instance_pool_id',
        'docker_image': 'docker_image',
        'enable_local_disk_encryption': 'enable_local_disk_encryption',
        'policy_id': 'policy_id',
        'apply_policy_default_values': 'apply_policy_default_values',
        'azure_attributes': 'azure_attributes'
    }

    def __init__(self, cluster_id=None, spark_context_id=None, num_workers=None, autoscale=None, creator_user_name=None, driver=None, executors=None, jdbc_port=None, state=None, state_message=None, start_time=None, terminated_time=None, last_state_loss_time=None, last_activity_time=None, cluster_memory_mb=None, cluster_cores=None, default_tags=None, cluster_log_status=None, termination_reason=None, pinned_by_user_name=None, cluster_name=None, spark_version=None, spark_conf=None, node_type_id=None, driver_node_type_id=None, ssh_public_keys=None, custom_tags=None, cluster_log_conf=None, init_scripts=None, spark_env_vars=None, autotermination_minutes=None, enable_elastic_disk=None, cluster_source=None, instance_pool_id=None, docker_image=None, enable_local_disk_encryption=None, policy_id=None, apply_policy_default_values=None, azure_attributes=None):  # noqa: E501
        """ClusterInfo - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._spark_context_id = None
        self._num_workers = None
        self._autoscale = None
        self._creator_user_name = None
        self._driver = None
        self._executors = None
        self._jdbc_port = None
        self._state = None
        self._state_message = None
        self._start_time = None
        self._terminated_time = None
        self._last_state_loss_time = None
        self._last_activity_time = None
        self._cluster_memory_mb = None
        self._cluster_cores = None
        self._default_tags = None
        self._cluster_log_status = None
        self._termination_reason = None
        self._pinned_by_user_name = None
        self._cluster_name = None
        self._spark_version = None
        self._spark_conf = None
        self._node_type_id = None
        self._driver_node_type_id = None
        self._ssh_public_keys = None
        self._custom_tags = None
        self._cluster_log_conf = None
        self._init_scripts = None
        self._spark_env_vars = None
        self._autotermination_minutes = None
        self._enable_elastic_disk = None
        self._cluster_source = None
        self._instance_pool_id = None
        self._docker_image = None
        self._enable_local_disk_encryption = None
        self._policy_id = None
        self._apply_policy_default_values = None
        self._azure_attributes = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if spark_context_id is not None:
            self.spark_context_id = spark_context_id
        if num_workers is not None:
            self.num_workers = num_workers
        if autoscale is not None:
            self.autoscale = autoscale
        if creator_user_name is not None:
            self.creator_user_name = creator_user_name
        if driver is not None:
            self.driver = driver
        if executors is not None:
            self.executors = executors
        if jdbc_port is not None:
            self.jdbc_port = jdbc_port
        if state is not None:
            self.state = state
        if state_message is not None:
            self.state_message = state_message
        if start_time is not None:
            self.start_time = start_time
        if terminated_time is not None:
            self.terminated_time = terminated_time
        if last_state_loss_time is not None:
            self.last_state_loss_time = last_state_loss_time
        if last_activity_time is not None:
            self.last_activity_time = last_activity_time
        if cluster_memory_mb is not None:
            self.cluster_memory_mb = cluster_memory_mb
        if cluster_cores is not None:
            self.cluster_cores = cluster_cores
        if default_tags is not None:
            self.default_tags = default_tags
        if cluster_log_status is not None:
            self.cluster_log_status = cluster_log_status
        if termination_reason is not None:
            self.termination_reason = termination_reason
        if pinned_by_user_name is not None:
            self.pinned_by_user_name = pinned_by_user_name
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if spark_version is not None:
            self.spark_version = spark_version
        if spark_conf is not None:
            self.spark_conf = spark_conf
        if node_type_id is not None:
            self.node_type_id = node_type_id
        if driver_node_type_id is not None:
            self.driver_node_type_id = driver_node_type_id
        if ssh_public_keys is not None:
            self.ssh_public_keys = ssh_public_keys
        if custom_tags is not None:
            self.custom_tags = custom_tags
        if cluster_log_conf is not None:
            self.cluster_log_conf = cluster_log_conf
        if init_scripts is not None:
            self.init_scripts = init_scripts
        if spark_env_vars is not None:
            self.spark_env_vars = spark_env_vars
        if autotermination_minutes is not None:
            self.autotermination_minutes = autotermination_minutes
        if enable_elastic_disk is not None:
            self.enable_elastic_disk = enable_elastic_disk
        if cluster_source is not None:
            self.cluster_source = cluster_source
        if instance_pool_id is not None:
            self.instance_pool_id = instance_pool_id
        if docker_image is not None:
            self.docker_image = docker_image
        if enable_local_disk_encryption is not None:
            self.enable_local_disk_encryption = enable_local_disk_encryption
        if policy_id is not None:
            self.policy_id = policy_id
        if apply_policy_default_values is not None:
            self.apply_policy_default_values = apply_policy_default_values
        if azure_attributes is not None:
            self.azure_attributes = azure_attributes

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ClusterInfo.  # noqa: E501


        :return: The cluster_id of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ClusterInfo.


        :param cluster_id: The cluster_id of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def spark_context_id(self):
        """Gets the spark_context_id of this ClusterInfo.  # noqa: E501


        :return: The spark_context_id of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._spark_context_id

    @spark_context_id.setter
    def spark_context_id(self, spark_context_id):
        """Sets the spark_context_id of this ClusterInfo.


        :param spark_context_id: The spark_context_id of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._spark_context_id = spark_context_id

    @property
    def num_workers(self):
        """Gets the num_workers of this ClusterInfo.  # noqa: E501


        :return: The num_workers of this ClusterInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_workers

    @num_workers.setter
    def num_workers(self, num_workers):
        """Sets the num_workers of this ClusterInfo.


        :param num_workers: The num_workers of this ClusterInfo.  # noqa: E501
        :type: int
        """

        self._num_workers = num_workers

    @property
    def autoscale(self):
        """Gets the autoscale of this ClusterInfo.  # noqa: E501


        :return: The autoscale of this ClusterInfo.  # noqa: E501
        :rtype: AutoScale
        """
        return self._autoscale

    @autoscale.setter
    def autoscale(self, autoscale):
        """Sets the autoscale of this ClusterInfo.


        :param autoscale: The autoscale of this ClusterInfo.  # noqa: E501
        :type: AutoScale
        """

        self._autoscale = autoscale

    @property
    def creator_user_name(self):
        """Gets the creator_user_name of this ClusterInfo.  # noqa: E501


        :return: The creator_user_name of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._creator_user_name

    @creator_user_name.setter
    def creator_user_name(self, creator_user_name):
        """Sets the creator_user_name of this ClusterInfo.


        :param creator_user_name: The creator_user_name of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._creator_user_name = creator_user_name

    @property
    def driver(self):
        """Gets the driver of this ClusterInfo.  # noqa: E501


        :return: The driver of this ClusterInfo.  # noqa: E501
        :rtype: SparkNode
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this ClusterInfo.


        :param driver: The driver of this ClusterInfo.  # noqa: E501
        :type: SparkNode
        """

        self._driver = driver

    @property
    def executors(self):
        """Gets the executors of this ClusterInfo.  # noqa: E501


        :return: The executors of this ClusterInfo.  # noqa: E501
        :rtype: list[SparkNode]
        """
        return self._executors

    @executors.setter
    def executors(self, executors):
        """Sets the executors of this ClusterInfo.


        :param executors: The executors of this ClusterInfo.  # noqa: E501
        :type: list[SparkNode]
        """

        self._executors = executors

    @property
    def jdbc_port(self):
        """Gets the jdbc_port of this ClusterInfo.  # noqa: E501


        :return: The jdbc_port of this ClusterInfo.  # noqa: E501
        :rtype: int
        """
        return self._jdbc_port

    @jdbc_port.setter
    def jdbc_port(self, jdbc_port):
        """Sets the jdbc_port of this ClusterInfo.


        :param jdbc_port: The jdbc_port of this ClusterInfo.  # noqa: E501
        :type: int
        """

        self._jdbc_port = jdbc_port

    @property
    def state(self):
        """Gets the state of this ClusterInfo.  # noqa: E501


        :return: The state of this ClusterInfo.  # noqa: E501
        :rtype: ClusterState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClusterInfo.


        :param state: The state of this ClusterInfo.  # noqa: E501
        :type: ClusterState
        """

        self._state = state

    @property
    def state_message(self):
        """Gets the state_message of this ClusterInfo.  # noqa: E501


        :return: The state_message of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this ClusterInfo.


        :param state_message: The state_message of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._state_message = state_message

    @property
    def start_time(self):
        """Gets the start_time of this ClusterInfo.  # noqa: E501


        :return: The start_time of this ClusterInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ClusterInfo.


        :param start_time: The start_time of this ClusterInfo.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def terminated_time(self):
        """Gets the terminated_time of this ClusterInfo.  # noqa: E501


        :return: The terminated_time of this ClusterInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._terminated_time

    @terminated_time.setter
    def terminated_time(self, terminated_time):
        """Sets the terminated_time of this ClusterInfo.


        :param terminated_time: The terminated_time of this ClusterInfo.  # noqa: E501
        :type: datetime
        """

        self._terminated_time = terminated_time

    @property
    def last_state_loss_time(self):
        """Gets the last_state_loss_time of this ClusterInfo.  # noqa: E501


        :return: The last_state_loss_time of this ClusterInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._last_state_loss_time

    @last_state_loss_time.setter
    def last_state_loss_time(self, last_state_loss_time):
        """Sets the last_state_loss_time of this ClusterInfo.


        :param last_state_loss_time: The last_state_loss_time of this ClusterInfo.  # noqa: E501
        :type: datetime
        """

        self._last_state_loss_time = last_state_loss_time

    @property
    def last_activity_time(self):
        """Gets the last_activity_time of this ClusterInfo.  # noqa: E501


        :return: The last_activity_time of this ClusterInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity_time

    @last_activity_time.setter
    def last_activity_time(self, last_activity_time):
        """Sets the last_activity_time of this ClusterInfo.


        :param last_activity_time: The last_activity_time of this ClusterInfo.  # noqa: E501
        :type: datetime
        """

        self._last_activity_time = last_activity_time

    @property
    def cluster_memory_mb(self):
        """Gets the cluster_memory_mb of this ClusterInfo.  # noqa: E501


        :return: The cluster_memory_mb of this ClusterInfo.  # noqa: E501
        :rtype: int
        """
        return self._cluster_memory_mb

    @cluster_memory_mb.setter
    def cluster_memory_mb(self, cluster_memory_mb):
        """Sets the cluster_memory_mb of this ClusterInfo.


        :param cluster_memory_mb: The cluster_memory_mb of this ClusterInfo.  # noqa: E501
        :type: int
        """

        self._cluster_memory_mb = cluster_memory_mb

    @property
    def cluster_cores(self):
        """Gets the cluster_cores of this ClusterInfo.  # noqa: E501


        :return: The cluster_cores of this ClusterInfo.  # noqa: E501
        :rtype: float
        """
        return self._cluster_cores

    @cluster_cores.setter
    def cluster_cores(self, cluster_cores):
        """Sets the cluster_cores of this ClusterInfo.


        :param cluster_cores: The cluster_cores of this ClusterInfo.  # noqa: E501
        :type: float
        """

        self._cluster_cores = cluster_cores

    @property
    def default_tags(self):
        """Gets the default_tags of this ClusterInfo.  # noqa: E501


        :return: The default_tags of this ClusterInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._default_tags

    @default_tags.setter
    def default_tags(self, default_tags):
        """Sets the default_tags of this ClusterInfo.


        :param default_tags: The default_tags of this ClusterInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._default_tags = default_tags

    @property
    def cluster_log_status(self):
        """Gets the cluster_log_status of this ClusterInfo.  # noqa: E501


        :return: The cluster_log_status of this ClusterInfo.  # noqa: E501
        :rtype: LogSyncStatus
        """
        return self._cluster_log_status

    @cluster_log_status.setter
    def cluster_log_status(self, cluster_log_status):
        """Sets the cluster_log_status of this ClusterInfo.


        :param cluster_log_status: The cluster_log_status of this ClusterInfo.  # noqa: E501
        :type: LogSyncStatus
        """

        self._cluster_log_status = cluster_log_status

    @property
    def termination_reason(self):
        """Gets the termination_reason of this ClusterInfo.  # noqa: E501


        :return: The termination_reason of this ClusterInfo.  # noqa: E501
        :rtype: TerminationReason
        """
        return self._termination_reason

    @termination_reason.setter
    def termination_reason(self, termination_reason):
        """Sets the termination_reason of this ClusterInfo.


        :param termination_reason: The termination_reason of this ClusterInfo.  # noqa: E501
        :type: TerminationReason
        """

        self._termination_reason = termination_reason

    @property
    def pinned_by_user_name(self):
        """Gets the pinned_by_user_name of this ClusterInfo.  # noqa: E501


        :return: The pinned_by_user_name of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._pinned_by_user_name

    @pinned_by_user_name.setter
    def pinned_by_user_name(self, pinned_by_user_name):
        """Sets the pinned_by_user_name of this ClusterInfo.


        :param pinned_by_user_name: The pinned_by_user_name of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._pinned_by_user_name = pinned_by_user_name

    @property
    def cluster_name(self):
        """Gets the cluster_name of this ClusterInfo.  # noqa: E501


        :return: The cluster_name of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this ClusterInfo.


        :param cluster_name: The cluster_name of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def spark_version(self):
        """Gets the spark_version of this ClusterInfo.  # noqa: E501


        :return: The spark_version of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._spark_version

    @spark_version.setter
    def spark_version(self, spark_version):
        """Sets the spark_version of this ClusterInfo.


        :param spark_version: The spark_version of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._spark_version = spark_version

    @property
    def spark_conf(self):
        """Gets the spark_conf of this ClusterInfo.  # noqa: E501


        :return: The spark_conf of this ClusterInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._spark_conf

    @spark_conf.setter
    def spark_conf(self, spark_conf):
        """Sets the spark_conf of this ClusterInfo.


        :param spark_conf: The spark_conf of this ClusterInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._spark_conf = spark_conf

    @property
    def node_type_id(self):
        """Gets the node_type_id of this ClusterInfo.  # noqa: E501


        :return: The node_type_id of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_type_id

    @node_type_id.setter
    def node_type_id(self, node_type_id):
        """Sets the node_type_id of this ClusterInfo.


        :param node_type_id: The node_type_id of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._node_type_id = node_type_id

    @property
    def driver_node_type_id(self):
        """Gets the driver_node_type_id of this ClusterInfo.  # noqa: E501


        :return: The driver_node_type_id of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._driver_node_type_id

    @driver_node_type_id.setter
    def driver_node_type_id(self, driver_node_type_id):
        """Sets the driver_node_type_id of this ClusterInfo.


        :param driver_node_type_id: The driver_node_type_id of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._driver_node_type_id = driver_node_type_id

    @property
    def ssh_public_keys(self):
        """Gets the ssh_public_keys of this ClusterInfo.  # noqa: E501


        :return: The ssh_public_keys of this ClusterInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._ssh_public_keys

    @ssh_public_keys.setter
    def ssh_public_keys(self, ssh_public_keys):
        """Sets the ssh_public_keys of this ClusterInfo.


        :param ssh_public_keys: The ssh_public_keys of this ClusterInfo.  # noqa: E501
        :type: list[str]
        """

        self._ssh_public_keys = ssh_public_keys

    @property
    def custom_tags(self):
        """Gets the custom_tags of this ClusterInfo.  # noqa: E501


        :return: The custom_tags of this ClusterInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_tags

    @custom_tags.setter
    def custom_tags(self, custom_tags):
        """Sets the custom_tags of this ClusterInfo.


        :param custom_tags: The custom_tags of this ClusterInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_tags = custom_tags

    @property
    def cluster_log_conf(self):
        """Gets the cluster_log_conf of this ClusterInfo.  # noqa: E501


        :return: The cluster_log_conf of this ClusterInfo.  # noqa: E501
        :rtype: ClusterLogConf
        """
        return self._cluster_log_conf

    @cluster_log_conf.setter
    def cluster_log_conf(self, cluster_log_conf):
        """Sets the cluster_log_conf of this ClusterInfo.


        :param cluster_log_conf: The cluster_log_conf of this ClusterInfo.  # noqa: E501
        :type: ClusterLogConf
        """

        self._cluster_log_conf = cluster_log_conf

    @property
    def init_scripts(self):
        """Gets the init_scripts of this ClusterInfo.  # noqa: E501


        :return: The init_scripts of this ClusterInfo.  # noqa: E501
        :rtype: list[InitScriptInfo]
        """
        return self._init_scripts

    @init_scripts.setter
    def init_scripts(self, init_scripts):
        """Sets the init_scripts of this ClusterInfo.


        :param init_scripts: The init_scripts of this ClusterInfo.  # noqa: E501
        :type: list[InitScriptInfo]
        """

        self._init_scripts = init_scripts

    @property
    def spark_env_vars(self):
        """Gets the spark_env_vars of this ClusterInfo.  # noqa: E501


        :return: The spark_env_vars of this ClusterInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._spark_env_vars

    @spark_env_vars.setter
    def spark_env_vars(self, spark_env_vars):
        """Sets the spark_env_vars of this ClusterInfo.


        :param spark_env_vars: The spark_env_vars of this ClusterInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._spark_env_vars = spark_env_vars

    @property
    def autotermination_minutes(self):
        """Gets the autotermination_minutes of this ClusterInfo.  # noqa: E501


        :return: The autotermination_minutes of this ClusterInfo.  # noqa: E501
        :rtype: int
        """
        return self._autotermination_minutes

    @autotermination_minutes.setter
    def autotermination_minutes(self, autotermination_minutes):
        """Sets the autotermination_minutes of this ClusterInfo.


        :param autotermination_minutes: The autotermination_minutes of this ClusterInfo.  # noqa: E501
        :type: int
        """

        self._autotermination_minutes = autotermination_minutes

    @property
    def enable_elastic_disk(self):
        """Gets the enable_elastic_disk of this ClusterInfo.  # noqa: E501


        :return: The enable_elastic_disk of this ClusterInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enable_elastic_disk

    @enable_elastic_disk.setter
    def enable_elastic_disk(self, enable_elastic_disk):
        """Sets the enable_elastic_disk of this ClusterInfo.


        :param enable_elastic_disk: The enable_elastic_disk of this ClusterInfo.  # noqa: E501
        :type: bool
        """

        self._enable_elastic_disk = enable_elastic_disk

    @property
    def cluster_source(self):
        """Gets the cluster_source of this ClusterInfo.  # noqa: E501


        :return: The cluster_source of this ClusterInfo.  # noqa: E501
        :rtype: ClusterSource
        """
        return self._cluster_source

    @cluster_source.setter
    def cluster_source(self, cluster_source):
        """Sets the cluster_source of this ClusterInfo.


        :param cluster_source: The cluster_source of this ClusterInfo.  # noqa: E501
        :type: ClusterSource
        """

        self._cluster_source = cluster_source

    @property
    def instance_pool_id(self):
        """Gets the instance_pool_id of this ClusterInfo.  # noqa: E501


        :return: The instance_pool_id of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._instance_pool_id

    @instance_pool_id.setter
    def instance_pool_id(self, instance_pool_id):
        """Sets the instance_pool_id of this ClusterInfo.


        :param instance_pool_id: The instance_pool_id of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._instance_pool_id = instance_pool_id

    @property
    def docker_image(self):
        """Gets the docker_image of this ClusterInfo.  # noqa: E501


        :return: The docker_image of this ClusterInfo.  # noqa: E501
        :rtype: DockerImage
        """
        return self._docker_image

    @docker_image.setter
    def docker_image(self, docker_image):
        """Sets the docker_image of this ClusterInfo.


        :param docker_image: The docker_image of this ClusterInfo.  # noqa: E501
        :type: DockerImage
        """

        self._docker_image = docker_image

    @property
    def enable_local_disk_encryption(self):
        """Gets the enable_local_disk_encryption of this ClusterInfo.  # noqa: E501


        :return: The enable_local_disk_encryption of this ClusterInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enable_local_disk_encryption

    @enable_local_disk_encryption.setter
    def enable_local_disk_encryption(self, enable_local_disk_encryption):
        """Sets the enable_local_disk_encryption of this ClusterInfo.


        :param enable_local_disk_encryption: The enable_local_disk_encryption of this ClusterInfo.  # noqa: E501
        :type: bool
        """

        self._enable_local_disk_encryption = enable_local_disk_encryption

    @property
    def policy_id(self):
        """Gets the policy_id of this ClusterInfo.  # noqa: E501


        :return: The policy_id of this ClusterInfo.  # noqa: E501
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this ClusterInfo.


        :param policy_id: The policy_id of this ClusterInfo.  # noqa: E501
        :type: str
        """

        self._policy_id = policy_id

    @property
    def apply_policy_default_values(self):
        """Gets the apply_policy_default_values of this ClusterInfo.  # noqa: E501


        :return: The apply_policy_default_values of this ClusterInfo.  # noqa: E501
        :rtype: bool
        """
        return self._apply_policy_default_values

    @apply_policy_default_values.setter
    def apply_policy_default_values(self, apply_policy_default_values):
        """Sets the apply_policy_default_values of this ClusterInfo.


        :param apply_policy_default_values: The apply_policy_default_values of this ClusterInfo.  # noqa: E501
        :type: bool
        """

        self._apply_policy_default_values = apply_policy_default_values

    @property
    def azure_attributes(self):
        """Gets the azure_attributes of this ClusterInfo.  # noqa: E501


        :return: The azure_attributes of this ClusterInfo.  # noqa: E501
        :rtype: AzureAttributes
        """
        return self._azure_attributes

    @azure_attributes.setter
    def azure_attributes(self, azure_attributes):
        """Sets the azure_attributes of this ClusterInfo.


        :param azure_attributes: The azure_attributes of this ClusterInfo.  # noqa: E501
        :type: AzureAttributes
        """

        self._azure_attributes = azure_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
