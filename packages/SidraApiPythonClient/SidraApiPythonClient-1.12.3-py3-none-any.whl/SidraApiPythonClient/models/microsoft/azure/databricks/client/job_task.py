# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.3.post2
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notebook_task': 'NotebookTask',
        'spark_jar_task': 'SparkJarTask',
        'spark_python_task': 'SparkPythonTask',
        'spark_submit_task': 'SparkSubmitTask'
    }

    attribute_map = {
        'notebook_task': 'notebook_task',
        'spark_jar_task': 'spark_jar_task',
        'spark_python_task': 'spark_python_task',
        'spark_submit_task': 'spark_submit_task'
    }

    def __init__(self, notebook_task=None, spark_jar_task=None, spark_python_task=None, spark_submit_task=None):  # noqa: E501
        """JobTask - a model defined in Swagger"""  # noqa: E501
        self._notebook_task = None
        self._spark_jar_task = None
        self._spark_python_task = None
        self._spark_submit_task = None
        self.discriminator = None
        if notebook_task is not None:
            self.notebook_task = notebook_task
        if spark_jar_task is not None:
            self.spark_jar_task = spark_jar_task
        if spark_python_task is not None:
            self.spark_python_task = spark_python_task
        if spark_submit_task is not None:
            self.spark_submit_task = spark_submit_task

    @property
    def notebook_task(self):
        """Gets the notebook_task of this JobTask.  # noqa: E501


        :return: The notebook_task of this JobTask.  # noqa: E501
        :rtype: NotebookTask
        """
        return self._notebook_task

    @notebook_task.setter
    def notebook_task(self, notebook_task):
        """Sets the notebook_task of this JobTask.


        :param notebook_task: The notebook_task of this JobTask.  # noqa: E501
        :type: NotebookTask
        """

        self._notebook_task = notebook_task

    @property
    def spark_jar_task(self):
        """Gets the spark_jar_task of this JobTask.  # noqa: E501


        :return: The spark_jar_task of this JobTask.  # noqa: E501
        :rtype: SparkJarTask
        """
        return self._spark_jar_task

    @spark_jar_task.setter
    def spark_jar_task(self, spark_jar_task):
        """Sets the spark_jar_task of this JobTask.


        :param spark_jar_task: The spark_jar_task of this JobTask.  # noqa: E501
        :type: SparkJarTask
        """

        self._spark_jar_task = spark_jar_task

    @property
    def spark_python_task(self):
        """Gets the spark_python_task of this JobTask.  # noqa: E501


        :return: The spark_python_task of this JobTask.  # noqa: E501
        :rtype: SparkPythonTask
        """
        return self._spark_python_task

    @spark_python_task.setter
    def spark_python_task(self, spark_python_task):
        """Sets the spark_python_task of this JobTask.


        :param spark_python_task: The spark_python_task of this JobTask.  # noqa: E501
        :type: SparkPythonTask
        """

        self._spark_python_task = spark_python_task

    @property
    def spark_submit_task(self):
        """Gets the spark_submit_task of this JobTask.  # noqa: E501


        :return: The spark_submit_task of this JobTask.  # noqa: E501
        :rtype: SparkSubmitTask
        """
        return self._spark_submit_task

    @spark_submit_task.setter
    def spark_submit_task(self, spark_submit_task):
        """Sets the spark_submit_task of this JobTask.


        :param spark_submit_task: The spark_submit_task of this JobTask.  # noqa: E501
        :type: SparkSubmitTask
        """

        self._spark_submit_task = spark_submit_task

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
