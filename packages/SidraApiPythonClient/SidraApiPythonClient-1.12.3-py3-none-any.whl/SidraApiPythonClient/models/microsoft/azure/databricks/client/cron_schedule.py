# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.3.post2
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CronSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quartz_cron_expression': 'str',
        'timezone_id': 'str',
        'pause_status': 'PauseStatus'
    }

    attribute_map = {
        'quartz_cron_expression': 'quartz_cron_expression',
        'timezone_id': 'timezone_id',
        'pause_status': 'pause_status'
    }

    def __init__(self, quartz_cron_expression=None, timezone_id=None, pause_status=None):  # noqa: E501
        """CronSchedule - a model defined in Swagger"""  # noqa: E501
        self._quartz_cron_expression = None
        self._timezone_id = None
        self._pause_status = None
        self.discriminator = None
        if quartz_cron_expression is not None:
            self.quartz_cron_expression = quartz_cron_expression
        if timezone_id is not None:
            self.timezone_id = timezone_id
        if pause_status is not None:
            self.pause_status = pause_status

    @property
    def quartz_cron_expression(self):
        """Gets the quartz_cron_expression of this CronSchedule.  # noqa: E501


        :return: The quartz_cron_expression of this CronSchedule.  # noqa: E501
        :rtype: str
        """
        return self._quartz_cron_expression

    @quartz_cron_expression.setter
    def quartz_cron_expression(self, quartz_cron_expression):
        """Sets the quartz_cron_expression of this CronSchedule.


        :param quartz_cron_expression: The quartz_cron_expression of this CronSchedule.  # noqa: E501
        :type: str
        """

        self._quartz_cron_expression = quartz_cron_expression

    @property
    def timezone_id(self):
        """Gets the timezone_id of this CronSchedule.  # noqa: E501


        :return: The timezone_id of this CronSchedule.  # noqa: E501
        :rtype: str
        """
        return self._timezone_id

    @timezone_id.setter
    def timezone_id(self, timezone_id):
        """Sets the timezone_id of this CronSchedule.


        :param timezone_id: The timezone_id of this CronSchedule.  # noqa: E501
        :type: str
        """

        self._timezone_id = timezone_id

    @property
    def pause_status(self):
        """Gets the pause_status of this CronSchedule.  # noqa: E501


        :return: The pause_status of this CronSchedule.  # noqa: E501
        :rtype: PauseStatus
        """
        return self._pause_status

    @pause_status.setter
    def pause_status(self, pause_status):
        """Sets the pause_status of this CronSchedule.


        :param pause_status: The pause_status of this CronSchedule.  # noqa: E501
        :type: PauseStatus
        """

        self._pause_status = pause_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CronSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CronSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
