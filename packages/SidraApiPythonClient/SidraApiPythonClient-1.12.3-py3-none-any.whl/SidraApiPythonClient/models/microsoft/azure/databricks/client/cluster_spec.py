# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.3.post2
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ClusterSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'existing_cluster_id': 'str',
        'new_cluster': 'ClusterInfo',
        'libraries': 'list[Library]'
    }

    attribute_map = {
        'existing_cluster_id': 'existing_cluster_id',
        'new_cluster': 'new_cluster',
        'libraries': 'libraries'
    }

    def __init__(self, existing_cluster_id=None, new_cluster=None, libraries=None):  # noqa: E501
        """ClusterSpec - a model defined in Swagger"""  # noqa: E501
        self._existing_cluster_id = None
        self._new_cluster = None
        self._libraries = None
        self.discriminator = None
        if existing_cluster_id is not None:
            self.existing_cluster_id = existing_cluster_id
        if new_cluster is not None:
            self.new_cluster = new_cluster
        if libraries is not None:
            self.libraries = libraries

    @property
    def existing_cluster_id(self):
        """Gets the existing_cluster_id of this ClusterSpec.  # noqa: E501


        :return: The existing_cluster_id of this ClusterSpec.  # noqa: E501
        :rtype: str
        """
        return self._existing_cluster_id

    @existing_cluster_id.setter
    def existing_cluster_id(self, existing_cluster_id):
        """Sets the existing_cluster_id of this ClusterSpec.


        :param existing_cluster_id: The existing_cluster_id of this ClusterSpec.  # noqa: E501
        :type: str
        """

        self._existing_cluster_id = existing_cluster_id

    @property
    def new_cluster(self):
        """Gets the new_cluster of this ClusterSpec.  # noqa: E501


        :return: The new_cluster of this ClusterSpec.  # noqa: E501
        :rtype: ClusterInfo
        """
        return self._new_cluster

    @new_cluster.setter
    def new_cluster(self, new_cluster):
        """Sets the new_cluster of this ClusterSpec.


        :param new_cluster: The new_cluster of this ClusterSpec.  # noqa: E501
        :type: ClusterInfo
        """

        self._new_cluster = new_cluster

    @property
    def libraries(self):
        """Gets the libraries of this ClusterSpec.  # noqa: E501


        :return: The libraries of this ClusterSpec.  # noqa: E501
        :rtype: list[Library]
        """
        return self._libraries

    @libraries.setter
    def libraries(self, libraries):
        """Sets the libraries of this ClusterSpec.


        :param libraries: The libraries of this ClusterSpec.  # noqa: E501
        :type: list[Library]
        """

        self._libraries = libraries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
