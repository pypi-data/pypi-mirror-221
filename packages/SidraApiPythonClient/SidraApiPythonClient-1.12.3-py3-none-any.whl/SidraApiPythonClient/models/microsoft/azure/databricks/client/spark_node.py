# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.3.post2
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SparkNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'private_ip': 'str',
        'public_dns': 'str',
        'node_id': 'str',
        'instance_id': 'str',
        'start_timestamp': 'datetime',
        'host_private_ip': 'str'
    }

    attribute_map = {
        'private_ip': 'private_ip',
        'public_dns': 'public_dns',
        'node_id': 'node_id',
        'instance_id': 'instance_id',
        'start_timestamp': 'start_timestamp',
        'host_private_ip': 'host_private_ip'
    }

    def __init__(self, private_ip=None, public_dns=None, node_id=None, instance_id=None, start_timestamp=None, host_private_ip=None):  # noqa: E501
        """SparkNode - a model defined in Swagger"""  # noqa: E501
        self._private_ip = None
        self._public_dns = None
        self._node_id = None
        self._instance_id = None
        self._start_timestamp = None
        self._host_private_ip = None
        self.discriminator = None
        if private_ip is not None:
            self.private_ip = private_ip
        if public_dns is not None:
            self.public_dns = public_dns
        if node_id is not None:
            self.node_id = node_id
        if instance_id is not None:
            self.instance_id = instance_id
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if host_private_ip is not None:
            self.host_private_ip = host_private_ip

    @property
    def private_ip(self):
        """Gets the private_ip of this SparkNode.  # noqa: E501


        :return: The private_ip of this SparkNode.  # noqa: E501
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this SparkNode.


        :param private_ip: The private_ip of this SparkNode.  # noqa: E501
        :type: str
        """

        self._private_ip = private_ip

    @property
    def public_dns(self):
        """Gets the public_dns of this SparkNode.  # noqa: E501


        :return: The public_dns of this SparkNode.  # noqa: E501
        :rtype: str
        """
        return self._public_dns

    @public_dns.setter
    def public_dns(self, public_dns):
        """Sets the public_dns of this SparkNode.


        :param public_dns: The public_dns of this SparkNode.  # noqa: E501
        :type: str
        """

        self._public_dns = public_dns

    @property
    def node_id(self):
        """Gets the node_id of this SparkNode.  # noqa: E501


        :return: The node_id of this SparkNode.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this SparkNode.


        :param node_id: The node_id of this SparkNode.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def instance_id(self):
        """Gets the instance_id of this SparkNode.  # noqa: E501


        :return: The instance_id of this SparkNode.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this SparkNode.


        :param instance_id: The instance_id of this SparkNode.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this SparkNode.  # noqa: E501


        :return: The start_timestamp of this SparkNode.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this SparkNode.


        :param start_timestamp: The start_timestamp of this SparkNode.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def host_private_ip(self):
        """Gets the host_private_ip of this SparkNode.  # noqa: E501


        :return: The host_private_ip of this SparkNode.  # noqa: E501
        :rtype: str
        """
        return self._host_private_ip

    @host_private_ip.setter
    def host_private_ip(self, host_private_ip):
        """Sets the host_private_ip of this SparkNode.


        :param host_private_ip: The host_private_ip of this SparkNode.  # noqa: E501
        :type: str
        """

        self._host_private_ip = host_private_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SparkNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SparkNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
