# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.13.0.dev5
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DataBricksRunsGetOutputResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run': 'Run',
        'notebook_output': 'str',
        'error': 'str'
    }

    attribute_map = {
        'run': 'run',
        'notebook_output': 'notebook_output',
        'error': 'error'
    }

    def __init__(self, run=None, notebook_output=None, error=None):  # noqa: E501
        """DataBricksRunsGetOutputResponseDto - a model defined in Swagger"""  # noqa: E501
        self._run = None
        self._notebook_output = None
        self._error = None
        self.discriminator = None
        if run is not None:
            self.run = run
        if notebook_output is not None:
            self.notebook_output = notebook_output
        if error is not None:
            self.error = error

    @property
    def run(self):
        """Gets the run of this DataBricksRunsGetOutputResponseDto.  # noqa: E501


        :return: The run of this DataBricksRunsGetOutputResponseDto.  # noqa: E501
        :rtype: Run
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this DataBricksRunsGetOutputResponseDto.


        :param run: The run of this DataBricksRunsGetOutputResponseDto.  # noqa: E501
        :type: Run
        """

        self._run = run

    @property
    def notebook_output(self):
        """Gets the notebook_output of this DataBricksRunsGetOutputResponseDto.  # noqa: E501


        :return: The notebook_output of this DataBricksRunsGetOutputResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._notebook_output

    @notebook_output.setter
    def notebook_output(self, notebook_output):
        """Sets the notebook_output of this DataBricksRunsGetOutputResponseDto.


        :param notebook_output: The notebook_output of this DataBricksRunsGetOutputResponseDto.  # noqa: E501
        :type: str
        """

        self._notebook_output = notebook_output

    @property
    def error(self):
        """Gets the error of this DataBricksRunsGetOutputResponseDto.  # noqa: E501


        :return: The error of this DataBricksRunsGetOutputResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DataBricksRunsGetOutputResponseDto.


        :param error: The error of this DataBricksRunsGetOutputResponseDto.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataBricksRunsGetOutputResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataBricksRunsGetOutputResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
