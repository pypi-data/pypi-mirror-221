# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.13.0.dev5
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RunState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'life_cycle_state': 'RunLifeCycleState',
        'result_state': 'RunResultState',
        'state_message': 'str'
    }

    attribute_map = {
        'life_cycle_state': 'life_cycle_state',
        'result_state': 'result_state',
        'state_message': 'state_message'
    }

    def __init__(self, life_cycle_state=None, result_state=None, state_message=None):  # noqa: E501
        """RunState - a model defined in Swagger"""  # noqa: E501
        self._life_cycle_state = None
        self._result_state = None
        self._state_message = None
        self.discriminator = None
        if life_cycle_state is not None:
            self.life_cycle_state = life_cycle_state
        if result_state is not None:
            self.result_state = result_state
        if state_message is not None:
            self.state_message = state_message

    @property
    def life_cycle_state(self):
        """Gets the life_cycle_state of this RunState.  # noqa: E501


        :return: The life_cycle_state of this RunState.  # noqa: E501
        :rtype: RunLifeCycleState
        """
        return self._life_cycle_state

    @life_cycle_state.setter
    def life_cycle_state(self, life_cycle_state):
        """Sets the life_cycle_state of this RunState.


        :param life_cycle_state: The life_cycle_state of this RunState.  # noqa: E501
        :type: RunLifeCycleState
        """

        self._life_cycle_state = life_cycle_state

    @property
    def result_state(self):
        """Gets the result_state of this RunState.  # noqa: E501


        :return: The result_state of this RunState.  # noqa: E501
        :rtype: RunResultState
        """
        return self._result_state

    @result_state.setter
    def result_state(self, result_state):
        """Sets the result_state of this RunState.


        :param result_state: The result_state of this RunState.  # noqa: E501
        :type: RunResultState
        """

        self._result_state = result_state

    @property
    def state_message(self):
        """Gets the state_message of this RunState.  # noqa: E501


        :return: The state_message of this RunState.  # noqa: E501
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this RunState.


        :param state_message: The state_message of this RunState.  # noqa: E501
        :type: str
        """

        self._state_message = state_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
