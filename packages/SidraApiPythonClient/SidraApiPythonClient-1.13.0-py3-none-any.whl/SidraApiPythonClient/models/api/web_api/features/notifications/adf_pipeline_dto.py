# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.13.0.dev5
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AdfPipelineDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pipeline_name': 'str',
        'pipeline_run_id': 'str',
        'job_id': 'str',
        'activity_run_id': 'str',
        'execution_start_time': 'datetime',
        'execution_end_time': 'datetime',
        'status': 'str',
        'error': 'Error',
        'output': 'Output',
        'execution_details': 'str',
        'status_code': 'str',
        'execution_status': 'str',
        'duration': 'str',
        'recovery_status': 'str',
        'activity_type': 'str'
    }

    attribute_map = {
        'pipeline_name': 'pipelineName',
        'pipeline_run_id': 'pipelineRunId',
        'job_id': 'jobId',
        'activity_run_id': 'activityRunId',
        'execution_start_time': 'executionStartTime',
        'execution_end_time': 'executionEndTime',
        'status': 'status',
        'error': 'error',
        'output': 'output',
        'execution_details': 'executionDetails',
        'status_code': 'statusCode',
        'execution_status': 'executionStatus',
        'duration': 'duration',
        'recovery_status': 'recoveryStatus',
        'activity_type': 'activityType'
    }

    def __init__(self, pipeline_name=None, pipeline_run_id=None, job_id=None, activity_run_id=None, execution_start_time=None, execution_end_time=None, status=None, error=None, output=None, execution_details=None, status_code=None, execution_status=None, duration=None, recovery_status=None, activity_type=None):  # noqa: E501
        """AdfPipelineDto - a model defined in Swagger"""  # noqa: E501
        self._pipeline_name = None
        self._pipeline_run_id = None
        self._job_id = None
        self._activity_run_id = None
        self._execution_start_time = None
        self._execution_end_time = None
        self._status = None
        self._error = None
        self._output = None
        self._execution_details = None
        self._status_code = None
        self._execution_status = None
        self._duration = None
        self._recovery_status = None
        self._activity_type = None
        self.discriminator = None
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if pipeline_run_id is not None:
            self.pipeline_run_id = pipeline_run_id
        if job_id is not None:
            self.job_id = job_id
        if activity_run_id is not None:
            self.activity_run_id = activity_run_id
        if execution_start_time is not None:
            self.execution_start_time = execution_start_time
        if execution_end_time is not None:
            self.execution_end_time = execution_end_time
        if status is not None:
            self.status = status
        if error is not None:
            self.error = error
        if output is not None:
            self.output = output
        if execution_details is not None:
            self.execution_details = execution_details
        if status_code is not None:
            self.status_code = status_code
        if execution_status is not None:
            self.execution_status = execution_status
        if duration is not None:
            self.duration = duration
        if recovery_status is not None:
            self.recovery_status = recovery_status
        if activity_type is not None:
            self.activity_type = activity_type

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this AdfPipelineDto.  # noqa: E501

        Pipeline name  # noqa: E501

        :return: The pipeline_name of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this AdfPipelineDto.

        Pipeline name  # noqa: E501

        :param pipeline_name: The pipeline_name of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    @property
    def pipeline_run_id(self):
        """Gets the pipeline_run_id of this AdfPipelineDto.  # noqa: E501

        Pipeline run id  # noqa: E501

        :return: The pipeline_run_id of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_run_id

    @pipeline_run_id.setter
    def pipeline_run_id(self, pipeline_run_id):
        """Sets the pipeline_run_id of this AdfPipelineDto.

        Pipeline run id  # noqa: E501

        :param pipeline_run_id: The pipeline_run_id of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._pipeline_run_id = pipeline_run_id

    @property
    def job_id(self):
        """Gets the job_id of this AdfPipelineDto.  # noqa: E501

        Job id  # noqa: E501

        :return: The job_id of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this AdfPipelineDto.

        Job id  # noqa: E501

        :param job_id: The job_id of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def activity_run_id(self):
        """Gets the activity_run_id of this AdfPipelineDto.  # noqa: E501

        Activity run id  # noqa: E501

        :return: The activity_run_id of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._activity_run_id

    @activity_run_id.setter
    def activity_run_id(self, activity_run_id):
        """Sets the activity_run_id of this AdfPipelineDto.

        Activity run id  # noqa: E501

        :param activity_run_id: The activity_run_id of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._activity_run_id = activity_run_id

    @property
    def execution_start_time(self):
        """Gets the execution_start_time of this AdfPipelineDto.  # noqa: E501

        Execution start time  # noqa: E501

        :return: The execution_start_time of this AdfPipelineDto.  # noqa: E501
        :rtype: datetime
        """
        return self._execution_start_time

    @execution_start_time.setter
    def execution_start_time(self, execution_start_time):
        """Sets the execution_start_time of this AdfPipelineDto.

        Execution start time  # noqa: E501

        :param execution_start_time: The execution_start_time of this AdfPipelineDto.  # noqa: E501
        :type: datetime
        """

        self._execution_start_time = execution_start_time

    @property
    def execution_end_time(self):
        """Gets the execution_end_time of this AdfPipelineDto.  # noqa: E501

        Execution end time  # noqa: E501

        :return: The execution_end_time of this AdfPipelineDto.  # noqa: E501
        :rtype: datetime
        """
        return self._execution_end_time

    @execution_end_time.setter
    def execution_end_time(self, execution_end_time):
        """Sets the execution_end_time of this AdfPipelineDto.

        Execution end time  # noqa: E501

        :param execution_end_time: The execution_end_time of this AdfPipelineDto.  # noqa: E501
        :type: datetime
        """

        self._execution_end_time = execution_end_time

    @property
    def status(self):
        """Gets the status of this AdfPipelineDto.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AdfPipelineDto.

        Status  # noqa: E501

        :param status: The status of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def error(self):
        """Gets the error of this AdfPipelineDto.  # noqa: E501


        :return: The error of this AdfPipelineDto.  # noqa: E501
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AdfPipelineDto.


        :param error: The error of this AdfPipelineDto.  # noqa: E501
        :type: Error
        """

        self._error = error

    @property
    def output(self):
        """Gets the output of this AdfPipelineDto.  # noqa: E501


        :return: The output of this AdfPipelineDto.  # noqa: E501
        :rtype: Output
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this AdfPipelineDto.


        :param output: The output of this AdfPipelineDto.  # noqa: E501
        :type: Output
        """

        self._output = output

    @property
    def execution_details(self):
        """Gets the execution_details of this AdfPipelineDto.  # noqa: E501

        Details of the execution  # noqa: E501

        :return: The execution_details of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._execution_details

    @execution_details.setter
    def execution_details(self, execution_details):
        """Sets the execution_details of this AdfPipelineDto.

        Details of the execution  # noqa: E501

        :param execution_details: The execution_details of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._execution_details = execution_details

    @property
    def status_code(self):
        """Gets the status_code of this AdfPipelineDto.  # noqa: E501

        Status code  # noqa: E501

        :return: The status_code of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this AdfPipelineDto.

        Status code  # noqa: E501

        :param status_code: The status_code of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    @property
    def execution_status(self):
        """Gets the execution_status of this AdfPipelineDto.  # noqa: E501

        Execution Status  # noqa: E501

        :return: The execution_status of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._execution_status

    @execution_status.setter
    def execution_status(self, execution_status):
        """Sets the execution_status of this AdfPipelineDto.

        Execution Status  # noqa: E501

        :param execution_status: The execution_status of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._execution_status = execution_status

    @property
    def duration(self):
        """Gets the duration of this AdfPipelineDto.  # noqa: E501

        Duration  # noqa: E501

        :return: The duration of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AdfPipelineDto.

        Duration  # noqa: E501

        :param duration: The duration of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def recovery_status(self):
        """Gets the recovery_status of this AdfPipelineDto.  # noqa: E501

        Recovery status  # noqa: E501

        :return: The recovery_status of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._recovery_status

    @recovery_status.setter
    def recovery_status(self, recovery_status):
        """Sets the recovery_status of this AdfPipelineDto.

        Recovery status  # noqa: E501

        :param recovery_status: The recovery_status of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._recovery_status = recovery_status

    @property
    def activity_type(self):
        """Gets the activity_type of this AdfPipelineDto.  # noqa: E501

        Execute pipeline  # noqa: E501

        :return: The activity_type of this AdfPipelineDto.  # noqa: E501
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this AdfPipelineDto.

        Execute pipeline  # noqa: E501

        :param activity_type: The activity_type of this AdfPipelineDto.  # noqa: E501
        :type: str
        """

        self._activity_type = activity_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdfPipelineDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdfPipelineDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
