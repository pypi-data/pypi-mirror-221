# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.13.0.dev5
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

class IngestionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            raise ValueError("api_client is mandatory")
        self.api_client = api_client

    def api_ingestion_addasset_post(self, **kwargs):  # noqa: E501
        """Registers an asset from the Landing Zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_addasset_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssetDto body: Information of the asset to be registered
        :param str api_version: The requested API version
        :return: AssetFromLanding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_ingestion_addasset_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_ingestion_addasset_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_ingestion_addasset_post_with_http_info(self, **kwargs):  # noqa: E501
        """Registers an asset from the Landing Zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_addasset_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssetDto body: Information of the asset to be registered
        :param str api_version: The requested API version
        :return: AssetFromLanding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_ingestion_addasset_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Ingestion/addasset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetFromLanding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_ingestion_asset_asset_id_entities_entities_post(self, asset_id, entities, **kwargs):  # noqa: E501
        """Updates Entities fields, representing the number of entities in an Asset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_asset_asset_id_entities_entities_post(asset_id, entities, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Id of the asset (required)
        :param int entities: Number of entities it contains (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_ingestion_asset_asset_id_entities_entities_post_with_http_info(asset_id, entities, **kwargs)  # noqa: E501
        else:
            (data) = self.api_ingestion_asset_asset_id_entities_entities_post_with_http_info(asset_id, entities, **kwargs)  # noqa: E501
            return data

    def api_ingestion_asset_asset_id_entities_entities_post_with_http_info(self, asset_id, entities, **kwargs):  # noqa: E501
        """Updates Entities fields, representing the number of entities in an Asset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_asset_asset_id_entities_entities_post_with_http_info(asset_id, entities, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Id of the asset (required)
        :param int entities: Number of entities it contains (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'entities', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_ingestion_asset_asset_id_entities_entities_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `api_ingestion_asset_asset_id_entities_entities_post`")  # noqa: E501
        # verify the required parameter 'entities' is set
        if ('entities' not in params or
                params['entities'] is None):
            raise ValueError("Missing the required parameter `entities` when calling `api_ingestion_asset_asset_id_entities_entities_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501
        if 'entities' in params:
            path_params['entities'] = params['entities']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Ingestion/asset/{assetId}/entities/{entities}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_ingestion_asset_asset_id_errors_validation_errors_post(self, asset_id, validation_errors, **kwargs):  # noqa: E501
        """Updates ValidationErrors field, representing the number of validation errors in an asset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_asset_asset_id_errors_validation_errors_post(asset_id, validation_errors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Id of the asset (required)
        :param int validation_errors: Number of validations errors detected in the asset (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_ingestion_asset_asset_id_errors_validation_errors_post_with_http_info(asset_id, validation_errors, **kwargs)  # noqa: E501
        else:
            (data) = self.api_ingestion_asset_asset_id_errors_validation_errors_post_with_http_info(asset_id, validation_errors, **kwargs)  # noqa: E501
            return data

    def api_ingestion_asset_asset_id_errors_validation_errors_post_with_http_info(self, asset_id, validation_errors, **kwargs):  # noqa: E501
        """Updates ValidationErrors field, representing the number of validation errors in an asset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_asset_asset_id_errors_validation_errors_post_with_http_info(asset_id, validation_errors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Id of the asset (required)
        :param int validation_errors: Number of validations errors detected in the asset (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'validation_errors', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_ingestion_asset_asset_id_errors_validation_errors_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `api_ingestion_asset_asset_id_errors_validation_errors_post`")  # noqa: E501
        # verify the required parameter 'validation_errors' is set
        if ('validation_errors' not in params or
                params['validation_errors'] is None):
            raise ValueError("Missing the required parameter `validation_errors` when calling `api_ingestion_asset_asset_id_errors_validation_errors_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501
        if 'validation_errors' in params:
            path_params['validationErrors'] = params['validation_errors']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Ingestion/asset/{assetId}/errors/{validationErrors}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_ingestion_asset_asset_id_loaded_post(self, asset_id, **kwargs):  # noqa: E501
        """Updates ValidationErrors and Entities fields, representing the number of validation errors and entities in an asset.  Status of the Asset is set to MovedToDataStorageUnit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_asset_asset_id_loaded_post(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Id of the asset (required)
        :param AssetLoadedDto body: Includes the number of validations errors detected in the asset and the number of entities contained in it
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_ingestion_asset_asset_id_loaded_post_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_ingestion_asset_asset_id_loaded_post_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def api_ingestion_asset_asset_id_loaded_post_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Updates ValidationErrors and Entities fields, representing the number of validation errors and entities in an asset.  Status of the Asset is set to MovedToDataStorageUnit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_asset_asset_id_loaded_post_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Id of the asset (required)
        :param AssetLoadedDto body: Includes the number of validations errors detected in the asset and the number of entities contained in it
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_ingestion_asset_asset_id_loaded_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `api_ingestion_asset_asset_id_loaded_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Ingestion/asset/{assetId}/loaded', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_ingestion_loadasset_post(self, **kwargs):  # noqa: E501
        """Registers an asset from the Landing Zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_loadasset_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssetFromLanding body:
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_ingestion_loadasset_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_ingestion_loadasset_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_ingestion_loadasset_post_with_http_info(self, **kwargs):  # noqa: E501
        """Registers an asset from the Landing Zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_loadasset_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssetFromLanding body:
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_ingestion_loadasset_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Ingestion/loadasset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_ingestion_registerasset_post(self, **kwargs):  # noqa: E501
        """Registers an asset from the Landing Zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_registerasset_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_uri: Location of the asset to be registered
        :param bool invalidate_previous_assets: Invalidate previous Assets of the same Entity
        :param str api_version: The requested API version
        :return: AssetFromLanding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_ingestion_registerasset_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_ingestion_registerasset_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_ingestion_registerasset_post_with_http_info(self, **kwargs):  # noqa: E501
        """Registers an asset from the Landing Zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_registerasset_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_uri: Location of the asset to be registered
        :param bool invalidate_previous_assets: Invalidate previous Assets of the same Entity
        :param str api_version: The requested API version
        :return: AssetFromLanding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_uri', 'invalidate_previous_assets', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_ingestion_registerasset_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset_uri' in params:
            query_params.append(('assetUri', params['asset_uri']))  # noqa: E501
        if 'invalidate_previous_assets' in params:
            query_params.append(('invalidatePreviousAssets', params['invalidate_previous_assets']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Ingestion/registerasset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetFromLanding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_ingestion_registerinfo_post(self, **kwargs):  # noqa: E501
        """Registers an asset from the Landing Zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_registerinfo_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssetFromLanding body:
        :param str api_version: The requested API version
        :return: CorePipelineParameter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_ingestion_registerinfo_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_ingestion_registerinfo_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_ingestion_registerinfo_post_with_http_info(self, **kwargs):  # noqa: E501
        """Registers an asset from the Landing Zone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_registerinfo_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssetFromLanding body:
        :param str api_version: The requested API version
        :return: CorePipelineParameter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_ingestion_registerinfo_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Ingestion/registerinfo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CorePipelineParameter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_ingestion_registersetassets_post(self, **kwargs):  # noqa: E501
        """Registers a set of assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_registersetassets_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[RegisterAssetDto] body: Assets to be registered
        :param str api_version: The requested API version
        :return: AssetFromLanding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_ingestion_registersetassets_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_ingestion_registersetassets_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_ingestion_registersetassets_post_with_http_info(self, **kwargs):  # noqa: E501
        """Registers a set of assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_registersetassets_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[RegisterAssetDto] body: Assets to be registered
        :param str api_version: The requested API version
        :return: AssetFromLanding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_ingestion_registersetassets_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Ingestion/registersetassets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetFromLanding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_ingestion_storage_landing_get(self, **kwargs):  # noqa: E501
        """Gets the landing paths availables to upload the asset provided.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_storage_landing_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetname: Name of the asset
        :param int expiration_in_hours: Expiration of the SAS token in the storage. By default is 1 hour
        :param str api_version: The requested API version
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_ingestion_storage_landing_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_ingestion_storage_landing_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_ingestion_storage_landing_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the landing paths availables to upload the asset provided.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_storage_landing_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetname: Name of the asset
        :param int expiration_in_hours: Expiration of the SAS token in the storage. By default is 1 hour
        :param str api_version: The requested API version
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assetname', 'expiration_in_hours', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_ingestion_storage_landing_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'assetname' in params:
            query_params.append(('assetname', params['assetname']))  # noqa: E501
        if 'expiration_in_hours' in params:
            query_params.append(('expirationInHours', params['expiration_in_hours']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Ingestion/storage/landing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_ingestion_transferqueries_post(self, **kwargs):  # noqa: E501
        """Generate Transfer Queries for the given entities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_transferqueries_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: Ids of the entities
        :param str validation_error_table_suffix: Suffix used for the Validation Errors tables
        :param str deltas_table_suffix: Suffix for tables containing deltas (differences) between tables partitions
        :param str last_version_view_suffix: Suffix for the view that shows only the current version of the data
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_ingestion_transferqueries_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_ingestion_transferqueries_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_ingestion_transferqueries_post_with_http_info(self, **kwargs):  # noqa: E501
        """Generate Transfer Queries for the given entities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_ingestion_transferqueries_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: Ids of the entities
        :param str validation_error_table_suffix: Suffix used for the Validation Errors tables
        :param str deltas_table_suffix: Suffix for tables containing deltas (differences) between tables partitions
        :param str last_version_view_suffix: Suffix for the view that shows only the current version of the data
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'validation_error_table_suffix', 'deltas_table_suffix', 'last_version_view_suffix', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_ingestion_transferqueries_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validation_error_table_suffix' in params:
            query_params.append(('validationErrorTableSuffix', params['validation_error_table_suffix']))  # noqa: E501
        if 'deltas_table_suffix' in params:
            query_params.append(('deltasTableSuffix', params['deltas_table_suffix']))  # noqa: E501
        if 'last_version_view_suffix' in params:
            query_params.append(('lastVersionViewSuffix', params['last_version_view_suffix']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/Ingestion/transferqueries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
