# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.0.post19
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Trigger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'str',
        'id_template': 'int',
        'name': 'str',
        'description': 'str',
        'parameters': 'str',
        'id_data_factory': 'int',
        'is_removed': 'bool',
        'last_updated': 'datetime',
        'last_deployed': 'datetime',
        'trigger_template': 'TriggerTemplate',
        'pipelines': 'list[TriggerPipeline]',
        'data_factory': 'DataFactory'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'itemId',
        'id_template': 'idTemplate',
        'name': 'name',
        'description': 'description',
        'parameters': 'parameters',
        'id_data_factory': 'idDataFactory',
        'is_removed': 'isRemoved',
        'last_updated': 'lastUpdated',
        'last_deployed': 'lastDeployed',
        'trigger_template': 'triggerTemplate',
        'pipelines': 'pipelines',
        'data_factory': 'dataFactory'
    }

    def __init__(self, id=None, item_id=None, id_template=None, name=None, description=None, parameters=None, id_data_factory=None, is_removed=None, last_updated=None, last_deployed=None, trigger_template=None, pipelines=None, data_factory=None):  # noqa: E501
        """Trigger - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._id_template = None
        self._name = None
        self._description = None
        self._parameters = None
        self._id_data_factory = None
        self._is_removed = None
        self._last_updated = None
        self._last_deployed = None
        self._trigger_template = None
        self._pipelines = None
        self._data_factory = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if id_template is not None:
            self.id_template = id_template
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if parameters is not None:
            self.parameters = parameters
        if id_data_factory is not None:
            self.id_data_factory = id_data_factory
        if is_removed is not None:
            self.is_removed = is_removed
        if last_updated is not None:
            self.last_updated = last_updated
        if last_deployed is not None:
            self.last_deployed = last_deployed
        if trigger_template is not None:
            self.trigger_template = trigger_template
        if pipelines is not None:
            self.pipelines = pipelines
        if data_factory is not None:
            self.data_factory = data_factory

    @property
    def id(self):
        """Gets the id of this Trigger.  # noqa: E501


        :return: The id of this Trigger.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Trigger.


        :param id: The id of this Trigger.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this Trigger.  # noqa: E501


        :return: The item_id of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Trigger.


        :param item_id: The item_id of this Trigger.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def id_template(self):
        """Gets the id_template of this Trigger.  # noqa: E501


        :return: The id_template of this Trigger.  # noqa: E501
        :rtype: int
        """
        return self._id_template

    @id_template.setter
    def id_template(self, id_template):
        """Sets the id_template of this Trigger.


        :param id_template: The id_template of this Trigger.  # noqa: E501
        :type: int
        """

        self._id_template = id_template

    @property
    def name(self):
        """Gets the name of this Trigger.  # noqa: E501


        :return: The name of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Trigger.


        :param name: The name of this Trigger.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Trigger.  # noqa: E501


        :return: The description of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Trigger.


        :param description: The description of this Trigger.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def parameters(self):
        """Gets the parameters of this Trigger.  # noqa: E501


        :return: The parameters of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Trigger.


        :param parameters: The parameters of this Trigger.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def id_data_factory(self):
        """Gets the id_data_factory of this Trigger.  # noqa: E501


        :return: The id_data_factory of this Trigger.  # noqa: E501
        :rtype: int
        """
        return self._id_data_factory

    @id_data_factory.setter
    def id_data_factory(self, id_data_factory):
        """Sets the id_data_factory of this Trigger.


        :param id_data_factory: The id_data_factory of this Trigger.  # noqa: E501
        :type: int
        """

        self._id_data_factory = id_data_factory

    @property
    def is_removed(self):
        """Gets the is_removed of this Trigger.  # noqa: E501


        :return: The is_removed of this Trigger.  # noqa: E501
        :rtype: bool
        """
        return self._is_removed

    @is_removed.setter
    def is_removed(self, is_removed):
        """Sets the is_removed of this Trigger.


        :param is_removed: The is_removed of this Trigger.  # noqa: E501
        :type: bool
        """

        self._is_removed = is_removed

    @property
    def last_updated(self):
        """Gets the last_updated of this Trigger.  # noqa: E501


        :return: The last_updated of this Trigger.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Trigger.


        :param last_updated: The last_updated of this Trigger.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def last_deployed(self):
        """Gets the last_deployed of this Trigger.  # noqa: E501


        :return: The last_deployed of this Trigger.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deployed

    @last_deployed.setter
    def last_deployed(self, last_deployed):
        """Sets the last_deployed of this Trigger.


        :param last_deployed: The last_deployed of this Trigger.  # noqa: E501
        :type: datetime
        """

        self._last_deployed = last_deployed

    @property
    def trigger_template(self):
        """Gets the trigger_template of this Trigger.  # noqa: E501


        :return: The trigger_template of this Trigger.  # noqa: E501
        :rtype: TriggerTemplate
        """
        return self._trigger_template

    @trigger_template.setter
    def trigger_template(self, trigger_template):
        """Sets the trigger_template of this Trigger.


        :param trigger_template: The trigger_template of this Trigger.  # noqa: E501
        :type: TriggerTemplate
        """

        self._trigger_template = trigger_template

    @property
    def pipelines(self):
        """Gets the pipelines of this Trigger.  # noqa: E501


        :return: The pipelines of this Trigger.  # noqa: E501
        :rtype: list[TriggerPipeline]
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines):
        """Sets the pipelines of this Trigger.


        :param pipelines: The pipelines of this Trigger.  # noqa: E501
        :type: list[TriggerPipeline]
        """

        self._pipelines = pipelines

    @property
    def data_factory(self):
        """Gets the data_factory of this Trigger.  # noqa: E501


        :return: The data_factory of this Trigger.  # noqa: E501
        :rtype: DataFactory
        """
        return self._data_factory

    @data_factory.setter
    def data_factory(self, data_factory):
        """Sets the data_factory of this Trigger.


        :param data_factory: The data_factory of this Trigger.  # noqa: E501
        :type: DataFactory
        """

        self._data_factory = data_factory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Trigger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
