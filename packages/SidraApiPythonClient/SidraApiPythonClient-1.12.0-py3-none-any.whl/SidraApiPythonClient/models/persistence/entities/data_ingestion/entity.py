# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.0.post19
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'str',
        'id_provider': 'int',
        'id_data_storage_unit': 'int',
        'name': 'str',
        'description': 'str',
        'table_name': 'str',
        'regular_expression': 'str',
        'start_valid_date': 'datetime',
        'end_valid_date': 'datetime',
        'provider': 'Provider',
        'serde': 'str',
        'serde_properties': 'str',
        'encoding': 'str',
        'header_lines': 'int',
        'field_delimiter': 'str',
        'last_updated': 'datetime',
        'last_deployed': 'datetime',
        'format': 'str',
        'null_text': 'str',
        're_create_table_on_deployment': 'bool',
        'row_delimiter': 'str',
        'files_per_drop': 'int',
        'source_path': 'str',
        'generate_delta_table': 'bool',
        'additional_properties': 'str',
        'view_definition': 'str',
        'entity_type': 'EntityTypeEnum',
        'id_table_format': 'TableFormatEnum',
        'parent_security_path': 'str',
        'creation_date': 'datetime',
        'security_path': 'str',
        'parent_type': 'str',
        'parent_id': 'int',
        'attributes': 'list[Attribute]',
        'validation_errors_checking': 'ValidationErrorsChecking',
        'pipelines': 'list[EntityPipeline]',
        'tags': 'list[EntityTag]',
        'table_format': 'TableFormat',
        'image': 'str',
        'entity_delta_loads': 'list[EntityDeltaLoad]',
        'data_archival_rule': 'list[DataArchivalRule]',
        'children': 'list[EntityEntity]',
        'parents': 'list[EntityEntity]',
        'detail': 'str'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'itemId',
        'id_provider': 'idProvider',
        'id_data_storage_unit': 'idDataStorageUnit',
        'name': 'name',
        'description': 'description',
        'table_name': 'tableName',
        'regular_expression': 'regularExpression',
        'start_valid_date': 'startValidDate',
        'end_valid_date': 'endValidDate',
        'provider': 'provider',
        'serde': 'serde',
        'serde_properties': 'serdeProperties',
        'encoding': 'encoding',
        'header_lines': 'headerLines',
        'field_delimiter': 'fieldDelimiter',
        'last_updated': 'lastUpdated',
        'last_deployed': 'lastDeployed',
        'format': 'format',
        'null_text': 'nullText',
        're_create_table_on_deployment': 'reCreateTableOnDeployment',
        'row_delimiter': 'rowDelimiter',
        'files_per_drop': 'filesPerDrop',
        'source_path': 'sourcePath',
        'generate_delta_table': 'generateDeltaTable',
        'additional_properties': 'additionalProperties',
        'view_definition': 'viewDefinition',
        'entity_type': 'entityType',
        'id_table_format': 'idTableFormat',
        'parent_security_path': 'parentSecurityPath',
        'creation_date': 'creationDate',
        'security_path': 'securityPath',
        'parent_type': 'parentType',
        'parent_id': 'parentId',
        'attributes': 'attributes',
        'validation_errors_checking': 'validationErrorsChecking',
        'pipelines': 'pipelines',
        'tags': 'tags',
        'table_format': 'tableFormat',
        'image': 'image',
        'entity_delta_loads': 'entityDeltaLoads',
        'data_archival_rule': 'dataArchivalRule',
        'children': 'children',
        'parents': 'parents',
        'detail': 'detail'
    }

    def __init__(self, id=None, item_id=None, id_provider=None, id_data_storage_unit=None, name=None, description=None, table_name=None, regular_expression=None, start_valid_date=None, end_valid_date=None, provider=None, serde=None, serde_properties=None, encoding=None, header_lines=None, field_delimiter=None, last_updated=None, last_deployed=None, format=None, null_text=None, re_create_table_on_deployment=None, row_delimiter=None, files_per_drop=None, source_path=None, generate_delta_table=None, additional_properties=None, view_definition=None, entity_type=None, id_table_format=None, parent_security_path=None, creation_date=None, security_path=None, parent_type=None, parent_id=None, attributes=None, validation_errors_checking=None, pipelines=None, tags=None, table_format=None, image=None, entity_delta_loads=None, data_archival_rule=None, children=None, parents=None, detail=None):  # noqa: E501
        """Entity - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._id_provider = None
        self._id_data_storage_unit = None
        self._name = None
        self._description = None
        self._table_name = None
        self._regular_expression = None
        self._start_valid_date = None
        self._end_valid_date = None
        self._provider = None
        self._serde = None
        self._serde_properties = None
        self._encoding = None
        self._header_lines = None
        self._field_delimiter = None
        self._last_updated = None
        self._last_deployed = None
        self._format = None
        self._null_text = None
        self._re_create_table_on_deployment = None
        self._row_delimiter = None
        self._files_per_drop = None
        self._source_path = None
        self._generate_delta_table = None
        self._additional_properties = None
        self._view_definition = None
        self._entity_type = None
        self._id_table_format = None
        self._parent_security_path = None
        self._creation_date = None
        self._security_path = None
        self._parent_type = None
        self._parent_id = None
        self._attributes = None
        self._validation_errors_checking = None
        self._pipelines = None
        self._tags = None
        self._table_format = None
        self._image = None
        self._entity_delta_loads = None
        self._data_archival_rule = None
        self._children = None
        self._parents = None
        self._detail = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if id_provider is not None:
            self.id_provider = id_provider
        if id_data_storage_unit is not None:
            self.id_data_storage_unit = id_data_storage_unit
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if table_name is not None:
            self.table_name = table_name
        if regular_expression is not None:
            self.regular_expression = regular_expression
        if start_valid_date is not None:
            self.start_valid_date = start_valid_date
        if end_valid_date is not None:
            self.end_valid_date = end_valid_date
        if provider is not None:
            self.provider = provider
        if serde is not None:
            self.serde = serde
        if serde_properties is not None:
            self.serde_properties = serde_properties
        if encoding is not None:
            self.encoding = encoding
        if header_lines is not None:
            self.header_lines = header_lines
        if field_delimiter is not None:
            self.field_delimiter = field_delimiter
        if last_updated is not None:
            self.last_updated = last_updated
        if last_deployed is not None:
            self.last_deployed = last_deployed
        if format is not None:
            self.format = format
        if null_text is not None:
            self.null_text = null_text
        if re_create_table_on_deployment is not None:
            self.re_create_table_on_deployment = re_create_table_on_deployment
        if row_delimiter is not None:
            self.row_delimiter = row_delimiter
        if files_per_drop is not None:
            self.files_per_drop = files_per_drop
        if source_path is not None:
            self.source_path = source_path
        if generate_delta_table is not None:
            self.generate_delta_table = generate_delta_table
        if additional_properties is not None:
            self.additional_properties = additional_properties
        if view_definition is not None:
            self.view_definition = view_definition
        if entity_type is not None:
            self.entity_type = entity_type
        if id_table_format is not None:
            self.id_table_format = id_table_format
        if parent_security_path is not None:
            self.parent_security_path = parent_security_path
        if creation_date is not None:
            self.creation_date = creation_date
        if security_path is not None:
            self.security_path = security_path
        if parent_type is not None:
            self.parent_type = parent_type
        if parent_id is not None:
            self.parent_id = parent_id
        if attributes is not None:
            self.attributes = attributes
        if validation_errors_checking is not None:
            self.validation_errors_checking = validation_errors_checking
        if pipelines is not None:
            self.pipelines = pipelines
        if tags is not None:
            self.tags = tags
        if table_format is not None:
            self.table_format = table_format
        if image is not None:
            self.image = image
        if entity_delta_loads is not None:
            self.entity_delta_loads = entity_delta_loads
        if data_archival_rule is not None:
            self.data_archival_rule = data_archival_rule
        if children is not None:
            self.children = children
        if parents is not None:
            self.parents = parents
        if detail is not None:
            self.detail = detail

    @property
    def id(self):
        """Gets the id of this Entity.  # noqa: E501


        :return: The id of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Entity.


        :param id: The id of this Entity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this Entity.  # noqa: E501


        :return: The item_id of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Entity.


        :param item_id: The item_id of this Entity.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def id_provider(self):
        """Gets the id_provider of this Entity.  # noqa: E501


        :return: The id_provider of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this Entity.


        :param id_provider: The id_provider of this Entity.  # noqa: E501
        :type: int
        """

        self._id_provider = id_provider

    @property
    def id_data_storage_unit(self):
        """Gets the id_data_storage_unit of this Entity.  # noqa: E501


        :return: The id_data_storage_unit of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._id_data_storage_unit

    @id_data_storage_unit.setter
    def id_data_storage_unit(self, id_data_storage_unit):
        """Sets the id_data_storage_unit of this Entity.


        :param id_data_storage_unit: The id_data_storage_unit of this Entity.  # noqa: E501
        :type: int
        """

        self._id_data_storage_unit = id_data_storage_unit

    @property
    def name(self):
        """Gets the name of this Entity.  # noqa: E501


        :return: The name of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Entity.


        :param name: The name of this Entity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Entity.  # noqa: E501


        :return: The description of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Entity.


        :param description: The description of this Entity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def table_name(self):
        """Gets the table_name of this Entity.  # noqa: E501


        :return: The table_name of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this Entity.


        :param table_name: The table_name of this Entity.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def regular_expression(self):
        """Gets the regular_expression of this Entity.  # noqa: E501


        :return: The regular_expression of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._regular_expression

    @regular_expression.setter
    def regular_expression(self, regular_expression):
        """Sets the regular_expression of this Entity.


        :param regular_expression: The regular_expression of this Entity.  # noqa: E501
        :type: str
        """

        self._regular_expression = regular_expression

    @property
    def start_valid_date(self):
        """Gets the start_valid_date of this Entity.  # noqa: E501


        :return: The start_valid_date of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._start_valid_date

    @start_valid_date.setter
    def start_valid_date(self, start_valid_date):
        """Sets the start_valid_date of this Entity.


        :param start_valid_date: The start_valid_date of this Entity.  # noqa: E501
        :type: datetime
        """

        self._start_valid_date = start_valid_date

    @property
    def end_valid_date(self):
        """Gets the end_valid_date of this Entity.  # noqa: E501


        :return: The end_valid_date of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._end_valid_date

    @end_valid_date.setter
    def end_valid_date(self, end_valid_date):
        """Sets the end_valid_date of this Entity.


        :param end_valid_date: The end_valid_date of this Entity.  # noqa: E501
        :type: datetime
        """

        self._end_valid_date = end_valid_date

    @property
    def provider(self):
        """Gets the provider of this Entity.  # noqa: E501


        :return: The provider of this Entity.  # noqa: E501
        :rtype: Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Entity.


        :param provider: The provider of this Entity.  # noqa: E501
        :type: Provider
        """

        self._provider = provider

    @property
    def serde(self):
        """Gets the serde of this Entity.  # noqa: E501


        :return: The serde of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._serde

    @serde.setter
    def serde(self, serde):
        """Sets the serde of this Entity.


        :param serde: The serde of this Entity.  # noqa: E501
        :type: str
        """

        self._serde = serde

    @property
    def serde_properties(self):
        """Gets the serde_properties of this Entity.  # noqa: E501


        :return: The serde_properties of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._serde_properties

    @serde_properties.setter
    def serde_properties(self, serde_properties):
        """Sets the serde_properties of this Entity.


        :param serde_properties: The serde_properties of this Entity.  # noqa: E501
        :type: str
        """

        self._serde_properties = serde_properties

    @property
    def encoding(self):
        """Gets the encoding of this Entity.  # noqa: E501


        :return: The encoding of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this Entity.


        :param encoding: The encoding of this Entity.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    @property
    def header_lines(self):
        """Gets the header_lines of this Entity.  # noqa: E501


        :return: The header_lines of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._header_lines

    @header_lines.setter
    def header_lines(self, header_lines):
        """Sets the header_lines of this Entity.


        :param header_lines: The header_lines of this Entity.  # noqa: E501
        :type: int
        """

        self._header_lines = header_lines

    @property
    def field_delimiter(self):
        """Gets the field_delimiter of this Entity.  # noqa: E501


        :return: The field_delimiter of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._field_delimiter

    @field_delimiter.setter
    def field_delimiter(self, field_delimiter):
        """Sets the field_delimiter of this Entity.


        :param field_delimiter: The field_delimiter of this Entity.  # noqa: E501
        :type: str
        """

        self._field_delimiter = field_delimiter

    @property
    def last_updated(self):
        """Gets the last_updated of this Entity.  # noqa: E501


        :return: The last_updated of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Entity.


        :param last_updated: The last_updated of this Entity.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def last_deployed(self):
        """Gets the last_deployed of this Entity.  # noqa: E501


        :return: The last_deployed of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deployed

    @last_deployed.setter
    def last_deployed(self, last_deployed):
        """Sets the last_deployed of this Entity.


        :param last_deployed: The last_deployed of this Entity.  # noqa: E501
        :type: datetime
        """

        self._last_deployed = last_deployed

    @property
    def format(self):
        """Gets the format of this Entity.  # noqa: E501


        :return: The format of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Entity.


        :param format: The format of this Entity.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def null_text(self):
        """Gets the null_text of this Entity.  # noqa: E501


        :return: The null_text of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._null_text

    @null_text.setter
    def null_text(self, null_text):
        """Sets the null_text of this Entity.


        :param null_text: The null_text of this Entity.  # noqa: E501
        :type: str
        """

        self._null_text = null_text

    @property
    def re_create_table_on_deployment(self):
        """Gets the re_create_table_on_deployment of this Entity.  # noqa: E501


        :return: The re_create_table_on_deployment of this Entity.  # noqa: E501
        :rtype: bool
        """
        return self._re_create_table_on_deployment

    @re_create_table_on_deployment.setter
    def re_create_table_on_deployment(self, re_create_table_on_deployment):
        """Sets the re_create_table_on_deployment of this Entity.


        :param re_create_table_on_deployment: The re_create_table_on_deployment of this Entity.  # noqa: E501
        :type: bool
        """

        self._re_create_table_on_deployment = re_create_table_on_deployment

    @property
    def row_delimiter(self):
        """Gets the row_delimiter of this Entity.  # noqa: E501


        :return: The row_delimiter of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._row_delimiter

    @row_delimiter.setter
    def row_delimiter(self, row_delimiter):
        """Sets the row_delimiter of this Entity.


        :param row_delimiter: The row_delimiter of this Entity.  # noqa: E501
        :type: str
        """

        self._row_delimiter = row_delimiter

    @property
    def files_per_drop(self):
        """Gets the files_per_drop of this Entity.  # noqa: E501


        :return: The files_per_drop of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._files_per_drop

    @files_per_drop.setter
    def files_per_drop(self, files_per_drop):
        """Sets the files_per_drop of this Entity.


        :param files_per_drop: The files_per_drop of this Entity.  # noqa: E501
        :type: int
        """

        self._files_per_drop = files_per_drop

    @property
    def source_path(self):
        """Gets the source_path of this Entity.  # noqa: E501


        :return: The source_path of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this Entity.


        :param source_path: The source_path of this Entity.  # noqa: E501
        :type: str
        """

        self._source_path = source_path

    @property
    def generate_delta_table(self):
        """Gets the generate_delta_table of this Entity.  # noqa: E501


        :return: The generate_delta_table of this Entity.  # noqa: E501
        :rtype: bool
        """
        return self._generate_delta_table

    @generate_delta_table.setter
    def generate_delta_table(self, generate_delta_table):
        """Sets the generate_delta_table of this Entity.


        :param generate_delta_table: The generate_delta_table of this Entity.  # noqa: E501
        :type: bool
        """

        self._generate_delta_table = generate_delta_table

    @property
    def additional_properties(self):
        """Gets the additional_properties of this Entity.  # noqa: E501


        :return: The additional_properties of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this Entity.


        :param additional_properties: The additional_properties of this Entity.  # noqa: E501
        :type: str
        """

        self._additional_properties = additional_properties

    @property
    def view_definition(self):
        """Gets the view_definition of this Entity.  # noqa: E501


        :return: The view_definition of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._view_definition

    @view_definition.setter
    def view_definition(self, view_definition):
        """Sets the view_definition of this Entity.


        :param view_definition: The view_definition of this Entity.  # noqa: E501
        :type: str
        """

        self._view_definition = view_definition

    @property
    def entity_type(self):
        """Gets the entity_type of this Entity.  # noqa: E501


        :return: The entity_type of this Entity.  # noqa: E501
        :rtype: EntityTypeEnum
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Entity.


        :param entity_type: The entity_type of this Entity.  # noqa: E501
        :type: EntityTypeEnum
        """

        self._entity_type = entity_type

    @property
    def id_table_format(self):
        """Gets the id_table_format of this Entity.  # noqa: E501


        :return: The id_table_format of this Entity.  # noqa: E501
        :rtype: TableFormatEnum
        """
        return self._id_table_format

    @id_table_format.setter
    def id_table_format(self, id_table_format):
        """Sets the id_table_format of this Entity.


        :param id_table_format: The id_table_format of this Entity.  # noqa: E501
        :type: TableFormatEnum
        """

        self._id_table_format = id_table_format

    @property
    def parent_security_path(self):
        """Gets the parent_security_path of this Entity.  # noqa: E501


        :return: The parent_security_path of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._parent_security_path

    @parent_security_path.setter
    def parent_security_path(self, parent_security_path):
        """Sets the parent_security_path of this Entity.


        :param parent_security_path: The parent_security_path of this Entity.  # noqa: E501
        :type: str
        """

        self._parent_security_path = parent_security_path

    @property
    def creation_date(self):
        """Gets the creation_date of this Entity.  # noqa: E501


        :return: The creation_date of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Entity.


        :param creation_date: The creation_date of this Entity.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def security_path(self):
        """Gets the security_path of this Entity.  # noqa: E501


        :return: The security_path of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._security_path

    @security_path.setter
    def security_path(self, security_path):
        """Sets the security_path of this Entity.


        :param security_path: The security_path of this Entity.  # noqa: E501
        :type: str
        """

        self._security_path = security_path

    @property
    def parent_type(self):
        """Gets the parent_type of this Entity.  # noqa: E501


        :return: The parent_type of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this Entity.


        :param parent_type: The parent_type of this Entity.  # noqa: E501
        :type: str
        """

        self._parent_type = parent_type

    @property
    def parent_id(self):
        """Gets the parent_id of this Entity.  # noqa: E501


        :return: The parent_id of this Entity.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Entity.


        :param parent_id: The parent_id of this Entity.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def attributes(self):
        """Gets the attributes of this Entity.  # noqa: E501


        :return: The attributes of this Entity.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Entity.


        :param attributes: The attributes of this Entity.  # noqa: E501
        :type: list[Attribute]
        """

        self._attributes = attributes

    @property
    def validation_errors_checking(self):
        """Gets the validation_errors_checking of this Entity.  # noqa: E501


        :return: The validation_errors_checking of this Entity.  # noqa: E501
        :rtype: ValidationErrorsChecking
        """
        return self._validation_errors_checking

    @validation_errors_checking.setter
    def validation_errors_checking(self, validation_errors_checking):
        """Sets the validation_errors_checking of this Entity.


        :param validation_errors_checking: The validation_errors_checking of this Entity.  # noqa: E501
        :type: ValidationErrorsChecking
        """

        self._validation_errors_checking = validation_errors_checking

    @property
    def pipelines(self):
        """Gets the pipelines of this Entity.  # noqa: E501


        :return: The pipelines of this Entity.  # noqa: E501
        :rtype: list[EntityPipeline]
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines):
        """Sets the pipelines of this Entity.


        :param pipelines: The pipelines of this Entity.  # noqa: E501
        :type: list[EntityPipeline]
        """

        self._pipelines = pipelines

    @property
    def tags(self):
        """Gets the tags of this Entity.  # noqa: E501


        :return: The tags of this Entity.  # noqa: E501
        :rtype: list[EntityTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Entity.


        :param tags: The tags of this Entity.  # noqa: E501
        :type: list[EntityTag]
        """

        self._tags = tags

    @property
    def table_format(self):
        """Gets the table_format of this Entity.  # noqa: E501


        :return: The table_format of this Entity.  # noqa: E501
        :rtype: TableFormat
        """
        return self._table_format

    @table_format.setter
    def table_format(self, table_format):
        """Sets the table_format of this Entity.


        :param table_format: The table_format of this Entity.  # noqa: E501
        :type: TableFormat
        """

        self._table_format = table_format

    @property
    def image(self):
        """Gets the image of this Entity.  # noqa: E501


        :return: The image of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Entity.


        :param image: The image of this Entity.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def entity_delta_loads(self):
        """Gets the entity_delta_loads of this Entity.  # noqa: E501


        :return: The entity_delta_loads of this Entity.  # noqa: E501
        :rtype: list[EntityDeltaLoad]
        """
        return self._entity_delta_loads

    @entity_delta_loads.setter
    def entity_delta_loads(self, entity_delta_loads):
        """Sets the entity_delta_loads of this Entity.


        :param entity_delta_loads: The entity_delta_loads of this Entity.  # noqa: E501
        :type: list[EntityDeltaLoad]
        """

        self._entity_delta_loads = entity_delta_loads

    @property
    def data_archival_rule(self):
        """Gets the data_archival_rule of this Entity.  # noqa: E501


        :return: The data_archival_rule of this Entity.  # noqa: E501
        :rtype: list[DataArchivalRule]
        """
        return self._data_archival_rule

    @data_archival_rule.setter
    def data_archival_rule(self, data_archival_rule):
        """Sets the data_archival_rule of this Entity.


        :param data_archival_rule: The data_archival_rule of this Entity.  # noqa: E501
        :type: list[DataArchivalRule]
        """

        self._data_archival_rule = data_archival_rule

    @property
    def children(self):
        """Gets the children of this Entity.  # noqa: E501


        :return: The children of this Entity.  # noqa: E501
        :rtype: list[EntityEntity]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Entity.


        :param children: The children of this Entity.  # noqa: E501
        :type: list[EntityEntity]
        """

        self._children = children

    @property
    def parents(self):
        """Gets the parents of this Entity.  # noqa: E501


        :return: The parents of this Entity.  # noqa: E501
        :rtype: list[EntityEntity]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this Entity.


        :param parents: The parents of this Entity.  # noqa: E501
        :type: list[EntityEntity]
        """

        self._parents = parents

    @property
    def detail(self):
        """Gets the detail of this Entity.  # noqa: E501


        :return: The detail of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Entity.


        :param detail: The detail of this Entity.  # noqa: E501
        :type: str
        """

        self._detail = detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
