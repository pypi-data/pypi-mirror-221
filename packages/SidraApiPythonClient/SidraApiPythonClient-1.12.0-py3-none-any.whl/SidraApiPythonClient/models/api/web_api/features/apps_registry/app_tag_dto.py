# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.0.post19
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AppTagDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_app': 'int',
        'id_tag': 'int',
        'id_tag_type': 'TagTypeEnum',
        'tag_type_name': 'str',
        'tag_name': 'str'
    }

    attribute_map = {
        'id_app': 'idApp',
        'id_tag': 'idTag',
        'id_tag_type': 'idTagType',
        'tag_type_name': 'tagTypeName',
        'tag_name': 'tagName'
    }

    def __init__(self, id_app=None, id_tag=None, id_tag_type=None, tag_type_name=None, tag_name=None):  # noqa: E501
        """AppTagDto - a model defined in Swagger"""  # noqa: E501
        self._id_app = None
        self._id_tag = None
        self._id_tag_type = None
        self._tag_type_name = None
        self._tag_name = None
        self.discriminator = None
        if id_app is not None:
            self.id_app = id_app
        if id_tag is not None:
            self.id_tag = id_tag
        if id_tag_type is not None:
            self.id_tag_type = id_tag_type
        if tag_type_name is not None:
            self.tag_type_name = tag_type_name
        if tag_name is not None:
            self.tag_name = tag_name

    @property
    def id_app(self):
        """Gets the id_app of this AppTagDto.  # noqa: E501

        Entity Id  # noqa: E501

        :return: The id_app of this AppTagDto.  # noqa: E501
        :rtype: int
        """
        return self._id_app

    @id_app.setter
    def id_app(self, id_app):
        """Sets the id_app of this AppTagDto.

        Entity Id  # noqa: E501

        :param id_app: The id_app of this AppTagDto.  # noqa: E501
        :type: int
        """

        self._id_app = id_app

    @property
    def id_tag(self):
        """Gets the id_tag of this AppTagDto.  # noqa: E501

        Tag Id  # noqa: E501

        :return: The id_tag of this AppTagDto.  # noqa: E501
        :rtype: int
        """
        return self._id_tag

    @id_tag.setter
    def id_tag(self, id_tag):
        """Sets the id_tag of this AppTagDto.

        Tag Id  # noqa: E501

        :param id_tag: The id_tag of this AppTagDto.  # noqa: E501
        :type: int
        """

        self._id_tag = id_tag

    @property
    def id_tag_type(self):
        """Gets the id_tag_type of this AppTagDto.  # noqa: E501


        :return: The id_tag_type of this AppTagDto.  # noqa: E501
        :rtype: TagTypeEnum
        """
        return self._id_tag_type

    @id_tag_type.setter
    def id_tag_type(self, id_tag_type):
        """Sets the id_tag_type of this AppTagDto.


        :param id_tag_type: The id_tag_type of this AppTagDto.  # noqa: E501
        :type: TagTypeEnum
        """

        self._id_tag_type = id_tag_type

    @property
    def tag_type_name(self):
        """Gets the tag_type_name of this AppTagDto.  # noqa: E501

        Tag type name  # noqa: E501

        :return: The tag_type_name of this AppTagDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_type_name

    @tag_type_name.setter
    def tag_type_name(self, tag_type_name):
        """Sets the tag_type_name of this AppTagDto.

        Tag type name  # noqa: E501

        :param tag_type_name: The tag_type_name of this AppTagDto.  # noqa: E501
        :type: str
        """

        self._tag_type_name = tag_type_name

    @property
    def tag_name(self):
        """Gets the tag_name of this AppTagDto.  # noqa: E501

        Name of the tag.  # noqa: E501

        :return: The tag_name of this AppTagDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this AppTagDto.

        Name of the tag.  # noqa: E501

        :param tag_name: The tag_name of this AppTagDto.  # noqa: E501
        :type: str
        """

        self._tag_name = tag_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppTagDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppTagDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
