# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.2.post1
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TriggerTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'str',
        'name': 'str',
        'description': 'str',
        'template': 'str',
        'parameters': 'str',
        'pipeline_template': 'str',
        'default_value': 'str',
        'triggers': 'list[Trigger]',
        'trigger_template_type': 'TriggerTemplateType',
        'id_trigger_template_type': 'TriggerTemplateTypeEnum'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'itemId',
        'name': 'name',
        'description': 'description',
        'template': 'template',
        'parameters': 'parameters',
        'pipeline_template': 'pipelineTemplate',
        'default_value': 'defaultValue',
        'triggers': 'triggers',
        'trigger_template_type': 'triggerTemplateType',
        'id_trigger_template_type': 'idTriggerTemplateType'
    }

    def __init__(self, id=None, item_id=None, name=None, description=None, template=None, parameters=None, pipeline_template=None, default_value=None, triggers=None, trigger_template_type=None, id_trigger_template_type=None):  # noqa: E501
        """TriggerTemplate - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._name = None
        self._description = None
        self._template = None
        self._parameters = None
        self._pipeline_template = None
        self._default_value = None
        self._triggers = None
        self._trigger_template_type = None
        self._id_trigger_template_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if template is not None:
            self.template = template
        if parameters is not None:
            self.parameters = parameters
        if pipeline_template is not None:
            self.pipeline_template = pipeline_template
        if default_value is not None:
            self.default_value = default_value
        if triggers is not None:
            self.triggers = triggers
        if trigger_template_type is not None:
            self.trigger_template_type = trigger_template_type
        if id_trigger_template_type is not None:
            self.id_trigger_template_type = id_trigger_template_type

    @property
    def id(self):
        """Gets the id of this TriggerTemplate.  # noqa: E501


        :return: The id of this TriggerTemplate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TriggerTemplate.


        :param id: The id of this TriggerTemplate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this TriggerTemplate.  # noqa: E501


        :return: The item_id of this TriggerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this TriggerTemplate.


        :param item_id: The item_id of this TriggerTemplate.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this TriggerTemplate.  # noqa: E501


        :return: The name of this TriggerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TriggerTemplate.


        :param name: The name of this TriggerTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this TriggerTemplate.  # noqa: E501


        :return: The description of this TriggerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TriggerTemplate.


        :param description: The description of this TriggerTemplate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def template(self):
        """Gets the template of this TriggerTemplate.  # noqa: E501


        :return: The template of this TriggerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this TriggerTemplate.


        :param template: The template of this TriggerTemplate.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def parameters(self):
        """Gets the parameters of this TriggerTemplate.  # noqa: E501


        :return: The parameters of this TriggerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TriggerTemplate.


        :param parameters: The parameters of this TriggerTemplate.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def pipeline_template(self):
        """Gets the pipeline_template of this TriggerTemplate.  # noqa: E501


        :return: The pipeline_template of this TriggerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_template

    @pipeline_template.setter
    def pipeline_template(self, pipeline_template):
        """Sets the pipeline_template of this TriggerTemplate.


        :param pipeline_template: The pipeline_template of this TriggerTemplate.  # noqa: E501
        :type: str
        """

        self._pipeline_template = pipeline_template

    @property
    def default_value(self):
        """Gets the default_value of this TriggerTemplate.  # noqa: E501


        :return: The default_value of this TriggerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this TriggerTemplate.


        :param default_value: The default_value of this TriggerTemplate.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def triggers(self):
        """Gets the triggers of this TriggerTemplate.  # noqa: E501


        :return: The triggers of this TriggerTemplate.  # noqa: E501
        :rtype: list[Trigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this TriggerTemplate.


        :param triggers: The triggers of this TriggerTemplate.  # noqa: E501
        :type: list[Trigger]
        """

        self._triggers = triggers

    @property
    def trigger_template_type(self):
        """Gets the trigger_template_type of this TriggerTemplate.  # noqa: E501


        :return: The trigger_template_type of this TriggerTemplate.  # noqa: E501
        :rtype: TriggerTemplateType
        """
        return self._trigger_template_type

    @trigger_template_type.setter
    def trigger_template_type(self, trigger_template_type):
        """Sets the trigger_template_type of this TriggerTemplate.


        :param trigger_template_type: The trigger_template_type of this TriggerTemplate.  # noqa: E501
        :type: TriggerTemplateType
        """

        self._trigger_template_type = trigger_template_type

    @property
    def id_trigger_template_type(self):
        """Gets the id_trigger_template_type of this TriggerTemplate.  # noqa: E501


        :return: The id_trigger_template_type of this TriggerTemplate.  # noqa: E501
        :rtype: TriggerTemplateTypeEnum
        """
        return self._id_trigger_template_type

    @id_trigger_template_type.setter
    def id_trigger_template_type(self, id_trigger_template_type):
        """Sets the id_trigger_template_type of this TriggerTemplate.


        :param id_trigger_template_type: The id_trigger_template_type of this TriggerTemplate.  # noqa: E501
        :type: TriggerTemplateTypeEnum
        """

        self._id_trigger_template_type = id_trigger_template_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TriggerTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TriggerTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
