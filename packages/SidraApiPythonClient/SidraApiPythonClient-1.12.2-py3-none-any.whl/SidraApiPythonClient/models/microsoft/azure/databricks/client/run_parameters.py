# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    Sidra API version: 1.12.2.post1
    Contact: sidra@plainconcepts.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RunParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jar_params': 'list[str]',
        'notebook_params': 'dict(str, str)',
        'python_params': 'list[str]',
        'spark_submit_params': 'list[str]'
    }

    attribute_map = {
        'jar_params': 'jar_params',
        'notebook_params': 'notebook_params',
        'python_params': 'python_params',
        'spark_submit_params': 'spark_submit_params'
    }

    def __init__(self, jar_params=None, notebook_params=None, python_params=None, spark_submit_params=None):  # noqa: E501
        """RunParameters - a model defined in Swagger"""  # noqa: E501
        self._jar_params = None
        self._notebook_params = None
        self._python_params = None
        self._spark_submit_params = None
        self.discriminator = None
        if jar_params is not None:
            self.jar_params = jar_params
        if notebook_params is not None:
            self.notebook_params = notebook_params
        if python_params is not None:
            self.python_params = python_params
        if spark_submit_params is not None:
            self.spark_submit_params = spark_submit_params

    @property
    def jar_params(self):
        """Gets the jar_params of this RunParameters.  # noqa: E501


        :return: The jar_params of this RunParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._jar_params

    @jar_params.setter
    def jar_params(self, jar_params):
        """Sets the jar_params of this RunParameters.


        :param jar_params: The jar_params of this RunParameters.  # noqa: E501
        :type: list[str]
        """

        self._jar_params = jar_params

    @property
    def notebook_params(self):
        """Gets the notebook_params of this RunParameters.  # noqa: E501


        :return: The notebook_params of this RunParameters.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._notebook_params

    @notebook_params.setter
    def notebook_params(self, notebook_params):
        """Sets the notebook_params of this RunParameters.


        :param notebook_params: The notebook_params of this RunParameters.  # noqa: E501
        :type: dict(str, str)
        """

        self._notebook_params = notebook_params

    @property
    def python_params(self):
        """Gets the python_params of this RunParameters.  # noqa: E501


        :return: The python_params of this RunParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._python_params

    @python_params.setter
    def python_params(self, python_params):
        """Sets the python_params of this RunParameters.


        :param python_params: The python_params of this RunParameters.  # noqa: E501
        :type: list[str]
        """

        self._python_params = python_params

    @property
    def spark_submit_params(self):
        """Gets the spark_submit_params of this RunParameters.  # noqa: E501


        :return: The spark_submit_params of this RunParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._spark_submit_params

    @spark_submit_params.setter
    def spark_submit_params(self, spark_submit_params):
        """Sets the spark_submit_params of this RunParameters.


        :param spark_submit_params: The spark_submit_params of this RunParameters.  # noqa: E501
        :type: list[str]
        """

        self._spark_submit_params = spark_submit_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
