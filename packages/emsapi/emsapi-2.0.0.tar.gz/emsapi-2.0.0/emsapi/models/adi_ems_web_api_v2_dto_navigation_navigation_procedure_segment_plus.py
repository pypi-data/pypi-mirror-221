# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AdiEmsWebApiV2DtoNavigationNavigationProcedureSegmentPlus(Model):
    """A {Adi.Ems.Web.Api.V2.Dto.Navigation.NavigationProcedureSegment} with some
    more data. Specifically this nests subtypes, like waypoints, rather than
    just using id references.

    :param id: The id of the segment
    :type id: int
    :param type: The segment type
    :type type: str
    :param transition_id: The procedure segment id
    :type transition_id: str
    :param sequence_number: The procedure segment sequence number
    :type sequence_number: int
    :param track_code: The procedure segment
    :type track_code: str
    :param waypoint_id: The procedure segment waypoint id
    :type waypoint_id: int
    :param waypoint_desc_codes: The procedure segment waypoint description
     codes
    :type waypoint_desc_codes: list[str]
    :param waypoint_bearing: The bearing to the waypoint
    :type waypoint_bearing: float
    :param waypoint_distance: The distance to the waypoint
    :type waypoint_distance: float
    :param navaids: The navaids referenced by this segment
    :type navaids:
     list[~emsapi.models.AdiEmsWebApiV2DtoNavigationNavigationProcedureSegmentNavaid]
    :param turn_direction: The procedure segment turn direction
    :type turn_direction: str
    :param altitude_description: The procedure segment altitude description
    :type altitude_description: str
    :param altitude1: The procedure segment altitude 1
    :type altitude1: str
    :param altitude2: The procedure segment altitude 2
    :type altitude2: str
    :param is_iaf: Flag that lets us know if the segment is IAF or not
    :type is_iaf: bool
    :param next_segment_id: The id of the next segment, this is needed to get
     the correct
     order of segments
    :type next_segment_id: int
    :param waypoint: The procedure segment waypoint
    :type waypoint:
     ~emsapi.models.AdiEmsWebApiV2DtoNavigationNavigationWaypoint
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'type': {'key': 'type', 'type': 'str'},
        'transition_id': {'key': 'transitionId', 'type': 'str'},
        'sequence_number': {'key': 'sequenceNumber', 'type': 'int'},
        'track_code': {'key': 'trackCode', 'type': 'str'},
        'waypoint_id': {'key': 'waypointId', 'type': 'int'},
        'waypoint_desc_codes': {'key': 'waypointDescCodes', 'type': '[str]'},
        'waypoint_bearing': {'key': 'waypointBearing', 'type': 'float'},
        'waypoint_distance': {'key': 'waypointDistance', 'type': 'float'},
        'navaids': {'key': 'navaids', 'type': '[AdiEmsWebApiV2DtoNavigationNavigationProcedureSegmentNavaid]'},
        'turn_direction': {'key': 'turnDirection', 'type': 'str'},
        'altitude_description': {'key': 'altitudeDescription', 'type': 'str'},
        'altitude1': {'key': 'altitude1', 'type': 'str'},
        'altitude2': {'key': 'altitude2', 'type': 'str'},
        'is_iaf': {'key': 'isIAF', 'type': 'bool'},
        'next_segment_id': {'key': 'nextSegmentId', 'type': 'int'},
        'waypoint': {'key': 'waypoint', 'type': 'AdiEmsWebApiV2DtoNavigationNavigationWaypoint'},
    }

    def __init__(self, **kwargs):
        super(AdiEmsWebApiV2DtoNavigationNavigationProcedureSegmentPlus, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)
        self.transition_id = kwargs.get('transition_id', None)
        self.sequence_number = kwargs.get('sequence_number', None)
        self.track_code = kwargs.get('track_code', None)
        self.waypoint_id = kwargs.get('waypoint_id', None)
        self.waypoint_desc_codes = kwargs.get('waypoint_desc_codes', None)
        self.waypoint_bearing = kwargs.get('waypoint_bearing', None)
        self.waypoint_distance = kwargs.get('waypoint_distance', None)
        self.navaids = kwargs.get('navaids', None)
        self.turn_direction = kwargs.get('turn_direction', None)
        self.altitude_description = kwargs.get('altitude_description', None)
        self.altitude1 = kwargs.get('altitude1', None)
        self.altitude2 = kwargs.get('altitude2', None)
        self.is_iaf = kwargs.get('is_iaf', None)
        self.next_segment_id = kwargs.get('next_segment_id', None)
        self.waypoint = kwargs.get('waypoint', None)
