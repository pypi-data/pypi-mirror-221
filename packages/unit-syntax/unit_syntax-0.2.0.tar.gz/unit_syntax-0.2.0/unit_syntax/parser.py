#!/usr/bin/env python3.8
# @generated by pegen from grammar.txt

import ast
import sys
import tokenize

from typing import Any, Optional

from pegen.parser import memoize, memoize_left_rec, logger, Parser
# Keywords and soft keywords are listed at the end of the parser definition.
class GeneratedParser(Parser):

    @memoize
    def start(self) -> Optional[Any]:
        # start: file
        mark = self._mark()
        if (
            (file := self.file())
        ):
            return file;
        self._reset(mark)
        return None;

    @memoize
    def file(self) -> Optional[Any]:
        # file: statements? $
        mark = self._mark()
        if (
            (opt := self.statements(),)
            and
            (_endmarker := self.expect('ENDMARKER'))
        ):
            return [opt, _endmarker];
        self._reset(mark)
        return None;

    @memoize
    def interactive(self) -> Optional[Any]:
        # interactive: statement_newline
        mark = self._mark()
        if (
            (statement_newline := self.statement_newline())
        ):
            return statement_newline;
        self._reset(mark)
        return None;

    @memoize
    def eval(self) -> Optional[Any]:
        # eval: expressions NEWLINE* $
        mark = self._mark()
        if (
            (expressions := self.expressions())
            and
            (_loop0_1 := self._loop0_1(),)
            and
            (_endmarker := self.expect('ENDMARKER'))
        ):
            return [expressions, _loop0_1, _endmarker];
        self._reset(mark)
        return None;

    @memoize
    def func_type(self) -> Optional[Any]:
        # func_type: '(' type_expressions? ')' '->' expression NEWLINE* $
        mark = self._mark()
        if (
            (literal := self.expect('('))
            and
            (opt := self.type_expressions(),)
            and
            (literal_1 := self.expect(')'))
            and
            (literal_2 := self.expect('->'))
            and
            (expression := self.expression())
            and
            (_loop0_2 := self._loop0_2(),)
            and
            (_endmarker := self.expect('ENDMARKER'))
        ):
            return [literal, opt, literal_1, literal_2, expression, _loop0_2, _endmarker];
        self._reset(mark)
        return None;

    @memoize
    def fstring(self) -> Optional[Any]:
        # fstring: star_expressions
        mark = self._mark()
        if (
            (star_expressions := self.star_expressions())
        ):
            return star_expressions;
        self._reset(mark)
        return None;

    @memoize
    def type_expressions(self) -> Optional[Any]:
        # type_expressions: ','.expression+ ',' '*' expression ',' '**' expression | ','.expression+ ',' '*' expression | ','.expression+ ',' '**' expression | '*' expression ',' '**' expression | '*' expression | '**' expression | ','.expression+
        mark = self._mark()
        if (
            (_gather_3 := self._gather_3())
            and
            (literal := self.expect(','))
            and
            (literal_1 := self.expect('*'))
            and
            (expression := self.expression())
            and
            (literal_2 := self.expect(','))
            and
            (literal_3 := self.expect('**'))
            and
            (expression_1 := self.expression())
        ):
            return [_gather_3, literal, literal_1, expression, literal_2, literal_3, expression_1];
        self._reset(mark)
        if (
            (_gather_5 := self._gather_5())
            and
            (literal := self.expect(','))
            and
            (literal_1 := self.expect('*'))
            and
            (expression := self.expression())
        ):
            return [_gather_5, literal, literal_1, expression];
        self._reset(mark)
        if (
            (_gather_7 := self._gather_7())
            and
            (literal := self.expect(','))
            and
            (literal_1 := self.expect('**'))
            and
            (expression := self.expression())
        ):
            return [_gather_7, literal, literal_1, expression];
        self._reset(mark)
        if (
            (literal := self.expect('*'))
            and
            (expression := self.expression())
            and
            (literal_1 := self.expect(','))
            and
            (literal_2 := self.expect('**'))
            and
            (expression_1 := self.expression())
        ):
            return [literal, expression, literal_1, literal_2, expression_1];
        self._reset(mark)
        if (
            (literal := self.expect('*'))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        if (
            (literal := self.expect('**'))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        if (
            (_gather_9 := self._gather_9())
        ):
            return _gather_9;
        self._reset(mark)
        return None;

    @memoize
    def statements(self) -> Optional[Any]:
        # statements: statement+
        mark = self._mark()
        if (
            (_loop1_11 := self._loop1_11())
        ):
            return _loop1_11;
        self._reset(mark)
        return None;

    @memoize
    def statement(self) -> Optional[Any]:
        # statement: compound_stmt | simple_stmt
        mark = self._mark()
        if (
            (compound_stmt := self.compound_stmt())
        ):
            return compound_stmt;
        self._reset(mark)
        if (
            (simple_stmt := self.simple_stmt())
        ):
            return simple_stmt;
        self._reset(mark)
        return None;

    @memoize
    def statement_newline(self) -> Optional[Any]:
        # statement_newline: compound_stmt NEWLINE | simple_stmt | NEWLINE | $
        mark = self._mark()
        if (
            (compound_stmt := self.compound_stmt())
            and
            (_newline := self.expect('NEWLINE'))
        ):
            return [compound_stmt, _newline];
        self._reset(mark)
        if (
            (simple_stmt := self.simple_stmt())
        ):
            return simple_stmt;
        self._reset(mark)
        if (
            (_newline := self.expect('NEWLINE'))
        ):
            return _newline;
        self._reset(mark)
        if (
            (_endmarker := self.expect('ENDMARKER'))
        ):
            return _endmarker;
        self._reset(mark)
        return None;

    @memoize
    def simple_stmt(self) -> Optional[Any]:
        # simple_stmt: small_stmt !';' NEWLINE | ';'.small_stmt+ ';'? NEWLINE
        mark = self._mark()
        if (
            (small_stmt := self.small_stmt())
            and
            (self.negative_lookahead(self.expect, ';'))
            and
            (_newline := self.expect('NEWLINE'))
        ):
            return [small_stmt, _newline];
        self._reset(mark)
        if (
            (_gather_12 := self._gather_12())
            and
            (opt := self.expect(';'),)
            and
            (_newline := self.expect('NEWLINE'))
        ):
            return [_gather_12, opt, _newline];
        self._reset(mark)
        return None;

    @memoize
    def small_stmt(self) -> Optional[Any]:
        # small_stmt: assignment | star_expressions | return_stmt | import_stmt | raise_stmt | 'pass' | del_stmt | yield_stmt | assert_stmt | 'break' | 'continue' | global_stmt | nonlocal_stmt
        mark = self._mark()
        if (
            (assignment := self.assignment())
        ):
            return assignment;
        self._reset(mark)
        if (
            (star_expressions := self.star_expressions())
        ):
            return star_expressions;
        self._reset(mark)
        if (
            (return_stmt := self.return_stmt())
        ):
            return return_stmt;
        self._reset(mark)
        if (
            (import_stmt := self.import_stmt())
        ):
            return import_stmt;
        self._reset(mark)
        if (
            (raise_stmt := self.raise_stmt())
        ):
            return raise_stmt;
        self._reset(mark)
        if (
            (literal := self.expect('pass'))
        ):
            return literal;
        self._reset(mark)
        if (
            (del_stmt := self.del_stmt())
        ):
            return del_stmt;
        self._reset(mark)
        if (
            (yield_stmt := self.yield_stmt())
        ):
            return yield_stmt;
        self._reset(mark)
        if (
            (assert_stmt := self.assert_stmt())
        ):
            return assert_stmt;
        self._reset(mark)
        if (
            (literal := self.expect('break'))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('continue'))
        ):
            return literal;
        self._reset(mark)
        if (
            (global_stmt := self.global_stmt())
        ):
            return global_stmt;
        self._reset(mark)
        if (
            (nonlocal_stmt := self.nonlocal_stmt())
        ):
            return nonlocal_stmt;
        self._reset(mark)
        return None;

    @memoize
    def compound_stmt(self) -> Optional[Any]:
        # compound_stmt: function_def | if_stmt | class_def | with_stmt | for_stmt | try_stmt | while_stmt
        mark = self._mark()
        if (
            (function_def := self.function_def())
        ):
            return function_def;
        self._reset(mark)
        if (
            (if_stmt := self.if_stmt())
        ):
            return if_stmt;
        self._reset(mark)
        if (
            (class_def := self.class_def())
        ):
            return class_def;
        self._reset(mark)
        if (
            (with_stmt := self.with_stmt())
        ):
            return with_stmt;
        self._reset(mark)
        if (
            (for_stmt := self.for_stmt())
        ):
            return for_stmt;
        self._reset(mark)
        if (
            (try_stmt := self.try_stmt())
        ):
            return try_stmt;
        self._reset(mark)
        if (
            (while_stmt := self.while_stmt())
        ):
            return while_stmt;
        self._reset(mark)
        return None;

    @memoize
    def assignment(self) -> Optional[Any]:
        # assignment: NAME ':' expression ['=' annotated_rhs] | ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs] | ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT? | single_target augassign ~ (yield_expr | star_expressions)
        mark = self._mark()
        if (
            (name := self.name())
            and
            (literal := self.expect(':'))
            and
            (expression := self.expression())
            and
            (opt := self._tmp_14(),)
        ):
            return [name, literal, expression, opt];
        self._reset(mark)
        if (
            (_tmp_15 := self._tmp_15())
            and
            (literal := self.expect(':'))
            and
            (expression := self.expression())
            and
            (opt := self._tmp_16(),)
        ):
            return [_tmp_15, literal, expression, opt];
        self._reset(mark)
        if (
            (_loop1_17 := self._loop1_17())
            and
            (_tmp_18 := self._tmp_18())
            and
            (self.negative_lookahead(self.expect, '='))
            and
            (opt := self.type_comment(),)
        ):
            return [_loop1_17, _tmp_18, opt];
        self._reset(mark)
        cut = False
        if (
            (single_target := self.single_target())
            and
            (augassign := self.augassign())
            and
            (cut := True)
            and
            (_tmp_19 := self._tmp_19())
        ):
            return [single_target, augassign, _tmp_19];
        self._reset(mark)
        if cut:
            return None;
        return None;

    @memoize
    def augassign(self) -> Optional[Any]:
        # augassign: '+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//='
        mark = self._mark()
        if (
            (literal := self.expect('+='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('-='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('*='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('@='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('/='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('%='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('&='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('|='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('^='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('<<='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('>>='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('**='))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('//='))
        ):
            return literal;
        self._reset(mark)
        return None;

    @memoize
    def global_stmt(self) -> Optional[Any]:
        # global_stmt: 'global' ','.NAME+
        mark = self._mark()
        if (
            (literal := self.expect('global'))
            and
            (_gather_20 := self._gather_20())
        ):
            return [literal, _gather_20];
        self._reset(mark)
        return None;

    @memoize
    def nonlocal_stmt(self) -> Optional[Any]:
        # nonlocal_stmt: 'nonlocal' ','.NAME+
        mark = self._mark()
        if (
            (literal := self.expect('nonlocal'))
            and
            (_gather_22 := self._gather_22())
        ):
            return [literal, _gather_22];
        self._reset(mark)
        return None;

    @memoize
    def yield_stmt(self) -> Optional[Any]:
        # yield_stmt: yield_expr
        mark = self._mark()
        if (
            (yield_expr := self.yield_expr())
        ):
            return yield_expr;
        self._reset(mark)
        return None;

    @memoize
    def assert_stmt(self) -> Optional[Any]:
        # assert_stmt: 'assert' expression [',' expression]
        mark = self._mark()
        if (
            (literal := self.expect('assert'))
            and
            (expression := self.expression())
            and
            (opt := self._tmp_24(),)
        ):
            return [literal, expression, opt];
        self._reset(mark)
        return None;

    @memoize
    def del_stmt(self) -> Optional[Any]:
        # del_stmt: 'del' del_targets &(';' | NEWLINE)
        mark = self._mark()
        if (
            (literal := self.expect('del'))
            and
            (del_targets := self.del_targets())
            and
            (self.positive_lookahead(self._tmp_25, ))
        ):
            return [literal, del_targets];
        self._reset(mark)
        return None;

    @memoize
    def import_stmt(self) -> Optional[Any]:
        # import_stmt: import_name | import_from
        mark = self._mark()
        if (
            (import_name := self.import_name())
        ):
            return import_name;
        self._reset(mark)
        if (
            (import_from := self.import_from())
        ):
            return import_from;
        self._reset(mark)
        return None;

    @memoize
    def import_name(self) -> Optional[Any]:
        # import_name: 'import' dotted_as_names
        mark = self._mark()
        if (
            (literal := self.expect('import'))
            and
            (dotted_as_names := self.dotted_as_names())
        ):
            return [literal, dotted_as_names];
        self._reset(mark)
        return None;

    @memoize
    def import_from(self) -> Optional[Any]:
        # import_from: 'from' (('.' | '...'))* dotted_name 'import' import_from_targets | 'from' (('.' | '...'))+ 'import' import_from_targets
        mark = self._mark()
        if (
            (literal := self.expect('from'))
            and
            (_loop0_26 := self._loop0_26(),)
            and
            (dotted_name := self.dotted_name())
            and
            (literal_1 := self.expect('import'))
            and
            (import_from_targets := self.import_from_targets())
        ):
            return [literal, _loop0_26, dotted_name, literal_1, import_from_targets];
        self._reset(mark)
        if (
            (literal := self.expect('from'))
            and
            (_loop1_27 := self._loop1_27())
            and
            (literal_1 := self.expect('import'))
            and
            (import_from_targets := self.import_from_targets())
        ):
            return [literal, _loop1_27, literal_1, import_from_targets];
        self._reset(mark)
        return None;

    @memoize
    def import_from_targets(self) -> Optional[Any]:
        # import_from_targets: '(' import_from_as_names ','? ')' | import_from_as_names !',' | '*'
        mark = self._mark()
        if (
            (literal := self.expect('('))
            and
            (import_from_as_names := self.import_from_as_names())
            and
            (opt := self.expect(','),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, import_from_as_names, opt, literal_1];
        self._reset(mark)
        if (
            (import_from_as_names := self.import_from_as_names())
            and
            (self.negative_lookahead(self.expect, ','))
        ):
            return import_from_as_names;
        self._reset(mark)
        if (
            (literal := self.expect('*'))
        ):
            return literal;
        self._reset(mark)
        return None;

    @memoize
    def import_from_as_names(self) -> Optional[Any]:
        # import_from_as_names: ','.import_from_as_name+
        mark = self._mark()
        if (
            (_gather_28 := self._gather_28())
        ):
            return _gather_28;
        self._reset(mark)
        return None;

    @memoize
    def import_from_as_name(self) -> Optional[Any]:
        # import_from_as_name: NAME ['as' NAME]
        mark = self._mark()
        if (
            (name := self.name())
            and
            (opt := self._tmp_30(),)
        ):
            return [name, opt];
        self._reset(mark)
        return None;

    @memoize
    def dotted_as_names(self) -> Optional[Any]:
        # dotted_as_names: ','.dotted_as_name+
        mark = self._mark()
        if (
            (_gather_31 := self._gather_31())
        ):
            return _gather_31;
        self._reset(mark)
        return None;

    @memoize
    def dotted_as_name(self) -> Optional[Any]:
        # dotted_as_name: dotted_name ['as' NAME]
        mark = self._mark()
        if (
            (dotted_name := self.dotted_name())
            and
            (opt := self._tmp_33(),)
        ):
            return [dotted_name, opt];
        self._reset(mark)
        return None;

    @memoize_left_rec
    def dotted_name(self) -> Optional[Any]:
        # dotted_name: dotted_name '.' NAME | NAME
        mark = self._mark()
        if (
            (dotted_name := self.dotted_name())
            and
            (literal := self.expect('.'))
            and
            (name := self.name())
        ):
            return [dotted_name, literal, name];
        self._reset(mark)
        if (
            (name := self.name())
        ):
            return name;
        self._reset(mark)
        return None;

    @memoize
    def if_stmt(self) -> Optional[Any]:
        # if_stmt: 'if' named_expression ':' block elif_stmt | 'if' named_expression ':' block else_block?
        mark = self._mark()
        if (
            (literal := self.expect('if'))
            and
            (named_expression := self.named_expression())
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
            and
            (elif_stmt := self.elif_stmt())
        ):
            return [literal, named_expression, literal_1, block, elif_stmt];
        self._reset(mark)
        if (
            (literal := self.expect('if'))
            and
            (named_expression := self.named_expression())
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
            and
            (opt := self.else_block(),)
        ):
            return [literal, named_expression, literal_1, block, opt];
        self._reset(mark)
        return None;

    @memoize
    def elif_stmt(self) -> Optional[Any]:
        # elif_stmt: 'elif' named_expression ':' block elif_stmt | 'elif' named_expression ':' block else_block?
        mark = self._mark()
        if (
            (literal := self.expect('elif'))
            and
            (named_expression := self.named_expression())
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
            and
            (elif_stmt := self.elif_stmt())
        ):
            return [literal, named_expression, literal_1, block, elif_stmt];
        self._reset(mark)
        if (
            (literal := self.expect('elif'))
            and
            (named_expression := self.named_expression())
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
            and
            (opt := self.else_block(),)
        ):
            return [literal, named_expression, literal_1, block, opt];
        self._reset(mark)
        return None;

    @memoize
    def else_block(self) -> Optional[Any]:
        # else_block: 'else' ':' block
        mark = self._mark()
        if (
            (literal := self.expect('else'))
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
        ):
            return [literal, literal_1, block];
        self._reset(mark)
        return None;

    @memoize
    def while_stmt(self) -> Optional[Any]:
        # while_stmt: 'while' named_expression ':' block else_block?
        mark = self._mark()
        if (
            (literal := self.expect('while'))
            and
            (named_expression := self.named_expression())
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
            and
            (opt := self.else_block(),)
        ):
            return [literal, named_expression, literal_1, block, opt];
        self._reset(mark)
        return None;

    @memoize
    def for_stmt(self) -> Optional[Any]:
        # for_stmt: 'for' star_targets 'in' ~ star_expressions ':' TYPE_COMMENT? block else_block? | ASYNC 'for' star_targets 'in' ~ star_expressions ':' TYPE_COMMENT? block else_block?
        mark = self._mark()
        cut = False
        if (
            (literal := self.expect('for'))
            and
            (star_targets := self.star_targets())
            and
            (literal_1 := self.expect('in'))
            and
            (cut := True)
            and
            (star_expressions := self.star_expressions())
            and
            (literal_2 := self.expect(':'))
            and
            (opt := self.type_comment(),)
            and
            (block := self.block())
            and
            (opt_1 := self.else_block(),)
        ):
            return [literal, star_targets, literal_1, star_expressions, literal_2, opt, block, opt_1];
        self._reset(mark)
        if cut:
            return None;
        cut = False
        if (
            (_async := self.expect('ASYNC'))
            and
            (literal := self.expect('for'))
            and
            (star_targets := self.star_targets())
            and
            (literal_1 := self.expect('in'))
            and
            (cut := True)
            and
            (star_expressions := self.star_expressions())
            and
            (literal_2 := self.expect(':'))
            and
            (opt := self.type_comment(),)
            and
            (block := self.block())
            and
            (opt_1 := self.else_block(),)
        ):
            return [_async, literal, star_targets, literal_1, star_expressions, literal_2, opt, block, opt_1];
        self._reset(mark)
        if cut:
            return None;
        return None;

    @memoize
    def with_stmt(self) -> Optional[Any]:
        # with_stmt: 'with' '(' ','.with_item+ ','? ')' ':' block | 'with' ','.with_item+ ':' TYPE_COMMENT? block | ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block | ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block
        mark = self._mark()
        if (
            (literal := self.expect('with'))
            and
            (literal_1 := self.expect('('))
            and
            (_gather_34 := self._gather_34())
            and
            (opt := self.expect(','),)
            and
            (literal_2 := self.expect(')'))
            and
            (literal_3 := self.expect(':'))
            and
            (block := self.block())
        ):
            return [literal, literal_1, _gather_34, opt, literal_2, literal_3, block];
        self._reset(mark)
        if (
            (literal := self.expect('with'))
            and
            (_gather_36 := self._gather_36())
            and
            (literal_1 := self.expect(':'))
            and
            (opt := self.type_comment(),)
            and
            (block := self.block())
        ):
            return [literal, _gather_36, literal_1, opt, block];
        self._reset(mark)
        if (
            (_async := self.expect('ASYNC'))
            and
            (literal := self.expect('with'))
            and
            (literal_1 := self.expect('('))
            and
            (_gather_38 := self._gather_38())
            and
            (opt := self.expect(','),)
            and
            (literal_2 := self.expect(')'))
            and
            (literal_3 := self.expect(':'))
            and
            (block := self.block())
        ):
            return [_async, literal, literal_1, _gather_38, opt, literal_2, literal_3, block];
        self._reset(mark)
        if (
            (_async := self.expect('ASYNC'))
            and
            (literal := self.expect('with'))
            and
            (_gather_40 := self._gather_40())
            and
            (literal_1 := self.expect(':'))
            and
            (opt := self.type_comment(),)
            and
            (block := self.block())
        ):
            return [_async, literal, _gather_40, literal_1, opt, block];
        self._reset(mark)
        return None;

    @memoize
    def with_item(self) -> Optional[Any]:
        # with_item: expression 'as' star_target &(',' | ')' | ':') | expression
        mark = self._mark()
        if (
            (expression := self.expression())
            and
            (literal := self.expect('as'))
            and
            (star_target := self.star_target())
            and
            (self.positive_lookahead(self._tmp_42, ))
        ):
            return [expression, literal, star_target];
        self._reset(mark)
        if (
            (expression := self.expression())
        ):
            return expression;
        self._reset(mark)
        return None;

    @memoize
    def try_stmt(self) -> Optional[Any]:
        # try_stmt: 'try' ':' block finally_block | 'try' ':' block except_block+ else_block? finally_block?
        mark = self._mark()
        if (
            (literal := self.expect('try'))
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
            and
            (finally_block := self.finally_block())
        ):
            return [literal, literal_1, block, finally_block];
        self._reset(mark)
        if (
            (literal := self.expect('try'))
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
            and
            (_loop1_43 := self._loop1_43())
            and
            (opt := self.else_block(),)
            and
            (opt_1 := self.finally_block(),)
        ):
            return [literal, literal_1, block, _loop1_43, opt, opt_1];
        self._reset(mark)
        return None;

    @memoize
    def except_block(self) -> Optional[Any]:
        # except_block: 'except' expression ['as' NAME] ':' block | 'except' ':' block
        mark = self._mark()
        if (
            (literal := self.expect('except'))
            and
            (expression := self.expression())
            and
            (opt := self._tmp_44(),)
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
        ):
            return [literal, expression, opt, literal_1, block];
        self._reset(mark)
        if (
            (literal := self.expect('except'))
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
        ):
            return [literal, literal_1, block];
        self._reset(mark)
        return None;

    @memoize
    def finally_block(self) -> Optional[Any]:
        # finally_block: 'finally' ':' block
        mark = self._mark()
        if (
            (literal := self.expect('finally'))
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
        ):
            return [literal, literal_1, block];
        self._reset(mark)
        return None;

    @memoize
    def return_stmt(self) -> Optional[Any]:
        # return_stmt: 'return' star_expressions?
        mark = self._mark()
        if (
            (literal := self.expect('return'))
            and
            (opt := self.star_expressions(),)
        ):
            return [literal, opt];
        self._reset(mark)
        return None;

    @memoize
    def raise_stmt(self) -> Optional[Any]:
        # raise_stmt: 'raise' expression ['from' expression] | 'raise'
        mark = self._mark()
        if (
            (literal := self.expect('raise'))
            and
            (expression := self.expression())
            and
            (opt := self._tmp_45(),)
        ):
            return [literal, expression, opt];
        self._reset(mark)
        if (
            (literal := self.expect('raise'))
        ):
            return literal;
        self._reset(mark)
        return None;

    @memoize
    def function_def(self) -> Optional[Any]:
        # function_def: decorators function_def_raw | function_def_raw
        mark = self._mark()
        if (
            (decorators := self.decorators())
            and
            (function_def_raw := self.function_def_raw())
        ):
            return [decorators, function_def_raw];
        self._reset(mark)
        if (
            (function_def_raw := self.function_def_raw())
        ):
            return function_def_raw;
        self._reset(mark)
        return None;

    @memoize
    def function_def_raw(self) -> Optional[Any]:
        # function_def_raw: 'def' NAME '(' params? ')' ['->' expression] ':' func_type_comment? block | ASYNC 'def' NAME '(' params? ')' ['->' expression] ':' func_type_comment? block
        mark = self._mark()
        if (
            (literal := self.expect('def'))
            and
            (name := self.name())
            and
            (literal_1 := self.expect('('))
            and
            (opt := self.params(),)
            and
            (literal_2 := self.expect(')'))
            and
            (opt_1 := self._tmp_46(),)
            and
            (literal_3 := self.expect(':'))
            and
            (opt_2 := self.func_type_comment(),)
            and
            (block := self.block())
        ):
            return [literal, name, literal_1, opt, literal_2, opt_1, literal_3, opt_2, block];
        self._reset(mark)
        if (
            (_async := self.expect('ASYNC'))
            and
            (literal := self.expect('def'))
            and
            (name := self.name())
            and
            (literal_1 := self.expect('('))
            and
            (opt := self.params(),)
            and
            (literal_2 := self.expect(')'))
            and
            (opt_1 := self._tmp_47(),)
            and
            (literal_3 := self.expect(':'))
            and
            (opt_2 := self.func_type_comment(),)
            and
            (block := self.block())
        ):
            return [_async, literal, name, literal_1, opt, literal_2, opt_1, literal_3, opt_2, block];
        self._reset(mark)
        return None;

    @memoize
    def func_type_comment(self) -> Optional[Any]:
        # func_type_comment: NEWLINE TYPE_COMMENT &(NEWLINE INDENT) | TYPE_COMMENT
        mark = self._mark()
        if (
            (_newline := self.expect('NEWLINE'))
            and
            (type_comment := self.type_comment())
            and
            (self.positive_lookahead(self._tmp_48, ))
        ):
            return [_newline, type_comment];
        self._reset(mark)
        if (
            (type_comment := self.type_comment())
        ):
            return type_comment;
        self._reset(mark)
        return None;

    @memoize
    def params(self) -> Optional[Any]:
        # params: parameters
        mark = self._mark()
        if (
            (parameters := self.parameters())
        ):
            return parameters;
        self._reset(mark)
        return None;

    @memoize
    def parameters(self) -> Optional[Any]:
        # parameters: slash_no_default param_no_default* param_with_default* star_etc? | slash_with_default param_with_default* star_etc? | param_no_default+ param_with_default* star_etc? | param_with_default+ star_etc? | star_etc
        mark = self._mark()
        if (
            (slash_no_default := self.slash_no_default())
            and
            (_loop0_49 := self._loop0_49(),)
            and
            (_loop0_50 := self._loop0_50(),)
            and
            (opt := self.star_etc(),)
        ):
            return [slash_no_default, _loop0_49, _loop0_50, opt];
        self._reset(mark)
        if (
            (slash_with_default := self.slash_with_default())
            and
            (_loop0_51 := self._loop0_51(),)
            and
            (opt := self.star_etc(),)
        ):
            return [slash_with_default, _loop0_51, opt];
        self._reset(mark)
        if (
            (_loop1_52 := self._loop1_52())
            and
            (_loop0_53 := self._loop0_53(),)
            and
            (opt := self.star_etc(),)
        ):
            return [_loop1_52, _loop0_53, opt];
        self._reset(mark)
        if (
            (_loop1_54 := self._loop1_54())
            and
            (opt := self.star_etc(),)
        ):
            return [_loop1_54, opt];
        self._reset(mark)
        if (
            (star_etc := self.star_etc())
        ):
            return star_etc;
        self._reset(mark)
        return None;

    @memoize
    def slash_no_default(self) -> Optional[Any]:
        # slash_no_default: param_no_default+ '/' ',' | param_no_default+ '/' &')'
        mark = self._mark()
        if (
            (_loop1_55 := self._loop1_55())
            and
            (literal := self.expect('/'))
            and
            (literal_1 := self.expect(','))
        ):
            return [_loop1_55, literal, literal_1];
        self._reset(mark)
        if (
            (_loop1_56 := self._loop1_56())
            and
            (literal := self.expect('/'))
            and
            (self.positive_lookahead(self.expect, ')'))
        ):
            return [_loop1_56, literal];
        self._reset(mark)
        return None;

    @memoize
    def slash_with_default(self) -> Optional[Any]:
        # slash_with_default: param_no_default* param_with_default+ '/' ',' | param_no_default* param_with_default+ '/' &')'
        mark = self._mark()
        if (
            (_loop0_57 := self._loop0_57(),)
            and
            (_loop1_58 := self._loop1_58())
            and
            (literal := self.expect('/'))
            and
            (literal_1 := self.expect(','))
        ):
            return [_loop0_57, _loop1_58, literal, literal_1];
        self._reset(mark)
        if (
            (_loop0_59 := self._loop0_59(),)
            and
            (_loop1_60 := self._loop1_60())
            and
            (literal := self.expect('/'))
            and
            (self.positive_lookahead(self.expect, ')'))
        ):
            return [_loop0_59, _loop1_60, literal];
        self._reset(mark)
        return None;

    @memoize
    def star_etc(self) -> Optional[Any]:
        # star_etc: '*' param_no_default param_maybe_default* kwds? | '*' ',' param_maybe_default+ kwds? | kwds
        mark = self._mark()
        if (
            (literal := self.expect('*'))
            and
            (param_no_default := self.param_no_default())
            and
            (_loop0_61 := self._loop0_61(),)
            and
            (opt := self.kwds(),)
        ):
            return [literal, param_no_default, _loop0_61, opt];
        self._reset(mark)
        if (
            (literal := self.expect('*'))
            and
            (literal_1 := self.expect(','))
            and
            (_loop1_62 := self._loop1_62())
            and
            (opt := self.kwds(),)
        ):
            return [literal, literal_1, _loop1_62, opt];
        self._reset(mark)
        if (
            (kwds := self.kwds())
        ):
            return kwds;
        self._reset(mark)
        return None;

    @memoize
    def kwds(self) -> Optional[Any]:
        # kwds: '**' param_no_default
        mark = self._mark()
        if (
            (literal := self.expect('**'))
            and
            (param_no_default := self.param_no_default())
        ):
            return [literal, param_no_default];
        self._reset(mark)
        return None;

    @memoize
    def param_no_default(self) -> Optional[Any]:
        # param_no_default: param ',' TYPE_COMMENT? | param TYPE_COMMENT? &')'
        mark = self._mark()
        if (
            (param := self.param())
            and
            (literal := self.expect(','))
            and
            (opt := self.type_comment(),)
        ):
            return [param, literal, opt];
        self._reset(mark)
        if (
            (param := self.param())
            and
            (opt := self.type_comment(),)
            and
            (self.positive_lookahead(self.expect, ')'))
        ):
            return [param, opt];
        self._reset(mark)
        return None;

    @memoize
    def param_with_default(self) -> Optional[Any]:
        # param_with_default: param default ',' TYPE_COMMENT? | param default TYPE_COMMENT? &')'
        mark = self._mark()
        if (
            (param := self.param())
            and
            (default := self.default())
            and
            (literal := self.expect(','))
            and
            (opt := self.type_comment(),)
        ):
            return [param, default, literal, opt];
        self._reset(mark)
        if (
            (param := self.param())
            and
            (default := self.default())
            and
            (opt := self.type_comment(),)
            and
            (self.positive_lookahead(self.expect, ')'))
        ):
            return [param, default, opt];
        self._reset(mark)
        return None;

    @memoize
    def param_maybe_default(self) -> Optional[Any]:
        # param_maybe_default: param default? ',' TYPE_COMMENT? | param default? TYPE_COMMENT? &')'
        mark = self._mark()
        if (
            (param := self.param())
            and
            (opt := self.default(),)
            and
            (literal := self.expect(','))
            and
            (opt_1 := self.type_comment(),)
        ):
            return [param, opt, literal, opt_1];
        self._reset(mark)
        if (
            (param := self.param())
            and
            (opt := self.default(),)
            and
            (opt_1 := self.type_comment(),)
            and
            (self.positive_lookahead(self.expect, ')'))
        ):
            return [param, opt, opt_1];
        self._reset(mark)
        return None;

    @memoize
    def param(self) -> Optional[Any]:
        # param: NAME annotation?
        mark = self._mark()
        if (
            (name := self.name())
            and
            (opt := self.annotation(),)
        ):
            return [name, opt];
        self._reset(mark)
        return None;

    @memoize
    def annotation(self) -> Optional[Any]:
        # annotation: ':' expression
        mark = self._mark()
        if (
            (literal := self.expect(':'))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        return None;

    @memoize
    def default(self) -> Optional[Any]:
        # default: '=' expression
        mark = self._mark()
        if (
            (literal := self.expect('='))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        return None;

    @memoize
    def decorators(self) -> Optional[Any]:
        # decorators: (('@' named_expression NEWLINE))+
        mark = self._mark()
        if (
            (_loop1_63 := self._loop1_63())
        ):
            return _loop1_63;
        self._reset(mark)
        return None;

    @memoize
    def class_def(self) -> Optional[Any]:
        # class_def: decorators class_def_raw | class_def_raw
        mark = self._mark()
        if (
            (decorators := self.decorators())
            and
            (class_def_raw := self.class_def_raw())
        ):
            return [decorators, class_def_raw];
        self._reset(mark)
        if (
            (class_def_raw := self.class_def_raw())
        ):
            return class_def_raw;
        self._reset(mark)
        return None;

    @memoize
    def class_def_raw(self) -> Optional[Any]:
        # class_def_raw: 'class' NAME ['(' arguments? ')'] ':' block
        mark = self._mark()
        if (
            (literal := self.expect('class'))
            and
            (name := self.name())
            and
            (opt := self._tmp_64(),)
            and
            (literal_1 := self.expect(':'))
            and
            (block := self.block())
        ):
            return [literal, name, opt, literal_1, block];
        self._reset(mark)
        return None;

    @memoize
    def block(self) -> Optional[Any]:
        # block: NEWLINE INDENT statements DEDENT | simple_stmt
        mark = self._mark()
        if (
            (_newline := self.expect('NEWLINE'))
            and
            (_indent := self.expect('INDENT'))
            and
            (statements := self.statements())
            and
            (_dedent := self.expect('DEDENT'))
        ):
            return [_newline, _indent, statements, _dedent];
        self._reset(mark)
        if (
            (simple_stmt := self.simple_stmt())
        ):
            return simple_stmt;
        self._reset(mark)
        return None;

    @memoize
    def star_expressions(self) -> Optional[Any]:
        # star_expressions: star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression
        mark = self._mark()
        if (
            (star_expression := self.star_expression())
            and
            (_loop1_65 := self._loop1_65())
            and
            (opt := self.expect(','),)
        ):
            return [star_expression, _loop1_65, opt];
        self._reset(mark)
        if (
            (star_expression := self.star_expression())
            and
            (literal := self.expect(','))
        ):
            return [star_expression, literal];
        self._reset(mark)
        if (
            (star_expression := self.star_expression())
        ):
            return star_expression;
        self._reset(mark)
        return None;

    @memoize
    def star_expression(self) -> Optional[Any]:
        # star_expression: '*' bitwise_or | expression
        mark = self._mark()
        if (
            (literal := self.expect('*'))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        if (
            (expression := self.expression())
        ):
            return expression;
        self._reset(mark)
        return None;

    @memoize
    def star_named_expressions(self) -> Optional[Any]:
        # star_named_expressions: ','.star_named_expression+ ','?
        mark = self._mark()
        if (
            (_gather_66 := self._gather_66())
            and
            (opt := self.expect(','),)
        ):
            return [_gather_66, opt];
        self._reset(mark)
        return None;

    @memoize
    def star_named_expression(self) -> Optional[Any]:
        # star_named_expression: '*' bitwise_or | named_expression
        mark = self._mark()
        if (
            (literal := self.expect('*'))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        if (
            (named_expression := self.named_expression())
        ):
            return named_expression;
        self._reset(mark)
        return None;

    @memoize
    def named_expression(self) -> Optional[Any]:
        # named_expression: NAME ':=' ~ expression | expression !':='
        mark = self._mark()
        cut = False
        if (
            (name := self.name())
            and
            (literal := self.expect(':='))
            and
            (cut := True)
            and
            (expression := self.expression())
        ):
            return [name, literal, expression];
        self._reset(mark)
        if cut:
            return None;
        if (
            (expression := self.expression())
            and
            (self.negative_lookahead(self.expect, ':='))
        ):
            return expression;
        self._reset(mark)
        return None;

    @memoize
    def annotated_rhs(self) -> Optional[Any]:
        # annotated_rhs: yield_expr | star_expressions
        mark = self._mark()
        if (
            (yield_expr := self.yield_expr())
        ):
            return yield_expr;
        self._reset(mark)
        if (
            (star_expressions := self.star_expressions())
        ):
            return star_expressions;
        self._reset(mark)
        return None;

    @memoize
    def expressions(self) -> Optional[Any]:
        # expressions: expression ((',' expression))+ ','? | expression ',' | expression
        mark = self._mark()
        if (
            (expression := self.expression())
            and
            (_loop1_68 := self._loop1_68())
            and
            (opt := self.expect(','),)
        ):
            return [expression, _loop1_68, opt];
        self._reset(mark)
        if (
            (expression := self.expression())
            and
            (literal := self.expect(','))
        ):
            return [expression, literal];
        self._reset(mark)
        if (
            (expression := self.expression())
        ):
            return expression;
        self._reset(mark)
        return None;

    @memoize
    def expression(self) -> Optional[Any]:
        # expression: factor_with_units | disjunction 'if' disjunction 'else' expression | disjunction | lambdef
        mark = self._mark()
        if (
            (factor_with_units := self.factor_with_units())
        ):
            return factor_with_units;
        self._reset(mark)
        if (
            (disjunction := self.disjunction())
            and
            (literal := self.expect('if'))
            and
            (disjunction_1 := self.disjunction())
            and
            (literal_1 := self.expect('else'))
            and
            (expression := self.expression())
        ):
            return [disjunction, literal, disjunction_1, literal_1, expression];
        self._reset(mark)
        if (
            (disjunction := self.disjunction())
        ):
            return disjunction;
        self._reset(mark)
        if (
            (lambdef := self.lambdef())
        ):
            return lambdef;
        self._reset(mark)
        return None;

    @memoize
    def lambdef(self) -> Optional[Any]:
        # lambdef: 'lambda' lambda_params? ':' expression
        mark = self._mark()
        if (
            (literal := self.expect('lambda'))
            and
            (opt := self.lambda_params(),)
            and
            (literal_1 := self.expect(':'))
            and
            (expression := self.expression())
        ):
            return [literal, opt, literal_1, expression];
        self._reset(mark)
        return None;

    @memoize
    def lambda_params(self) -> Optional[Any]:
        # lambda_params: lambda_parameters
        mark = self._mark()
        if (
            (lambda_parameters := self.lambda_parameters())
        ):
            return lambda_parameters;
        self._reset(mark)
        return None;

    @memoize
    def lambda_parameters(self) -> Optional[Any]:
        # lambda_parameters: lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc? | lambda_slash_with_default lambda_param_with_default* lambda_star_etc? | lambda_param_no_default+ lambda_param_with_default* lambda_star_etc? | lambda_param_with_default+ lambda_star_etc? | lambda_star_etc
        mark = self._mark()
        if (
            (lambda_slash_no_default := self.lambda_slash_no_default())
            and
            (_loop0_69 := self._loop0_69(),)
            and
            (_loop0_70 := self._loop0_70(),)
            and
            (opt := self.lambda_star_etc(),)
        ):
            return [lambda_slash_no_default, _loop0_69, _loop0_70, opt];
        self._reset(mark)
        if (
            (lambda_slash_with_default := self.lambda_slash_with_default())
            and
            (_loop0_71 := self._loop0_71(),)
            and
            (opt := self.lambda_star_etc(),)
        ):
            return [lambda_slash_with_default, _loop0_71, opt];
        self._reset(mark)
        if (
            (_loop1_72 := self._loop1_72())
            and
            (_loop0_73 := self._loop0_73(),)
            and
            (opt := self.lambda_star_etc(),)
        ):
            return [_loop1_72, _loop0_73, opt];
        self._reset(mark)
        if (
            (_loop1_74 := self._loop1_74())
            and
            (opt := self.lambda_star_etc(),)
        ):
            return [_loop1_74, opt];
        self._reset(mark)
        if (
            (lambda_star_etc := self.lambda_star_etc())
        ):
            return lambda_star_etc;
        self._reset(mark)
        return None;

    @memoize
    def lambda_slash_no_default(self) -> Optional[Any]:
        # lambda_slash_no_default: lambda_param_no_default+ '/' ',' | lambda_param_no_default+ '/' &':'
        mark = self._mark()
        if (
            (_loop1_75 := self._loop1_75())
            and
            (literal := self.expect('/'))
            and
            (literal_1 := self.expect(','))
        ):
            return [_loop1_75, literal, literal_1];
        self._reset(mark)
        if (
            (_loop1_76 := self._loop1_76())
            and
            (literal := self.expect('/'))
            and
            (self.positive_lookahead(self.expect, ':'))
        ):
            return [_loop1_76, literal];
        self._reset(mark)
        return None;

    @memoize
    def lambda_slash_with_default(self) -> Optional[Any]:
        # lambda_slash_with_default: lambda_param_no_default* lambda_param_with_default+ '/' ',' | lambda_param_no_default* lambda_param_with_default+ '/' &':'
        mark = self._mark()
        if (
            (_loop0_77 := self._loop0_77(),)
            and
            (_loop1_78 := self._loop1_78())
            and
            (literal := self.expect('/'))
            and
            (literal_1 := self.expect(','))
        ):
            return [_loop0_77, _loop1_78, literal, literal_1];
        self._reset(mark)
        if (
            (_loop0_79 := self._loop0_79(),)
            and
            (_loop1_80 := self._loop1_80())
            and
            (literal := self.expect('/'))
            and
            (self.positive_lookahead(self.expect, ':'))
        ):
            return [_loop0_79, _loop1_80, literal];
        self._reset(mark)
        return None;

    @memoize
    def lambda_star_etc(self) -> Optional[Any]:
        # lambda_star_etc: '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds? | '*' ',' lambda_param_maybe_default+ lambda_kwds? | lambda_kwds
        mark = self._mark()
        if (
            (literal := self.expect('*'))
            and
            (lambda_param_no_default := self.lambda_param_no_default())
            and
            (_loop0_81 := self._loop0_81(),)
            and
            (opt := self.lambda_kwds(),)
        ):
            return [literal, lambda_param_no_default, _loop0_81, opt];
        self._reset(mark)
        if (
            (literal := self.expect('*'))
            and
            (literal_1 := self.expect(','))
            and
            (_loop1_82 := self._loop1_82())
            and
            (opt := self.lambda_kwds(),)
        ):
            return [literal, literal_1, _loop1_82, opt];
        self._reset(mark)
        if (
            (lambda_kwds := self.lambda_kwds())
        ):
            return lambda_kwds;
        self._reset(mark)
        return None;

    @memoize
    def lambda_kwds(self) -> Optional[Any]:
        # lambda_kwds: '**' lambda_param_no_default
        mark = self._mark()
        if (
            (literal := self.expect('**'))
            and
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            return [literal, lambda_param_no_default];
        self._reset(mark)
        return None;

    @memoize
    def lambda_param_no_default(self) -> Optional[Any]:
        # lambda_param_no_default: lambda_param ',' | lambda_param &':'
        mark = self._mark()
        if (
            (lambda_param := self.lambda_param())
            and
            (literal := self.expect(','))
        ):
            return [lambda_param, literal];
        self._reset(mark)
        if (
            (lambda_param := self.lambda_param())
            and
            (self.positive_lookahead(self.expect, ':'))
        ):
            return lambda_param;
        self._reset(mark)
        return None;

    @memoize
    def lambda_param_with_default(self) -> Optional[Any]:
        # lambda_param_with_default: lambda_param default ',' | lambda_param default &':'
        mark = self._mark()
        if (
            (lambda_param := self.lambda_param())
            and
            (default := self.default())
            and
            (literal := self.expect(','))
        ):
            return [lambda_param, default, literal];
        self._reset(mark)
        if (
            (lambda_param := self.lambda_param())
            and
            (default := self.default())
            and
            (self.positive_lookahead(self.expect, ':'))
        ):
            return [lambda_param, default];
        self._reset(mark)
        return None;

    @memoize
    def lambda_param_maybe_default(self) -> Optional[Any]:
        # lambda_param_maybe_default: lambda_param default? ',' | lambda_param default? &':'
        mark = self._mark()
        if (
            (lambda_param := self.lambda_param())
            and
            (opt := self.default(),)
            and
            (literal := self.expect(','))
        ):
            return [lambda_param, opt, literal];
        self._reset(mark)
        if (
            (lambda_param := self.lambda_param())
            and
            (opt := self.default(),)
            and
            (self.positive_lookahead(self.expect, ':'))
        ):
            return [lambda_param, opt];
        self._reset(mark)
        return None;

    @memoize
    def lambda_param(self) -> Optional[Any]:
        # lambda_param: NAME
        mark = self._mark()
        if (
            (name := self.name())
        ):
            return name;
        self._reset(mark)
        return None;

    @memoize
    def disjunction(self) -> Optional[Any]:
        # disjunction: conjunction (('or' conjunction))+ | conjunction
        mark = self._mark()
        if (
            (conjunction := self.conjunction())
            and
            (_loop1_83 := self._loop1_83())
        ):
            return [conjunction, _loop1_83];
        self._reset(mark)
        if (
            (conjunction := self.conjunction())
        ):
            return conjunction;
        self._reset(mark)
        return None;

    @memoize
    def conjunction(self) -> Optional[Any]:
        # conjunction: inversion (('and' inversion))+ | inversion
        mark = self._mark()
        if (
            (inversion := self.inversion())
            and
            (_loop1_84 := self._loop1_84())
        ):
            return [inversion, _loop1_84];
        self._reset(mark)
        if (
            (inversion := self.inversion())
        ):
            return inversion;
        self._reset(mark)
        return None;

    @memoize
    def inversion(self) -> Optional[Any]:
        # inversion: 'not' inversion | comparison
        mark = self._mark()
        if (
            (literal := self.expect('not'))
            and
            (inversion := self.inversion())
        ):
            return [literal, inversion];
        self._reset(mark)
        if (
            (comparison := self.comparison())
        ):
            return comparison;
        self._reset(mark)
        return None;

    @memoize
    def comparison(self) -> Optional[Any]:
        # comparison: bitwise_or compare_op_bitwise_or_pair+ | bitwise_or
        mark = self._mark()
        if (
            (bitwise_or := self.bitwise_or())
            and
            (_loop1_85 := self._loop1_85())
        ):
            return [bitwise_or, _loop1_85];
        self._reset(mark)
        if (
            (bitwise_or := self.bitwise_or())
        ):
            return bitwise_or;
        self._reset(mark)
        return None;

    @memoize
    def compare_op_bitwise_or_pair(self) -> Optional[Any]:
        # compare_op_bitwise_or_pair: eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or
        mark = self._mark()
        if (
            (eq_bitwise_or := self.eq_bitwise_or())
        ):
            return eq_bitwise_or;
        self._reset(mark)
        if (
            (noteq_bitwise_or := self.noteq_bitwise_or())
        ):
            return noteq_bitwise_or;
        self._reset(mark)
        if (
            (lte_bitwise_or := self.lte_bitwise_or())
        ):
            return lte_bitwise_or;
        self._reset(mark)
        if (
            (lt_bitwise_or := self.lt_bitwise_or())
        ):
            return lt_bitwise_or;
        self._reset(mark)
        if (
            (gte_bitwise_or := self.gte_bitwise_or())
        ):
            return gte_bitwise_or;
        self._reset(mark)
        if (
            (gt_bitwise_or := self.gt_bitwise_or())
        ):
            return gt_bitwise_or;
        self._reset(mark)
        if (
            (notin_bitwise_or := self.notin_bitwise_or())
        ):
            return notin_bitwise_or;
        self._reset(mark)
        if (
            (in_bitwise_or := self.in_bitwise_or())
        ):
            return in_bitwise_or;
        self._reset(mark)
        if (
            (isnot_bitwise_or := self.isnot_bitwise_or())
        ):
            return isnot_bitwise_or;
        self._reset(mark)
        if (
            (is_bitwise_or := self.is_bitwise_or())
        ):
            return is_bitwise_or;
        self._reset(mark)
        return None;

    @memoize
    def eq_bitwise_or(self) -> Optional[Any]:
        # eq_bitwise_or: '==' bitwise_or
        mark = self._mark()
        if (
            (literal := self.expect('=='))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        return None;

    @memoize
    def noteq_bitwise_or(self) -> Optional[Any]:
        # noteq_bitwise_or: ('!=') bitwise_or
        mark = self._mark()
        if (
            (literal := self.expect('!='))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        return None;

    @memoize
    def lte_bitwise_or(self) -> Optional[Any]:
        # lte_bitwise_or: '<=' bitwise_or
        mark = self._mark()
        if (
            (literal := self.expect('<='))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        return None;

    @memoize
    def lt_bitwise_or(self) -> Optional[Any]:
        # lt_bitwise_or: '<' bitwise_or
        mark = self._mark()
        if (
            (literal := self.expect('<'))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        return None;

    @memoize
    def gte_bitwise_or(self) -> Optional[Any]:
        # gte_bitwise_or: '>=' bitwise_or
        mark = self._mark()
        if (
            (literal := self.expect('>='))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        return None;

    @memoize
    def gt_bitwise_or(self) -> Optional[Any]:
        # gt_bitwise_or: '>' bitwise_or
        mark = self._mark()
        if (
            (literal := self.expect('>'))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        return None;

    @memoize
    def notin_bitwise_or(self) -> Optional[Any]:
        # notin_bitwise_or: 'not' 'in' bitwise_or
        mark = self._mark()
        if (
            (literal := self.expect('not'))
            and
            (literal_1 := self.expect('in'))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, literal_1, bitwise_or];
        self._reset(mark)
        return None;

    @memoize
    def in_bitwise_or(self) -> Optional[Any]:
        # in_bitwise_or: 'in' bitwise_or
        mark = self._mark()
        if (
            (literal := self.expect('in'))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        return None;

    @memoize
    def isnot_bitwise_or(self) -> Optional[Any]:
        # isnot_bitwise_or: 'is' 'not' bitwise_or
        mark = self._mark()
        if (
            (literal := self.expect('is'))
            and
            (literal_1 := self.expect('not'))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, literal_1, bitwise_or];
        self._reset(mark)
        return None;

    @memoize
    def is_bitwise_or(self) -> Optional[Any]:
        # is_bitwise_or: 'is' bitwise_or
        mark = self._mark()
        if (
            (literal := self.expect('is'))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        return None;

    @memoize_left_rec
    def bitwise_or(self) -> Optional[Any]:
        # bitwise_or: bitwise_or '|' bitwise_xor | bitwise_xor
        mark = self._mark()
        if (
            (bitwise_or := self.bitwise_or())
            and
            (literal := self.expect('|'))
            and
            (bitwise_xor := self.bitwise_xor())
        ):
            return [bitwise_or, literal, bitwise_xor];
        self._reset(mark)
        if (
            (bitwise_xor := self.bitwise_xor())
        ):
            return bitwise_xor;
        self._reset(mark)
        return None;

    @memoize_left_rec
    def bitwise_xor(self) -> Optional[Any]:
        # bitwise_xor: bitwise_xor '^' bitwise_and | bitwise_and
        mark = self._mark()
        if (
            (bitwise_xor := self.bitwise_xor())
            and
            (literal := self.expect('^'))
            and
            (bitwise_and := self.bitwise_and())
        ):
            return [bitwise_xor, literal, bitwise_and];
        self._reset(mark)
        if (
            (bitwise_and := self.bitwise_and())
        ):
            return bitwise_and;
        self._reset(mark)
        return None;

    @memoize_left_rec
    def bitwise_and(self) -> Optional[Any]:
        # bitwise_and: bitwise_and '&' shift_expr | shift_expr
        mark = self._mark()
        if (
            (bitwise_and := self.bitwise_and())
            and
            (literal := self.expect('&'))
            and
            (shift_expr := self.shift_expr())
        ):
            return [bitwise_and, literal, shift_expr];
        self._reset(mark)
        if (
            (shift_expr := self.shift_expr())
        ):
            return shift_expr;
        self._reset(mark)
        return None;

    @memoize_left_rec
    def shift_expr(self) -> Optional[Any]:
        # shift_expr: shift_expr '<<' sum | shift_expr '>>' sum | sum
        mark = self._mark()
        if (
            (shift_expr := self.shift_expr())
            and
            (literal := self.expect('<<'))
            and
            (sum := self.sum())
        ):
            return [shift_expr, literal, sum];
        self._reset(mark)
        if (
            (shift_expr := self.shift_expr())
            and
            (literal := self.expect('>>'))
            and
            (sum := self.sum())
        ):
            return [shift_expr, literal, sum];
        self._reset(mark)
        if (
            (sum := self.sum())
        ):
            return sum;
        self._reset(mark)
        return None;

    @memoize
    def factor_with_units(self) -> Optional[Any]:
        # factor_with_units: factor units
        mark = self._mark()
        if (
            (p := self.factor())
            and
            (u := self.units())
        ):
            return ( 'value_with_units' , p , u );
        self._reset(mark)
        return None;

    @memoize_left_rec
    def units(self) -> Optional[Any]:
        # units: units '/' units_group | units '*' units_group | units units_group | units '**' NUMBER | NAME
        mark = self._mark()
        if (
            (units := self.units())
            and
            (literal := self.expect('/'))
            and
            (units_group := self.units_group())
        ):
            return [units, literal, units_group];
        self._reset(mark)
        if (
            (units := self.units())
            and
            (literal := self.expect('*'))
            and
            (units_group := self.units_group())
        ):
            return [units, literal, units_group];
        self._reset(mark)
        if (
            (units := self.units())
            and
            (units_group := self.units_group())
        ):
            return [units, units_group];
        self._reset(mark)
        if (
            (units := self.units())
            and
            (literal := self.expect('**'))
            and
            (number := self.number())
        ):
            return [units, literal, number];
        self._reset(mark)
        if (
            (name := self.name())
        ):
            return name;
        self._reset(mark)
        return None;

    @memoize
    def units_group(self) -> Optional[Any]:
        # units_group: '(' units ')' | units
        mark = self._mark()
        if (
            (literal := self.expect('('))
            and
            (units := self.units())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, units, literal_1];
        self._reset(mark)
        if (
            (units := self.units())
        ):
            return units;
        self._reset(mark)
        return None;

    @memoize_left_rec
    def sum(self) -> Optional[Any]:
        # sum: sum '+' term | sum '-' term | term
        mark = self._mark()
        if (
            (sum := self.sum())
            and
            (literal := self.expect('+'))
            and
            (term := self.term())
        ):
            return [sum, literal, term];
        self._reset(mark)
        if (
            (sum := self.sum())
            and
            (literal := self.expect('-'))
            and
            (term := self.term())
        ):
            return [sum, literal, term];
        self._reset(mark)
        if (
            (term := self.term())
        ):
            return term;
        self._reset(mark)
        return None;

    @memoize_left_rec
    def term(self) -> Optional[Any]:
        # term: term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor
        mark = self._mark()
        if (
            (term := self.term())
            and
            (literal := self.expect('*'))
            and
            (factor := self.factor())
        ):
            return [term, literal, factor];
        self._reset(mark)
        if (
            (term := self.term())
            and
            (literal := self.expect('/'))
            and
            (factor := self.factor())
        ):
            return [term, literal, factor];
        self._reset(mark)
        if (
            (term := self.term())
            and
            (literal := self.expect('//'))
            and
            (factor := self.factor())
        ):
            return [term, literal, factor];
        self._reset(mark)
        if (
            (term := self.term())
            and
            (literal := self.expect('%'))
            and
            (factor := self.factor())
        ):
            return [term, literal, factor];
        self._reset(mark)
        if (
            (term := self.term())
            and
            (literal := self.expect('@'))
            and
            (factor := self.factor())
        ):
            return [term, literal, factor];
        self._reset(mark)
        if (
            (factor := self.factor())
        ):
            return factor;
        self._reset(mark)
        return None;

    @memoize
    def factor(self) -> Optional[Any]:
        # factor: '+' factor | '-' factor | '~' factor | power
        mark = self._mark()
        if (
            (literal := self.expect('+'))
            and
            (factor := self.factor())
        ):
            return [literal, factor];
        self._reset(mark)
        if (
            (literal := self.expect('-'))
            and
            (factor := self.factor())
        ):
            return [literal, factor];
        self._reset(mark)
        if (
            (literal := self.expect('~'))
            and
            (factor := self.factor())
        ):
            return [literal, factor];
        self._reset(mark)
        if (
            (power := self.power())
        ):
            return power;
        self._reset(mark)
        return None;

    @memoize
    def power(self) -> Optional[Any]:
        # power: await_primary '**' factor | await_primary
        mark = self._mark()
        if (
            (await_primary := self.await_primary())
            and
            (literal := self.expect('**'))
            and
            (factor := self.factor())
        ):
            return [await_primary, literal, factor];
        self._reset(mark)
        if (
            (await_primary := self.await_primary())
        ):
            return await_primary;
        self._reset(mark)
        return None;

    @memoize
    def await_primary(self) -> Optional[Any]:
        # await_primary: AWAIT primary | primary
        mark = self._mark()
        if (
            (_await := self.expect('AWAIT'))
            and
            (primary := self.primary())
        ):
            return [_await, primary];
        self._reset(mark)
        if (
            (primary := self.primary())
        ):
            return primary;
        self._reset(mark)
        return None;

    @memoize_left_rec
    def primary(self) -> Optional[Any]:
        # primary: primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom
        mark = self._mark()
        if (
            (primary := self.primary())
            and
            (literal := self.expect('.'))
            and
            (name := self.name())
        ):
            return [primary, literal, name];
        self._reset(mark)
        if (
            (primary := self.primary())
            and
            (genexp := self.genexp())
        ):
            return [primary, genexp];
        self._reset(mark)
        if (
            (primary := self.primary())
            and
            (literal := self.expect('('))
            and
            (opt := self.arguments(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [primary, literal, opt, literal_1];
        self._reset(mark)
        if (
            (primary := self.primary())
            and
            (literal := self.expect('['))
            and
            (slices := self.slices())
            and
            (literal_1 := self.expect(']'))
        ):
            return [primary, literal, slices, literal_1];
        self._reset(mark)
        if (
            (atom := self.atom())
        ):
            return atom;
        self._reset(mark)
        return None;

    @memoize
    def slices(self) -> Optional[Any]:
        # slices: slice !',' | ','.slice+ ','?
        mark = self._mark()
        if (
            (slice := self.slice())
            and
            (self.negative_lookahead(self.expect, ','))
        ):
            return slice;
        self._reset(mark)
        if (
            (_gather_86 := self._gather_86())
            and
            (opt := self.expect(','),)
        ):
            return [_gather_86, opt];
        self._reset(mark)
        return None;

    @memoize
    def slice(self) -> Optional[Any]:
        # slice: expression? ':' expression? [':' expression?] | expression
        mark = self._mark()
        if (
            (opt := self.expression(),)
            and
            (literal := self.expect(':'))
            and
            (opt_1 := self.expression(),)
            and
            (opt_2 := self._tmp_88(),)
        ):
            return [opt, literal, opt_1, opt_2];
        self._reset(mark)
        if (
            (expression := self.expression())
        ):
            return expression;
        self._reset(mark)
        return None;

    @memoize
    def atom(self) -> Optional[Any]:
        # atom: NAME | 'True' | 'False' | 'None' | '__peg_parser__' | strings | NUMBER | (tuple | group | genexp) | (list | listcomp) | (dict | set | dictcomp | setcomp) | '...'
        mark = self._mark()
        if (
            (name := self.name())
        ):
            return name;
        self._reset(mark)
        if (
            (literal := self.expect('True'))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('False'))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('None'))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('__peg_parser__'))
        ):
            return literal;
        self._reset(mark)
        if (
            (strings := self.strings())
        ):
            return strings;
        self._reset(mark)
        if (
            (number := self.number())
        ):
            return number;
        self._reset(mark)
        if (
            (_tmp_89 := self._tmp_89())
        ):
            return _tmp_89;
        self._reset(mark)
        if (
            (_tmp_90 := self._tmp_90())
        ):
            return _tmp_90;
        self._reset(mark)
        if (
            (_tmp_91 := self._tmp_91())
        ):
            return _tmp_91;
        self._reset(mark)
        if (
            (literal := self.expect('...'))
        ):
            return literal;
        self._reset(mark)
        return None;

    @memoize
    def strings(self) -> Optional[Any]:
        # strings: STRING+
        mark = self._mark()
        if (
            (_loop1_92 := self._loop1_92())
        ):
            return _loop1_92;
        self._reset(mark)
        return None;

    @memoize
    def list(self) -> Optional[Any]:
        # list: '[' star_named_expressions? ']'
        mark = self._mark()
        if (
            (literal := self.expect('['))
            and
            (opt := self.star_named_expressions(),)
            and
            (literal_1 := self.expect(']'))
        ):
            return [literal, opt, literal_1];
        self._reset(mark)
        return None;

    @memoize
    def listcomp(self) -> Optional[Any]:
        # listcomp: '[' named_expression ~ for_if_clauses ']'
        mark = self._mark()
        cut = False
        if (
            (literal := self.expect('['))
            and
            (named_expression := self.named_expression())
            and
            (cut := True)
            and
            (for_if_clauses := self.for_if_clauses())
            and
            (literal_1 := self.expect(']'))
        ):
            return [literal, named_expression, for_if_clauses, literal_1];
        self._reset(mark)
        if cut:
            return None;
        return None;

    @memoize
    def tuple(self) -> Optional[Any]:
        # tuple: '(' [star_named_expression ',' star_named_expressions?] ')'
        mark = self._mark()
        if (
            (literal := self.expect('('))
            and
            (opt := self._tmp_93(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, opt, literal_1];
        self._reset(mark)
        return None;

    @memoize
    def group(self) -> Optional[Any]:
        # group: '(' (yield_expr | named_expression) ')'
        mark = self._mark()
        if (
            (literal := self.expect('('))
            and
            (_tmp_94 := self._tmp_94())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, _tmp_94, literal_1];
        self._reset(mark)
        return None;

    @memoize
    def genexp(self) -> Optional[Any]:
        # genexp: '(' named_expression ~ for_if_clauses ')'
        mark = self._mark()
        cut = False
        if (
            (literal := self.expect('('))
            and
            (named_expression := self.named_expression())
            and
            (cut := True)
            and
            (for_if_clauses := self.for_if_clauses())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, named_expression, for_if_clauses, literal_1];
        self._reset(mark)
        if cut:
            return None;
        return None;

    @memoize
    def set(self) -> Optional[Any]:
        # set: '{' star_named_expressions '}'
        mark = self._mark()
        if (
            (literal := self.expect('{'))
            and
            (star_named_expressions := self.star_named_expressions())
            and
            (literal_1 := self.expect('}'))
        ):
            return [literal, star_named_expressions, literal_1];
        self._reset(mark)
        return None;

    @memoize
    def setcomp(self) -> Optional[Any]:
        # setcomp: '{' named_expression ~ for_if_clauses '}'
        mark = self._mark()
        cut = False
        if (
            (literal := self.expect('{'))
            and
            (named_expression := self.named_expression())
            and
            (cut := True)
            and
            (for_if_clauses := self.for_if_clauses())
            and
            (literal_1 := self.expect('}'))
        ):
            return [literal, named_expression, for_if_clauses, literal_1];
        self._reset(mark)
        if cut:
            return None;
        return None;

    @memoize
    def dict(self) -> Optional[Any]:
        # dict: '{' double_starred_kvpairs? '}'
        mark = self._mark()
        if (
            (literal := self.expect('{'))
            and
            (opt := self.double_starred_kvpairs(),)
            and
            (literal_1 := self.expect('}'))
        ):
            return [literal, opt, literal_1];
        self._reset(mark)
        return None;

    @memoize
    def dictcomp(self) -> Optional[Any]:
        # dictcomp: '{' kvpair for_if_clauses '}'
        mark = self._mark()
        if (
            (literal := self.expect('{'))
            and
            (kvpair := self.kvpair())
            and
            (for_if_clauses := self.for_if_clauses())
            and
            (literal_1 := self.expect('}'))
        ):
            return [literal, kvpair, for_if_clauses, literal_1];
        self._reset(mark)
        return None;

    @memoize
    def double_starred_kvpairs(self) -> Optional[Any]:
        # double_starred_kvpairs: ','.double_starred_kvpair+ ','?
        mark = self._mark()
        if (
            (_gather_95 := self._gather_95())
            and
            (opt := self.expect(','),)
        ):
            return [_gather_95, opt];
        self._reset(mark)
        return None;

    @memoize
    def double_starred_kvpair(self) -> Optional[Any]:
        # double_starred_kvpair: '**' bitwise_or | kvpair
        mark = self._mark()
        if (
            (literal := self.expect('**'))
            and
            (bitwise_or := self.bitwise_or())
        ):
            return [literal, bitwise_or];
        self._reset(mark)
        if (
            (kvpair := self.kvpair())
        ):
            return kvpair;
        self._reset(mark)
        return None;

    @memoize
    def kvpair(self) -> Optional[Any]:
        # kvpair: expression ':' expression
        mark = self._mark()
        if (
            (expression := self.expression())
            and
            (literal := self.expect(':'))
            and
            (expression_1 := self.expression())
        ):
            return [expression, literal, expression_1];
        self._reset(mark)
        return None;

    @memoize
    def for_if_clauses(self) -> Optional[Any]:
        # for_if_clauses: for_if_clause+
        mark = self._mark()
        if (
            (_loop1_97 := self._loop1_97())
        ):
            return _loop1_97;
        self._reset(mark)
        return None;

    @memoize
    def for_if_clause(self) -> Optional[Any]:
        # for_if_clause: ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
        mark = self._mark()
        cut = False
        if (
            (_async := self.expect('ASYNC'))
            and
            (literal := self.expect('for'))
            and
            (star_targets := self.star_targets())
            and
            (literal_1 := self.expect('in'))
            and
            (cut := True)
            and
            (disjunction := self.disjunction())
            and
            (_loop0_98 := self._loop0_98(),)
        ):
            return [_async, literal, star_targets, literal_1, disjunction, _loop0_98];
        self._reset(mark)
        if cut:
            return None;
        cut = False
        if (
            (literal := self.expect('for'))
            and
            (star_targets := self.star_targets())
            and
            (literal_1 := self.expect('in'))
            and
            (cut := True)
            and
            (disjunction := self.disjunction())
            and
            (_loop0_99 := self._loop0_99(),)
        ):
            return [literal, star_targets, literal_1, disjunction, _loop0_99];
        self._reset(mark)
        if cut:
            return None;
        return None;

    @memoize
    def yield_expr(self) -> Optional[Any]:
        # yield_expr: 'yield' 'from' expression | 'yield' star_expressions?
        mark = self._mark()
        if (
            (literal := self.expect('yield'))
            and
            (literal_1 := self.expect('from'))
            and
            (expression := self.expression())
        ):
            return [literal, literal_1, expression];
        self._reset(mark)
        if (
            (literal := self.expect('yield'))
            and
            (opt := self.star_expressions(),)
        ):
            return [literal, opt];
        self._reset(mark)
        return None;

    @memoize
    def arguments(self) -> Optional[Any]:
        # arguments: args ','? &')'
        mark = self._mark()
        if (
            (args := self.args())
            and
            (opt := self.expect(','),)
            and
            (self.positive_lookahead(self.expect, ')'))
        ):
            return [args, opt];
        self._reset(mark)
        return None;

    @memoize
    def args(self) -> Optional[Any]:
        # args: ','.(starred_expression | named_expression !'=')+ [',' kwargs] | kwargs
        mark = self._mark()
        if (
            (_gather_100 := self._gather_100())
            and
            (opt := self._tmp_102(),)
        ):
            return [_gather_100, opt];
        self._reset(mark)
        if (
            (kwargs := self.kwargs())
        ):
            return kwargs;
        self._reset(mark)
        return None;

    @memoize
    def kwargs(self) -> Optional[Any]:
        # kwargs: ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+
        mark = self._mark()
        if (
            (_gather_103 := self._gather_103())
            and
            (literal := self.expect(','))
            and
            (_gather_105 := self._gather_105())
        ):
            return [_gather_103, literal, _gather_105];
        self._reset(mark)
        if (
            (_gather_107 := self._gather_107())
        ):
            return _gather_107;
        self._reset(mark)
        if (
            (_gather_109 := self._gather_109())
        ):
            return _gather_109;
        self._reset(mark)
        return None;

    @memoize
    def starred_expression(self) -> Optional[Any]:
        # starred_expression: '*' expression
        mark = self._mark()
        if (
            (literal := self.expect('*'))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        return None;

    @memoize
    def kwarg_or_starred(self) -> Optional[Any]:
        # kwarg_or_starred: NAME '=' expression | starred_expression
        mark = self._mark()
        if (
            (name := self.name())
            and
            (literal := self.expect('='))
            and
            (expression := self.expression())
        ):
            return [name, literal, expression];
        self._reset(mark)
        if (
            (starred_expression := self.starred_expression())
        ):
            return starred_expression;
        self._reset(mark)
        return None;

    @memoize
    def kwarg_or_double_starred(self) -> Optional[Any]:
        # kwarg_or_double_starred: NAME '=' expression | '**' expression
        mark = self._mark()
        if (
            (name := self.name())
            and
            (literal := self.expect('='))
            and
            (expression := self.expression())
        ):
            return [name, literal, expression];
        self._reset(mark)
        if (
            (literal := self.expect('**'))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        return None;

    @memoize
    def star_targets(self) -> Optional[Any]:
        # star_targets: star_target !',' | star_target ((',' star_target))* ','?
        mark = self._mark()
        if (
            (star_target := self.star_target())
            and
            (self.negative_lookahead(self.expect, ','))
        ):
            return star_target;
        self._reset(mark)
        if (
            (star_target := self.star_target())
            and
            (_loop0_111 := self._loop0_111(),)
            and
            (opt := self.expect(','),)
        ):
            return [star_target, _loop0_111, opt];
        self._reset(mark)
        return None;

    @memoize
    def star_targets_list_seq(self) -> Optional[Any]:
        # star_targets_list_seq: ','.star_target+ ','?
        mark = self._mark()
        if (
            (_gather_112 := self._gather_112())
            and
            (opt := self.expect(','),)
        ):
            return [_gather_112, opt];
        self._reset(mark)
        return None;

    @memoize
    def star_targets_tuple_seq(self) -> Optional[Any]:
        # star_targets_tuple_seq: star_target ((',' star_target))+ ','? | star_target ','
        mark = self._mark()
        if (
            (star_target := self.star_target())
            and
            (_loop1_114 := self._loop1_114())
            and
            (opt := self.expect(','),)
        ):
            return [star_target, _loop1_114, opt];
        self._reset(mark)
        if (
            (star_target := self.star_target())
            and
            (literal := self.expect(','))
        ):
            return [star_target, literal];
        self._reset(mark)
        return None;

    @memoize
    def star_target(self) -> Optional[Any]:
        # star_target: '*' (!'*' star_target) | target_with_star_atom
        mark = self._mark()
        if (
            (literal := self.expect('*'))
            and
            (_tmp_115 := self._tmp_115())
        ):
            return [literal, _tmp_115];
        self._reset(mark)
        if (
            (target_with_star_atom := self.target_with_star_atom())
        ):
            return target_with_star_atom;
        self._reset(mark)
        return None;

    @memoize
    def target_with_star_atom(self) -> Optional[Any]:
        # target_with_star_atom: t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom
        mark = self._mark()
        if (
            (t_primary := self.t_primary())
            and
            (literal := self.expect('.'))
            and
            (name := self.name())
            and
            (self.negative_lookahead(self.t_lookahead, ))
        ):
            return [t_primary, literal, name];
        self._reset(mark)
        if (
            (t_primary := self.t_primary())
            and
            (literal := self.expect('['))
            and
            (slices := self.slices())
            and
            (literal_1 := self.expect(']'))
            and
            (self.negative_lookahead(self.t_lookahead, ))
        ):
            return [t_primary, literal, slices, literal_1];
        self._reset(mark)
        if (
            (star_atom := self.star_atom())
        ):
            return star_atom;
        self._reset(mark)
        return None;

    @memoize
    def star_atom(self) -> Optional[Any]:
        # star_atom: NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'
        mark = self._mark()
        if (
            (name := self.name())
        ):
            return name;
        self._reset(mark)
        if (
            (literal := self.expect('('))
            and
            (target_with_star_atom := self.target_with_star_atom())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, target_with_star_atom, literal_1];
        self._reset(mark)
        if (
            (literal := self.expect('('))
            and
            (opt := self.star_targets_tuple_seq(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, opt, literal_1];
        self._reset(mark)
        if (
            (literal := self.expect('['))
            and
            (opt := self.star_targets_list_seq(),)
            and
            (literal_1 := self.expect(']'))
        ):
            return [literal, opt, literal_1];
        self._reset(mark)
        return None;

    @memoize
    def single_target(self) -> Optional[Any]:
        # single_target: single_subscript_attribute_target | NAME | '(' single_target ')'
        mark = self._mark()
        if (
            (single_subscript_attribute_target := self.single_subscript_attribute_target())
        ):
            return single_subscript_attribute_target;
        self._reset(mark)
        if (
            (name := self.name())
        ):
            return name;
        self._reset(mark)
        if (
            (literal := self.expect('('))
            and
            (single_target := self.single_target())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, single_target, literal_1];
        self._reset(mark)
        return None;

    @memoize
    def single_subscript_attribute_target(self) -> Optional[Any]:
        # single_subscript_attribute_target: t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead
        mark = self._mark()
        if (
            (t_primary := self.t_primary())
            and
            (literal := self.expect('.'))
            and
            (name := self.name())
            and
            (self.negative_lookahead(self.t_lookahead, ))
        ):
            return [t_primary, literal, name];
        self._reset(mark)
        if (
            (t_primary := self.t_primary())
            and
            (literal := self.expect('['))
            and
            (slices := self.slices())
            and
            (literal_1 := self.expect(']'))
            and
            (self.negative_lookahead(self.t_lookahead, ))
        ):
            return [t_primary, literal, slices, literal_1];
        self._reset(mark)
        return None;

    @memoize
    def del_targets(self) -> Optional[Any]:
        # del_targets: ','.del_target+ ','?
        mark = self._mark()
        if (
            (_gather_116 := self._gather_116())
            and
            (opt := self.expect(','),)
        ):
            return [_gather_116, opt];
        self._reset(mark)
        return None;

    @memoize
    def del_target(self) -> Optional[Any]:
        # del_target: t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | del_t_atom
        mark = self._mark()
        if (
            (t_primary := self.t_primary())
            and
            (literal := self.expect('.'))
            and
            (name := self.name())
            and
            (self.negative_lookahead(self.t_lookahead, ))
        ):
            return [t_primary, literal, name];
        self._reset(mark)
        if (
            (t_primary := self.t_primary())
            and
            (literal := self.expect('['))
            and
            (slices := self.slices())
            and
            (literal_1 := self.expect(']'))
            and
            (self.negative_lookahead(self.t_lookahead, ))
        ):
            return [t_primary, literal, slices, literal_1];
        self._reset(mark)
        if (
            (del_t_atom := self.del_t_atom())
        ):
            return del_t_atom;
        self._reset(mark)
        return None;

    @memoize
    def del_t_atom(self) -> Optional[Any]:
        # del_t_atom: NAME | '(' del_target ')' | '(' del_targets? ')' | '[' del_targets? ']'
        mark = self._mark()
        if (
            (name := self.name())
        ):
            return name;
        self._reset(mark)
        if (
            (literal := self.expect('('))
            and
            (del_target := self.del_target())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, del_target, literal_1];
        self._reset(mark)
        if (
            (literal := self.expect('('))
            and
            (opt := self.del_targets(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, opt, literal_1];
        self._reset(mark)
        if (
            (literal := self.expect('['))
            and
            (opt := self.del_targets(),)
            and
            (literal_1 := self.expect(']'))
        ):
            return [literal, opt, literal_1];
        self._reset(mark)
        return None;

    @memoize_left_rec
    def t_primary(self) -> Optional[Any]:
        # t_primary: t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead
        mark = self._mark()
        if (
            (t_primary := self.t_primary())
            and
            (literal := self.expect('.'))
            and
            (name := self.name())
            and
            (self.positive_lookahead(self.t_lookahead, ))
        ):
            return [t_primary, literal, name];
        self._reset(mark)
        if (
            (t_primary := self.t_primary())
            and
            (literal := self.expect('['))
            and
            (slices := self.slices())
            and
            (literal_1 := self.expect(']'))
            and
            (self.positive_lookahead(self.t_lookahead, ))
        ):
            return [t_primary, literal, slices, literal_1];
        self._reset(mark)
        if (
            (t_primary := self.t_primary())
            and
            (genexp := self.genexp())
            and
            (self.positive_lookahead(self.t_lookahead, ))
        ):
            return [t_primary, genexp];
        self._reset(mark)
        if (
            (t_primary := self.t_primary())
            and
            (literal := self.expect('('))
            and
            (opt := self.arguments(),)
            and
            (literal_1 := self.expect(')'))
            and
            (self.positive_lookahead(self.t_lookahead, ))
        ):
            return [t_primary, literal, opt, literal_1];
        self._reset(mark)
        if (
            (atom := self.atom())
            and
            (self.positive_lookahead(self.t_lookahead, ))
        ):
            return atom;
        self._reset(mark)
        return None;

    @memoize
    def t_lookahead(self) -> Optional[Any]:
        # t_lookahead: '(' | '[' | '.'
        mark = self._mark()
        if (
            (literal := self.expect('('))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('['))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('.'))
        ):
            return literal;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_1(self) -> Optional[Any]:
        # _loop0_1: NEWLINE
        mark = self._mark()
        children = []
        while (
            (_newline := self.expect('NEWLINE'))
        ):
            children.append(_newline)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_2(self) -> Optional[Any]:
        # _loop0_2: NEWLINE
        mark = self._mark()
        children = []
        while (
            (_newline := self.expect('NEWLINE'))
        ):
            children.append(_newline)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_4(self) -> Optional[Any]:
        # _loop0_4: ',' expression
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.expression())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_3(self) -> Optional[Any]:
        # _gather_3: expression _loop0_4
        mark = self._mark()
        if (
            (elem := self.expression())
            is not None
            and
            (seq := self._loop0_4())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_6(self) -> Optional[Any]:
        # _loop0_6: ',' expression
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.expression())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_5(self) -> Optional[Any]:
        # _gather_5: expression _loop0_6
        mark = self._mark()
        if (
            (elem := self.expression())
            is not None
            and
            (seq := self._loop0_6())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_8(self) -> Optional[Any]:
        # _loop0_8: ',' expression
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.expression())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_7(self) -> Optional[Any]:
        # _gather_7: expression _loop0_8
        mark = self._mark()
        if (
            (elem := self.expression())
            is not None
            and
            (seq := self._loop0_8())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_10(self) -> Optional[Any]:
        # _loop0_10: ',' expression
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.expression())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_9(self) -> Optional[Any]:
        # _gather_9: expression _loop0_10
        mark = self._mark()
        if (
            (elem := self.expression())
            is not None
            and
            (seq := self._loop0_10())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop1_11(self) -> Optional[Any]:
        # _loop1_11: statement
        mark = self._mark()
        children = []
        while (
            (statement := self.statement())
        ):
            children.append(statement)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_13(self) -> Optional[Any]:
        # _loop0_13: ';' small_stmt
        mark = self._mark()
        children = []
        while (
            (self.expect(';'))
            and
            (elem := self.small_stmt())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_12(self) -> Optional[Any]:
        # _gather_12: small_stmt _loop0_13
        mark = self._mark()
        if (
            (elem := self.small_stmt())
            is not None
            and
            (seq := self._loop0_13())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_14(self) -> Optional[Any]:
        # _tmp_14: '=' annotated_rhs
        mark = self._mark()
        if (
            (literal := self.expect('='))
            and
            (annotated_rhs := self.annotated_rhs())
        ):
            return [literal, annotated_rhs];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_15(self) -> Optional[Any]:
        # _tmp_15: '(' single_target ')' | single_subscript_attribute_target
        mark = self._mark()
        if (
            (literal := self.expect('('))
            and
            (single_target := self.single_target())
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, single_target, literal_1];
        self._reset(mark)
        if (
            (single_subscript_attribute_target := self.single_subscript_attribute_target())
        ):
            return single_subscript_attribute_target;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_16(self) -> Optional[Any]:
        # _tmp_16: '=' annotated_rhs
        mark = self._mark()
        if (
            (literal := self.expect('='))
            and
            (annotated_rhs := self.annotated_rhs())
        ):
            return [literal, annotated_rhs];
        self._reset(mark)
        return None;

    @memoize
    def _loop1_17(self) -> Optional[Any]:
        # _loop1_17: (star_targets '=')
        mark = self._mark()
        children = []
        while (
            (_tmp_118 := self._tmp_118())
        ):
            children.append(_tmp_118)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _tmp_18(self) -> Optional[Any]:
        # _tmp_18: yield_expr | star_expressions
        mark = self._mark()
        if (
            (yield_expr := self.yield_expr())
        ):
            return yield_expr;
        self._reset(mark)
        if (
            (star_expressions := self.star_expressions())
        ):
            return star_expressions;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_19(self) -> Optional[Any]:
        # _tmp_19: yield_expr | star_expressions
        mark = self._mark()
        if (
            (yield_expr := self.yield_expr())
        ):
            return yield_expr;
        self._reset(mark)
        if (
            (star_expressions := self.star_expressions())
        ):
            return star_expressions;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_21(self) -> Optional[Any]:
        # _loop0_21: ',' NAME
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.name())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_20(self) -> Optional[Any]:
        # _gather_20: NAME _loop0_21
        mark = self._mark()
        if (
            (elem := self.name())
            is not None
            and
            (seq := self._loop0_21())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_23(self) -> Optional[Any]:
        # _loop0_23: ',' NAME
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.name())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_22(self) -> Optional[Any]:
        # _gather_22: NAME _loop0_23
        mark = self._mark()
        if (
            (elem := self.name())
            is not None
            and
            (seq := self._loop0_23())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_24(self) -> Optional[Any]:
        # _tmp_24: ',' expression
        mark = self._mark()
        if (
            (literal := self.expect(','))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_25(self) -> Optional[Any]:
        # _tmp_25: ';' | NEWLINE
        mark = self._mark()
        if (
            (literal := self.expect(';'))
        ):
            return literal;
        self._reset(mark)
        if (
            (_newline := self.expect('NEWLINE'))
        ):
            return _newline;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_26(self) -> Optional[Any]:
        # _loop0_26: ('.' | '...')
        mark = self._mark()
        children = []
        while (
            (_tmp_119 := self._tmp_119())
        ):
            children.append(_tmp_119)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_27(self) -> Optional[Any]:
        # _loop1_27: ('.' | '...')
        mark = self._mark()
        children = []
        while (
            (_tmp_120 := self._tmp_120())
        ):
            children.append(_tmp_120)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_29(self) -> Optional[Any]:
        # _loop0_29: ',' import_from_as_name
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.import_from_as_name())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_28(self) -> Optional[Any]:
        # _gather_28: import_from_as_name _loop0_29
        mark = self._mark()
        if (
            (elem := self.import_from_as_name())
            is not None
            and
            (seq := self._loop0_29())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_30(self) -> Optional[Any]:
        # _tmp_30: 'as' NAME
        mark = self._mark()
        if (
            (literal := self.expect('as'))
            and
            (name := self.name())
        ):
            return [literal, name];
        self._reset(mark)
        return None;

    @memoize
    def _loop0_32(self) -> Optional[Any]:
        # _loop0_32: ',' dotted_as_name
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.dotted_as_name())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_31(self) -> Optional[Any]:
        # _gather_31: dotted_as_name _loop0_32
        mark = self._mark()
        if (
            (elem := self.dotted_as_name())
            is not None
            and
            (seq := self._loop0_32())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_33(self) -> Optional[Any]:
        # _tmp_33: 'as' NAME
        mark = self._mark()
        if (
            (literal := self.expect('as'))
            and
            (name := self.name())
        ):
            return [literal, name];
        self._reset(mark)
        return None;

    @memoize
    def _loop0_35(self) -> Optional[Any]:
        # _loop0_35: ',' with_item
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.with_item())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_34(self) -> Optional[Any]:
        # _gather_34: with_item _loop0_35
        mark = self._mark()
        if (
            (elem := self.with_item())
            is not None
            and
            (seq := self._loop0_35())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_37(self) -> Optional[Any]:
        # _loop0_37: ',' with_item
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.with_item())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_36(self) -> Optional[Any]:
        # _gather_36: with_item _loop0_37
        mark = self._mark()
        if (
            (elem := self.with_item())
            is not None
            and
            (seq := self._loop0_37())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_39(self) -> Optional[Any]:
        # _loop0_39: ',' with_item
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.with_item())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_38(self) -> Optional[Any]:
        # _gather_38: with_item _loop0_39
        mark = self._mark()
        if (
            (elem := self.with_item())
            is not None
            and
            (seq := self._loop0_39())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_41(self) -> Optional[Any]:
        # _loop0_41: ',' with_item
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.with_item())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_40(self) -> Optional[Any]:
        # _gather_40: with_item _loop0_41
        mark = self._mark()
        if (
            (elem := self.with_item())
            is not None
            and
            (seq := self._loop0_41())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_42(self) -> Optional[Any]:
        # _tmp_42: ',' | ')' | ':'
        mark = self._mark()
        if (
            (literal := self.expect(','))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect(')'))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect(':'))
        ):
            return literal;
        self._reset(mark)
        return None;

    @memoize
    def _loop1_43(self) -> Optional[Any]:
        # _loop1_43: except_block
        mark = self._mark()
        children = []
        while (
            (except_block := self.except_block())
        ):
            children.append(except_block)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _tmp_44(self) -> Optional[Any]:
        # _tmp_44: 'as' NAME
        mark = self._mark()
        if (
            (literal := self.expect('as'))
            and
            (name := self.name())
        ):
            return [literal, name];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_45(self) -> Optional[Any]:
        # _tmp_45: 'from' expression
        mark = self._mark()
        if (
            (literal := self.expect('from'))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_46(self) -> Optional[Any]:
        # _tmp_46: '->' expression
        mark = self._mark()
        if (
            (literal := self.expect('->'))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_47(self) -> Optional[Any]:
        # _tmp_47: '->' expression
        mark = self._mark()
        if (
            (literal := self.expect('->'))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_48(self) -> Optional[Any]:
        # _tmp_48: NEWLINE INDENT
        mark = self._mark()
        if (
            (_newline := self.expect('NEWLINE'))
            and
            (_indent := self.expect('INDENT'))
        ):
            return [_newline, _indent];
        self._reset(mark)
        return None;

    @memoize
    def _loop0_49(self) -> Optional[Any]:
        # _loop0_49: param_no_default
        mark = self._mark()
        children = []
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append(param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_50(self) -> Optional[Any]:
        # _loop0_50: param_with_default
        mark = self._mark()
        children = []
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append(param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_51(self) -> Optional[Any]:
        # _loop0_51: param_with_default
        mark = self._mark()
        children = []
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append(param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_52(self) -> Optional[Any]:
        # _loop1_52: param_no_default
        mark = self._mark()
        children = []
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append(param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_53(self) -> Optional[Any]:
        # _loop0_53: param_with_default
        mark = self._mark()
        children = []
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append(param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_54(self) -> Optional[Any]:
        # _loop1_54: param_with_default
        mark = self._mark()
        children = []
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append(param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_55(self) -> Optional[Any]:
        # _loop1_55: param_no_default
        mark = self._mark()
        children = []
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append(param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_56(self) -> Optional[Any]:
        # _loop1_56: param_no_default
        mark = self._mark()
        children = []
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append(param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_57(self) -> Optional[Any]:
        # _loop0_57: param_no_default
        mark = self._mark()
        children = []
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append(param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_58(self) -> Optional[Any]:
        # _loop1_58: param_with_default
        mark = self._mark()
        children = []
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append(param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_59(self) -> Optional[Any]:
        # _loop0_59: param_no_default
        mark = self._mark()
        children = []
        while (
            (param_no_default := self.param_no_default())
        ):
            children.append(param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_60(self) -> Optional[Any]:
        # _loop1_60: param_with_default
        mark = self._mark()
        children = []
        while (
            (param_with_default := self.param_with_default())
        ):
            children.append(param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_61(self) -> Optional[Any]:
        # _loop0_61: param_maybe_default
        mark = self._mark()
        children = []
        while (
            (param_maybe_default := self.param_maybe_default())
        ):
            children.append(param_maybe_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_62(self) -> Optional[Any]:
        # _loop1_62: param_maybe_default
        mark = self._mark()
        children = []
        while (
            (param_maybe_default := self.param_maybe_default())
        ):
            children.append(param_maybe_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_63(self) -> Optional[Any]:
        # _loop1_63: ('@' named_expression NEWLINE)
        mark = self._mark()
        children = []
        while (
            (_tmp_121 := self._tmp_121())
        ):
            children.append(_tmp_121)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _tmp_64(self) -> Optional[Any]:
        # _tmp_64: '(' arguments? ')'
        mark = self._mark()
        if (
            (literal := self.expect('('))
            and
            (opt := self.arguments(),)
            and
            (literal_1 := self.expect(')'))
        ):
            return [literal, opt, literal_1];
        self._reset(mark)
        return None;

    @memoize
    def _loop1_65(self) -> Optional[Any]:
        # _loop1_65: (',' star_expression)
        mark = self._mark()
        children = []
        while (
            (_tmp_122 := self._tmp_122())
        ):
            children.append(_tmp_122)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_67(self) -> Optional[Any]:
        # _loop0_67: ',' star_named_expression
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.star_named_expression())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_66(self) -> Optional[Any]:
        # _gather_66: star_named_expression _loop0_67
        mark = self._mark()
        if (
            (elem := self.star_named_expression())
            is not None
            and
            (seq := self._loop0_67())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop1_68(self) -> Optional[Any]:
        # _loop1_68: (',' expression)
        mark = self._mark()
        children = []
        while (
            (_tmp_123 := self._tmp_123())
        ):
            children.append(_tmp_123)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_69(self) -> Optional[Any]:
        # _loop0_69: lambda_param_no_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append(lambda_param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_70(self) -> Optional[Any]:
        # _loop0_70: lambda_param_with_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append(lambda_param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_71(self) -> Optional[Any]:
        # _loop0_71: lambda_param_with_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append(lambda_param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_72(self) -> Optional[Any]:
        # _loop1_72: lambda_param_no_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append(lambda_param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_73(self) -> Optional[Any]:
        # _loop0_73: lambda_param_with_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append(lambda_param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_74(self) -> Optional[Any]:
        # _loop1_74: lambda_param_with_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append(lambda_param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_75(self) -> Optional[Any]:
        # _loop1_75: lambda_param_no_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append(lambda_param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_76(self) -> Optional[Any]:
        # _loop1_76: lambda_param_no_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append(lambda_param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_77(self) -> Optional[Any]:
        # _loop0_77: lambda_param_no_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append(lambda_param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_78(self) -> Optional[Any]:
        # _loop1_78: lambda_param_with_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append(lambda_param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_79(self) -> Optional[Any]:
        # _loop0_79: lambda_param_no_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_no_default := self.lambda_param_no_default())
        ):
            children.append(lambda_param_no_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_80(self) -> Optional[Any]:
        # _loop1_80: lambda_param_with_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_with_default := self.lambda_param_with_default())
        ):
            children.append(lambda_param_with_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_81(self) -> Optional[Any]:
        # _loop0_81: lambda_param_maybe_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_maybe_default := self.lambda_param_maybe_default())
        ):
            children.append(lambda_param_maybe_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_82(self) -> Optional[Any]:
        # _loop1_82: lambda_param_maybe_default
        mark = self._mark()
        children = []
        while (
            (lambda_param_maybe_default := self.lambda_param_maybe_default())
        ):
            children.append(lambda_param_maybe_default)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_83(self) -> Optional[Any]:
        # _loop1_83: ('or' conjunction)
        mark = self._mark()
        children = []
        while (
            (_tmp_124 := self._tmp_124())
        ):
            children.append(_tmp_124)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_84(self) -> Optional[Any]:
        # _loop1_84: ('and' inversion)
        mark = self._mark()
        children = []
        while (
            (_tmp_125 := self._tmp_125())
        ):
            children.append(_tmp_125)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop1_85(self) -> Optional[Any]:
        # _loop1_85: compare_op_bitwise_or_pair
        mark = self._mark()
        children = []
        while (
            (compare_op_bitwise_or_pair := self.compare_op_bitwise_or_pair())
        ):
            children.append(compare_op_bitwise_or_pair)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_87(self) -> Optional[Any]:
        # _loop0_87: ',' slice
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.slice())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_86(self) -> Optional[Any]:
        # _gather_86: slice _loop0_87
        mark = self._mark()
        if (
            (elem := self.slice())
            is not None
            and
            (seq := self._loop0_87())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_88(self) -> Optional[Any]:
        # _tmp_88: ':' expression?
        mark = self._mark()
        if (
            (literal := self.expect(':'))
            and
            (opt := self.expression(),)
        ):
            return [literal, opt];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_89(self) -> Optional[Any]:
        # _tmp_89: tuple | group | genexp
        mark = self._mark()
        if (
            (tuple := self.tuple())
        ):
            return tuple;
        self._reset(mark)
        if (
            (group := self.group())
        ):
            return group;
        self._reset(mark)
        if (
            (genexp := self.genexp())
        ):
            return genexp;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_90(self) -> Optional[Any]:
        # _tmp_90: list | listcomp
        mark = self._mark()
        if (
            (list := self.list())
        ):
            return list;
        self._reset(mark)
        if (
            (listcomp := self.listcomp())
        ):
            return listcomp;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_91(self) -> Optional[Any]:
        # _tmp_91: dict | set | dictcomp | setcomp
        mark = self._mark()
        if (
            (dict := self.dict())
        ):
            return dict;
        self._reset(mark)
        if (
            (set := self.set())
        ):
            return set;
        self._reset(mark)
        if (
            (dictcomp := self.dictcomp())
        ):
            return dictcomp;
        self._reset(mark)
        if (
            (setcomp := self.setcomp())
        ):
            return setcomp;
        self._reset(mark)
        return None;

    @memoize
    def _loop1_92(self) -> Optional[Any]:
        # _loop1_92: STRING
        mark = self._mark()
        children = []
        while (
            (string := self.string())
        ):
            children.append(string)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _tmp_93(self) -> Optional[Any]:
        # _tmp_93: star_named_expression ',' star_named_expressions?
        mark = self._mark()
        if (
            (star_named_expression := self.star_named_expression())
            and
            (literal := self.expect(','))
            and
            (opt := self.star_named_expressions(),)
        ):
            return [star_named_expression, literal, opt];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_94(self) -> Optional[Any]:
        # _tmp_94: yield_expr | named_expression
        mark = self._mark()
        if (
            (yield_expr := self.yield_expr())
        ):
            return yield_expr;
        self._reset(mark)
        if (
            (named_expression := self.named_expression())
        ):
            return named_expression;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_96(self) -> Optional[Any]:
        # _loop0_96: ',' double_starred_kvpair
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.double_starred_kvpair())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_95(self) -> Optional[Any]:
        # _gather_95: double_starred_kvpair _loop0_96
        mark = self._mark()
        if (
            (elem := self.double_starred_kvpair())
            is not None
            and
            (seq := self._loop0_96())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop1_97(self) -> Optional[Any]:
        # _loop1_97: for_if_clause
        mark = self._mark()
        children = []
        while (
            (for_if_clause := self.for_if_clause())
        ):
            children.append(for_if_clause)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_98(self) -> Optional[Any]:
        # _loop0_98: ('if' disjunction)
        mark = self._mark()
        children = []
        while (
            (_tmp_126 := self._tmp_126())
        ):
            children.append(_tmp_126)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_99(self) -> Optional[Any]:
        # _loop0_99: ('if' disjunction)
        mark = self._mark()
        children = []
        while (
            (_tmp_127 := self._tmp_127())
        ):
            children.append(_tmp_127)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_101(self) -> Optional[Any]:
        # _loop0_101: ',' (starred_expression | named_expression !'=')
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self._tmp_128())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_100(self) -> Optional[Any]:
        # _gather_100: (starred_expression | named_expression !'=') _loop0_101
        mark = self._mark()
        if (
            (elem := self._tmp_128())
            is not None
            and
            (seq := self._loop0_101())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_102(self) -> Optional[Any]:
        # _tmp_102: ',' kwargs
        mark = self._mark()
        if (
            (literal := self.expect(','))
            and
            (kwargs := self.kwargs())
        ):
            return [literal, kwargs];
        self._reset(mark)
        return None;

    @memoize
    def _loop0_104(self) -> Optional[Any]:
        # _loop0_104: ',' kwarg_or_starred
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.kwarg_or_starred())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_103(self) -> Optional[Any]:
        # _gather_103: kwarg_or_starred _loop0_104
        mark = self._mark()
        if (
            (elem := self.kwarg_or_starred())
            is not None
            and
            (seq := self._loop0_104())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_106(self) -> Optional[Any]:
        # _loop0_106: ',' kwarg_or_double_starred
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.kwarg_or_double_starred())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_105(self) -> Optional[Any]:
        # _gather_105: kwarg_or_double_starred _loop0_106
        mark = self._mark()
        if (
            (elem := self.kwarg_or_double_starred())
            is not None
            and
            (seq := self._loop0_106())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_108(self) -> Optional[Any]:
        # _loop0_108: ',' kwarg_or_starred
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.kwarg_or_starred())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_107(self) -> Optional[Any]:
        # _gather_107: kwarg_or_starred _loop0_108
        mark = self._mark()
        if (
            (elem := self.kwarg_or_starred())
            is not None
            and
            (seq := self._loop0_108())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_110(self) -> Optional[Any]:
        # _loop0_110: ',' kwarg_or_double_starred
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.kwarg_or_double_starred())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_109(self) -> Optional[Any]:
        # _gather_109: kwarg_or_double_starred _loop0_110
        mark = self._mark()
        if (
            (elem := self.kwarg_or_double_starred())
            is not None
            and
            (seq := self._loop0_110())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_111(self) -> Optional[Any]:
        # _loop0_111: (',' star_target)
        mark = self._mark()
        children = []
        while (
            (_tmp_129 := self._tmp_129())
        ):
            children.append(_tmp_129)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _loop0_113(self) -> Optional[Any]:
        # _loop0_113: ',' star_target
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.star_target())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_112(self) -> Optional[Any]:
        # _gather_112: star_target _loop0_113
        mark = self._mark()
        if (
            (elem := self.star_target())
            is not None
            and
            (seq := self._loop0_113())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _loop1_114(self) -> Optional[Any]:
        # _loop1_114: (',' star_target)
        mark = self._mark()
        children = []
        while (
            (_tmp_130 := self._tmp_130())
        ):
            children.append(_tmp_130)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _tmp_115(self) -> Optional[Any]:
        # _tmp_115: !'*' star_target
        mark = self._mark()
        if (
            (self.negative_lookahead(self.expect, '*'))
            and
            (star_target := self.star_target())
        ):
            return star_target;
        self._reset(mark)
        return None;

    @memoize
    def _loop0_117(self) -> Optional[Any]:
        # _loop0_117: ',' del_target
        mark = self._mark()
        children = []
        while (
            (self.expect(','))
            and
            (elem := self.del_target())
        ):
            children.append(elem)
            mark = self._mark()
        self._reset(mark)
        return children;

    @memoize
    def _gather_116(self) -> Optional[Any]:
        # _gather_116: del_target _loop0_117
        mark = self._mark()
        if (
            (elem := self.del_target())
            is not None
            and
            (seq := self._loop0_117())
            is not None
        ):
            return [elem] + seq;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_118(self) -> Optional[Any]:
        # _tmp_118: star_targets '='
        mark = self._mark()
        if (
            (star_targets := self.star_targets())
            and
            (literal := self.expect('='))
        ):
            return [star_targets, literal];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_119(self) -> Optional[Any]:
        # _tmp_119: '.' | '...'
        mark = self._mark()
        if (
            (literal := self.expect('.'))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('...'))
        ):
            return literal;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_120(self) -> Optional[Any]:
        # _tmp_120: '.' | '...'
        mark = self._mark()
        if (
            (literal := self.expect('.'))
        ):
            return literal;
        self._reset(mark)
        if (
            (literal := self.expect('...'))
        ):
            return literal;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_121(self) -> Optional[Any]:
        # _tmp_121: '@' named_expression NEWLINE
        mark = self._mark()
        if (
            (literal := self.expect('@'))
            and
            (named_expression := self.named_expression())
            and
            (_newline := self.expect('NEWLINE'))
        ):
            return [literal, named_expression, _newline];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_122(self) -> Optional[Any]:
        # _tmp_122: ',' star_expression
        mark = self._mark()
        if (
            (literal := self.expect(','))
            and
            (star_expression := self.star_expression())
        ):
            return [literal, star_expression];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_123(self) -> Optional[Any]:
        # _tmp_123: ',' expression
        mark = self._mark()
        if (
            (literal := self.expect(','))
            and
            (expression := self.expression())
        ):
            return [literal, expression];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_124(self) -> Optional[Any]:
        # _tmp_124: 'or' conjunction
        mark = self._mark()
        if (
            (literal := self.expect('or'))
            and
            (conjunction := self.conjunction())
        ):
            return [literal, conjunction];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_125(self) -> Optional[Any]:
        # _tmp_125: 'and' inversion
        mark = self._mark()
        if (
            (literal := self.expect('and'))
            and
            (inversion := self.inversion())
        ):
            return [literal, inversion];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_126(self) -> Optional[Any]:
        # _tmp_126: 'if' disjunction
        mark = self._mark()
        if (
            (literal := self.expect('if'))
            and
            (disjunction := self.disjunction())
        ):
            return [literal, disjunction];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_127(self) -> Optional[Any]:
        # _tmp_127: 'if' disjunction
        mark = self._mark()
        if (
            (literal := self.expect('if'))
            and
            (disjunction := self.disjunction())
        ):
            return [literal, disjunction];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_128(self) -> Optional[Any]:
        # _tmp_128: starred_expression | named_expression !'='
        mark = self._mark()
        if (
            (starred_expression := self.starred_expression())
        ):
            return starred_expression;
        self._reset(mark)
        if (
            (named_expression := self.named_expression())
            and
            (self.negative_lookahead(self.expect, '='))
        ):
            return named_expression;
        self._reset(mark)
        return None;

    @memoize
    def _tmp_129(self) -> Optional[Any]:
        # _tmp_129: ',' star_target
        mark = self._mark()
        if (
            (literal := self.expect(','))
            and
            (star_target := self.star_target())
        ):
            return [literal, star_target];
        self._reset(mark)
        return None;

    @memoize
    def _tmp_130(self) -> Optional[Any]:
        # _tmp_130: ',' star_target
        mark = self._mark()
        if (
            (literal := self.expect(','))
            and
            (star_target := self.star_target())
        ):
            return [literal, star_target];
        self._reset(mark)
        return None;

    KEYWORDS = ('False', 'None', 'True', '__peg_parser__', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield')
    SOFT_KEYWORDS = ()


if __name__ == '__main__':
    from pegen.parser import simple_parser_main
    simple_parser_main(GeneratedParser)
