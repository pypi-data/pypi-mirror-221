
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source/auto_examples/plot_fun_with_constraints.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_source_auto_examples_plot_fun_with_constraints.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_auto_examples_plot_fun_with_constraints.py:


Example on geographic plotting and constraint variation
-------------------------------------------------------

In this example we show how to plot wind fields on a map and change
the default constraint coefficients using PyDDA.

This shows how important it is to have the proper intitial state and
constraints when you derive your wind fields. In the first figure,
the sounding was used as the initial state, but for the latter
two examples we use a zero initial state which provides for more 
questionable winds at the edges of the Dual Doppler Lobes. 

This shows that your initial state and background are key to 
providing a physically realistic retrieval. Assuming a zero
background will likely result in false regions of convergence
and divergence that will generate artificial updrafts and downdrafts
at the edges of data coverage.

.. GENERATED FROM PYTHON SOURCE LINES 21-88



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_001.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_002.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_003.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_004.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/rjackson/mambaforge/envs/pydda_env/lib/python3.10/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_min not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    /Users/rjackson/mambaforge/envs/pydda_env/lib/python3.10/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_max not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /Users/rjackson/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2)/(2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for models...
    Starting solver 
    rmsVR = 7.569366
    Total points: 40597
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|227006.5469|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 15.765778
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10| 798.9415| 262.0650|   0.0000|  92.1896|   0.0000|   0.0000|   0.0000|  16.4363
    The gradient of the cost functions is 3.7751248
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|  70.4063| 261.4582|   0.0000|  15.5403|   0.0000|   0.0000|   0.0000|  16.6119
    The gradient of the cost functions is 2.4869444
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30|  42.5815| 236.0993|   0.0000|  21.5931|   0.0000|   0.0000|   0.0000|  16.8993
    The gradient of the cost functions is 1.9590986
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40| 156.2544| 175.6243|   0.0000|   3.0343|   0.0000|   0.0000|   0.0000|  18.3325
    The gradient of the cost functions is 3.395252
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50|  39.9494| 164.1728|   0.0000|   8.9627|   0.0000|   0.0000|   0.0000|  18.2963
    The gradient of the cost functions is 1.9793786
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         60|  34.4579| 131.6202|   0.0000|  11.3359|   0.0000|   0.0000|   0.0000|  19.9062
    The gradient of the cost functions is 1.3470919
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         70| 119.6340| 106.6307|   0.0000|   4.2886|   0.0000|   0.0000|   0.0000|  23.7067
    The gradient of the cost functions is 1.8775362
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         80|  24.7931| 107.4886|   0.0000|   5.1074|   0.0000|   0.0000|   0.0000|  22.4321
    The gradient of the cost functions is 1.1682804
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         90|  22.6935|  96.5112|   0.0000|   6.6448|   0.0000|   0.0000|   0.0000|  23.9517
    The gradient of the cost functions is 0.8594717
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        100|  53.2035|  80.9477|   0.0000|   3.8611|   0.0000|   0.0000|   0.0000|  26.2800
    The gradient of the cost functions is 1.5446751
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        110|  23.7576|  80.5027|   0.0000|   4.7948|   0.0000|   0.0000|   0.0000|  26.0546
    The gradient of the cost functions is 1.0159395
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        120|  23.8246|  70.8638|   0.0000|   5.7789|   0.0000|   0.0000|   0.0000|  27.6233
    The gradient of the cost functions is 0.7373776
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        130|  53.8430|  62.2995|   0.0000|   3.6715|   0.0000|   0.0000|   0.0000|  30.4254
    The gradient of the cost functions is 1.1882303
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        140|  22.2311|  62.0781|   0.0000|   4.3651|   0.0000|   0.0000|   0.0000|  29.5420
    The gradient of the cost functions is 0.7234374
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        150|  21.4666|  58.2030|   0.0000|   4.5588|   0.0000|   0.0000|   0.0000|  30.5016
    The gradient of the cost functions is 0.58078647
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        160|  38.0535|  52.6333|   0.0000|   3.9892|   0.0000|   0.0000|   0.0000|  32.3705
    The gradient of the cost functions is 0.9245381
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        170|  20.6105|  52.7204|   0.0000|   4.0128|   0.0000|   0.0000|   0.0000|  31.8093
    The gradient of the cost functions is 0.6279113
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        180|  20.6146|  49.4204|   0.0000|   4.1494|   0.0000|   0.0000|   0.0000|  32.5819
    The gradient of the cost functions is 0.51628655
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        190|  35.4355|  44.6235|   0.0000|   4.4135|   0.0000|   0.0000|   0.0000|  34.2335
    The gradient of the cost functions is 0.8765521
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        200|  20.1214|  44.7964|   0.0000|   3.8924|   0.0000|   0.0000|   0.0000|  33.8049
    The gradient of the cost functions is 0.5146245
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        210|  19.8406|  42.6518|   0.0000|   3.9835|   0.0000|   0.0000|   0.0000|  34.4828
    The gradient of the cost functions is 0.40459144
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        220|  28.9065|  39.7086|   0.0000|   4.0487|   0.0000|   0.0000|   0.0000|  35.7765
    The gradient of the cost functions is 0.69452137
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        230|  19.5162|  39.7441|   0.0000|   3.7895|   0.0000|   0.0000|   0.0000|  35.4035
    The gradient of the cost functions is 0.4552271
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        240|  19.5340|  37.9065|   0.0000|   3.9806|   0.0000|   0.0000|   0.0000|  35.9723
    The gradient of the cost functions is 0.3890571
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        250|  27.8963|  34.8751|   0.0000|   3.8432|   0.0000|   0.0000|   0.0000|  37.3082
    The gradient of the cost functions is 0.63639075
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        260|  19.4957|  35.1040|   0.0000|   3.8409|   0.0000|   0.0000|   0.0000|  36.9142
    The gradient of the cost functions is 0.37992203
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        270|  19.3583|  33.8564|   0.0000|   3.9104|   0.0000|   0.0000|   0.0000|  37.4264
    The gradient of the cost functions is 0.31336454
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        280|  25.1322|  32.0470|   0.0000|   3.7977|   0.0000|   0.0000|   0.0000|  38.3789
    The gradient of the cost functions is 0.53773177
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        290|  19.1658|  32.1413|   0.0000|   3.8161|   0.0000|   0.0000|   0.0000|  38.1033
    The gradient of the cost functions is 0.37080184
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        300|  19.1963|  31.0181|   0.0000|   3.8694|   0.0000|   0.0000|   0.0000|  38.5271
    The gradient of the cost functions is 0.29628092
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        310|  24.1306|  29.5264|   0.0000|   4.0777|   0.0000|   0.0000|   0.0000|  39.4214
    The gradient of the cost functions is 0.5040662
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        320|  19.0332|  29.5200|   0.0000|   3.7534|   0.0000|   0.0000|   0.0000|  39.1468
    The gradient of the cost functions is 0.29101112
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        330|  19.0164|  28.7450|   0.0000|   3.7735|   0.0000|   0.0000|   0.0000|  39.4636
    The gradient of the cost functions is 0.52582955
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        340|  18.9710|  28.2405|   0.0000|   3.7557|   0.0000|   0.0000|   0.0000|  39.6592
    The gradient of the cost functions is 0.44274586
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        350|  19.1589|  27.1666|   0.0000|   5.0569|   0.0000|   0.0000|   0.0000|  40.0927
    Iterations before filter: 10
    Applying low pass filter to wind field...
    Done! Time = 283.6
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /Users/rjackson/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2)/(2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for models...
    Starting solver 
    rmsVR = 7.569366
    Total points: 40597
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|41415.6875|   0.0000|   0.0000|23413416.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 2.401797
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10| 116.0089|  13.4877|   0.0000| 105.0638|   0.0000|   0.0000|   0.0000|  10.6414
    The gradient of the cost functions is 0.9690934
    Iterations before filter: 10
    Applying low pass filter to wind field...
    Done! Time = 15.6
    /Users/rjackson/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2)/(2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for models...
    Starting solver 
    rmsVR = 7.569366
    Total points: 40597
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|4141568.5000|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 0.5944537
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10|   4.2784|   9.2612|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  10.5888
    The gradient of the cost functions is 1.0234905
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|   0.0058|   9.2385|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  10.5898
    Iterations before filter: 10
    Applying low pass filter to wind field...
    Done! Time = 11.2






|

.. code-block:: default


    import pydda
    import pyart
    import cartopy.crs as ccrs
    import matplotlib.pyplot as plt


    berr_grid = pyart.io.read_grid(pydda.tests.EXAMPLE_RADAR0)
    cpol_grid = pyart.io.read_grid(pydda.tests.EXAMPLE_RADAR1)

    # Load our radar data
    sounding = pyart.io.read_arm_sonde(
        pydda.tests.SOUNDING_PATH)
    u_init, v_init, w_init = pydda.initialization.make_constant_wind_field(
        berr_grid, (0.0, 0.0, 0.0))

    # Let's make a plot on a map
    fig = plt.figure(figsize=(7, 3))

    pydda.vis.plot_xz_xsection_streamlines(
        [cpol_grid, berr_grid], bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8])
    plt.show()

    # Let's provide an initial state from the sounding
    u_back = sounding[1].u_wind
    v_back = sounding[1].v_wind
    z_back = sounding[1].height
    u_init, v_init, w_init = pydda.initialization.make_wind_field_from_profile(cpol_grid, sounding[1])

    new_grids = pydda.retrieval.get_dd_wind_field([cpol_grid, berr_grid],
                                        u_init, v_init, w_init,
                                        u_back=u_back, v_back=v_back, z_back=z_back,
                                        Co=10.0, Cm=4096.0, frz=5000.0, Cb=1e-6,
                                        mask_outside_opt=False, wind_tol=0.2,
                                        engine="tensorflow")
    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids,  bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8])
    plt.show()
    # Let's see what happens when we use a zero initialization
    u_init, v_init, w_init = pydda.initialization.make_constant_wind_field(
        berr_grid, (0.0, 0.0, 0.0))    
    new_grids = pydda.retrieval.get_dd_wind_field([cpol_grid, berr_grid],
                                        u_init, v_init, w_init,
                                        u_back=u_back, v_back=v_back, z_back=z_back,
                                        Co=1.0, Cm=128.0, frz=5000.0, Cb=1e-6,
                                        mask_outside_opt=False, wind_tol=0.2,
                                        engine="tensorflow")

    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8])
    plt.show()

    # Or, let's make the radar data more important!
    new_grids = pydda.retrieval.get_dd_wind_field([cpol_grid, berr_grid],
                                        u_init, v_init, w_init,
                                        Co=100.0, Cm=128.0, frz=5000.0,
                                        mask_outside_opt=False, wind_tol=0.2,
                                        engine="tensorflow")
    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8])
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  15.738 seconds)


.. _sphx_glr_download_source_auto_examples_plot_fun_with_constraints.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_fun_with_constraints.py <plot_fun_with_constraints.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_fun_with_constraints.ipynb <plot_fun_with_constraints.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
