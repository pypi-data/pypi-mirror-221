"""
Django settings for KeystackUI project.

Generated by 'django-admin startproject' using Django 3.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from json import load
import sys, os, re
from pathlib import Path

#--------------------- Keystack -----------------------#
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# /Keystack/KeystackUI
BASE_DIR = Path(__file__).resolve().parent.parent
currentDir = os.path.abspath(os.path.dirname(__file__))
keystackRootPath = currentDir.replace('/KeystackUI', '')
sys.path.insert(0, keystackRootPath)
import keystackUtilities

keystackUtilities.execSubprocessInShellMode('whoami', showStdout=True)

if os.path.exists('/etc/keystack.yml') == False:
    raise Exception('/etc/keystack.yml not found')

etcKeystackYml = keystackUtilities.readYaml('/etc/keystack.yml')
if os.path.exists(etcKeystackYml['keystackTestRootPath']) == False:
    raise Exception(f'settings.py error: /etc/keystack.py keystackTestRootPath path not found: {etcKeystackYml["keystackTestRootPath"]}')
            
KEYSTACK_TEST_ROOT_PATH = etcKeystackYml['keystackTestRootPath']
KEYSTACK_SYSTEM_PATH = etcKeystackYml['keystackSystemPath']

# Mainly used for controller-to-controller pulling sessions from a remote controller.
# True = Sessions is working.  False = Not working. 
# Session failures could be because the remote controller is unreachable.
# Set to False and SystemLogging log once only instead of continuous logging which 
# overwhelms the database.
# Once connectivity is back, sessionMgmt will set to True.
KEYSTACK_SESSIONS_CONNECTIVITY = True

# if os.environ.get('keystack_platform') == 'linux':
#     keystackUtilities.execSubprocessInShellMode('sudo systemctl restart crond', showStdout=False)  

# if os.environ.get('keystack_platform') == 'docker':
#     keystackUtilities.execSubprocessInShellMode('sudo cron &', showStdout=False)

try:
    # For docker running Ubuntu
    keystackUtilities.execSubprocessInShellMode('sudo cron &', showStdout=False)
except:
    # For Linux host server
    keystackUtilities.execSubprocessInShellMode('sudo systemctl restart crond', showStdout=False)
               
# import db will read all params in keystackSystemSettings.env
import db

# BaseDir:/Keystack/KeystackUI   currentDir:/Keystack
# Default it to the where the Keystack top level folder
dbLogFile = f"{KEYSTACK_SYSTEM_PATH}/Logs/mongodb.log"
keystackUtilities.execSubprocessInShellMode(f'chmod 770 {dbLogFile}', showStdout=False)

def writeToLogFile(logMsg):
    detailMsg = f'{keystackUtilities.getDate()} {keystackUtilities.getTime()}: {logMsg}'
    print(f'\nDjango settings.py: {detailMsg}\n')

    with open(dbLogFile, mode='w', encoding='utf-8') as msgFile:
        msgFile.write(f'{detailMsg}\n')

if os.environ.get('keystack_platform') == 'linux':
    # Start the mongod process
    writeToLogFile('\nDjango settings.py is running in Linux platform -> Starting mongod process ...')
    db.ManageDB().startDB()

# Connect to the DB once when this Keystack web server starts up. Create a DB name.
writeToLogFile(f'\nDjango settings.py: Connecting to MongoDB')
dbName  = db.ConnectMongoDB(ip=os.environ.get('keystack_mongoDbIp', 'localhost'),
                            port=int(os.environ.get('keystack_dbIpPort', 27017)),
                            dbName=db.DB.dbName)
db.DB.name = dbName
writeToLogFile(f'\nDjango settings.py: Start KeystackLog service ...')
from Services import Serviceware
# set isFromKeystackUI=True so it knows which pythonPath to use
logServiceObj = Serviceware.KeystackServices(typeOfService='KeystackLogs', isFromKeystackUI=True)
logServiceObj.restartLogsService()             
#------------------------ Keystack ends -------------------------#

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-197x!gmk()un36g_%u9_34*f_tv5gy#7^xdp(+e0x5=_xa!f6f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# These two variables are for accountMgmt                                                                                
# Session will time out if idled for SESSION_COOKIE_AGE                                                                  
SESSION_COOKIE_AGE = 10800 # 10=10secs, 3600-1hr, 36000=10hours                                                                  
SESSION_SAVE_EVERY_REQUEST = True   # Reset the cookie age

# django=4.10, channels=4.0.0, daphne=3.0.1 (this must be 3.0.1)
# Application definitionOpenIxiaGit
# Note: Adding channels will use asgi.py instead of wsgi.py
INSTALLED_APPS = [
    #'corsheaders',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_swagger',
    'drf_yasg',
    'base',
    'sidebar',
    'sidebar.sessionMgmt',
    'sidebar.playbook',
    'sidebar.setups',
    'sidebar.testResults',
    'topbar.settings.accountMgmt',
    'topbar.settings.groups',
    'topbar.settings.systemSettings',
    'topbar.settings.loginCredentials',
    'topbar.settings.controllers',
    'topbar.settings.keystackApps',
    'topbar.debug.systemLogs',
    'topbar.debug.awsS3',
    'topbar.utilizations',
    'topbar.docs.restApi',
    'topbar.docs.userGuides'
]

WSGI_APPLICATION = 'KeystackUI.wsgi.application'

# For websocket: pip install django_redis and dnf install redis
ASGI_APPLICATION = "KeystackUI.asgi.application"

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis:/127.0.0.1:6379/1",
    },
}

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': None,
    'USE_SESSION_AUTH': False,
    'DISPLAY_OPERATION_ID': False,
    'EXCLUDE_NAMESPACE': ['ping'],
}

# CORS_ORIGIN_WHITELIST = (
#     'http://192.168.28.7',
#     'https://192.168.28.7',
# )
##SECURE_SSL_REDIRECT = True
#CORS_ORIGIN_ALLOW_ALL = True
##SESSION_COOKIE_SECURE = False
##CSRF_COOKIE_SECURE = False
#SECURE_REFERRER_POLICY = 'same-origin'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'KeystackUI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            f'{BASE_DIR}/base/templates',
            f'{BASE_DIR}/sidebar/templates',
            f'{BASE_DIR}/sidebar/sessionMgmt/templates',
            f'{BASE_DIR}/sidebar/playbook/templates',
            f'{BASE_DIR}/sidebar/setups/templates',
            f'{BASE_DIR}/sidebar/testResults/templates',
            f'{BASE_DIR}/topbar/debug/systemLogs/templates',
            f'{BASE_DIR}/topbar/debug/awsS3/templates',
            f'{BASE_DIR}/topbar/settings/accountMgmt/templates',
            f'{BASE_DIR}/topbar/settings/controllers/templates',
            f'{BASE_DIR}/topbar/settings/groups/templates',
            f'{BASE_DIR}/topbar/settings/systemSettings/templates',
            f'{BASE_DIR}/topbar/settings/loginCredentials/templates',
            f'{BASE_DIR}/topbar/settings/utilizations/templates',
            f'{BASE_DIR}/topbar/settings/keystackApps/templates',
            f'{BASE_DIR}/topbar/docs/userGuides/templates',
            f'{BASE_DIR}/topbar/docs/restApi/templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
   'default': {
       'ENGINE': 'django.db.backends.sqlite3',
       'NAME': BASE_DIR / 'db.sqlite3',
   }
}


# Must pip install djongo, djongo-annoying.
# import djongo
# In this, the model used is from Djongo instead of from: django.db import models
#     from djongo import models
#     mmodels.py
#     ./manage.py migrate
"""
DATABASES = {
   'default': {
       'ENGINE': 'djongo',
       'NAME': 'Keystack',
       'CLIENT': {
           'host': f'mongodb://{os.environ["keystack_localhostIp"]}:{os.environ["keystack_dbIpPort"]}',
           'username': None,
           'password': None
       }  
   }
}
"""

"""
CLIENT = {
    'host': 'mongodb://172.16.101.7:27017',
    'username': None,
    'password': None,
    'authSource': 'admin',
    'authMechanism': 'SCRAM-SHA-1'
    }  
"""

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'
#TIME_ZONE = 'America/Los_Angeles'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# The paths to all the static files
# You could organize static files in each app, but I prefer to put them all in the /base folder
# as a central point to get a bird's eye view of all my static files
STATICFILES_DIRS = [f'{BASE_DIR}/base/static/commons',
                    f'{BASE_DIR}/base/static/sb-admin-2',
                    f'{BASE_DIR}/base/static/fontawesome-free-6.0.0-beta3', f'{BASE_DIR}/base/static/bootstrap-5.1.3-dist',
                    f'{BASE_DIR}/base/static/swagger-ui-4.15.2', f'{BASE_DIR}/base/static/chartJS',
                    f'{BASE_DIR}/base/static/jobScheduler'
                   ]

# Where to store: python manage.py collectstatic
STATIC_ROOT = f'{BASE_DIR}/static'



                    


