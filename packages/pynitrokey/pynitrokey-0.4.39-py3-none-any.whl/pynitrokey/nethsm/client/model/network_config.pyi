# coding: utf-8

"""
    NetHSM

    All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pynitrokey.nethsm.client import schemas  # noqa: F401


class NetworkConfig(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "netmask",
            "ipAddress",
            "gateway",
        }
        
        class properties:
            ipAddress = schemas.StrSchema
            netmask = schemas.StrSchema
            gateway = schemas.StrSchema
            __annotations__ = {
                "ipAddress": ipAddress,
                "netmask": netmask,
                "gateway": gateway,
            }
    
    netmask: MetaOapg.properties.netmask
    ipAddress: MetaOapg.properties.ipAddress
    gateway: MetaOapg.properties.gateway
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netmask"]) -> MetaOapg.properties.netmask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gateway"]) -> MetaOapg.properties.gateway: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ipAddress", "netmask", "gateway", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netmask"]) -> MetaOapg.properties.netmask: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gateway"]) -> MetaOapg.properties.gateway: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ipAddress", "netmask", "gateway", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        netmask: typing.Union[MetaOapg.properties.netmask, str, ],
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, str, ],
        gateway: typing.Union[MetaOapg.properties.gateway, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NetworkConfig':
        return super().__new__(
            cls,
            *args,
            netmask=netmask,
            ipAddress=ipAddress,
            gateway=gateway,
            _configuration=_configuration,
            **kwargs,
        )
