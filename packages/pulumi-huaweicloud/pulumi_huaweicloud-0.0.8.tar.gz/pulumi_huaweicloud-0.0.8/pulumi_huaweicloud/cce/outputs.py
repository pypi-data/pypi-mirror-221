# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AddonValues',
    'ClusterCertificateCluster',
    'ClusterCertificateUser',
    'ClusterMaster',
    'NodeAttachDataVolume',
    'NodeAttachRootVolume',
    'NodeAttachTaint',
    'NodeDataVolume',
    'NodePoolDataVolume',
    'NodePoolRootVolume',
    'NodePoolStorage',
    'NodePoolStorageGroup',
    'NodePoolStorageGroupVirtualSpace',
    'NodePoolStorageSelector',
    'NodePoolTaint',
    'NodeRootVolume',
    'NodeStorage',
    'NodeStorageGroup',
    'NodeStorageGroupVirtualSpace',
    'NodeStorageSelector',
    'NodeTaint',
    'GetAddonTemplateSupportVersionResult',
    'GetClusterCertificateClusterResult',
    'GetClusterCertificateUserResult',
    'GetClusterEndpointResult',
    'GetClusterMasterResult',
    'GetClustersClusterResult',
    'GetClustersClusterCertificateClusterResult',
    'GetClustersClusterCertificateUserResult',
    'GetClustersClusterEndpointResult',
    'GetClustersClusterMasterResult',
    'GetNodeDataVolumeResult',
    'GetNodePoolDataVolumeResult',
    'GetNodePoolRootVolumeResult',
    'GetNodeRootVolumeResult',
    'GetNodesNodeResult',
    'GetNodesNodeDataVolumeResult',
    'GetNodesNodeRootVolumeResult',
]

@pulumi.output_type
class AddonValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicJson":
            suggest = "basic_json"
        elif key == "customJson":
            suggest = "custom_json"
        elif key == "flavorJson":
            suggest = "flavor_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AddonValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AddonValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AddonValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 basic: Optional[Mapping[str, str]] = None,
                 basic_json: Optional[str] = None,
                 custom: Optional[Mapping[str, str]] = None,
                 custom_json: Optional[str] = None,
                 flavor: Optional[Mapping[str, str]] = None,
                 flavor_json: Optional[str] = None):
        """
        :param Mapping[str, str] basic: Specifies the key/value pairs vary depending on the add-on.
               Only supports non-nested structure and only supports string type elements.
               This is an alternative to `basic_json`, but it is not recommended.
        :param str basic_json: Specifies the json string vary depending on the add-on.
        :param Mapping[str, str] custom: Specifies the key/value pairs vary depending on the add-on.
               Only supports non-nested structure and only supports string type elements.
               This is an alternative to `custom_json`, but it is not recommended.
        :param str custom_json: Specifies the json string vary depending on the add-on.
        :param Mapping[str, str] flavor: Specifies the key/value pairs vary depending on the add-on.
               Only supports non-nested structure and only supports string type elements.
               This is an alternative to `flavor_json`, but it is not recommended.
        :param str flavor_json: Specifies the json string vary depending on the add-on.
        """
        if basic is not None:
            pulumi.set(__self__, "basic", basic)
        if basic_json is not None:
            pulumi.set(__self__, "basic_json", basic_json)
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if custom_json is not None:
            pulumi.set(__self__, "custom_json", custom_json)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if flavor_json is not None:
            pulumi.set(__self__, "flavor_json", flavor_json)

    @property
    @pulumi.getter
    def basic(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the key/value pairs vary depending on the add-on.
        Only supports non-nested structure and only supports string type elements.
        This is an alternative to `basic_json`, but it is not recommended.
        """
        return pulumi.get(self, "basic")

    @property
    @pulumi.getter(name="basicJson")
    def basic_json(self) -> Optional[str]:
        """
        Specifies the json string vary depending on the add-on.
        """
        return pulumi.get(self, "basic_json")

    @property
    @pulumi.getter
    def custom(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the key/value pairs vary depending on the add-on.
        Only supports non-nested structure and only supports string type elements.
        This is an alternative to `custom_json`, but it is not recommended.
        """
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter(name="customJson")
    def custom_json(self) -> Optional[str]:
        """
        Specifies the json string vary depending on the add-on.
        """
        return pulumi.get(self, "custom_json")

    @property
    @pulumi.getter
    def flavor(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the key/value pairs vary depending on the add-on.
        Only supports non-nested structure and only supports string type elements.
        This is an alternative to `flavor_json`, but it is not recommended.
        """
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter(name="flavorJson")
    def flavor_json(self) -> Optional[str]:
        """
        Specifies the json string vary depending on the add-on.
        """
        return pulumi.get(self, "flavor_json")


@pulumi.output_type
class ClusterCertificateCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateAuthorityData":
            suggest = "certificate_authority_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterCertificateCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterCertificateCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterCertificateCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_authority_data: Optional[str] = None,
                 name: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str certificate_authority_data: The certificate data.
        :param str name: Specifies the cluster name.
               Changing this parameter will create a new cluster resource.
        :param str server: The server IP address.
        """
        if certificate_authority_data is not None:
            pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> Optional[str]:
        """
        The certificate data.
        """
        return pulumi.get(self, "certificate_authority_data")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies the cluster name.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        The server IP address.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ClusterCertificateUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificateData":
            suggest = "client_certificate_data"
        elif key == "clientKeyData":
            suggest = "client_key_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterCertificateUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterCertificateUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterCertificateUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate_data: Optional[str] = None,
                 client_key_data: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str client_certificate_data: The client certificate data.
        :param str client_key_data: The client key data.
        :param str name: Specifies the cluster name.
               Changing this parameter will create a new cluster resource.
        """
        if client_certificate_data is not None:
            pulumi.set(__self__, "client_certificate_data", client_certificate_data)
        if client_key_data is not None:
            pulumi.set(__self__, "client_key_data", client_key_data)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientCertificateData")
    def client_certificate_data(self) -> Optional[str]:
        """
        The client certificate data.
        """
        return pulumi.get(self, "client_certificate_data")

    @property
    @pulumi.getter(name="clientKeyData")
    def client_key_data(self) -> Optional[str]:
        """
        The client key data.
        """
        return pulumi.get(self, "client_key_data")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies the cluster name.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ClusterMaster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMaster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMaster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMaster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[str] = None):
        """
        :param str availability_zone: Specifies the availability zone of the master node.
               Changing this parameter will create a new cluster resource.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        Specifies the availability zone of the master node.
        Changing this parameter will create a new cluster resource.
        """
        return pulumi.get(self, "availability_zone")


@pulumi.output_type
class NodeAttachDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeAttachDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeAttachDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeAttachDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 size: Optional[int] = None,
                 volumetype: Optional[str] = None):
        """
        :param Mapping[str, str] extend_params: The disk expansion parameters.
        :param str kms_key_id: The ID of a KMS key. This is used to encrypt the volume.
        :param int size: The disk size in GB.
        :param str volumetype: The disk type.
        """
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if volumetype is not None:
            pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        The disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The ID of a KMS key. This is used to encrypt the volume.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> Optional[str]:
        """
        The disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class NodeAttachRootVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeAttachRootVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeAttachRootVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeAttachRootVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 size: Optional[int] = None,
                 volumetype: Optional[str] = None):
        """
        :param Mapping[str, str] extend_params: The disk expansion parameters.
        :param str kms_key_id: The ID of a KMS key. This is used to encrypt the volume.
        :param int size: The disk size in GB.
        :param str volumetype: The disk type.
        """
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if volumetype is not None:
            pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        The disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The ID of a KMS key. This is used to encrypt the volume.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> Optional[str]:
        """
        The disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class NodeAttachTaint(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: Available options are NoSchedule, PreferNoSchedule, and NoExecute.
               Changing this parameter will create a new resource.
        :param str key: A key must contain 1 to 63 characters starting with a letter or digit.
               Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
               as the prefix of a key. Changing this parameter will create a new resource.
        :param str value: A value must start with a letter or digit and can contain a maximum of 63
               characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
               create a new resource.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Available options are NoSchedule, PreferNoSchedule, and NoExecute.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A key must contain 1 to 63 characters starting with a letter or digit.
        Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
        as the prefix of a key. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A value must start with a letter or digit and can contain a maximum of 63
        characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
        create a new resource.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodeDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: int,
                 volumetype: str,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 kms_key_id: Optional[str] = None):
        """
        :param int size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
               Changing this parameter will create a new resource.
        :param str volumetype: Specifies the disk type.
               Changing this parameter will create a new resource.
        :param str extend_param: Specifies the extended parameter.
               Changing this parameter will create a new resource.
               The available keys are as follows:
               + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
               + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
               + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
               + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
        :param Mapping[str, str] extend_params: Specifies the disk expansion parameters.
               Changing this parameter will create a new resource.
        :param str kms_key_id: Specifies the ID of a KMS key. This is used to encrypt the volume.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Specifies the disk type.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        """
        Specifies the extended parameter.
        Changing this parameter will create a new resource.
        The available keys are as follows:
        + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
        + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
        + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
        + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
        """
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the disk expansion parameters.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Specifies the ID of a KMS key. This is used to encrypt the volume.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class NodePoolDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: int,
                 volumetype: str,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 kms_key_id: Optional[str] = None):
        """
        :param int size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
               Changing this parameter will create a new resource.
        :param str volumetype: Specifies the disk type. Changing this parameter will create a new resource.
        :param str extend_param: Specifies the extended parameter.
               Changing this parameter will create a new resource.
               The available keys are as follows:
               + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
               + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
               + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
               + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
        :param Mapping[str, str] extend_params: Specifies the disk expansion parameters.
               Changing this parameter will create a new resource.
        :param str kms_key_id: Specifies the KMS key ID. This is used to encrypt the volume.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Specifies the disk type. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        """
        Specifies the extended parameter.
        Changing this parameter will create a new resource.
        The available keys are as follows:
        + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
        + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
        + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
        + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
        """
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the disk expansion parameters.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Specifies the KMS key ID. This is used to encrypt the volume.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class NodePoolRootVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolRootVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolRootVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolRootVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: int,
                 volumetype: str,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 kms_key_id: Optional[str] = None):
        """
        :param int size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
               Changing this parameter will create a new resource.
        :param str volumetype: Specifies the disk type. Changing this parameter will create a new resource.
        :param str extend_param: Specifies the extended parameter.
               Changing this parameter will create a new resource.
               The available keys are as follows:
               + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
               + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
               + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
               + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
        :param Mapping[str, str] extend_params: Specifies the disk expansion parameters.
               Changing this parameter will create a new resource.
        :param str kms_key_id: Specifies the KMS key ID. This is used to encrypt the volume.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Specifies the disk type. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        """
        Specifies the extended parameter.
        Changing this parameter will create a new resource.
        The available keys are as follows:
        + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
        + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
        + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
        + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
        """
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the disk expansion parameters.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Specifies the KMS key ID. This is used to encrypt the volume.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class NodePoolStorage(dict):
    def __init__(__self__, *,
                 groups: Sequence['outputs.NodePoolStorageGroup'],
                 selectors: Sequence['outputs.NodePoolStorageSelector']):
        """
        :param Sequence['NodePoolStorageGroupArgs'] groups: Specifies the storage group consists of multiple storage devices.
               This is used to divide storage space. Structure is documented below.
               Changing this parameter will create a new resource.
        :param Sequence['NodePoolStorageSelectorArgs'] selectors: Specifies the disk selection.
               Matched disks are managed according to match labels and storage type. Structure is documented below.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.NodePoolStorageGroup']:
        """
        Specifies the storage group consists of multiple storage devices.
        This is used to divide storage space. Structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.NodePoolStorageSelector']:
        """
        Specifies the disk selection.
        Matched disks are managed according to match labels and storage type. Structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class NodePoolStorageGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorNames":
            suggest = "selector_names"
        elif key == "virtualSpaces":
            suggest = "virtual_spaces"
        elif key == "cceManaged":
            suggest = "cce_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolStorageGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolStorageGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolStorageGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 selector_names: Sequence[str],
                 virtual_spaces: Sequence['outputs.NodePoolStorageGroupVirtualSpace'],
                 cce_managed: Optional[bool] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported. Changing this parameter will create a new resource.
        :param Sequence[str] selector_names: Specifies the list of names of seletors to match.
               This parameter corresponds to name in `selectors`. A group can match multiple selectors,
               but a selector can match only one group. Changing this parameter will create a new resource.
        :param Sequence['NodePoolStorageGroupVirtualSpaceArgs'] virtual_spaces: Specifies the detailed management of space configuration in a group.
               Changing this parameter will create a new resource.
        :param bool cce_managed: Specifies the whether the storage space is for **kubernetes** and
               **runtime** components. Only one group can be set to true. The default value is **false**.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selector_names", selector_names)
        pulumi.set(__self__, "virtual_spaces", virtual_spaces)
        if cce_managed is not None:
            pulumi.set(__self__, "cce_managed", cce_managed)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="selectorNames")
    def selector_names(self) -> Sequence[str]:
        """
        Specifies the list of names of seletors to match.
        This parameter corresponds to name in `selectors`. A group can match multiple selectors,
        but a selector can match only one group. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "selector_names")

    @property
    @pulumi.getter(name="virtualSpaces")
    def virtual_spaces(self) -> Sequence['outputs.NodePoolStorageGroupVirtualSpace']:
        """
        Specifies the detailed management of space configuration in a group.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "virtual_spaces")

    @property
    @pulumi.getter(name="cceManaged")
    def cce_managed(self) -> Optional[bool]:
        """
        Specifies the whether the storage space is for **kubernetes** and
        **runtime** components. Only one group can be set to true. The default value is **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cce_managed")


@pulumi.output_type
class NodePoolStorageGroupVirtualSpace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lvmLvType":
            suggest = "lvm_lv_type"
        elif key == "lvmPath":
            suggest = "lvm_path"
        elif key == "runtimeLvType":
            suggest = "runtime_lv_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolStorageGroupVirtualSpace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolStorageGroupVirtualSpace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolStorageGroupVirtualSpace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 size: str,
                 lvm_lv_type: Optional[str] = None,
                 lvm_path: Optional[str] = None,
                 runtime_lv_type: Optional[str] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported. Changing this parameter will create a new resource.
        :param str size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
               Changing this parameter will create a new resource.
        :param str lvm_lv_type: Specifies the LVM write mode, values can be **linear** and **striped**.
               This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
               a new resource.
        :param str lvm_path: Specifies the absolute path to which the disk is attached.
               This parameter takes effect only in **user** configuration. Changing this parameter will create a new resource.
        :param str runtime_lv_type: Specifies the LVM write mode, values can be **linear** and **striped**.
               This parameter takes effect only in **runtime** configuration. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if lvm_lv_type is not None:
            pulumi.set(__self__, "lvm_lv_type", lvm_lv_type)
        if lvm_path is not None:
            pulumi.set(__self__, "lvm_path", lvm_path)
        if runtime_lv_type is not None:
            pulumi.set(__self__, "runtime_lv_type", runtime_lv_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="lvmLvType")
    def lvm_lv_type(self) -> Optional[str]:
        """
        Specifies the LVM write mode, values can be **linear** and **striped**.
        This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "lvm_lv_type")

    @property
    @pulumi.getter(name="lvmPath")
    def lvm_path(self) -> Optional[str]:
        """
        Specifies the absolute path to which the disk is attached.
        This parameter takes effect only in **user** configuration. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "lvm_path")

    @property
    @pulumi.getter(name="runtimeLvType")
    def runtime_lv_type(self) -> Optional[str]:
        """
        Specifies the LVM write mode, values can be **linear** and **striped**.
        This parameter takes effect only in **runtime** configuration. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "runtime_lv_type")


@pulumi.output_type
class NodePoolStorageSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabelCount":
            suggest = "match_label_count"
        elif key == "matchLabelMetadataCmkid":
            suggest = "match_label_metadata_cmkid"
        elif key == "matchLabelMetadataEncrypted":
            suggest = "match_label_metadata_encrypted"
        elif key == "matchLabelSize":
            suggest = "match_label_size"
        elif key == "matchLabelVolumeType":
            suggest = "match_label_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolStorageSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolStorageSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolStorageSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 match_label_count: Optional[str] = None,
                 match_label_metadata_cmkid: Optional[str] = None,
                 match_label_metadata_encrypted: Optional[str] = None,
                 match_label_size: Optional[str] = None,
                 match_label_volume_type: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported. Changing this parameter will create a new resource.
        :param str match_label_count: Specifies the number of disks to be selected. If omitted,
               all disks of this type are selected. Changing this parameter will create a new resource.
        :param str match_label_metadata_cmkid: Specifies the cstomer master key ID of an encrypted
               disk. Changing this parameter will create a new resource.
        :param str match_label_metadata_encrypted: Specifies the disk encryption identifier.
               Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
               If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
        :param str match_label_size: Specifies the matched disk size. If omitted,
               the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
        :param str match_label_volume_type: Specifies the EVS disk type. Currently,
               **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
               Changing this parameter will create a new resource.
        :param str type: Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
               The default value is **evs**. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "name", name)
        if match_label_count is not None:
            pulumi.set(__self__, "match_label_count", match_label_count)
        if match_label_metadata_cmkid is not None:
            pulumi.set(__self__, "match_label_metadata_cmkid", match_label_metadata_cmkid)
        if match_label_metadata_encrypted is not None:
            pulumi.set(__self__, "match_label_metadata_encrypted", match_label_metadata_encrypted)
        if match_label_size is not None:
            pulumi.set(__self__, "match_label_size", match_label_size)
        if match_label_volume_type is not None:
            pulumi.set(__self__, "match_label_volume_type", match_label_volume_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="matchLabelCount")
    def match_label_count(self) -> Optional[str]:
        """
        Specifies the number of disks to be selected. If omitted,
        all disks of this type are selected. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "match_label_count")

    @property
    @pulumi.getter(name="matchLabelMetadataCmkid")
    def match_label_metadata_cmkid(self) -> Optional[str]:
        """
        Specifies the cstomer master key ID of an encrypted
        disk. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "match_label_metadata_cmkid")

    @property
    @pulumi.getter(name="matchLabelMetadataEncrypted")
    def match_label_metadata_encrypted(self) -> Optional[str]:
        """
        Specifies the disk encryption identifier.
        Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
        If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "match_label_metadata_encrypted")

    @property
    @pulumi.getter(name="matchLabelSize")
    def match_label_size(self) -> Optional[str]:
        """
        Specifies the matched disk size. If omitted,
        the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "match_label_size")

    @property
    @pulumi.getter(name="matchLabelVolumeType")
    def match_label_volume_type(self) -> Optional[str]:
        """
        Specifies the EVS disk type. Currently,
        **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "match_label_volume_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
        The default value is **evs**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: Available options are NoSchedule, PreferNoSchedule, and NoExecute.
        :param str key: A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
               digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
               prefix of a key.
        :param str value: A value must start with a letter or digit and can contain a maximum of 63 characters,
               including letters, digits, hyphens (-), underscores (_), and periods (.).
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Available options are NoSchedule, PreferNoSchedule, and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
        digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
        prefix of a key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A value must start with a letter or digit and can contain a maximum of 63 characters,
        including letters, digits, hyphens (-), underscores (_), and periods (.).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodeRootVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendParam":
            suggest = "extend_param"
        elif key == "extendParams":
            suggest = "extend_params"
        elif key == "hwPassthrough":
            suggest = "hw_passthrough"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeRootVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeRootVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeRootVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: int,
                 volumetype: str,
                 extend_param: Optional[str] = None,
                 extend_params: Optional[Mapping[str, str]] = None,
                 hw_passthrough: Optional[bool] = None,
                 kms_key_id: Optional[str] = None):
        """
        :param int size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
               Changing this parameter will create a new resource.
        :param str volumetype: Specifies the disk type.
               Changing this parameter will create a new resource.
        :param str extend_param: Specifies the extended parameter.
               Changing this parameter will create a new resource.
               The available keys are as follows:
               + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
               + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
               + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
               + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
        :param Mapping[str, str] extend_params: Specifies the disk expansion parameters.
               Changing this parameter will create a new resource.
        :param str kms_key_id: Specifies the ID of a KMS key. This is used to encrypt the volume.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)
        if extend_param is not None:
            pulumi.set(__self__, "extend_param", extend_param)
        if extend_params is not None:
            pulumi.set(__self__, "extend_params", extend_params)
        if hw_passthrough is not None:
            pulumi.set(__self__, "hw_passthrough", hw_passthrough)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Specifies the disk type.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "volumetype")

    @property
    @pulumi.getter(name="extendParam")
    def extend_param(self) -> Optional[str]:
        """
        Specifies the extended parameter.
        Changing this parameter will create a new resource.
        The available keys are as follows:
        + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
        + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
        + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
        + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
        """
        return pulumi.get(self, "extend_param")

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Optional[Mapping[str, str]]:
        """
        Specifies the disk expansion parameters.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter(name="hwPassthrough")
    def hw_passthrough(self) -> Optional[bool]:
        return pulumi.get(self, "hw_passthrough")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Specifies the ID of a KMS key. This is used to encrypt the volume.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class NodeStorage(dict):
    def __init__(__self__, *,
                 groups: Sequence['outputs.NodeStorageGroup'],
                 selectors: Sequence['outputs.NodeStorageSelector']):
        """
        :param Sequence['NodeStorageGroupArgs'] groups: Specifies the storage group consists of multiple storage devices.
               This is used to divide storage space. Structure is documented below.
               Changing this parameter will create a new resource.
        :param Sequence['NodeStorageSelectorArgs'] selectors: Specifies the disk selection.
               Matched disks are managed according to match labels and storage type. Structure is documented below.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.NodeStorageGroup']:
        """
        Specifies the storage group consists of multiple storage devices.
        This is used to divide storage space. Structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.NodeStorageSelector']:
        """
        Specifies the disk selection.
        Matched disks are managed according to match labels and storage type. Structure is documented below.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class NodeStorageGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorNames":
            suggest = "selector_names"
        elif key == "virtualSpaces":
            suggest = "virtual_spaces"
        elif key == "cceManaged":
            suggest = "cce_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeStorageGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeStorageGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeStorageGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 selector_names: Sequence[str],
                 virtual_spaces: Sequence['outputs.NodeStorageGroupVirtualSpace'],
                 cce_managed: Optional[bool] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported. Changing this parameter will create a new resource.
        :param Sequence[str] selector_names: Specifies the list of names of seletors to match.
               This parameter corresponds to name in `selectors`. A group can match multiple selectors,
               but a selector can match only one group. Changing this parameter will create a new resource.
        :param Sequence['NodeStorageGroupVirtualSpaceArgs'] virtual_spaces: Specifies the detailed management of space configuration in a group.
               Changing this parameter will create a new resource.
        :param bool cce_managed: Specifies the whether the storage space is for **kubernetes** and
               **runtime** components. Only one group can be set to true. The default value is **false**.
               Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selector_names", selector_names)
        pulumi.set(__self__, "virtual_spaces", virtual_spaces)
        if cce_managed is not None:
            pulumi.set(__self__, "cce_managed", cce_managed)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="selectorNames")
    def selector_names(self) -> Sequence[str]:
        """
        Specifies the list of names of seletors to match.
        This parameter corresponds to name in `selectors`. A group can match multiple selectors,
        but a selector can match only one group. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "selector_names")

    @property
    @pulumi.getter(name="virtualSpaces")
    def virtual_spaces(self) -> Sequence['outputs.NodeStorageGroupVirtualSpace']:
        """
        Specifies the detailed management of space configuration in a group.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "virtual_spaces")

    @property
    @pulumi.getter(name="cceManaged")
    def cce_managed(self) -> Optional[bool]:
        """
        Specifies the whether the storage space is for **kubernetes** and
        **runtime** components. Only one group can be set to true. The default value is **false**.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "cce_managed")


@pulumi.output_type
class NodeStorageGroupVirtualSpace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lvmLvType":
            suggest = "lvm_lv_type"
        elif key == "lvmPath":
            suggest = "lvm_path"
        elif key == "runtimeLvType":
            suggest = "runtime_lv_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeStorageGroupVirtualSpace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeStorageGroupVirtualSpace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeStorageGroupVirtualSpace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 size: str,
                 lvm_lv_type: Optional[str] = None,
                 lvm_path: Optional[str] = None,
                 runtime_lv_type: Optional[str] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported. Changing this parameter will create a new resource.
        :param str size: Specifies the size of a virtual space. Only an integer percentage is supported.
               Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
               Changing this parameter will create a new resource.
        :param str lvm_lv_type: Specifies the LVM write mode, values can be **linear** and **striped**.
               This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
               a new resource.
        :param str lvm_path: Specifies the absolute path to which the disk is attached.
               This parameter takes effect only in **user** configuration. Changing this parameter will create a new resource.
        :param str runtime_lv_type: Specifies the LVM write mode, values can be **linear** and **striped**.
               This parameter takes effect only in **runtime** configuration. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        if lvm_lv_type is not None:
            pulumi.set(__self__, "lvm_lv_type", lvm_lv_type)
        if lvm_path is not None:
            pulumi.set(__self__, "lvm_path", lvm_path)
        if runtime_lv_type is not None:
            pulumi.set(__self__, "runtime_lv_type", runtime_lv_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        Specifies the size of a virtual space. Only an integer percentage is supported.
        Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="lvmLvType")
    def lvm_lv_type(self) -> Optional[str]:
        """
        Specifies the LVM write mode, values can be **linear** and **striped**.
        This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
        a new resource.
        """
        return pulumi.get(self, "lvm_lv_type")

    @property
    @pulumi.getter(name="lvmPath")
    def lvm_path(self) -> Optional[str]:
        """
        Specifies the absolute path to which the disk is attached.
        This parameter takes effect only in **user** configuration. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "lvm_path")

    @property
    @pulumi.getter(name="runtimeLvType")
    def runtime_lv_type(self) -> Optional[str]:
        """
        Specifies the LVM write mode, values can be **linear** and **striped**.
        This parameter takes effect only in **runtime** configuration. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "runtime_lv_type")


@pulumi.output_type
class NodeStorageSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabelCount":
            suggest = "match_label_count"
        elif key == "matchLabelMetadataCmkid":
            suggest = "match_label_metadata_cmkid"
        elif key == "matchLabelMetadataEncrypted":
            suggest = "match_label_metadata_encrypted"
        elif key == "matchLabelSize":
            suggest = "match_label_size"
        elif key == "matchLabelVolumeType":
            suggest = "match_label_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeStorageSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeStorageSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeStorageSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 match_label_count: Optional[str] = None,
                 match_label_metadata_cmkid: Optional[str] = None,
                 match_label_metadata_encrypted: Optional[str] = None,
                 match_label_size: Optional[str] = None,
                 match_label_volume_type: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
               and **user** are supported. Changing this parameter will create a new resource.
        :param str match_label_count: Specifies the number of disks to be selected. If omitted,
               all disks of this type are selected. Changing this parameter will create a new resource.
        :param str match_label_metadata_cmkid: Specifies the customer master key ID of an encrypted
               disk. Changing this parameter will create a new resource.
        :param str match_label_metadata_encrypted: Specifies the disk encryption identifier.
               Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
               If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
        :param str match_label_size: Specifies the matched disk size. If omitted,
               the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
        :param str match_label_volume_type: Specifies the EVS disk type. Currently,
               **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
               Changing this parameter will create a new resource.
        :param str type: Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
               The default value is **evs**. Changing this parameter will create a new resource.
        """
        pulumi.set(__self__, "name", name)
        if match_label_count is not None:
            pulumi.set(__self__, "match_label_count", match_label_count)
        if match_label_metadata_cmkid is not None:
            pulumi.set(__self__, "match_label_metadata_cmkid", match_label_metadata_cmkid)
        if match_label_metadata_encrypted is not None:
            pulumi.set(__self__, "match_label_metadata_encrypted", match_label_metadata_encrypted)
        if match_label_size is not None:
            pulumi.set(__self__, "match_label_size", match_label_size)
        if match_label_volume_type is not None:
            pulumi.set(__self__, "match_label_volume_type", match_label_volume_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
        and **user** are supported. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="matchLabelCount")
    def match_label_count(self) -> Optional[str]:
        """
        Specifies the number of disks to be selected. If omitted,
        all disks of this type are selected. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "match_label_count")

    @property
    @pulumi.getter(name="matchLabelMetadataCmkid")
    def match_label_metadata_cmkid(self) -> Optional[str]:
        """
        Specifies the customer master key ID of an encrypted
        disk. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "match_label_metadata_cmkid")

    @property
    @pulumi.getter(name="matchLabelMetadataEncrypted")
    def match_label_metadata_encrypted(self) -> Optional[str]:
        """
        Specifies the disk encryption identifier.
        Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
        If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "match_label_metadata_encrypted")

    @property
    @pulumi.getter(name="matchLabelSize")
    def match_label_size(self) -> Optional[str]:
        """
        Specifies the matched disk size. If omitted,
        the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "match_label_size")

    @property
    @pulumi.getter(name="matchLabelVolumeType")
    def match_label_volume_type(self) -> Optional[str]:
        """
        Specifies the EVS disk type. Currently,
        **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "match_label_volume_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
        The default value is **evs**. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodeTaint(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: Available options are NoSchedule, PreferNoSchedule, and NoExecute.
               Changing this parameter will create a new resource.
        :param str key: A key must contain 1 to 63 characters starting with a letter or digit.
               Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
               as the prefix of a key. Changing this parameter will create a new resource.
        :param str value: A value must start with a letter or digit and can contain a maximum of 63
               characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
               create a new resource.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        Available options are NoSchedule, PreferNoSchedule, and NoExecute.
        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A key must contain 1 to 63 characters starting with a letter or digit.
        Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
        as the prefix of a key. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A value must start with a letter or digit and can contain a maximum of 63
        characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
        create a new resource.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAddonTemplateSupportVersionResult(dict):
    def __init__(__self__, *,
                 bare_metals: Sequence[str],
                 virtual_machines: Sequence[str]):
        """
        :param Sequence[str] bare_metals: The cluster (Bare Metal) version that the add-on template supported.
        :param Sequence[str] virtual_machines: The cluster (Virtual Machine) version that the add-on template supported.
        """
        pulumi.set(__self__, "bare_metals", bare_metals)
        pulumi.set(__self__, "virtual_machines", virtual_machines)

    @property
    @pulumi.getter(name="bareMetals")
    def bare_metals(self) -> Sequence[str]:
        """
        The cluster (Bare Metal) version that the add-on template supported.
        """
        return pulumi.get(self, "bare_metals")

    @property
    @pulumi.getter(name="virtualMachines")
    def virtual_machines(self) -> Sequence[str]:
        """
        The cluster (Virtual Machine) version that the add-on template supported.
        """
        return pulumi.get(self, "virtual_machines")


@pulumi.output_type
class GetClusterCertificateClusterResult(dict):
    def __init__(__self__, *,
                 certificate_authority_data: str,
                 name: str,
                 server: str):
        """
        :param str certificate_authority_data: The certificate data.
        :param str name: Specifies the name of the cluster.
        :param str server: The server IP address.
        """
        pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> str:
        """
        The certificate data.
        """
        return pulumi.get(self, "certificate_authority_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The server IP address.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class GetClusterCertificateUserResult(dict):
    def __init__(__self__, *,
                 client_certificate_data: str,
                 client_key_data: str,
                 name: str):
        """
        :param str client_certificate_data: The client certificate data.
        :param str client_key_data: The client key data.
        :param str name: Specifies the name of the cluster.
        """
        pulumi.set(__self__, "client_certificate_data", client_certificate_data)
        pulumi.set(__self__, "client_key_data", client_key_data)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientCertificateData")
    def client_certificate_data(self) -> str:
        """
        The client certificate data.
        """
        return pulumi.get(self, "client_certificate_data")

    @property
    @pulumi.getter(name="clientKeyData")
    def client_key_data(self) -> str:
        """
        The client key data.
        """
        return pulumi.get(self, "client_key_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the cluster.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterEndpointResult(dict):
    def __init__(__self__, *,
                 type: str,
                 url: str):
        """
        :param str type: The type of the cluster access address.
               + **Internal**: The user's subnet access address.
               + **External**: The public network access address.
        :param str url: The URL of the cluster access address.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the cluster access address.
        + **Internal**: The user's subnet access address.
        + **External**: The public network access address.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the cluster access address.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetClusterMasterResult(dict):
    def __init__(__self__, *,
                 availability_zone: str):
        """
        :param str availability_zone: The availability zone (AZ) of the master node.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        The availability zone (AZ) of the master node.
        """
        return pulumi.get(self, "availability_zone")


@pulumi.output_type
class GetClustersClusterResult(dict):
    def __init__(__self__, *,
                 authentication_mode: str,
                 billing_mode: int,
                 certificate_clusters: Sequence['outputs.GetClustersClusterCertificateClusterResult'],
                 certificate_users: Sequence['outputs.GetClustersClusterCertificateUserResult'],
                 cluster_type: str,
                 cluster_version: str,
                 container_network_cidr: str,
                 container_network_type: str,
                 description: str,
                 endpoints: Sequence['outputs.GetClustersClusterEndpointResult'],
                 eni_subnet_cidr: str,
                 eni_subnet_id: str,
                 enterprise_project_id: str,
                 flavor_id: str,
                 id: str,
                 kube_config_raw: str,
                 masters: Sequence['outputs.GetClustersClusterMasterResult'],
                 name: str,
                 security_group_id: str,
                 service_network_cidr: str,
                 status: str,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str authentication_mode: The authentication mode of the cluster, possible values are x509 and rbac. Defaults to **rbac**.
        :param int billing_mode: The charging mode of the cluster.
        :param Sequence['GetClustersClusterCertificateClusterArgs'] certificate_clusters: The certificate clusters. Structure is documented below.
        :param Sequence['GetClustersClusterCertificateUserArgs'] certificate_users: The certificate users. Structure is documented below.
        :param str cluster_type: Specifies the type of the cluster. Possible values: **VirtualMachine**, **BareMetal**.
        :param str cluster_version: The version of the cluster.
        :param str container_network_cidr: The container network segment.
        :param str container_network_type: The container network type: **overlay_l2** , **underlay_ipvlan**, **vpc-router** or **eni**.
        :param str description: The description of the cluster.
        :param Sequence['GetClustersClusterEndpointArgs'] endpoints: The access addresses of kube-apiserver in the cluster. Structure is documented below.
        :param str eni_subnet_cidr: The ENI network segment.
        :param str eni_subnet_id: The **IPv4 subnet ID** of the subnet where the ENI resides.
        :param str enterprise_project_id: Specifies the enterprise project ID of the cluster.
        :param str flavor_id: The specification of the cluster.
        :param str id: The ID of the cluster.
        :param str kube_config_raw: The raw Kubernetes config to be used by kubectl and other compatible tools.
        :param Sequence['GetClustersClusterMasterArgs'] masters: The advanced configuration of master nodes. Structure is documented below.
        :param str name: Specifies the name of the cluster.
        :param str security_group_id: The security group ID of the cluster.
        :param str service_network_cidr: The service network segment.
        :param str status: Specifies the status of the cluster.
        :param str subnet_id: The ID of the subnet used to create the node.
        :param str vpc_id: Specifies the VPC ID to which the cluster belongs.
        """
        pulumi.set(__self__, "authentication_mode", authentication_mode)
        pulumi.set(__self__, "billing_mode", billing_mode)
        pulumi.set(__self__, "certificate_clusters", certificate_clusters)
        pulumi.set(__self__, "certificate_users", certificate_users)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "container_network_cidr", container_network_cidr)
        pulumi.set(__self__, "container_network_type", container_network_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "eni_subnet_cidr", eni_subnet_cidr)
        pulumi.set(__self__, "eni_subnet_id", eni_subnet_id)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kube_config_raw", kube_config_raw)
        pulumi.set(__self__, "masters", masters)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "service_network_cidr", service_network_cidr)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> str:
        """
        The authentication mode of the cluster, possible values are x509 and rbac. Defaults to **rbac**.
        """
        return pulumi.get(self, "authentication_mode")

    @property
    @pulumi.getter(name="billingMode")
    def billing_mode(self) -> int:
        """
        The charging mode of the cluster.
        """
        return pulumi.get(self, "billing_mode")

    @property
    @pulumi.getter(name="certificateClusters")
    def certificate_clusters(self) -> Sequence['outputs.GetClustersClusterCertificateClusterResult']:
        """
        The certificate clusters. Structure is documented below.
        """
        return pulumi.get(self, "certificate_clusters")

    @property
    @pulumi.getter(name="certificateUsers")
    def certificate_users(self) -> Sequence['outputs.GetClustersClusterCertificateUserResult']:
        """
        The certificate users. Structure is documented below.
        """
        return pulumi.get(self, "certificate_users")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        Specifies the type of the cluster. Possible values: **VirtualMachine**, **BareMetal**.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> str:
        """
        The version of the cluster.
        """
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="containerNetworkCidr")
    def container_network_cidr(self) -> str:
        """
        The container network segment.
        """
        return pulumi.get(self, "container_network_cidr")

    @property
    @pulumi.getter(name="containerNetworkType")
    def container_network_type(self) -> str:
        """
        The container network type: **overlay_l2** , **underlay_ipvlan**, **vpc-router** or **eni**.
        """
        return pulumi.get(self, "container_network_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetClustersClusterEndpointResult']:
        """
        The access addresses of kube-apiserver in the cluster. Structure is documented below.
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="eniSubnetCidr")
    def eni_subnet_cidr(self) -> str:
        """
        The ENI network segment.
        """
        return pulumi.get(self, "eni_subnet_cidr")

    @property
    @pulumi.getter(name="eniSubnetId")
    def eni_subnet_id(self) -> str:
        """
        The **IPv4 subnet ID** of the subnet where the ENI resides.
        """
        return pulumi.get(self, "eni_subnet_id")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> str:
        """
        Specifies the enterprise project ID of the cluster.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> str:
        """
        The specification of the cluster.
        """
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kubeConfigRaw")
    def kube_config_raw(self) -> str:
        """
        The raw Kubernetes config to be used by kubectl and other compatible tools.
        """
        return pulumi.get(self, "kube_config_raw")

    @property
    @pulumi.getter
    def masters(self) -> Sequence['outputs.GetClustersClusterMasterResult']:
        """
        The advanced configuration of master nodes. Structure is documented below.
        """
        return pulumi.get(self, "masters")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        The security group ID of the cluster.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="serviceNetworkCidr")
    def service_network_cidr(self) -> str:
        """
        The service network segment.
        """
        return pulumi.get(self, "service_network_cidr")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Specifies the status of the cluster.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the subnet used to create the node.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Specifies the VPC ID to which the cluster belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetClustersClusterCertificateClusterResult(dict):
    def __init__(__self__, *,
                 certificate_authority_data: str,
                 name: str,
                 server: str):
        """
        :param str certificate_authority_data: The certificate data.
        :param str name: Specifies the name of the cluster.
        :param str server: The server IP address.
        """
        pulumi.set(__self__, "certificate_authority_data", certificate_authority_data)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="certificateAuthorityData")
    def certificate_authority_data(self) -> str:
        """
        The certificate data.
        """
        return pulumi.get(self, "certificate_authority_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The server IP address.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class GetClustersClusterCertificateUserResult(dict):
    def __init__(__self__, *,
                 client_certificate_data: str,
                 client_key_data: str,
                 name: str):
        """
        :param str client_certificate_data: The client certificate data.
        :param str client_key_data: The client key data.
        :param str name: Specifies the name of the cluster.
        """
        pulumi.set(__self__, "client_certificate_data", client_certificate_data)
        pulumi.set(__self__, "client_key_data", client_key_data)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientCertificateData")
    def client_certificate_data(self) -> str:
        """
        The client certificate data.
        """
        return pulumi.get(self, "client_certificate_data")

    @property
    @pulumi.getter(name="clientKeyData")
    def client_key_data(self) -> str:
        """
        The client key data.
        """
        return pulumi.get(self, "client_key_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of the cluster.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClustersClusterEndpointResult(dict):
    def __init__(__self__, *,
                 type: str,
                 url: str):
        """
        :param str type: The type of the cluster access address.
               + **Internal**: The user's subnet access address.
               + **External**: The public network access address.
        :param str url: The URL of the cluster access address.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the cluster access address.
        + **Internal**: The user's subnet access address.
        + **External**: The public network access address.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the cluster access address.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetClustersClusterMasterResult(dict):
    def __init__(__self__, *,
                 availability_zone: str):
        """
        :param str availability_zone: The availability zone (AZ) of the master node.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        The availability zone (AZ) of the master node.
        """
        return pulumi.get(self, "availability_zone")


@pulumi.output_type
class GetNodeDataVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetNodePoolDataVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetNodePoolRootVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetNodeRootVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetNodesNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 billing_mode: int,
                 data_volumes: Sequence['outputs.GetNodesNodeDataVolumeResult'],
                 ecs_group_id: str,
                 flavor_id: str,
                 id: str,
                 key_pair: str,
                 name: str,
                 os: str,
                 private_ip: str,
                 public_ip: str,
                 root_volumes: Sequence['outputs.GetNodesNodeRootVolumeResult'],
                 server_id: str,
                 status: str,
                 subnet_id: str,
                 tags: Mapping[str, str]):
        """
        :param str availability_zone: The available partitions where the node is located.
        :param int billing_mode: The node's billing mode: The value is 0 (on demand).
        :param Sequence['GetNodesNodeDataVolumeArgs'] data_volumes: The data related configuration. Structure is documented below.
        :param str ecs_group_id: The ID of ECS group to which the node belongs.
        :param str flavor_id: The flavor ID to be used.
        :param str id: The ID of the node.
        :param str key_pair: The key pair name when logging in to select the key pair mode.
        :param str name: Specifies the of the node.
        :param str os: The operating System of the node.
        :param str private_ip: The private IP of the node.
        :param str public_ip: The elastic IP parameters of the node.
        :param Sequence['GetNodesNodeRootVolumeArgs'] root_volumes: The system disk related configuration. Structure is documented below.
        :param str server_id: The node's virtual machine ID in ECS.
        :param str status: Specifies the status of the node.
        :param str subnet_id: The ID of the subnet to which the NIC belongs.
        :param Mapping[str, str] tags: The tags of a VM node, key/value pair format.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "billing_mode", billing_mode)
        pulumi.set(__self__, "data_volumes", data_volumes)
        pulumi.set(__self__, "ecs_group_id", ecs_group_id)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_pair", key_pair)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "root_volumes", root_volumes)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        The available partitions where the node is located.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="billingMode")
    def billing_mode(self) -> int:
        """
        The node's billing mode: The value is 0 (on demand).
        """
        return pulumi.get(self, "billing_mode")

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Sequence['outputs.GetNodesNodeDataVolumeResult']:
        """
        The data related configuration. Structure is documented below.
        """
        return pulumi.get(self, "data_volumes")

    @property
    @pulumi.getter(name="ecsGroupId")
    def ecs_group_id(self) -> str:
        """
        The ID of ECS group to which the node belongs.
        """
        return pulumi.get(self, "ecs_group_id")

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> str:
        """
        The flavor ID to be used.
        """
        return pulumi.get(self, "flavor_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> str:
        """
        The key pair name when logging in to select the key pair mode.
        """
        return pulumi.get(self, "key_pair")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the of the node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def os(self) -> str:
        """
        The operating System of the node.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        The private IP of the node.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        The elastic IP parameters of the node.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="rootVolumes")
    def root_volumes(self) -> Sequence['outputs.GetNodesNodeRootVolumeResult']:
        """
        The system disk related configuration. Structure is documented below.
        """
        return pulumi.get(self, "root_volumes")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> str:
        """
        The node's virtual machine ID in ECS.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Specifies the status of the node.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the subnet to which the NIC belongs.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        The tags of a VM node, key/value pair format.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNodesNodeDataVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


@pulumi.output_type
class GetNodesNodeRootVolumeResult(dict):
    def __init__(__self__, *,
                 extend_params: Mapping[str, str],
                 size: int,
                 volumetype: str):
        """
        :param Mapping[str, str] extend_params: Disk expansion parameters.
        :param int size: Disk size in GB.
        :param str volumetype: Disk type.
        """
        pulumi.set(__self__, "extend_params", extend_params)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volumetype", volumetype)

    @property
    @pulumi.getter(name="extendParams")
    def extend_params(self) -> Mapping[str, str]:
        """
        Disk expansion parameters.
        """
        return pulumi.get(self, "extend_params")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Disk size in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volumetype(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "volumetype")


