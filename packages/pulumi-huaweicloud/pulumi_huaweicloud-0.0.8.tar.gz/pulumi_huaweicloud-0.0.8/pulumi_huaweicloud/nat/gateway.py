# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GatewayArgs', 'Gateway']

@pulumi.input_type
class GatewayArgs:
    def __init__(__self__, *,
                 spec: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Gateway resource.
        :param pulumi.Input[str] spec: Specifies the specification of the NAT gateway. The valid values are as follows:
               + **1**: Small type, which supports up to `10,000` SNAT connections.
               + **2**: Medium type, which supports up to `50,000` SNAT connections.
               + **3**: Large type, which supports up to `200,000` SNAT connections.
               + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
        :param pulumi.Input[str] subnet_id: Specifies the subnet ID of the downstream interface (the next hop of the
               DVR) of the NAT gateway.
               Changing this will create a new resource.
        :param pulumi.Input[str] vpc_id: Specifies the ID of the VPC to which the NAT gateway belongs.  
               Changing this will create a new resource.
        :param pulumi.Input[str] description: Specifies the description of the NAT gateway, which contain maximum of `512`
               characters, and angle brackets (<) and (>) are not allowed.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the NAT gateway.  
               Changing this will create a new resource.
        :param pulumi.Input[str] name: Specifies the NAT gateway name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[str] region: Specifies the region where the NAT gateway is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the NAT geteway.
        """
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input[str]:
        """
        Specifies the specification of the NAT gateway. The valid values are as follows:
        + **1**: Small type, which supports up to `10,000` SNAT connections.
        + **2**: Medium type, which supports up to `50,000` SNAT connections.
        + **3**: Large type, which supports up to `200,000` SNAT connections.
        + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input[str]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Specifies the subnet ID of the downstream interface (the next hop of the
        DVR) of the NAT gateway.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID of the VPC to which the NAT gateway belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the NAT gateway, which contain maximum of `512`
        characters, and angle brackets (<) and (>) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of the NAT gateway.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the NAT gateway name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region where the NAT gateway is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the NAT geteway.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _GatewayState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Gateway resources.
        :param pulumi.Input[str] description: Specifies the description of the NAT gateway, which contain maximum of `512`
               characters, and angle brackets (<) and (>) are not allowed.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the NAT gateway.  
               Changing this will create a new resource.
        :param pulumi.Input[str] name: Specifies the NAT gateway name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[str] region: Specifies the region where the NAT gateway is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[str] spec: Specifies the specification of the NAT gateway. The valid values are as follows:
               + **1**: Small type, which supports up to `10,000` SNAT connections.
               + **2**: Medium type, which supports up to `50,000` SNAT connections.
               + **3**: Large type, which supports up to `200,000` SNAT connections.
               + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
        :param pulumi.Input[str] status: The current status of the NAT gateway.
        :param pulumi.Input[str] subnet_id: Specifies the subnet ID of the downstream interface (the next hop of the
               DVR) of the NAT gateway.
               Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the NAT geteway.
        :param pulumi.Input[str] vpc_id: Specifies the ID of the VPC to which the NAT gateway belongs.  
               Changing this will create a new resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the description of the NAT gateway, which contain maximum of `512`
        characters, and angle brackets (<) and (>) are not allowed.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the enterprise project ID of the NAT gateway.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the NAT gateway name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region where the NAT gateway is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the specification of the NAT gateway. The valid values are as follows:
        + **1**: Small type, which supports up to `10,000` SNAT connections.
        + **2**: Medium type, which supports up to `50,000` SNAT connections.
        + **3**: Large type, which supports up to `200,000` SNAT connections.
        + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The current status of the NAT gateway.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the subnet ID of the downstream interface (the next hop of the
        DVR) of the NAT gateway.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies the key/value pairs to associate with the NAT geteway.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the VPC to which the NAT gateway belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Gateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a gateway resource of the **public** NAT within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gateway_name = config.require_object("gatewayName")
        vpc_id = config.require_object("vpcId")
        network_id = config.require_object("networkId")
        test = huaweicloud.nat.Gateway("test",
            description="test for terraform",
            spec="3",
            vpc_id=vpc_id,
            subnet_id=network_id)
        ```

        ## Import

        NAT gateways can be imported using their `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Nat/gateway:Gateway test d126fb87-43ce-4867-a2ff-cf34af3765d9
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Specifies the description of the NAT gateway, which contain maximum of `512`
               characters, and angle brackets (<) and (>) are not allowed.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the NAT gateway.  
               Changing this will create a new resource.
        :param pulumi.Input[str] name: Specifies the NAT gateway name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[str] region: Specifies the region where the NAT gateway is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[str] spec: Specifies the specification of the NAT gateway. The valid values are as follows:
               + **1**: Small type, which supports up to `10,000` SNAT connections.
               + **2**: Medium type, which supports up to `50,000` SNAT connections.
               + **3**: Large type, which supports up to `200,000` SNAT connections.
               + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
        :param pulumi.Input[str] subnet_id: Specifies the subnet ID of the downstream interface (the next hop of the
               DVR) of the NAT gateway.
               Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the NAT geteway.
        :param pulumi.Input[str] vpc_id: Specifies the ID of the VPC to which the NAT gateway belongs.  
               Changing this will create a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a gateway resource of the **public** NAT within HuaweiCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_huaweicloud as huaweicloud

        config = pulumi.Config()
        gateway_name = config.require_object("gatewayName")
        vpc_id = config.require_object("vpcId")
        network_id = config.require_object("networkId")
        test = huaweicloud.nat.Gateway("test",
            description="test for terraform",
            spec="3",
            vpc_id=vpc_id,
            subnet_id=network_id)
        ```

        ## Import

        NAT gateways can be imported using their `id`, e.g. bash

        ```sh
         $ pulumi import huaweicloud:Nat/gateway:Gateway test d126fb87-43ce-4867-a2ff-cf34af3765d9
        ```

        :param str resource_name: The name of the resource.
        :param GatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayArgs.__new__(GatewayArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["status"] = None
        super(Gateway, __self__).__init__(
            'huaweicloud:Nat/gateway:Gateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            enterprise_project_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            spec: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Gateway':
        """
        Get an existing Gateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Specifies the description of the NAT gateway, which contain maximum of `512`
               characters, and angle brackets (<) and (>) are not allowed.
        :param pulumi.Input[str] enterprise_project_id: Specifies the enterprise project ID of the NAT gateway.  
               Changing this will create a new resource.
        :param pulumi.Input[str] name: Specifies the NAT gateway name.  
               The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        :param pulumi.Input[str] region: Specifies the region where the NAT gateway is located.  
               If omitted, the provider-level region will be used. Changing this will create a new resource.
        :param pulumi.Input[str] spec: Specifies the specification of the NAT gateway. The valid values are as follows:
               + **1**: Small type, which supports up to `10,000` SNAT connections.
               + **2**: Medium type, which supports up to `50,000` SNAT connections.
               + **3**: Large type, which supports up to `200,000` SNAT connections.
               + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
        :param pulumi.Input[str] status: The current status of the NAT gateway.
        :param pulumi.Input[str] subnet_id: Specifies the subnet ID of the downstream interface (the next hop of the
               DVR) of the NAT gateway.
               Changing this will create a new resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Specifies the key/value pairs to associate with the NAT geteway.
        :param pulumi.Input[str] vpc_id: Specifies the ID of the VPC to which the NAT gateway belongs.  
               Changing this will create a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GatewayState.__new__(_GatewayState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["spec"] = spec
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return Gateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the description of the NAT gateway, which contain maximum of `512`
        characters, and angle brackets (<) and (>) are not allowed.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[str]:
        """
        Specifies the enterprise project ID of the NAT gateway.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the NAT gateway name.  
        The valid length is limited from `1` to `64`, only letters, digits, hyphens (-) and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Specifies the region where the NAT gateway is located.  
        If omitted, the provider-level region will be used. Changing this will create a new resource.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output[str]:
        """
        Specifies the specification of the NAT gateway. The valid values are as follows:
        + **1**: Small type, which supports up to `10,000` SNAT connections.
        + **2**: Medium type, which supports up to `50,000` SNAT connections.
        + **3**: Large type, which supports up to `200,000` SNAT connections.
        + **4**: Extra-large type, which supports up to `1,000,000` SNAT connections.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The current status of the NAT gateway.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Specifies the subnet ID of the downstream interface (the next hop of the
        DVR) of the NAT gateway.
        Changing this will create a new resource.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies the key/value pairs to associate with the NAT geteway.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Specifies the ID of the VPC to which the NAT gateway belongs.  
        Changing this will create a new resource.
        """
        return pulumi.get(self, "vpc_id")

