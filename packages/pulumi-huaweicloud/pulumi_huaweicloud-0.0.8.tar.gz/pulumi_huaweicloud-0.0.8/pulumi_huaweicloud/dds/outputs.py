# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DatabaseRoleInheritedPrivilege',
    'DatabaseRoleInheritedPrivilegeResource',
    'DatabaseRolePrivilege',
    'DatabaseRolePrivilegeResource',
    'DatabaseRoleRole',
    'DatabaseUserInheritedPrivilege',
    'DatabaseUserInheritedPrivilegeResource',
    'DatabaseUserPrivilege',
    'DatabaseUserPrivilegeResource',
    'DatabaseUserRole',
    'InstanceBackupStrategy',
    'InstanceConfiguration',
    'InstanceDatastore',
    'InstanceFlavor',
    'InstanceNode',
    'GetFlavorsFlavorResult',
]

@pulumi.output_type
class DatabaseRoleInheritedPrivilege(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 resources: Optional[Sequence['outputs.DatabaseRoleInheritedPrivilegeResource']] = None):
        """
        :param Sequence[str] actions: The operation permission list.
        :param Sequence['DatabaseRoleInheritedPrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The object structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.DatabaseRoleInheritedPrivilegeResource']]:
        """
        The details of the resource to which the privilege belongs.
        The object structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class DatabaseRoleInheritedPrivilegeResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseRoleInheritedPrivilegeResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseRoleInheritedPrivilegeResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseRoleInheritedPrivilegeResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection: Optional[str] = None,
                 db_name: Optional[str] = None):
        """
        :param str collection: The database collection type.
        :param str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter
    def collection(self) -> Optional[str]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class DatabaseRolePrivilege(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 resources: Optional[Sequence['outputs.DatabaseRolePrivilegeResource']] = None):
        """
        :param Sequence[str] actions: The operation permission list.
        :param Sequence['DatabaseRolePrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The object structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.DatabaseRolePrivilegeResource']]:
        """
        The details of the resource to which the privilege belongs.
        The object structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class DatabaseRolePrivilegeResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseRolePrivilegeResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseRolePrivilegeResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseRolePrivilegeResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection: Optional[str] = None,
                 db_name: Optional[str] = None):
        """
        :param str collection: The database collection type.
        :param str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter
    def collection(self) -> Optional[str]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class DatabaseRoleRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseRoleRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseRoleRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseRoleRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_name: str,
                 name: str):
        """
        :param str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new role.
        :param str name: Specifies the name of role owned by the current role.
               The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
               allowed. Changing this parameter will create a new role.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new role.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of role owned by the current role.
        The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
        allowed. Changing this parameter will create a new role.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DatabaseUserInheritedPrivilege(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 resources: Optional[Sequence['outputs.DatabaseUserInheritedPrivilegeResource']] = None):
        """
        :param Sequence[str] actions: The operation permission list.
        :param Sequence['DatabaseUserInheritedPrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The object structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.DatabaseUserInheritedPrivilegeResource']]:
        """
        The details of the resource to which the privilege belongs.
        The object structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class DatabaseUserInheritedPrivilegeResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseUserInheritedPrivilegeResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseUserInheritedPrivilegeResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseUserInheritedPrivilegeResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection: Optional[str] = None,
                 db_name: Optional[str] = None):
        """
        :param str collection: The database collection type.
        :param str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter
    def collection(self) -> Optional[str]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class DatabaseUserPrivilege(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 resources: Optional[Sequence['outputs.DatabaseUserPrivilegeResource']] = None):
        """
        :param Sequence[str] actions: The operation permission list.
        :param Sequence['DatabaseUserPrivilegeResourceArgs'] resources: The details of the resource to which the privilege belongs.
               The object structure is documented below.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        """
        The operation permission list.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.DatabaseUserPrivilegeResource']]:
        """
        The details of the resource to which the privilege belongs.
        The object structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class DatabaseUserPrivilegeResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseUserPrivilegeResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseUserPrivilegeResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseUserPrivilegeResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection: Optional[str] = None,
                 db_name: Optional[str] = None):
        """
        :param str collection: The database collection type.
        :param str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        """
        if collection is not None:
            pulumi.set(__self__, "collection", collection)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter
    def collection(self) -> Optional[str]:
        """
        The database collection type.
        """
        return pulumi.get(self, "collection")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class DatabaseUserRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseUserRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseUserRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseUserRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_name: str,
                 name: str):
        """
        :param str db_name: Specifies the database name to which this owned role belongs.
               Changing this parameter will create a new user.
        :param str name: Specifies the name of role owned by the current user.
               The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
               allowed. Changing this parameter will create a new user.
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        Specifies the database name to which this owned role belongs.
        Changing this parameter will create a new user.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specifies the name of role owned by the current user.
        The name can contain `1` to `64` characters, only letters, digits, underscores (_), hyphens (-) and dots (.) are
        allowed. Changing this parameter will create a new user.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InstanceBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepDays":
            suggest = "keep_days"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keep_days: int,
                 start_time: str):
        """
        :param int keep_days: Specifies the number of days to retain the generated backup files. The value range is
               from 0 to 732.
               + If this parameter is set to 0, the automated backup policy is not set.
               + If this parameter is not transferred, the automated backup policy is enabled by default. Backup files are stored
               for seven days by default.
        :param str start_time: Specifies the backup time window. Automated backups will be triggered during the
               backup time window. The value cannot be empty. It must be a valid value in the
               "hh:mm-HH:MM" format. The current time is in the UTC format.
               + The HH value must be 1 greater than the hh value.
               + The values from mm and MM must be the same and must be set to any of the following 00, 15, 30, or 45.
        """
        pulumi.set(__self__, "keep_days", keep_days)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> int:
        """
        Specifies the number of days to retain the generated backup files. The value range is
        from 0 to 732.
        + If this parameter is set to 0, the automated backup policy is not set.
        + If this parameter is not transferred, the automated backup policy is enabled by default. Backup files are stored
        for seven days by default.
        """
        return pulumi.get(self, "keep_days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Specifies the backup time window. Automated backups will be triggered during the
        backup time window. The value cannot be empty. It must be a valid value in the
        "hh:mm-HH:MM" format. The current time is in the UTC format.
        + The HH value must be 1 greater than the hh value.
        + The values from mm and MM must be the same and must be set to any of the following 00, 15, 30, or 45.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class InstanceConfiguration(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: Specifies the ID of the template.
               Changing this creates a new instance.
        :param str type: Specifies the node type. Valid value:
               + For a Community Edition cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For an Enhanced Edition cluster instance, the value is **shard**.
               + For a Community Edition replica set instance, the value is **replica**.
               + For a Community Edition single node instance, the value is **single**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Specifies the ID of the template.
        Changing this creates a new instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the node type. Valid value:
        + For a Community Edition cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For an Enhanced Edition cluster instance, the value is **shard**.
        + For a Community Edition replica set instance, the value is **replica**.
        + For a Community Edition single node instance, the value is **single**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceDatastore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageEngine":
            suggest = "storage_engine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceDatastore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceDatastore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceDatastore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 version: str,
                 storage_engine: Optional[str] = None):
        """
        :param str type: Specifies the node type. Valid value:
               + For a Community Edition cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For an Enhanced Edition cluster instance, the value is **shard**.
               + For a Community Edition replica set instance, the value is **replica**.
               + For a Community Edition single node instance, the value is **single**.
        :param str version: Specifies the DB instance version. For the Community Edition, the valid
               values are `3.2`, `3.4`, `4.0`, `4.2`, or `4.4`.
        :param str storage_engine: Specifies the storage engine of the DB instance.
               If `version` is set to `3.2`, `3.4`, or `4.0`, the value is **wiredTiger**.
               If `version` is set to `4.2`, or `4.4`, the value is **rocksDB**.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)
        if storage_engine is not None:
            pulumi.set(__self__, "storage_engine", storage_engine)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the node type. Valid value:
        + For a Community Edition cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For an Enhanced Edition cluster instance, the value is **shard**.
        + For a Community Edition replica set instance, the value is **replica**.
        + For a Community Edition single node instance, the value is **single**.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Specifies the DB instance version. For the Community Edition, the valid
        values are `3.2`, `3.4`, `4.0`, `4.2`, or `4.4`.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="storageEngine")
    def storage_engine(self) -> Optional[str]:
        """
        Specifies the storage engine of the DB instance.
        If `version` is set to `3.2`, `3.4`, or `4.0`, the value is **wiredTiger**.
        If `version` is set to `4.2`, or `4.4`, the value is **rocksDB**.
        """
        return pulumi.get(self, "storage_engine")


@pulumi.output_type
class InstanceFlavor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "specCode":
            suggest = "spec_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceFlavor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceFlavor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceFlavor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num: int,
                 spec_code: str,
                 type: str,
                 size: Optional[int] = None,
                 storage: Optional[str] = None):
        """
        :param int num: Specifies the node quantity. Valid value:
               + In a Community Edition cluster instance,the number of mongos ranges from 2 to 16.
               + In a Community Edition cluster instance,the number of shards ranges from 2 to 16.
               + In an Enhanced Edition cluster instance, the number of shards ranges from 2 to 12.
               + config: the value is 1.
               + replica: the value is 1.
               + single: The value is 1. This parameter can be updated when the value of `type` is mongos or shard.
        :param str spec_code: Specifies the resource specification code. In a cluster instance, multiple
               specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
               enhanced (c3), or enhanced II (c6). For example:
               + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
               + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications. This parameter
               can be updated when the value of `type` is mongos, shard, replica or single.
        :param str type: Specifies the node type. Valid value:
               + For a Community Edition cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For an Enhanced Edition cluster instance, the value is **shard**.
               + For a Community Edition replica set instance, the value is **replica**.
               + For a Community Edition single node instance, the value is **single**.
        :param int size: Specifies the disk size. The value must be a multiple of 10. The unit is GB. This parameter
               is mandatory for nodes except mongos and invalid for mongos. This parameter can be updated when the value of `type` is
               shard, replica or single.
        :param str storage: Specifies the disk type.
               Valid value: **ULTRAHIGH** which indicates the type SSD.
        """
        pulumi.set(__self__, "num", num)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def num(self) -> int:
        """
        Specifies the node quantity. Valid value:
        + In a Community Edition cluster instance,the number of mongos ranges from 2 to 16.
        + In a Community Edition cluster instance,the number of shards ranges from 2 to 16.
        + In an Enhanced Edition cluster instance, the number of shards ranges from 2 to 12.
        + config: the value is 1.
        + replica: the value is 1.
        + single: The value is 1. This parameter can be updated when the value of `type` is mongos or shard.
        """
        return pulumi.get(self, "num")

    @property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> str:
        """
        Specifies the resource specification code. In a cluster instance, multiple
        specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
        enhanced (c3), or enhanced II (c6). For example:
        + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
        + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications. This parameter
        can be updated when the value of `type` is mongos, shard, replica or single.
        """
        return pulumi.get(self, "spec_code")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the node type. Valid value:
        + For a Community Edition cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For an Enhanced Edition cluster instance, the value is **shard**.
        + For a Community Edition replica set instance, the value is **replica**.
        + For a Community Edition single node instance, the value is **single**.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Specifies the disk size. The value must be a multiple of 10. The unit is GB. This parameter
        is mandatory for nodes except mongos and invalid for mongos. This parameter can be updated when the value of `type` is
        shard, replica or single.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def storage(self) -> Optional[str]:
        """
        Specifies the disk type.
        Valid value: **ULTRAHIGH** which indicates the type SSD.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class InstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 private_ip: Optional[str] = None,
                 public_ip: Optional[str] = None,
                 role: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str id: Specifies the ID of the template.
               Changing this creates a new instance.
        :param str name: Specifies the DB instance name. The DB instance name of the same type is unique in the
               same tenant.
        :param str private_ip: Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
               instances, and single node instances.
        :param str public_ip: Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
               cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        :param str role: Indicates the node role.
        :param str status: Indicates the node status.
        :param str type: Specifies the node type. Valid value:
               + For a Community Edition cluster instance, the value can be **mongos**, **shard**, or **config**.
               + For an Enhanced Edition cluster instance, the value is **shard**.
               + For a Community Edition replica set instance, the value is **replica**.
               + For a Community Edition single node instance, the value is **single**.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Specifies the ID of the template.
        Changing this creates a new instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies the DB instance name. The DB instance name of the same type is unique in the
        same tenant.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        """
        Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
        instances, and single node instances.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        """
        Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
        cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Indicates the node role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Indicates the node status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specifies the node type. Valid value:
        + For a Community Edition cluster instance, the value can be **mongos**, **shard**, or **config**.
        + For an Enhanced Edition cluster instance, the value is **shard**.
        + For a Community Edition replica set instance, the value is **replica**.
        + For a Community Edition single node instance, the value is **single**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 memory: str,
                 spec_code: str,
                 type: str,
                 vcpus: str):
        """
        :param str memory: Specifies the ram of the dds flavor in GB.
        :param str spec_code: The name of the dds flavor.
        :param str type: Specifies the type of the dds falvor. "mongos", "shard", "config", "replica" and "single"
               are supported.
        :param str vcpus: Specifies the vcpus of the dds flavor.
        """
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "spec_code", spec_code)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter
    def memory(self) -> str:
        """
        Specifies the ram of the dds flavor in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> str:
        """
        The name of the dds flavor.
        """
        return pulumi.get(self, "spec_code")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of the dds falvor. "mongos", "shard", "config", "replica" and "single"
        are supported.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vcpus(self) -> str:
        """
        Specifies the vcpus of the dds flavor.
        """
        return pulumi.get(self, "vcpus")


